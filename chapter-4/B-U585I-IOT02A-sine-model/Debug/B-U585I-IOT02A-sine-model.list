
B-U585I-IOT02A-sine-model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e904  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a68  0800eb40  0800eb40  0000fb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f5a8  0800f5a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f5b0  0800f5b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f5b4  0800f5b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000007ac  20000000  0800f5b8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b3e  200007ac  0800fd64  000117ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000a06  200012ea  0800fd64  000122ea  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000117ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025ca8  00000000  00000000  000117e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004787  00000000  00000000  0003748a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f20  00000000  00000000  0003bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001839  00000000  00000000  0003db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d29b  00000000  00000000  0003f371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d5c5  00000000  00000000  0007c60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bc03  00000000  00000000  000a9bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000be  00000000  00000000  002257d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000097c0  00000000  00000000  00225894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  0022f054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200007ac 	.word	0x200007ac
 8000254:	00000000 	.word	0x00000000
 8000258:	0800eb24 	.word	0x0800eb24

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200007b0 	.word	0x200007b0
 8000274:	0800eb24 	.word	0x0800eb24

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <LL_AHB2_GRP1_EnableClock+0x34>)
 8000ed2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000ed6:	4909      	ldr	r1, [pc, #36]	@ (8000efc <LL_AHB2_GRP1_EnableClock+0x34>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <LL_AHB2_GRP1_EnableClock+0x34>)
 8000ee2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	46020c00 	.word	0x46020c00

08000f00 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <LL_APB1_GRP2_EnableClock+0x34>)
 8000f0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000f0e:	4909      	ldr	r1, [pc, #36]	@ (8000f34 <LL_APB1_GRP2_EnableClock+0x34>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <LL_APB1_GRP2_EnableClock+0x34>)
 8000f1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	46020c00 	.word	0x46020c00

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b0d0      	sub	sp, #320	@ 0x140
 8000f3c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	  char buf[50];
	  int buf_len = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	  // Buffers used to store input and output tensors
	  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model = AI_HANDLE_NULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	663b      	str	r3, [r7, #96]	@ 0x60

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000f48:	4bab      	ldr	r3, [pc, #684]	@ (80011f8 <main+0x2c0>)
 8000f4a:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8000f4e:	461d      	mov	r5, r3
 8000f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f58:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000f5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f64:	4aa4      	ldr	r2, [pc, #656]	@ (80011f8 <main+0x2c0>)
 8000f66:	461c      	mov	r4, r3
 8000f68:	4615      	mov	r5, r2
 8000f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f72:	e884 0003 	stmia.w	r4, {r0, r1}

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
 8000f76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f7e:	4a9f      	ldr	r2, [pc, #636]	@ (80011fc <main+0x2c4>)
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f86:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	809a      	strh	r2, [r3, #4]
 8000f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f92:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f96:	2201      	movs	r2, #1
 8000f98:	80da      	strh	r2, [r3, #6]
 8000f9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	811a      	strh	r2, [r3, #8]
 8000fa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000faa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fae:	f240 5204 	movw	r2, #1284	@ 0x504
 8000fb2:	60da      	str	r2, [r3, #12]
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000fb4:	f009 fe74 	bl	800aca0 <ai_sine_model_data_weights_get>
 8000fb8:	4602      	mov	r2, r0
	  ai_network_params ai_params = {
 8000fba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fbe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fc8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fd4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fd8:	4a89      	ldr	r2, [pc, #548]	@ (8001200 <main+0x2c8>)
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fe0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	839a      	strh	r2, [r3, #28]
 8000fe8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	83da      	strh	r2, [r3, #30]
 8000ff4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ff8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	841a      	strh	r2, [r3, #32]
 8001000:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001004:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001008:	2280      	movs	r2, #128	@ 0x80
 800100a:	625a      	str	r2, [r3, #36]	@ 0x24
 800100c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001010:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001014:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
 800101a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800101e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
	  };

	  // Set pointers wrapper structs to our data buffers
	  ai_input[0].n_batches = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800102c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001030:	65bb      	str	r3, [r7, #88]	@ 0x58
	  ai_output[0].n_batches = 1;
 8001032:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800103a:	2201      	movs	r2, #1
 800103c:	809a      	strh	r2, [r3, #4]
	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800103e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001046:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800104a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f001 fd62 	bl	8002b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f8e6 	bl	8001220 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001054:	f000 f941 	bl	80012da <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 fcdc 	bl	8001a14 <MX_GPIO_Init>
  MX_ADF1_Init();
 800105c:	f000 f94c 	bl	80012f8 <MX_ADF1_Init>
  MX_I2C1_Init();
 8001060:	f000 f9ba 	bl	80013d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001064:	f000 f9f8 	bl	8001458 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8001068:	f000 fa36 	bl	80014d8 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 800106c:	f000 fa48 	bl	8001500 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001070:	f000 fac0 	bl	80015f4 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 8001074:	f000 fb3a 	bl	80016ec <MX_SPI2_Init>
  MX_UART4_Init();
 8001078:	f000 fbcc 	bl	8001814 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800107c:	f000 fc16 	bl	80018ac <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8001080:	f000 fc60 	bl	8001944 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001084:	f000 fc94 	bl	80019b0 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8001088:	f000 f984 	bl	8001394 <MX_CRC_Init>
  MX_TIM16_Init();
 800108c:	f000 fb9c 	bl	80017c8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  	// Start timer/counter
    HAL_TIM_Base_Start(&htim16);
 8001090:	485c      	ldr	r0, [pc, #368]	@ (8001204 <main+0x2cc>)
 8001092:	f008 f8ff 	bl	8009294 <HAL_TIM_Base_Start>

	// Greetings!
	buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001096:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800109a:	495b      	ldr	r1, [pc, #364]	@ (8001208 <main+0x2d0>)
 800109c:	4618      	mov	r0, r3
 800109e:	f00b fcdd 	bl	800ca5c <siprintf>
 80010a2:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80010a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	4856      	ldr	r0, [pc, #344]	@ (800120c <main+0x2d4>)
 80010b4:	f008 fadc 	bl	8009670 <HAL_UART_Transmit>

	// Create instance of neural network
	ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80010b8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f009 fd88 	bl	800abd4 <ai_sine_model_create>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	if (ai_err.type != AI_ERROR_NONE)
 80010ca:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d012      	beq.n	80010f8 <main+0x1c0>
	{
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80010d2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80010d6:	494e      	ldr	r1, [pc, #312]	@ (8001210 <main+0x2d8>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fcbf 	bl	800ca5c <siprintf>
 80010de:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80010e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80010ec:	2364      	movs	r3, #100	@ 0x64
 80010ee:	4847      	ldr	r0, [pc, #284]	@ (800120c <main+0x2d4>)
 80010f0:	f008 fabe 	bl	8009670 <HAL_UART_Transmit>
	  while(1);
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <main+0x1bc>
	}

	// Initialize neural network
	if (!ai_sine_model_init(sine_model, &ai_params))
 80010f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010fa:	463a      	mov	r2, r7
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fd7e 	bl	800ac00 <ai_sine_model_init>
 8001104:	4603      	mov	r3, r0
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d012      	beq.n	8001136 <main+0x1fe>
	{
	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001110:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001114:	493f      	ldr	r1, [pc, #252]	@ (8001214 <main+0x2dc>)
 8001116:	4618      	mov	r0, r3
 8001118:	f00b fca0 	bl	800ca5c <siprintf>
 800111c:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001120:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001124:	b29a      	uxth	r2, r3
 8001126:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	4837      	ldr	r0, [pc, #220]	@ (800120c <main+0x2d4>)
 800112e:	f008 fa9f 	bl	8009670 <HAL_UART_Transmit>
	  while(1);
 8001132:	bf00      	nop
 8001134:	e7fd      	b.n	8001132 <main+0x1fa>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800113c:	e00d      	b.n	800115a <main+0x222>
		{
		  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 800113e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001148:	4413      	add	r3, r2
 800114a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800114e:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001150:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001154:	3301      	adds	r3, #1
 8001156:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800115a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0ed      	beq.n	800113e <main+0x206>
		}

		// Get current timestamp
		timestamp = htim16.Instance->CNT;
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <main+0x2cc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001168:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

		// Perform inference
		nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 800116c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800116e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001172:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001176:	4618      	mov	r0, r3
 8001178:	f009 fd81 	bl	800ac7e <ai_sine_model_run>
 800117c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
		if (nbatch != 1) {
 8001180:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001184:	2b01      	cmp	r3, #1
 8001186:	d010      	beq.n	80011aa <main+0x272>
		  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001188:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800118c:	4922      	ldr	r1, [pc, #136]	@ (8001218 <main+0x2e0>)
 800118e:	4618      	mov	r0, r3
 8001190:	f00b fc64 	bl	800ca5c <siprintf>
 8001194:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001198:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800119c:	b29a      	uxth	r2, r3
 800119e:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80011a2:	2364      	movs	r3, #100	@ 0x64
 80011a4:	4819      	ldr	r0, [pc, #100]	@ (800120c <main+0x2d4>)
 80011a6:	f008 fa63 	bl	8009670 <HAL_UART_Transmit>
		}

		// Read output (predicted y) of neural network
		y_val = ((float *)out_data)[0];
 80011aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		// Print output of neural network along with inference time (microseconds)
		buf_len = sprintf(buf,
 80011b4:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80011b8:	f7ff f9ca 	bl	8000550 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
						  "Output: %f | Duration: %lu\r\n",
						  y_val,
						  htim16.Instance->CNT - timestamp);
 80011c0:	4910      	ldr	r1, [pc, #64]	@ (8001204 <main+0x2cc>)
 80011c2:	6809      	ldr	r1, [r1, #0]
 80011c4:	6a48      	ldr	r0, [r1, #36]	@ 0x24
		buf_len = sprintf(buf,
 80011c6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80011ca:	1a41      	subs	r1, r0, r1
 80011cc:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 80011d0:	9100      	str	r1, [sp, #0]
 80011d2:	4912      	ldr	r1, [pc, #72]	@ (800121c <main+0x2e4>)
 80011d4:	f00b fc42 	bl	800ca5c <siprintf>
 80011d8:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80011dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80011e6:	2364      	movs	r3, #100	@ 0x64
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <main+0x2d4>)
 80011ea:	f008 fa41 	bl	8009670 <HAL_UART_Transmit>

		// Wait before doing it again
		HAL_Delay(500);
 80011ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011f2:	f001 fd55 	bl	8002ca0 <HAL_Delay>
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80011f6:	e79e      	b.n	8001136 <main+0x1fe>
 80011f8:	0800ebec 	.word	0x0800ebec
 80011fc:	40040440 	.word	0x40040440
 8001200:	00040440 	.word	0x00040440
 8001204:	20000a9c 	.word	0x20000a9c
 8001208:	0800eb40 	.word	0x0800eb40
 800120c:	20000b7c 	.word	0x20000b7c
 8001210:	0800eb5c 	.word	0x0800eb5c
 8001214:	0800eb84 	.word	0x0800eb84
 8001218:	0800eba8 	.word	0x0800eba8
 800121c:	0800ebcc 	.word	0x0800ebcc

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09e      	sub	sp, #120	@ 0x78
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	2260      	movs	r2, #96	@ 0x60
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f00b fd0c 	bl	800cc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001244:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001248:	f003 fdd2 	bl	8004df0 <HAL_PWREx_ControlVoltageScaling>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001252:	f000 fd41 	bl	8001cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001256:	2322      	movs	r3, #34	@ 0x22
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001264:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001266:	2310      	movs	r3, #16
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126e:	2302      	movs	r3, #2
 8001270:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800127a:	230a      	movs	r3, #10
 800127c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800128a:	230c      	movs	r3, #12
 800128c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fea6 	bl	8004fe8 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80012a2:	f000 fd19 	bl	8001cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	231f      	movs	r3, #31
 80012a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2303      	movs	r3, #3
 80012ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2104      	movs	r1, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fd6c 	bl	8005da0 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80012ce:	f000 fd03 	bl	8001cd8 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3778      	adds	r7, #120	@ 0x78
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80012de:	f003 fe73 	bl	8004fc8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012e2:	2002      	movs	r0, #2
 80012e4:	f003 fe10 	bl	8004f08 <HAL_PWREx_ConfigSupply>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80012ee:	f000 fcf3 	bl	8001cd8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_ADF1_Init+0x90>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <MX_ADF1_Init+0x94>)
 8001300:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_ADF1_Init+0x90>)
 8001304:	2201      	movs	r2, #1
 8001306:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <MX_ADF1_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_ADF1_Init+0x90>)
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_ADF1_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_ADF1_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_ADF1_Init+0x90>)
 8001324:	2204      	movs	r2, #4
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <MX_ADF1_Init+0x90>)
 800132a:	2201      	movs	r2, #1
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800132e:	4816      	ldr	r0, [pc, #88]	@ (8001388 <MX_ADF1_Init+0x90>)
 8001330:	f002 fb02 	bl	8003938 <HAL_MDF_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 fccd 	bl	8001cd8 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_ADF1_Init+0x98>)
 800134c:	2240      	movs	r2, #64	@ 0x40
 800134e:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001352:	2202      	movs	r2, #2
 8001354:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_ADF1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_ADF1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <MX_ADF1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <MX_ADF1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200007c8 	.word	0x200007c8
 800138c:	46024080 	.word	0x46024080
 8001390:	2000080c 	.word	0x2000080c

08001394 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <MX_CRC_Init+0x3c>)
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <MX_CRC_Init+0x40>)
 800139c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_CRC_Init+0x3c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <MX_CRC_Init+0x3c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_CRC_Init+0x3c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <MX_CRC_Init+0x3c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_CRC_Init+0x3c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_CRC_Init+0x3c>)
 80013be:	f001 fdfb 	bl	8002fb8 <HAL_CRC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013c8:	f000 fc86 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000888 	.word	0x20000888
 80013d4:	40023000 	.word	0x40023000

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_I2C1_Init+0x74>)
 80013e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001454 <MX_I2C1_Init+0x7c>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_I2C1_Init+0x74>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001412:	480e      	ldr	r0, [pc, #56]	@ (800144c <MX_I2C1_Init+0x74>)
 8001414:	f002 f92e 	bl	8003674 <HAL_I2C_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800141e:	f000 fc5b 	bl	8001cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <MX_I2C1_Init+0x74>)
 8001426:	f002 f9c0 	bl	80037aa <HAL_I2CEx_ConfigAnalogFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001430:	f000 fc52 	bl	8001cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_I2C1_Init+0x74>)
 8001438:	f002 fa02 	bl	8003840 <HAL_I2CEx_ConfigDigitalFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 fc49 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200008ac 	.word	0x200008ac
 8001450:	40005400 	.word	0x40005400
 8001454:	30909dec 	.word	0x30909dec

08001458 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_I2C2_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <MX_I2C2_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <MX_I2C2_Init+0x7c>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_I2C2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_I2C2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_I2C2_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001494:	f002 f8ee 	bl	8003674 <HAL_I2C_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800149e:	f000 fc1b 	bl	8001cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a2:	2100      	movs	r1, #0
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <MX_I2C2_Init+0x74>)
 80014a6:	f002 f980 	bl	80037aa <HAL_I2CEx_ConfigAnalogFilter>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 fc12 	bl	8001cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_I2C2_Init+0x74>)
 80014b8:	f002 f9c2 	bl	8003840 <HAL_I2CEx_ConfigDigitalFilter>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 fc09 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000900 	.word	0x20000900
 80014d0:	40005800 	.word	0x40005800
 80014d4:	30909dec 	.word	0x30909dec

080014d8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80014dc:	2000      	movs	r0, #0
 80014de:	f002 f9fb 	bl	80038d8 <HAL_ICACHE_ConfigAssociativityMode>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80014e8:	f000 fbf6 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80014ec:	f002 fa14 	bl	8003918 <HAL_ICACHE_Enable>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80014f6:	f000 fbef 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001520:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001522:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <MX_OCTOSPI1_Init+0xec>)
 8001524:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001526:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001528:	2201      	movs	r2, #1
 800152a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001534:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001538:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 800153c:	2217      	movs	r2, #23
 800153e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001542:	2201      	movs	r2, #1
 8001544:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 800155a:	2202      	movs	r2, #2
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 800156e:	220a      	movs	r2, #10
 8001570:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 800157a:	2200      	movs	r2, #0
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 100;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001580:	2264      	movs	r2, #100	@ 0x64
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001584:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 8001586:	f002 fb83 	bl	8003c90 <HAL_OSPI_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8001590:	f000 fba2 	bl	8001cd8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001594:	2301      	movs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80015a0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80015a4:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <MX_OCTOSPI1_Init+0xf0>)
 80015a8:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 80015b6:	f002 fcab 	bl	8003f10 <HAL_OSPIM_Config>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 80015c0:	f000 fb8a 	bl	8001cd8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_OCTOSPI1_Init+0xe8>)
 80015d2:	f003 fa89 	bl	8004ae8 <HAL_OSPI_DLYB_SetConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 80015dc:	f000 fb7c 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000954 	.word	0x20000954
 80015ec:	420d1400 	.word	0x420d1400
 80015f0:	01000001 	.word	0x01000001

080015f4 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001614:	4b31      	ldr	r3, [pc, #196]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001616:	4a32      	ldr	r2, [pc, #200]	@ (80016e0 <MX_OCTOSPI2_Init+0xec>)
 8001618:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 800161a:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 800161c:	2204      	movs	r2, #4
 800161e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001626:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001628:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800162c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001630:	221a      	movs	r2, #26
 8001632:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001636:	2202      	movs	r2, #2
 8001638:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 800164e:	2204      	movs	r2, #4
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 800165a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800165e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001668:	2200      	movs	r2, #0
 800166a:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 800166e:	2200      	movs	r2, #0
 8001670:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001678:	4818      	ldr	r0, [pc, #96]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 800167a:	f002 fb09 	bl	8003c90 <HAL_OSPI_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8001684:	f000 fb28 	bl	8001cd8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001688:	2302      	movs	r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 800168c:	2302      	movs	r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8001690:	2302      	movs	r3, #2
 8001692:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <MX_OCTOSPI2_Init+0xf0>)
 8001696:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_OCTOSPI2_Init+0xf4>)
 800169a:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 80016a8:	f002 fc32 	bl	8003f10 <HAL_OSPIM_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 80016b2:	f000 fb11 	bl	8001cd8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	@ (80016dc <MX_OCTOSPI2_Init+0xe8>)
 80016c4:	f003 fa10 	bl	8004ae8 <HAL_OSPI_DLYB_SetConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 80016ce:	f000 fb03 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200009b0 	.word	0x200009b0
 80016e0:	420d2400 	.word	0x420d2400
 80016e4:	00010002 	.word	0x00010002
 80016e8:	01000002 	.word	0x01000002

080016ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 80016fe:	4a31      	ldr	r2, [pc, #196]	@ (80017c4 <MX_SPI2_Init+0xd8>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001704:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001708:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001712:	2203      	movs	r2, #3
 8001714:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001722:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001724:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001728:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001744:	2207      	movs	r2, #7
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800174a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800174e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001752:	2200      	movs	r2, #0
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800175e:	2200      	movs	r2, #0
 8001760:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001764:	2200      	movs	r2, #0
 8001766:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800176a:	2200      	movs	r2, #0
 800176c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001770:	2200      	movs	r2, #0
 8001772:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001776:	2200      	movs	r2, #0
 8001778:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 800177c:	2200      	movs	r2, #0
 800177e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001782:	2200      	movs	r2, #0
 8001784:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001786:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 8001788:	f007 fbba 	bl	8008f00 <HAL_SPI_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8001792:	f000 faa1 	bl	8001cd8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800179a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_SPI2_Init+0xd4>)
 80017aa:	f007 fcda 	bl	8009162 <HAL_SPIEx_SetConfigAutonomousMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80017b4:	f000 fa90 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000a0c 	.word	0x20000a0c
 80017c4:	40003800 	.word	0x40003800

080017c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_TIM16_Init+0x44>)
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <MX_TIM16_Init+0x48>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_TIM16_Init+0x44>)
 80017d4:	224f      	movs	r2, #79	@ 0x4f
 80017d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_TIM16_Init+0x44>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <MX_TIM16_Init+0x44>)
 80017e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_TIM16_Init+0x44>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <MX_TIM16_Init+0x44>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_TIM16_Init+0x44>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <MX_TIM16_Init+0x44>)
 80017fa:	f007 fcf3 	bl	80091e4 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001804:	f000 fa68 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000a9c 	.word	0x20000a9c
 8001810:	40014400 	.word	0x40014400

08001814 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001818:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <MX_UART4_Init+0x90>)
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <MX_UART4_Init+0x94>)
 800181c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <MX_UART4_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_UART4_Init+0x90>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <MX_UART4_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800185c:	4811      	ldr	r0, [pc, #68]	@ (80018a4 <MX_UART4_Init+0x90>)
 800185e:	f007 feb7 	bl	80095d0 <HAL_UART_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001868:	f000 fa36 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186c:	2100      	movs	r1, #0
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001870:	f008 fb96 	bl	8009fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800187a:	f000 fa2d 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001882:	f008 fbcb 	bl	800a01c <HAL_UARTEx_SetRxFifoThreshold>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800188c:	f000 fa24 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <MX_UART4_Init+0x90>)
 8001892:	f008 fb4c 	bl	8009f2e <HAL_UARTEx_DisableFifoMode>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800189c:	f000 fa1c 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000ae8 	.word	0x20000ae8
 80018a8:	40004c00 	.word	0x40004c00

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <MX_USART1_UART_Init+0x94>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f4:	4811      	ldr	r0, [pc, #68]	@ (800193c <MX_USART1_UART_Init+0x90>)
 80018f6:	f007 fe6b 	bl	80095d0 <HAL_UART_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 f9ea 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001904:	2100      	movs	r1, #0
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <MX_USART1_UART_Init+0x90>)
 8001908:	f008 fb4a 	bl	8009fa0 <HAL_UARTEx_SetTxFifoThreshold>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001912:	f000 f9e1 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001916:	2100      	movs	r1, #0
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <MX_USART1_UART_Init+0x90>)
 800191a:	f008 fb7f 	bl	800a01c <HAL_UARTEx_SetRxFifoThreshold>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001924:	f000 f9d8 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_USART1_UART_Init+0x90>)
 800192a:	f008 fb00 	bl	8009f2e <HAL_UARTEx_DisableFifoMode>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001934:	f000 f9d0 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000b7c 	.word	0x20000b7c
 8001940:	40013800 	.word	0x40013800

08001944 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800195a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800195e:	f7ff facf 	bl	8000f00 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff fab0 	bl	8000ec8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001968:	2002      	movs	r0, #2
 800196a:	f7ff faad 	bl	8000ec8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800196e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001974:	2303      	movs	r3, #3
 8001976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	463b      	mov	r3, r7
 800197e:	4619      	mov	r1, r3
 8001980:	4809      	ldr	r0, [pc, #36]	@ (80019a8 <MX_UCPD1_Init+0x64>)
 8001982:	f008 fd41 	bl	800a408 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800198a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <MX_UCPD1_Init+0x68>)
 800199a:	f008 fd35 	bl	800a408 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	42020000 	.word	0x42020000
 80019ac:	42020400 	.word	0x42020400

080019b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b6:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80019b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019bc:	2206      	movs	r2, #6
 80019be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c2:	2202      	movs	r2, #2
 80019c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019f8:	f003 f8be 	bl	8004b78 <HAL_PCD_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a02:	f000 f969 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000c10 	.word	0x20000c10
 8001a10:	42040000 	.word	0x42040000

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	@ 0x38
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a2a:	4ba3      	ldr	r3, [pc, #652]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a30:	4aa1      	ldr	r2, [pc, #644]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a3a:	4b9f      	ldr	r3, [pc, #636]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a48:	4b9b      	ldr	r3, [pc, #620]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a4e:	4a9a      	ldr	r2, [pc, #616]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a58:	4b97      	ldr	r3, [pc, #604]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b94      	ldr	r3, [pc, #592]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a6c:	4a92      	ldr	r2, [pc, #584]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a76:	4b90      	ldr	r3, [pc, #576]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a84:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a8a:	4a8b      	ldr	r2, [pc, #556]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a94:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aa8:	4a83      	ldr	r2, [pc, #524]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ab2:	4b81      	ldr	r3, [pc, #516]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad0:	4b79      	ldr	r3, [pc, #484]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae4:	4a74      	ldr	r2, [pc, #464]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aee:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afc:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b02:	4a6d      	ldr	r2, [pc, #436]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b20:	4a65      	ldr	r2, [pc, #404]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001b22:	f043 0320 	orr.w	r3, r3, #32
 8001b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2a:	4b63      	ldr	r3, [pc, #396]	@ (8001cb8 <MX_GPIO_Init+0x2a4>)
 8001b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	485f      	ldr	r0, [pc, #380]	@ (8001cbc <MX_GPIO_Init+0x2a8>)
 8001b3e:	f001 fd81 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	21c2      	movs	r1, #194	@ 0xc2
 8001b46:	485e      	ldr	r0, [pc, #376]	@ (8001cc0 <MX_GPIO_Init+0x2ac>)
 8001b48:	f001 fd7c 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	@ 0x40
 8001b50:	485c      	ldr	r0, [pc, #368]	@ (8001cc4 <MX_GPIO_Init+0x2b0>)
 8001b52:	f001 fd77 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001b5c:	485a      	ldr	r0, [pc, #360]	@ (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001b5e:	f001 fd71 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001b62:	f248 0324 	movw	r3, #32804	@ 0x8024
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4853      	ldr	r0, [pc, #332]	@ (8001cc4 <MX_GPIO_Init+0x2b0>)
 8001b78:	f001 fb8c 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	484c      	ldr	r0, [pc, #304]	@ (8001cc0 <MX_GPIO_Init+0x2ac>)
 8001b90:	f001 fb80 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001b94:	2320      	movs	r3, #32
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4844      	ldr	r0, [pc, #272]	@ (8001cbc <MX_GPIO_Init+0x2a8>)
 8001bac:	f001 fb72 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4841      	ldr	r0, [pc, #260]	@ (8001ccc <MX_GPIO_Init+0x2b8>)
 8001bc6:	f001 fb65 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8001bca:	23c2      	movs	r3, #194	@ 0xc2
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	4837      	ldr	r0, [pc, #220]	@ (8001cc0 <MX_GPIO_Init+0x2ac>)
 8001be2:	f001 fb57 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4831      	ldr	r0, [pc, #196]	@ (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001c04:	f001 fb46 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8001c08:	2340      	movs	r3, #64	@ 0x40
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4829      	ldr	r0, [pc, #164]	@ (8001cc4 <MX_GPIO_Init+0x2b0>)
 8001c20:	f001 fb38 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8001c24:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	4825      	ldr	r0, [pc, #148]	@ (8001cd0 <MX_GPIO_Init+0x2bc>)
 8001c3a:	f001 fb2b 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001c3e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4820      	ldr	r0, [pc, #128]	@ (8001cd4 <MX_GPIO_Init+0x2c0>)
 8001c54:	f001 fb1e 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001c58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001c6e:	f001 fb11 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001c72:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001c8c:	f001 fb02 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001c90:	2302      	movs	r3, #2
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_GPIO_Init+0x2a8>)
 8001cac:	f001 faf2 	bl	8003294 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb0:	bf00      	nop
 8001cb2:	3738      	adds	r7, #56	@ 0x38
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	46020c00 	.word	0x46020c00
 8001cbc:	42020400 	.word	0x42020400
 8001cc0:	42021c00 	.word	0x42021c00
 8001cc4:	42021800 	.word	0x42021800
 8001cc8:	42021400 	.word	0x42021400
 8001ccc:	42020800 	.word	0x42020800
 8001cd0:	42020c00 	.word	0x42020c00
 8001cd4:	42021000 	.word	0x42021000

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <Error_Handler+0x8>

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_MspInit+0x30>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf0:	4a08      	ldr	r2, [pc, #32]	@ (8001d14 <HAL_MspInit+0x30>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_MspInit+0x30>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	46020c00 	.word	0x46020c00

08001d18 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0bc      	sub	sp, #240	@ 0xf0
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	22c8      	movs	r2, #200	@ 0xc8
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00a ff87 	bl	800cc4c <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a27      	ldr	r2, [pc, #156]	@ (8001de0 <HAL_MDF_MspInit+0xc8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d146      	bne.n	8001dd6 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001d48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 fbee 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 8001d6a:	f7ff ffb5 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_MDF_MspInit+0xcc>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d74:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_MDF_MspInit+0xcc>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_MDF_MspInit+0xcc>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_MDF_MspInit+0xcc>)
 8001d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d92:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <HAL_MDF_MspInit+0xcc>)
 8001d94:	f043 0310 	orr.w	r3, r3, #16
 8001d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_MDF_MspInit+0xcc>)
 8001d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8001daa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <HAL_MDF_MspInit+0xd0>)
 8001dd2:	f001 fa5f 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	37f0      	adds	r7, #240	@ 0xf0
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	46024080 	.word	0x46024080
 8001de4:	46020c00 	.word	0x46020c00
 8001de8:	42021000 	.word	0x42021000

08001dec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e28 <HAL_CRC_MspInit+0x3c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10e      	bne.n	8001e1c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_CRC_MspInit+0x40>)
 8001e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e04:	4a09      	ldr	r2, [pc, #36]	@ (8001e2c <HAL_CRC_MspInit+0x40>)
 8001e06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e0e:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <HAL_CRC_MspInit+0x40>)
 8001e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40023000 	.word	0x40023000
 8001e2c:	46020c00 	.word	0x46020c00

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0be      	sub	sp, #248	@ 0xf8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	22c8      	movs	r2, #200	@ 0xc8
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00a fefb 	bl	800cc4c <memset>
  if(hi2c->Instance==I2C1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f90 <HAL_I2C_MspInit+0x160>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d147      	bne.n	8001ef0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e60:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fb62 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001e82:	f7ff ff29 	bl	8001cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b43      	ldr	r3, [pc, #268]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e8c:	4a41      	ldr	r2, [pc, #260]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e96:	4b3f      	ldr	r3, [pc, #252]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001ea4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4833      	ldr	r0, [pc, #204]	@ (8001f98 <HAL_I2C_MspInit+0x168>)
 8001ecc:	f001 f9e2 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed0:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001ed8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001edc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eee:	e04a      	b.n	8001f86 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <HAL_I2C_MspInit+0x16c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d145      	bne.n	8001f86 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001efa:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fb15 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001f1c:	f7ff fedc 	bl	8001cd8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f26:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f30:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f3e:	2330      	movs	r3, #48	@ 0x30
 8001f40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f44:	2312      	movs	r3, #18
 8001f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f56:	2304      	movs	r3, #4
 8001f58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f5c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f60:	4619      	mov	r1, r3
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <HAL_I2C_MspInit+0x170>)
 8001f64:	f001 f996 	bl	8003294 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001f70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_I2C_MspInit+0x164>)
 8001f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
}
 8001f86:	bf00      	nop
 8001f88:	37f8      	adds	r7, #248	@ 0xf8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40005400 	.word	0x40005400
 8001f94:	46020c00 	.word	0x46020c00
 8001f98:	42020400 	.word	0x42020400
 8001f9c:	40005800 	.word	0x40005800
 8001fa0:	42021c00 	.word	0x42021c00

08001fa4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0c8      	sub	sp, #288	@ 0x120
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fb2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fc8:	22c8      	movs	r2, #200	@ 0xc8
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00a fe3d 	bl	800cc4c <memset>
  if(hospi->Instance==OCTOSPI1)
 8001fd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4aa6      	ldr	r2, [pc, #664]	@ (8002278 <HAL_OSPI_MspInit+0x2d4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	f040 815d 	bne.w	80022a0 <HAL_OSPI_MspInit+0x2fc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001fe6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fa9f 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002008:	f7ff fe66 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800200c:	4b9b      	ldr	r3, [pc, #620]	@ (800227c <HAL_OSPI_MspInit+0x2d8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	4a9a      	ldr	r2, [pc, #616]	@ (800227c <HAL_OSPI_MspInit+0x2d8>)
 8002014:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8002016:	4b99      	ldr	r3, [pc, #612]	@ (800227c <HAL_OSPI_MspInit+0x2d8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d10e      	bne.n	800203c <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800201e:	4b98      	ldr	r3, [pc, #608]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002024:	4a96      	ldr	r2, [pc, #600]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800202a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800202e:	4b94      	ldr	r3, [pc, #592]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800203a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800203c:	4b90      	ldr	r3, [pc, #576]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002042:	4a8f      	ldr	r2, [pc, #572]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204c:	4b8c      	ldr	r3, [pc, #560]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800205a:	4b89      	ldr	r3, [pc, #548]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800205c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002060:	4a87      	ldr	r2, [pc, #540]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002066:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800206a:	4b85      	ldr	r3, [pc, #532]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800206c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
 8002076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002078:	4b81      	ldr	r3, [pc, #516]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800207a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800207e:	4a80      	ldr	r2, [pc, #512]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002088:	4b7d      	ldr	r3, [pc, #500]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800208a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
 8002094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002096:	4b7a      	ldr	r3, [pc, #488]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209c:	4a78      	ldr	r2, [pc, #480]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a6:	4b76      	ldr	r3, [pc, #472]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b4:	4b72      	ldr	r3, [pc, #456]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ba:	4a71      	ldr	r2, [pc, #452]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	4a69      	ldr	r2, [pc, #420]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020e2:	4b67      	ldr	r3, [pc, #412]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f6:	4a62      	ldr	r2, [pc, #392]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002100:	4b5f      	ldr	r3, [pc, #380]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002106:	f003 0204 	and.w	r2, r3, #4
 800210a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800210e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002118:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800211c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002124:	4a56      	ldr	r2, [pc, #344]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800212e:	4b54      	ldr	r3, [pc, #336]	@ (8002280 <HAL_OSPI_MspInit+0x2dc>)
 8002130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002134:	f003 0202 	and.w	r2, r3, #2
 8002138:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800213c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800214a:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 800214c:	2301      	movs	r3, #1
 800214e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002164:	2303      	movs	r3, #3
 8002166:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 800216a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800216e:	4619      	mov	r1, r3
 8002170:	4844      	ldr	r0, [pc, #272]	@ (8002284 <HAL_OSPI_MspInit+0x2e0>)
 8002172:	f001 f88f 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8002176:	2308      	movs	r3, #8
 8002178:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800218e:	2303      	movs	r3, #3
 8002190:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8002194:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002198:	4619      	mov	r1, r3
 800219a:	483b      	ldr	r0, [pc, #236]	@ (8002288 <HAL_OSPI_MspInit+0x2e4>)
 800219c:	f001 f87a 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80021b8:	230a      	movs	r3, #10
 80021ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80021be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80021c2:	4619      	mov	r1, r3
 80021c4:	4831      	ldr	r0, [pc, #196]	@ (800228c <HAL_OSPI_MspInit+0x2e8>)
 80021c6:	f001 f865 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80021ca:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80021ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80021e4:	230a      	movs	r3, #10
 80021e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80021ee:	4619      	mov	r1, r3
 80021f0:	4827      	ldr	r0, [pc, #156]	@ (8002290 <HAL_OSPI_MspInit+0x2ec>)
 80021f2:	f001 f84f 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80021f6:	2304      	movs	r3, #4
 80021f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800220e:	2303      	movs	r3, #3
 8002210:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8002214:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002218:	4619      	mov	r1, r3
 800221a:	481e      	ldr	r0, [pc, #120]	@ (8002294 <HAL_OSPI_MspInit+0x2f0>)
 800221c:	f001 f83a 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 8002220:	2308      	movs	r3, #8
 8002222:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002238:	230a      	movs	r3, #10
 800223a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 800223e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002242:	4619      	mov	r1, r3
 8002244:	4814      	ldr	r0, [pc, #80]	@ (8002298 <HAL_OSPI_MspInit+0x2f4>)
 8002246:	f001 f825 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 800224a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800224e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002264:	230a      	movs	r3, #10
 8002266:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800226e:	4619      	mov	r1, r3
 8002270:	480a      	ldr	r0, [pc, #40]	@ (800229c <HAL_OSPI_MspInit+0x2f8>)
 8002272:	f001 f80f 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002276:	e0ed      	b.n	8002454 <HAL_OSPI_MspInit+0x4b0>
 8002278:	420d1400 	.word	0x420d1400
 800227c:	200010f4 	.word	0x200010f4
 8002280:	46020c00 	.word	0x46020c00
 8002284:	42022000 	.word	0x42022000
 8002288:	42021000 	.word	0x42021000
 800228c:	42020c00 	.word	0x42020c00
 8002290:	42021400 	.word	0x42021400
 8002294:	42021c00 	.word	0x42021c00
 8002298:	42020800 	.word	0x42020800
 800229c:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 80022a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6c      	ldr	r2, [pc, #432]	@ (8002460 <HAL_OSPI_MspInit+0x4bc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 80d0 	bne.w	8002454 <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80022b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 f938 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 80022d6:	f7ff fcff 	bl	8001cd8 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80022da:	4b62      	ldr	r3, [pc, #392]	@ (8002464 <HAL_OSPI_MspInit+0x4c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a60      	ldr	r2, [pc, #384]	@ (8002464 <HAL_OSPI_MspInit+0x4c0>)
 80022e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80022e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002464 <HAL_OSPI_MspInit+0x4c0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d116      	bne.n	800231a <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80022ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 80022ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 80022f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 80022fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002302:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002306:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800230a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002318:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800231a:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	4a51      	ldr	r2, [pc, #324]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800232a:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002330:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002334:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002338:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002342:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002346:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002348:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 800234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234e:	4a46      	ldr	r2, [pc, #280]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002354:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002358:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 800235a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800235e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002362:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002366:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002370:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002374:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002376:	4b3c      	ldr	r3, [pc, #240]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 8002378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800237c:	4a3a      	ldr	r2, [pc, #232]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 800237e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002382:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002386:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 8002388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238c:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002390:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002394:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800239e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023a2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023a4:	4b30      	ldr	r3, [pc, #192]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 80023a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 80023ac:	f043 0320 	orr.w	r3, r3, #32
 80023b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <HAL_OSPI_MspInit+0x4c4>)
 80023b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ba:	f003 0220 	and.w	r2, r3, #32
 80023be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023d0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80023ea:	2305      	movs	r3, #5
 80023ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023f4:	4619      	mov	r1, r3
 80023f6:	481d      	ldr	r0, [pc, #116]	@ (800246c <HAL_OSPI_MspInit+0x4c8>)
 80023f8:	f000 ff4c 	bl	8003294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80023fc:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002400:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002416:	2305      	movs	r3, #5
 8002418:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800241c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002420:	4619      	mov	r1, r3
 8002422:	4813      	ldr	r0, [pc, #76]	@ (8002470 <HAL_OSPI_MspInit+0x4cc>)
 8002424:	f000 ff36 	bl	8003294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8002428:	f241 031f 	movw	r3, #4127	@ 0x101f
 800242c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002442:	2305      	movs	r3, #5
 8002444:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002448:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800244c:	4619      	mov	r1, r3
 800244e:	4809      	ldr	r0, [pc, #36]	@ (8002474 <HAL_OSPI_MspInit+0x4d0>)
 8002450:	f000 ff20 	bl	8003294 <HAL_GPIO_Init>
}
 8002454:	bf00      	nop
 8002456:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	420d2400 	.word	0x420d2400
 8002464:	200010f4 	.word	0x200010f4
 8002468:	46020c00 	.word	0x46020c00
 800246c:	42022000 	.word	0x42022000
 8002470:	42021c00 	.word	0x42021c00
 8002474:	42021400 	.word	0x42021400

08002478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0be      	sub	sp, #248	@ 0xf8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	22c8      	movs	r2, #200	@ 0xc8
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f00a fbd7 	bl	800cc4c <memset>
  if(hspi->Instance==SPI2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a39      	ldr	r2, [pc, #228]	@ (8002588 <HAL_SPI_MspInit+0x110>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d16b      	bne.n	8002580 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80024a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80024b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 f83d 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80024cc:	f7ff fc04 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024d0:	4b2e      	ldr	r3, [pc, #184]	@ (800258c <HAL_SPI_MspInit+0x114>)
 80024d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024d6:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_SPI_MspInit+0x114>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80024e0:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <HAL_SPI_MspInit+0x114>)
 80024e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_SPI_MspInit+0x114>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_SPI_MspInit+0x114>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_SPI_MspInit+0x114>)
 8002500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_SPI_MspInit+0x114>)
 800250e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002512:	4a1e      	ldr	r2, [pc, #120]	@ (800258c <HAL_SPI_MspInit+0x114>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_SPI_MspInit+0x114>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 800252a:	231a      	movs	r3, #26
 800252c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002542:	2305      	movs	r3, #5
 8002544:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002548:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800254c:	4619      	mov	r1, r3
 800254e:	4810      	ldr	r0, [pc, #64]	@ (8002590 <HAL_SPI_MspInit+0x118>)
 8002550:	f000 fea0 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8002554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002558:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800256e:	2305      	movs	r3, #5
 8002570:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002578:	4619      	mov	r1, r3
 800257a:	4806      	ldr	r0, [pc, #24]	@ (8002594 <HAL_SPI_MspInit+0x11c>)
 800257c:	f000 fe8a 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002580:	bf00      	nop
 8002582:	37f8      	adds	r7, #248	@ 0xf8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40003800 	.word	0x40003800
 800258c:	46020c00 	.word	0x46020c00
 8002590:	42020c00 	.word	0x42020c00
 8002594:	42020400 	.word	0x42020400

08002598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_TIM_Base_MspInit+0x3c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_TIM_Base_MspInit+0x40>)
 80025ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025b0:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <HAL_TIM_Base_MspInit+0x40>)
 80025b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <HAL_TIM_Base_MspInit+0x40>)
 80025bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40014400 	.word	0x40014400
 80025d8:	46020c00 	.word	0x46020c00

080025dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0be      	sub	sp, #248	@ 0xf8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f4:	f107 0318 	add.w	r3, r7, #24
 80025f8:	22c8      	movs	r2, #200	@ 0xc8
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00a fb25 	bl	800cc4c <memset>
  if(huart->Instance==UART4)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4c      	ldr	r2, [pc, #304]	@ (8002738 <HAL_UART_MspInit+0x15c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d146      	bne.n	800269a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800260c:	f04f 0208 	mov.w	r2, #8
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002618:	2300      	movs	r3, #0
 800261a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800261c:	f107 0318 	add.w	r3, r7, #24
 8002620:	4618      	mov	r0, r3
 8002622:	f003 ff8d 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800262c:	f7ff fb54 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002630:	4b42      	ldr	r3, [pc, #264]	@ (800273c <HAL_UART_MspInit+0x160>)
 8002632:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002636:	4a41      	ldr	r2, [pc, #260]	@ (800273c <HAL_UART_MspInit+0x160>)
 8002638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800263c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002640:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <HAL_UART_MspInit+0x160>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002646:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_UART_MspInit+0x160>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	4a39      	ldr	r2, [pc, #228]	@ (800273c <HAL_UART_MspInit+0x160>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <HAL_UART_MspInit+0x160>)
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 800266c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002670:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002686:	2308      	movs	r3, #8
 8002688:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002690:	4619      	mov	r1, r3
 8002692:	482b      	ldr	r0, [pc, #172]	@ (8002740 <HAL_UART_MspInit+0x164>)
 8002694:	f000 fdfe 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002698:	e04a      	b.n	8002730 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a29      	ldr	r2, [pc, #164]	@ (8002744 <HAL_UART_MspInit+0x168>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d145      	bne.n	8002730 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026a4:	f04f 0201 	mov.w	r2, #1
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026b0:	2300      	movs	r3, #0
 80026b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 ff41 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80026c4:	f7ff fb08 	bl	8001cd8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c8:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_UART_MspInit+0x160>)
 80026ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026ce:	4a1b      	ldr	r2, [pc, #108]	@ (800273c <HAL_UART_MspInit+0x160>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80026d8:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_UART_MspInit+0x160>)
 80026da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_UART_MspInit+0x160>)
 80026e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ec:	4a13      	ldr	r2, [pc, #76]	@ (800273c <HAL_UART_MspInit+0x160>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_UART_MspInit+0x160>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002704:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002708:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800271e:	2307      	movs	r3, #7
 8002720:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002728:	4619      	mov	r1, r3
 800272a:	4807      	ldr	r0, [pc, #28]	@ (8002748 <HAL_UART_MspInit+0x16c>)
 800272c:	f000 fdb2 	bl	8003294 <HAL_GPIO_Init>
}
 8002730:	bf00      	nop
 8002732:	37f8      	adds	r7, #248	@ 0xf8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40004c00 	.word	0x40004c00
 800273c:	46020c00 	.word	0x46020c00
 8002740:	42020800 	.word	0x42020800
 8002744:	40013800 	.word	0x40013800
 8002748:	42020000 	.word	0x42020000

0800274c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0be      	sub	sp, #248	@ 0xf8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	22c8      	movs	r2, #200	@ 0xc8
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f00a fa6d 	bl	800cc4c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a38      	ldr	r2, [pc, #224]	@ (8002858 <HAL_PCD_MspInit+0x10c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d169      	bne.n	8002850 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800277c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278e:	f107 0318 	add.w	r3, r7, #24
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fed4 	bl	8006540 <HAL_RCCEx_PeriphCLKConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800279e:	f7ff fa9b 	bl	8001cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b2e      	ldr	r3, [pc, #184]	@ (800285c <HAL_PCD_MspInit+0x110>)
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <HAL_PCD_MspInit+0x110>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_PCD_MspInit+0x110>)
 80027b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 80027c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80027da:	230a      	movs	r3, #10
 80027dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80027e4:	4619      	mov	r1, r3
 80027e6:	481e      	ldr	r0, [pc, #120]	@ (8002860 <HAL_PCD_MspInit+0x114>)
 80027e8:	f000 fd54 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_PCD_MspInit+0x110>)
 80027ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027f2:	4a1a      	ldr	r2, [pc, #104]	@ (800285c <HAL_PCD_MspInit+0x110>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027fc:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_PCD_MspInit+0x110>)
 80027fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_PCD_MspInit+0x110>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d119      	bne.n	800284c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002818:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_PCD_MspInit+0x110>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281e:	4a0f      	ldr	r2, [pc, #60]	@ (800285c <HAL_PCD_MspInit+0x110>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <HAL_PCD_MspInit+0x110>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002836:	f002 fbb7 	bl	8004fa8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_PCD_MspInit+0x110>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002840:	4a06      	ldr	r2, [pc, #24]	@ (800285c <HAL_PCD_MspInit+0x110>)
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800284a:	e001      	b.n	8002850 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 800284c:	f002 fbac 	bl	8004fa8 <HAL_PWREx_EnableVddUSB>
}
 8002850:	bf00      	nop
 8002852:	37f8      	adds	r7, #248	@ 0xf8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	42040000 	.word	0x42040000
 800285c:	46020c00 	.word	0x46020c00
 8002860:	42020000 	.word	0x42020000

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <NMI_Handler+0x4>

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <MemManage_Handler+0x4>

0800287c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <UsageFault_Handler+0x4>

0800288c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ba:	f000 f9d1 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  return 1;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_kill>:

int _kill(int pid, int sig)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028dc:	f00a fa18 	bl	800cd10 <__errno>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2216      	movs	r2, #22
 80028e4:	601a      	str	r2, [r3, #0]
  return -1;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_exit>:

void _exit (int status)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028fa:	f04f 31ff 	mov.w	r1, #4294967295
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffe7 	bl	80028d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <_exit+0x12>

08002908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
  }

  return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf1      	blt.n	8002954 <_write+0x12>
  }
  return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
  return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f00a f97c 	bl	800cd10 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200c0000 	.word	0x200c0000
 8002a44:	00000800 	.word	0x00000800
 8002a48:	200010f8 	.word	0x200010f8
 8002a4c:	200012f0 	.word	0x200012f0

08002a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a54:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <SystemInit+0x68>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	4a17      	ldr	r2, [pc, #92]	@ (8002ab8 <SystemInit+0x68>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a64:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <SystemInit+0x6c>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a6a:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <SystemInit+0x6c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <SystemInit+0x6c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <SystemInit+0x6c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <SystemInit+0x6c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0e      	ldr	r2, [pc, #56]	@ (8002abc <SystemInit+0x6c>)
 8002a82:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a86:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a8a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <SystemInit+0x6c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <SystemInit+0x6c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a09      	ldr	r2, [pc, #36]	@ (8002abc <SystemInit+0x6c>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <SystemInit+0x6c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <SystemInit+0x68>)
 8002aa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002aaa:	609a      	str	r2, [r3, #8]
  #endif
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00
 8002abc:	46020c00 	.word	0x46020c00

08002ac0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ac4:	f7ff ffc4 	bl	8002a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ac8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002aca:	e003      	b.n	8002ad4 <LoopCopyDataInit>

08002acc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ace:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ad0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ad2:	3104      	adds	r1, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ad4:	480a      	ldr	r0, [pc, #40]	@ (8002b00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ad8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ada:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002adc:	d3f6      	bcc.n	8002acc <CopyDataInit>
	ldr	r2, =_sbss
 8002ade:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ae0:	e002      	b.n	8002ae8 <LoopFillZerobss>

08002ae2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ae2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ae4:	f842 3b04 	str.w	r3, [r2], #4

08002ae8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <LoopForever+0x16>)
	cmp	r2, r3
 8002aea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002aec:	d3f9      	bcc.n	8002ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aee:	f00a f915 	bl	800cd1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002af2:	f7fe fa21 	bl	8000f38 <main>

08002af6 <LoopForever>:

LoopForever:
    b LoopForever
 8002af6:	e7fe      	b.n	8002af6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002af8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002afc:	0800f5b8 	.word	0x0800f5b8
	ldr	r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b04:	200007ac 	.word	0x200007ac
	ldr	r2, =_sbss
 8002b08:	200007ac 	.word	0x200007ac
	ldr	r3, = _ebss
 8002b0c:	200012ea 	.word	0x200012ea

08002b10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b10:	e7fe      	b.n	8002b10 <ADC1_IRQHandler>
	...

08002b14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_Init+0x50>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <HAL_Init+0x50>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b24:	2003      	movs	r0, #3
 8002b26:	f000 f96e 	bl	8002e06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b2a:	f003 fb2b 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <HAL_Init+0x54>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <HAL_Init+0x58>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <HAL_Init+0x5c>)
 8002b42:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b44:	2004      	movs	r0, #4
 8002b46:	f000 f9a5 	bl	8002e94 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b4a:	200f      	movs	r0, #15
 8002b4c:	f000 f812 	bl	8002b74 <HAL_InitTick>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e002      	b.n	8002b60 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5a:	f7ff f8c3 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40022000 	.word	0x40022000
 8002b68:	46020c00 	.word	0x46020c00
 8002b6c:	0800ec08 	.word	0x0800ec08
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_InitTick+0xdc>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e05c      	b.n	8002c46 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b8c:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_InitTick+0xe0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d10c      	bne.n	8002bb2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b98:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <HAL_InitTick+0xe4>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <HAL_InitTick+0xdc>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e037      	b.n	8002c22 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002bb2:	f000 f9c7 	bl	8002f44 <HAL_SYSTICK_GetCLKSourceConfig>
 8002bb6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d023      	beq.n	8002c06 <HAL_InitTick+0x92>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d82d      	bhi.n	8002c20 <HAL_InitTick+0xac>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_InitTick+0x5e>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d00d      	beq.n	8002bec <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bd0:	e026      	b.n	8002c20 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bd2:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <HAL_InitTick+0xe4>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <HAL_InitTick+0xdc>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002be0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	60fb      	str	r3, [r7, #12]
        break;
 8002bea:	e01a      	b.n	8002c22 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bec:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_InitTick+0xdc>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bfa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
        break;
 8002c04:	e00d      	b.n	8002c22 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c06:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_InitTick+0xdc>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	60fb      	str	r3, [r7, #12]
        break;
 8002c1e:	e000      	b.n	8002c22 <HAL_InitTick+0xae>
        break;
 8002c20:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f914 	bl	8002e50 <HAL_SYSTICK_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e009      	b.n	8002c46 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c32:	2200      	movs	r2, #0
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3a:	f000 f8ef 	bl	8002e1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c3e:	4a07      	ldr	r2, [pc, #28]	@ (8002c5c <HAL_InitTick+0xe8>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008
 8002c54:	e000e010 	.word	0xe000e010
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_IncTick+0x20>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_IncTick+0x24>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <HAL_IncTick+0x24>)
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000008 	.word	0x20000008
 8002c84:	200010fc 	.word	0x200010fc

08002c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <HAL_GetTick+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200010fc 	.word	0x200010fc

08002ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff ffee 	bl	8002c88 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d005      	beq.n	8002cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <HAL_Delay+0x44>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc6:	bf00      	nop
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8f7      	bhi.n	8002cc8 <HAL_Delay+0x28>
  {
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000008 	.word	0x20000008

08002ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d04:	4013      	ands	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1a:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	60d3      	str	r3, [r2, #12]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d34:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <__NVIC_GetPriorityGrouping+0x18>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 0307 	and.w	r3, r3, #7
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	@ (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ff6a 	bl	8002ce8 <__NVIC_SetPriorityGrouping>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2a:	f7ff ff81 	bl	8002d30 <__NVIC_GetPriorityGrouping>
 8002e2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6978      	ldr	r0, [r7, #20]
 8002e36:	f7ff ffb3 	bl	8002da0 <NVIC_EncodePriority>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff82 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00d      	b.n	8002e82 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <HAL_SYSTICK_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <HAL_SYSTICK_Config+0x40>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_SYSTICK_Config+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a05      	ldr	r2, [pc, #20]	@ (8002e90 <HAL_SYSTICK_Config+0x40>)
 8002e7a:	f043 0303 	orr.w	r3, r3, #3
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d844      	bhi.n	8002f2c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002ecb 	.word	0x08002ecb
 8002eac:	08002ee9 	.word	0x08002ee9
 8002eb0:	08002f0b 	.word	0x08002f0b
 8002eb4:	08002f2d 	.word	0x08002f2d
 8002eb8:	08002ebd 	.word	0x08002ebd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6013      	str	r3, [r2, #0]
      break;
 8002ec8:	e031      	b.n	8002f2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002eca:	4b1c      	ldr	r3, [pc, #112]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1b      	ldr	r2, [pc, #108]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	4a18      	ldr	r2, [pc, #96]	@ (8002f40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ede:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002ee6:	e022      	b.n	8002f2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a13      	ldr	r2, [pc, #76]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002ef4:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f08:	e011      	b.n	8002f2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f1c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f20:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002f2a:	e000      	b.n	8002f2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002f2c:	bf00      	nop
  }
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010
 8002f40:	46020c00 	.word	0x46020c00

08002f44 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002f56:	2304      	movs	r3, #4
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	e021      	b.n	8002fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002f5c:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f62:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002f66:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f6e:	d011      	beq.n	8002f94 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f76:	d810      	bhi.n	8002f9a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f84:	d003      	beq.n	8002f8e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002f86:	e008      	b.n	8002f9a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
        break;
 8002f8c:	e008      	b.n	8002fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
        break;
 8002f92:	e005      	b.n	8002fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002f94:	2302      	movs	r3, #2
 8002f96:	607b      	str	r3, [r7, #4]
        break;
 8002f98:	e002      	b.n	8002fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
        break;
 8002f9e:	bf00      	nop
    }
  }
  return systick_source;
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010
 8002fb4:	46020c00 	.word	0x46020c00

08002fb8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e054      	b.n	8003074 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7f5b      	ldrb	r3, [r3, #29]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe ff06 	bl	8001dec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	791b      	ldrb	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a22      	ldr	r2, [pc, #136]	@ (800307c <HAL_CRC_Init+0xc4>)
 8002ff4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0218 	bic.w	r2, r2, #24
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	e00c      	b.n	8003022 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	461a      	mov	r2, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f834 	bl	8003080 <HAL_CRCEx_Polynomial_Set>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e028      	b.n	8003074 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	795b      	ldrb	r3, [r3, #5]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	611a      	str	r2, [r3, #16]
 8003034:	e004      	b.n	8003040 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6912      	ldr	r2, [r2, #16]
 800303e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	04c11db7 	.word	0x04c11db7

08003080 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003090:	231f      	movs	r3, #31
 8003092:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
 80030a2:	e063      	b.n	800316c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80030a4:	bf00      	nop
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	613a      	str	r2, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_CRCEx_Polynomial_Set+0x44>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b18      	cmp	r3, #24
 80030c8:	d846      	bhi.n	8003158 <HAL_CRCEx_Polynomial_Set+0xd8>
 80030ca:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	0800315f 	.word	0x0800315f
 80030d4:	08003159 	.word	0x08003159
 80030d8:	08003159 	.word	0x08003159
 80030dc:	08003159 	.word	0x08003159
 80030e0:	08003159 	.word	0x08003159
 80030e4:	08003159 	.word	0x08003159
 80030e8:	08003159 	.word	0x08003159
 80030ec:	08003159 	.word	0x08003159
 80030f0:	0800314d 	.word	0x0800314d
 80030f4:	08003159 	.word	0x08003159
 80030f8:	08003159 	.word	0x08003159
 80030fc:	08003159 	.word	0x08003159
 8003100:	08003159 	.word	0x08003159
 8003104:	08003159 	.word	0x08003159
 8003108:	08003159 	.word	0x08003159
 800310c:	08003159 	.word	0x08003159
 8003110:	08003141 	.word	0x08003141
 8003114:	08003159 	.word	0x08003159
 8003118:	08003159 	.word	0x08003159
 800311c:	08003159 	.word	0x08003159
 8003120:	08003159 	.word	0x08003159
 8003124:	08003159 	.word	0x08003159
 8003128:	08003159 	.word	0x08003159
 800312c:	08003159 	.word	0x08003159
 8003130:	08003135 	.word	0x08003135
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b06      	cmp	r3, #6
 8003138:	d913      	bls.n	8003162 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800313e:	e010      	b.n	8003162 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b07      	cmp	r3, #7
 8003144:	d90f      	bls.n	8003166 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800314a:	e00c      	b.n	8003166 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0f      	cmp	r3, #15
 8003150:	d90b      	bls.n	800316a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003156:	e008      	b.n	800316a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
        break;
 800315c:	e006      	b.n	800316c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800315e:	bf00      	nop
 8003160:	e004      	b.n	800316c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800316a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 0118 	bic.w	r1, r3, #24
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800318e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80031a4:	f7ff fd70 	bl	8002c88 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e06b      	b.n	800328c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e05c      	b.n	800328c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0204 	orr.w	r2, r2, #4
 80031e0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2205      	movs	r2, #5
 80031e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80031ea:	e020      	b.n	800322e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80031ec:	f7ff fd4c 	bl	8002c88 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d919      	bls.n	800322e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321e:	2201      	movs	r2, #1
 8003220:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e02e      	b.n	800328c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0d7      	beq.n	80031ec <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0202 	orr.w	r2, r2, #2
 800324a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2204      	movs	r2, #4
 8003250:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800325c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003276:	2201      	movs	r2, #1
 8003278:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	@ 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032a6:	e1ba      	b.n	800361e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 81aa 	beq.w	8003618 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a55      	ldr	r2, [pc, #340]	@ (800341c <HAL_GPIO_Init+0x188>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d15d      	bne.n	8003388 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80032d2:	2201      	movs	r2, #1
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	4013      	ands	r3, r2
 80032e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0201 	and.w	r2, r3, #1
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80032fc:	4a48      	ldr	r2, [pc, #288]	@ (8003420 <HAL_GPIO_Init+0x18c>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003304:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003306:	4a46      	ldr	r2, [pc, #280]	@ (8003420 <HAL_GPIO_Init+0x18c>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	3208      	adds	r2, #8
 800331a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	4013      	ands	r3, r2
 8003334:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220b      	movs	r2, #11
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	4313      	orrs	r3, r2
 8003348:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3208      	adds	r2, #8
 8003352:	69f9      	ldr	r1, [r7, #28]
 8003354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	4013      	ands	r3, r2
 800336e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2202      	movs	r2, #2
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	4313      	orrs	r3, r2
 800337e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e067      	b.n	8003458 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x104>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b12      	cmp	r3, #18
 8003396:	d145      	bne.n	8003424 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	220f      	movs	r2, #15
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 020f 	and.w	r2, r3, #15
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	69f9      	ldr	r1, [r7, #28]
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e01e      	b.n	8003458 <HAL_GPIO_Init+0x1c4>
 800341a:	bf00      	nop
 800341c:	46020000 	.word	0x46020000
 8003420:	0800ec60 	.word	0x0800ec60
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	4013      	ands	r3, r2
 800343a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d00b      	beq.n	8003478 <HAL_GPIO_Init+0x1e4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d007      	beq.n	8003478 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800346c:	2b11      	cmp	r3, #17
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b12      	cmp	r3, #18
 8003476:	d130      	bne.n	80034da <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	4013      	ands	r3, r2
 800348e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80034ae:	2201      	movs	r2, #1
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0201 	and.w	r2, r3, #1
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d017      	beq.n	8003512 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2203      	movs	r2, #3
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	4313      	orrs	r3, r2
 800350a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d07c      	beq.n	8003618 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800351e:	4a47      	ldr	r2, [pc, #284]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3318      	adds	r3, #24
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	4013      	ands	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0a9a      	lsrs	r2, r3, #10
 8003546:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <HAL_GPIO_Init+0x3ac>)
 8003548:	4013      	ands	r3, r2
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	f002 0203 	and.w	r2, r2, #3
 8003550:	00d2      	lsls	r2, r2, #3
 8003552:	4093      	lsls	r3, r2
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	4313      	orrs	r3, r2
 8003558:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800355a:	4938      	ldr	r1, [pc, #224]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3318      	adds	r3, #24
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003568:	4b34      	ldr	r3, [pc, #208]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	4013      	ands	r3, r2
 8003576:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800358c:	4a2b      	ldr	r2, [pc, #172]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003592:	4b2a      	ldr	r3, [pc, #168]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	4013      	ands	r3, r2
 80035a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80035b6:	4a21      	ldr	r2, [pc, #132]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80035bc:	4b1f      	ldr	r3, [pc, #124]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 80035be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035e2:	4a16      	ldr	r2, [pc, #88]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80035ea:	4b14      	ldr	r3, [pc, #80]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 80035ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003610:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <HAL_GPIO_Init+0x3a8>)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f ae3d 	bne.w	80032a8 <HAL_GPIO_Init+0x14>
  }
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	3724      	adds	r7, #36	@ 0x24
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	46022000 	.word	0x46022000
 8003640:	002f7f7f 	.word	0x002f7f7f

08003644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
 8003650:	4613      	mov	r3, r2
 8003652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003654:	787b      	ldrb	r3, [r7, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003660:	e002      	b.n	8003668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08d      	b.n	80037a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fbc8 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	@ 0x24
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e006      	b.n	80036fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d108      	bne.n	8003716 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	e007      	b.n	8003726 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d138      	bne.n	8003832 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e032      	b.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2224      	movs	r2, #36	@ 0x24
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d139      	bne.n	80038ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003860:	2302      	movs	r3, #2
 8003862:	e033      	b.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	@ 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003892:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e007      	b.n	8003906 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80038f6:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 0204 	bic.w	r2, r3, #4
 80038fe:	4905      	ldr	r1, [pc, #20]	@ (8003914 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40030400 	.word	0x40030400

08003918 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_ICACHE_Enable+0x1c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <HAL_ICACHE_Enable+0x1c>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40030400 	.word	0x40030400

08003938 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
 800394e:	e141      	b.n	8003bd4 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f947 	bl	8003be8 <MDF_GetHandleNumberFromInstance>
 800395a:	4603      	mov	r3, r0
 800395c:	4a86      	ldr	r2, [pc, #536]	@ (8003b78 <HAL_MDF_Init+0x240>)
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e133      	b.n	8003bd4 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe f9d3 	bl	8001d18 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8003972:	4b82      	ldr	r3, [pc, #520]	@ (8003b7c <HAL_MDF_Init+0x244>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <HAL_MDF_Init+0x7e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a80      	ldr	r2, [pc, #512]	@ (8003b80 <HAL_MDF_Init+0x248>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d023      	beq.n	80039cc <HAL_MDF_Init+0x94>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7e      	ldr	r2, [pc, #504]	@ (8003b84 <HAL_MDF_Init+0x24c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01e      	beq.n	80039cc <HAL_MDF_Init+0x94>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a7d      	ldr	r2, [pc, #500]	@ (8003b88 <HAL_MDF_Init+0x250>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d019      	beq.n	80039cc <HAL_MDF_Init+0x94>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7b      	ldr	r2, [pc, #492]	@ (8003b8c <HAL_MDF_Init+0x254>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d014      	beq.n	80039cc <HAL_MDF_Init+0x94>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003b90 <HAL_MDF_Init+0x258>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00f      	beq.n	80039cc <HAL_MDF_Init+0x94>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a78      	ldr	r2, [pc, #480]	@ (8003b94 <HAL_MDF_Init+0x25c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00a      	beq.n	80039cc <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 80039b6:	4b78      	ldr	r3, [pc, #480]	@ (8003b98 <HAL_MDF_Init+0x260>)
 80039b8:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8090 	bne.w	8003ae0 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a75      	ldr	r2, [pc, #468]	@ (8003b9c <HAL_MDF_Init+0x264>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f040 808a 	bne.w	8003ae0 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a72      	ldr	r2, [pc, #456]	@ (8003b9c <HAL_MDF_Init+0x264>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_MDF_Init+0xa2>
 80039d6:	4b72      	ldr	r3, [pc, #456]	@ (8003ba0 <HAL_MDF_Init+0x268>)
 80039d8:	e000      	b.n	80039dc <HAL_MDF_Init+0xa4>
 80039da:	4b72      	ldr	r3, [pc, #456]	@ (8003ba4 <HAL_MDF_Init+0x26c>)
 80039dc:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da02      	bge.n	80039ec <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e079      	b.n	8003ae0 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a63      	ldr	r2, [pc, #396]	@ (8003b80 <HAL_MDF_Init+0x248>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d018      	beq.n	8003a28 <HAL_MDF_Init+0xf0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a62      	ldr	r2, [pc, #392]	@ (8003b84 <HAL_MDF_Init+0x24c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_MDF_Init+0xf0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a60      	ldr	r2, [pc, #384]	@ (8003b88 <HAL_MDF_Init+0x250>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00e      	beq.n	8003a28 <HAL_MDF_Init+0xf0>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003b8c <HAL_MDF_Init+0x254>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_MDF_Init+0xf0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5d      	ldr	r2, [pc, #372]	@ (8003b90 <HAL_MDF_Init+0x258>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_MDF_Init+0xf0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5c      	ldr	r2, [pc, #368]	@ (8003b94 <HAL_MDF_Init+0x25c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d10d      	bne.n	8003a44 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7b1b      	ldrb	r3, [r3, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d137      	bne.n	8003ad4 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8003a74:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8003a7c:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7e1b      	ldrb	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d123      	bne.n	8003ad4 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <HAL_MDF_Init+0x248>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d012      	beq.n	8003abc <HAL_MDF_Init+0x184>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b84 <HAL_MDF_Init+0x24c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00d      	beq.n	8003abc <HAL_MDF_Init+0x184>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_MDF_Init+0x250>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d008      	beq.n	8003abc <HAL_MDF_Init+0x184>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a37      	ldr	r2, [pc, #220]	@ (8003b8c <HAL_MDF_Init+0x254>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <HAL_MDF_Init+0x184>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <HAL_MDF_Init+0x258>)
 8003aba:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f043 0210 	orr.w	r2, r3, #16
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d128      	bne.n	8003b38 <HAL_MDF_Init+0x200>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d123      	bne.n	8003b38 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da02      	bge.n	8003b00 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	e01b      	b.n	8003b38 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003b18:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d14a      	bne.n	8003bd4 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 021f 	bic.w	r2, r2, #31
 8003b4c:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <HAL_MDF_Init+0x264>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d11e      	bne.n	8003ba8 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_MDF_Init+0x260>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_MDF_Init+0x260>)
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e01d      	b.n	8003bb2 <HAL_MDF_Init+0x27a>
 8003b76:	bf00      	nop
 8003b78:	20001108 	.word	0x20001108
 8003b7c:	20001100 	.word	0x20001100
 8003b80:	40025080 	.word	0x40025080
 8003b84:	40025100 	.word	0x40025100
 8003b88:	40025180 	.word	0x40025180
 8003b8c:	40025200 	.word	0x40025200
 8003b90:	40025280 	.word	0x40025280
 8003b94:	40025300 	.word	0x40025300
 8003b98:	20001104 	.word	0x20001104
 8003b9c:	46024080 	.word	0x46024080
 8003ba0:	46024000 	.word	0x46024000
 8003ba4:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_MDF_Init+0x2a8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	4a0c      	ldr	r2, [pc, #48]	@ (8003be0 <HAL_MDF_Init+0x2a8>)
 8003bb0:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f816 	bl	8003be8 <MDF_GetHandleNumberFromInstance>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4909      	ldr	r1, [pc, #36]	@ (8003be4 <HAL_MDF_Init+0x2ac>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20001100 	.word	0x20001100
 8003be4:	20001108 	.word	0x20001108

08003be8 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <MDF_GetHandleNumberFromInstance+0x70>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d102      	bne.n	8003bfe <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e024      	b.n	8003c48 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a16      	ldr	r2, [pc, #88]	@ (8003c5c <MDF_GetHandleNumberFromInstance+0x74>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d102      	bne.n	8003c0c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8003c06:	2301      	movs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e01d      	b.n	8003c48 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a14      	ldr	r2, [pc, #80]	@ (8003c60 <MDF_GetHandleNumberFromInstance+0x78>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d102      	bne.n	8003c1a <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8003c14:	2302      	movs	r3, #2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e016      	b.n	8003c48 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a11      	ldr	r2, [pc, #68]	@ (8003c64 <MDF_GetHandleNumberFromInstance+0x7c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d102      	bne.n	8003c28 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8003c22:	2303      	movs	r3, #3
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e00f      	b.n	8003c48 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c68 <MDF_GetHandleNumberFromInstance+0x80>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d102      	bne.n	8003c36 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8003c30:	2304      	movs	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e008      	b.n	8003c48 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <MDF_GetHandleNumberFromInstance+0x84>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d102      	bne.n	8003c44 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8003c3e:	2305      	movs	r3, #5
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e001      	b.n	8003c48 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8003c44:	2306      	movs	r3, #6
 8003c46:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40025080 	.word	0x40025080
 8003c5c:	40025100 	.word	0x40025100
 8003c60:	40025180 	.word	0x40025180
 8003c64:	40025200 	.word	0x40025200
 8003c68:	40025280 	.word	0x40025280
 8003c6c:	40025300 	.word	0x40025300

08003c70 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7fe fff4 	bl	8002c88 <HAL_GetTick>
 8003ca0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e0a5      	b.n	8003dfa <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 809e 	bne.w	8003dfa <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe f970 	bl	8001fa4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003cc4:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f912 	bl	8003ef2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e04 <HAL_OSPI_Init+0x174>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68d1      	ldr	r1, [r2, #12]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6912      	ldr	r2, [r2, #16]
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0412      	lsls	r2, r2, #16
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6952      	ldr	r2, [r2, #20]
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0212      	lsls	r2, r2, #8
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	69d2      	ldr	r2, [r2, #28]
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1a      	ldr	r2, [r3, #32]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d34:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	021a      	lsls	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fdc9 	bl	80048f4 <OSPI_WaitFlagStateUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d146      	bne.n	8003dfa <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003da2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d107      	bne.n	8003de2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0202 	orr.w	r2, r2, #2
 8003de0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dea:	d103      	bne.n	8003df4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	651a      	str	r2, [r3, #80]	@ 0x50
 8003df2:	e002      	b.n	8003dfa <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	f8e0c0f4 	.word	0xf8e0c0f4

08003e08 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003e14:	f7fe ff38 	bl	8002c88 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_OSPI_Abort+0x2c>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d052      	beq.n	8003eda <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d014      	beq.n	8003e6c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0204 	bic.w	r2, r2, #4
 8003e50:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff f9a0 	bl	800319c <HAL_DMA_Abort>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02b      	beq.n	8003ed2 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0202 	orr.w	r2, r2, #2
 8003e88:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2201      	movs	r2, #1
 8003e94:	2102      	movs	r1, #2
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fd2c 	bl	80048f4 <OSPI_WaitFlagStateUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11f      	bne.n	8003ee6 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2120      	movs	r1, #32
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fd1a 	bl	80048f4 <OSPI_WaitFlagStateUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003ed0:	e009      	b.n	8003ee6 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003ed8:	e005      	b.n	8003ee6 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ee4:	e000      	b.n	8003ee8 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003ee6:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b094      	sub	sp, #80	@ 0x50
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a9d      	ldr	r2, [pc, #628]	@ (80041a4 <HAL_OSPIM_Config+0x294>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d105      	bne.n	8003f3e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003f3c:	e004      	b.n	8003f48 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003f4e:	e01d      	b.n	8003f8c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003f50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f54:	3301      	adds	r3, #1
 8003f56:	b2d8      	uxtb	r0, r3
 8003f58:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003f5c:	f107 0114 	add.w	r1, r7, #20
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	440b      	add	r3, r1
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f000 fd02 	bl	8004974 <OSPIM_GetConfig>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f86:	3301      	adds	r3, #1
 8003f88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d9dd      	bls.n	8003f50 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003f94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 849e 	bne.w	80048da <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f9e:	4b81      	ldr	r3, [pc, #516]	@ (80041a4 <HAL_OSPIM_Config+0x294>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003faa:	4b7e      	ldr	r3, [pc, #504]	@ (80041a4 <HAL_OSPIM_Config+0x294>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7d      	ldr	r2, [pc, #500]	@ (80041a4 <HAL_OSPIM_Config+0x294>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003fb6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003fc2:	4b79      	ldr	r3, [pc, #484]	@ (80041a8 <HAL_OSPIM_Config+0x298>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003fce:	4b76      	ldr	r3, [pc, #472]	@ (80041a8 <HAL_OSPIM_Config+0x298>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a75      	ldr	r2, [pc, #468]	@ (80041a8 <HAL_OSPIM_Config+0x298>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003fda:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003fe6:	4971      	ldr	r1, [pc, #452]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8003fe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	3350      	adds	r3, #80	@ 0x50
 8003ff4:	443b      	add	r3, r7
 8003ff6:	3b34      	subs	r3, #52	@ 0x34
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	486a      	ldr	r0, [pc, #424]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8004004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	3350      	adds	r3, #80	@ 0x50
 8004010:	443b      	add	r3, r7
 8004012:	3b34      	subs	r3, #52	@ 0x34
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3b01      	subs	r3, #1
 8004018:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4403      	add	r3, r0
 8004020:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004022:	4b62      	ldr	r3, [pc, #392]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80c0 	beq.w	80041b0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004030:	4b5e      	ldr	r3, [pc, #376]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5d      	ldr	r2, [pc, #372]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800403c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004040:	2b01      	cmp	r3, #1
 8004042:	f040 8162 	bne.w	800430a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8004046:	4959      	ldr	r1, [pc, #356]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8004048:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3350      	adds	r3, #80	@ 0x50
 8004056:	443b      	add	r3, r7
 8004058:	3b3c      	subs	r3, #60	@ 0x3c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	4851      	ldr	r0, [pc, #324]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 8004066:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	3350      	adds	r3, #80	@ 0x50
 8004074:	443b      	add	r3, r7
 8004076:	3b3c      	subs	r3, #60	@ 0x3c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	f041 0202 	orr.w	r2, r1, #2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4403      	add	r3, r0
 8004084:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004086:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	3350      	adds	r3, #80	@ 0x50
 8004094:	443b      	add	r3, r7
 8004096:	3b38      	subs	r3, #56	@ 0x38
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01f      	beq.n	80040de <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800409e:	4943      	ldr	r1, [pc, #268]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 80040a0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	3350      	adds	r3, #80	@ 0x50
 80040ae:	443b      	add	r3, r7
 80040b0:	3b38      	subs	r3, #56	@ 0x38
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	483b      	ldr	r0, [pc, #236]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 80040be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	3350      	adds	r3, #80	@ 0x50
 80040cc:	443b      	add	r3, r7
 80040ce:	3b38      	subs	r3, #56	@ 0x38
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	f041 0220 	orr.w	r2, r1, #32
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4403      	add	r3, r0
 80040dc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80040de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	3350      	adds	r3, #80	@ 0x50
 80040ec:	443b      	add	r3, r7
 80040ee:	3b30      	subs	r3, #48	@ 0x30
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d023      	beq.n	800413e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80040f6:	492d      	ldr	r1, [pc, #180]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 80040f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3350      	adds	r3, #80	@ 0x50
 8004106:	443b      	add	r3, r7
 8004108:	3b30      	subs	r3, #48	@ 0x30
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3b01      	subs	r3, #1
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	4824      	ldr	r0, [pc, #144]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 800411a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	3350      	adds	r3, #80	@ 0x50
 8004128:	443b      	add	r3, r7
 800412a:	3b30      	subs	r3, #48	@ 0x30
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4403      	add	r3, r0
 800413c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800413e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	3350      	adds	r3, #80	@ 0x50
 800414c:	443b      	add	r3, r7
 800414e:	3b2c      	subs	r3, #44	@ 0x2c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80d9 	beq.w	800430a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004158:	4914      	ldr	r1, [pc, #80]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 800415a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	3350      	adds	r3, #80	@ 0x50
 8004168:	443b      	add	r3, r7
 800416a:	3b2c      	subs	r3, #44	@ 0x2c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3b01      	subs	r3, #1
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	480c      	ldr	r0, [pc, #48]	@ (80041ac <HAL_OSPIM_Config+0x29c>)
 800417c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	3350      	adds	r3, #80	@ 0x50
 800418a:	443b      	add	r3, r7
 800418c:	3b2c      	subs	r3, #44	@ 0x2c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3b01      	subs	r3, #1
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e0b3      	b.n	800430a <HAL_OSPIM_Config+0x3fa>
 80041a2:	bf00      	nop
 80041a4:	420d1400 	.word	0x420d1400
 80041a8:	420d2400 	.word	0x420d2400
 80041ac:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80041b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	3350      	adds	r3, #80	@ 0x50
 80041bc:	443b      	add	r3, r7
 80041be:	3b3c      	subs	r3, #60	@ 0x3c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80a1 	beq.w	800430a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80041c8:	4993      	ldr	r1, [pc, #588]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 80041ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	3350      	adds	r3, #80	@ 0x50
 80041d6:	443b      	add	r3, r7
 80041d8:	3b3c      	subs	r3, #60	@ 0x3c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3b01      	subs	r3, #1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	488c      	ldr	r0, [pc, #560]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 80041e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	3350      	adds	r3, #80	@ 0x50
 80041f2:	443b      	add	r3, r7
 80041f4:	3b3c      	subs	r3, #60	@ 0x3c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	f021 0201 	bic.w	r2, r1, #1
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4403      	add	r3, r0
 8004202:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	3350      	adds	r3, #80	@ 0x50
 8004210:	443b      	add	r3, r7
 8004212:	3b38      	subs	r3, #56	@ 0x38
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01d      	beq.n	8004256 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800421a:	497f      	ldr	r1, [pc, #508]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 800421c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	3350      	adds	r3, #80	@ 0x50
 8004228:	443b      	add	r3, r7
 800422a:	3b38      	subs	r3, #56	@ 0x38
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3b01      	subs	r3, #1
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	4878      	ldr	r0, [pc, #480]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 8004238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	3350      	adds	r3, #80	@ 0x50
 8004244:	443b      	add	r3, r7
 8004246:	3b38      	subs	r3, #56	@ 0x38
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	f021 0210 	bic.w	r2, r1, #16
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4403      	add	r3, r0
 8004254:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	3350      	adds	r3, #80	@ 0x50
 8004262:	443b      	add	r3, r7
 8004264:	3b30      	subs	r3, #48	@ 0x30
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d021      	beq.n	80042b0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800426c:	496a      	ldr	r1, [pc, #424]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 800426e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	3350      	adds	r3, #80	@ 0x50
 800427a:	443b      	add	r3, r7
 800427c:	3b30      	subs	r3, #48	@ 0x30
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3b01      	subs	r3, #1
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	4862      	ldr	r0, [pc, #392]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 800428e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	3350      	adds	r3, #80	@ 0x50
 800429a:	443b      	add	r3, r7
 800429c:	3b30      	subs	r3, #48	@ 0x30
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4403      	add	r3, r0
 80042ae:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b2:	4613      	mov	r3, r2
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	3350      	adds	r3, #80	@ 0x50
 80042bc:	443b      	add	r3, r7
 80042be:	3b2c      	subs	r3, #44	@ 0x2c
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d021      	beq.n	800430a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80042c6:	4954      	ldr	r1, [pc, #336]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 80042c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	3350      	adds	r3, #80	@ 0x50
 80042d4:	443b      	add	r3, r7
 80042d6:	3b2c      	subs	r3, #44	@ 0x2c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3b01      	subs	r3, #1
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	484c      	ldr	r0, [pc, #304]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 80042e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ea:	4613      	mov	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	3350      	adds	r3, #80	@ 0x50
 80042f4:	443b      	add	r3, r7
 80042f6:	3b2c      	subs	r3, #44	@ 0x2c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4403      	add	r3, r0
 8004308:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	3350      	adds	r3, #80	@ 0x50
 800431c:	443b      	add	r3, r7
 800431e:	3b3c      	subs	r3, #60	@ 0x3c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4299      	cmp	r1, r3
 8004324:	d038      	beq.n	8004398 <HAL_OSPIM_Config+0x488>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	3350      	adds	r3, #80	@ 0x50
 8004338:	443b      	add	r3, r7
 800433a:	3b38      	subs	r3, #56	@ 0x38
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4299      	cmp	r1, r3
 8004340:	d02a      	beq.n	8004398 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	3350      	adds	r3, #80	@ 0x50
 8004354:	443b      	add	r3, r7
 8004356:	3b34      	subs	r3, #52	@ 0x34
 8004358:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800435a:	4299      	cmp	r1, r3
 800435c:	d01c      	beq.n	8004398 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	68d9      	ldr	r1, [r3, #12]
 8004362:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	3350      	adds	r3, #80	@ 0x50
 8004370:	443b      	add	r3, r7
 8004372:	3b30      	subs	r3, #48	@ 0x30
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4299      	cmp	r1, r3
 8004378:	d00e      	beq.n	8004398 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	3350      	adds	r3, #80	@ 0x50
 800438c:	443b      	add	r3, r7
 800438e:	3b2c      	subs	r3, #44	@ 0x2c
 8004390:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004392:	4299      	cmp	r1, r3
 8004394:	f040 810e 	bne.w	80045b4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6819      	ldr	r1, [r3, #0]
 800439c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3350      	adds	r3, #80	@ 0x50
 80043aa:	443b      	add	r3, r7
 80043ac:	3b3c      	subs	r3, #60	@ 0x3c
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4299      	cmp	r1, r3
 80043b2:	d133      	bne.n	800441c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	3350      	adds	r3, #80	@ 0x50
 80043c6:	443b      	add	r3, r7
 80043c8:	3b38      	subs	r3, #56	@ 0x38
 80043ca:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80043cc:	4299      	cmp	r1, r3
 80043ce:	d125      	bne.n	800441c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	68d9      	ldr	r1, [r3, #12]
 80043d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3350      	adds	r3, #80	@ 0x50
 80043e2:	443b      	add	r3, r7
 80043e4:	3b30      	subs	r3, #48	@ 0x30
 80043e6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d117      	bne.n	800441c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6919      	ldr	r1, [r3, #16]
 80043f0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80043f4:	4613      	mov	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3350      	adds	r3, #80	@ 0x50
 80043fe:	443b      	add	r3, r7
 8004400:	3b2c      	subs	r3, #44	@ 0x2c
 8004402:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004404:	4299      	cmp	r1, r3
 8004406:	d109      	bne.n	800441c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004408:	4b03      	ldr	r3, [pc, #12]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a02      	ldr	r2, [pc, #8]	@ (8004418 <HAL_OSPIM_Config+0x508>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e0ce      	b.n	80045b4 <HAL_OSPIM_Config+0x6a4>
 8004416:	bf00      	nop
 8004418:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800441c:	49a4      	ldr	r1, [pc, #656]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800441e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004422:	4613      	mov	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	3350      	adds	r3, #80	@ 0x50
 800442c:	443b      	add	r3, r7
 800442e:	3b3c      	subs	r3, #60	@ 0x3c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3b01      	subs	r3, #1
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	489d      	ldr	r0, [pc, #628]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800443c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3350      	adds	r3, #80	@ 0x50
 800444a:	443b      	add	r3, r7
 800444c:	3b3c      	subs	r3, #60	@ 0x3c
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	f021 0201 	bic.w	r2, r1, #1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4403      	add	r3, r0
 800445a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800445c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004460:	4613      	mov	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	3350      	adds	r3, #80	@ 0x50
 800446a:	443b      	add	r3, r7
 800446c:	3b38      	subs	r3, #56	@ 0x38
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01f      	beq.n	80044b4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004474:	498e      	ldr	r1, [pc, #568]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004476:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800447a:	4613      	mov	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	3350      	adds	r3, #80	@ 0x50
 8004484:	443b      	add	r3, r7
 8004486:	3b38      	subs	r3, #56	@ 0x38
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	4887      	ldr	r0, [pc, #540]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004494:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	3350      	adds	r3, #80	@ 0x50
 80044a2:	443b      	add	r3, r7
 80044a4:	3b38      	subs	r3, #56	@ 0x38
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	f021 0210 	bic.w	r2, r1, #16
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4403      	add	r3, r0
 80044b2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80044b4:	497e      	ldr	r1, [pc, #504]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 80044b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	3350      	adds	r3, #80	@ 0x50
 80044c4:	443b      	add	r3, r7
 80044c6:	3b34      	subs	r3, #52	@ 0x34
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	6859      	ldr	r1, [r3, #4]
 80044d2:	4877      	ldr	r0, [pc, #476]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 80044d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80044d8:	4613      	mov	r3, r2
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	3350      	adds	r3, #80	@ 0x50
 80044e2:	443b      	add	r3, r7
 80044e4:	3b34      	subs	r3, #52	@ 0x34
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4403      	add	r3, r0
 80044f2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80044f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	3350      	adds	r3, #80	@ 0x50
 8004502:	443b      	add	r3, r7
 8004504:	3b30      	subs	r3, #48	@ 0x30
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800450c:	4968      	ldr	r1, [pc, #416]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800450e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	3350      	adds	r3, #80	@ 0x50
 800451c:	443b      	add	r3, r7
 800451e:	3b30      	subs	r3, #48	@ 0x30
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	4860      	ldr	r0, [pc, #384]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004530:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	3350      	adds	r3, #80	@ 0x50
 800453e:	443b      	add	r3, r7
 8004540:	3b30      	subs	r3, #48	@ 0x30
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3b01      	subs	r3, #1
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4403      	add	r3, r0
 8004552:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004554:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	3350      	adds	r3, #80	@ 0x50
 8004562:	443b      	add	r3, r7
 8004564:	3b2c      	subs	r3, #44	@ 0x2c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d023      	beq.n	80045b4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800456c:	4950      	ldr	r1, [pc, #320]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800456e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	3350      	adds	r3, #80	@ 0x50
 800457c:	443b      	add	r3, r7
 800457e:	3b2c      	subs	r3, #44	@ 0x2c
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3b01      	subs	r3, #1
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	4848      	ldr	r0, [pc, #288]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004590:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004594:	4613      	mov	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4413      	add	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	3350      	adds	r3, #80	@ 0x50
 800459e:	443b      	add	r3, r7
 80045a0:	3b2c      	subs	r3, #44	@ 0x2c
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4403      	add	r3, r0
 80045b2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80045b4:	4a3e      	ldr	r2, [pc, #248]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045c8:	025b      	lsls	r3, r3, #9
 80045ca:	431a      	orrs	r2, r3
 80045cc:	4938      	ldr	r1, [pc, #224]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d018      	beq.n	8004618 <HAL_OSPIM_Config+0x708>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ee:	d813      	bhi.n	8004618 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	4b2e      	ldr	r3, [pc, #184]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	429a      	cmp	r2, r3
 8004600:	d90a      	bls.n	8004618 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004602:	4b2b      	ldr	r3, [pc, #172]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	3b01      	subs	r3, #1
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	4927      	ldr	r1, [pc, #156]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004618:	4b25      	ldr	r3, [pc, #148]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 809a 	beq.w	800475a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004626:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 0203 	bic.w	r2, r3, #3
 8004638:	491d      	ldr	r1, [pc, #116]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d011      	beq.n	8004676 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004652:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	3b01      	subs	r3, #1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004664:	4912      	ldr	r1, [pc, #72]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	f042 0210 	orr.w	r2, r2, #16
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004682:	4a0b      	ldr	r2, [pc, #44]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	3b01      	subs	r3, #1
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004698:	4905      	ldr	r1, [pc, #20]	@ (80046b0 <HAL_OSPIM_Config+0x7a0>)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	3b01      	subs	r3, #1
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e01b      	b.n	80046e8 <HAL_OSPIM_Config+0x7d8>
 80046b0:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80046bc:	4a8a      	ldr	r2, [pc, #552]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80046d2:	4985      	ldr	r1, [pc, #532]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	3b01      	subs	r3, #1
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80046f4:	4a7c      	ldr	r2, [pc, #496]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800470a:	4977      	ldr	r1, [pc, #476]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	3b01      	subs	r3, #1
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	e0c3      	b.n	80048aa <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80bf 	beq.w	80048aa <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800472c:	4a6e      	ldr	r2, [pc, #440]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	3b01      	subs	r3, #1
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004742:	4969      	ldr	r1, [pc, #420]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	3b01      	subs	r3, #1
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	e0a7      	b.n	80048aa <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800475a:	4a63      	ldr	r2, [pc, #396]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3b01      	subs	r3, #1
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 0203 	bic.w	r2, r3, #3
 800476c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	431a      	orrs	r2, r3
 8004772:	495d      	ldr	r1, [pc, #372]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d014      	beq.n	80047b6 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800478c:	4a56      	ldr	r2, [pc, #344]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800479e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	431a      	orrs	r2, r3
 80047a4:	4950      	ldr	r1, [pc, #320]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	f042 0210 	orr.w	r2, r2, #16
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d019      	beq.n	80047f6 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80047c2:	4a49      	ldr	r2, [pc, #292]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80047d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047da:	049b      	lsls	r3, r3, #18
 80047dc:	431a      	orrs	r2, r3
 80047de:	4942      	ldr	r1, [pc, #264]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	e01c      	b.n	8004830 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80047fe:	4a3a      	ldr	r2, [pc, #232]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	3b01      	subs	r3, #1
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004816:	069b      	lsls	r3, r3, #26
 8004818:	431a      	orrs	r2, r3
 800481a:	4933      	ldr	r1, [pc, #204]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	3b01      	subs	r3, #1
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d019      	beq.n	8004870 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800483c:	4a2a      	ldr	r2, [pc, #168]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	3b01      	subs	r3, #1
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004854:	049b      	lsls	r3, r3, #18
 8004856:	431a      	orrs	r2, r3
 8004858:	4923      	ldr	r1, [pc, #140]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	3b01      	subs	r3, #1
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e01c      	b.n	80048aa <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d018      	beq.n	80048aa <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	3b01      	subs	r3, #1
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800488e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004890:	069b      	lsls	r3, r3, #26
 8004892:	431a      	orrs	r2, r3
 8004894:	4914      	ldr	r1, [pc, #80]	@ (80048e8 <HAL_OSPIM_Config+0x9d8>)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	3b01      	subs	r3, #1
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80048aa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <HAL_OSPIM_Config+0x9dc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0c      	ldr	r2, [pc, #48]	@ (80048ec <HAL_OSPIM_Config+0x9dc>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80048c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80048ce:	4b08      	ldr	r3, [pc, #32]	@ (80048f0 <HAL_OSPIM_Config+0x9e0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a07      	ldr	r2, [pc, #28]	@ (80048f0 <HAL_OSPIM_Config+0x9e0>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80048da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3750      	adds	r7, #80	@ 0x50
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	420c4000 	.word	0x420c4000
 80048ec:	420d1400 	.word	0x420d1400
 80048f0:	420d2400 	.word	0x420d2400

080048f4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004904:	e022      	b.n	800494c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d01e      	beq.n	800494c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe f9bb 	bl	8002c88 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d113      	bne.n	800494c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	401a      	ands	r2, r3
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	429a      	cmp	r2, r3
 8004932:	d00b      	beq.n	800494c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800493a:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	f043 0201 	orr.w	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e00e      	b.n	800496a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d1ce      	bne.n	8004906 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <OSPIM_GetConfig+0x26>
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d802      	bhi.n	800499a <OSPIM_GetConfig+0x26>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
 800499e:	e098      	b.n	8004ad2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d10b      	bne.n	80049dc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80049c4:	4b46      	ldr	r3, [pc, #280]	@ (8004ae0 <OSPIM_GetConfig+0x16c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80049d0:	4b44      	ldr	r3, [pc, #272]	@ (8004ae4 <OSPIM_GetConfig+0x170>)
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	e002      	b.n	80049dc <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80049d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049da:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e074      	b.n	8004acc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80049e2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ae0 <OSPIM_GetConfig+0x16c>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4053      	eors	r3, r2
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4053      	eors	r3, r2
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4053      	eors	r3, r2
 8004a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d018      	beq.n	8004a8a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4053      	eors	r3, r2
 8004a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d111      	bne.n	8004a8a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	e005      	b.n	8004a8a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d018      	beq.n	8004ac6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4053      	eors	r3, r2
 8004a9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d111      	bne.n	8004ac6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	611a      	str	r2, [r3, #16]
 8004ab8:	e005      	b.n	8004ac6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d987      	bls.n	80049e2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	420c4000 	.word	0x420c4000
 8004ae4:	04040222 	.word	0x04040222

08004ae8 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0202 	orr.w	r2, r2, #2
 8004b04:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a15      	ldr	r2, [pc, #84]	@ (8004b68 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d109      	bne.n	8004b2a <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8004b16:	4815      	ldr	r0, [pc, #84]	@ (8004b6c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8004b18:	f7ff f8aa 	bl	8003c70 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8004b1c:	6839      	ldr	r1, [r7, #0]
 8004b1e:	4813      	ldr	r0, [pc, #76]	@ (8004b6c <HAL_OSPI_DLYB_SetConfig+0x84>)
 8004b20:	f005 fb08 	bl	800a134 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e00d      	b.n	8004b46 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	@ (8004b70 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d108      	bne.n	8004b46 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8004b34:	480f      	ldr	r0, [pc, #60]	@ (8004b74 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8004b36:	f7ff f89b 	bl	8003c70 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	480d      	ldr	r0, [pc, #52]	@ (8004b74 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8004b3e:	f005 faf9 	bl	800a134 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff f95e 	bl	8003e08 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0202 	bic.w	r2, r2, #2
 8004b5a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	420d1400 	.word	0x420d1400
 8004b6c:	420cf000 	.word	0x420cf000
 8004b70:	420d2400 	.word	0x420d2400
 8004b74:	420cf400 	.word	0x420cf400

08004b78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e108      	b.n	8004d9c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7fd fdd1 	bl	800274c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2203      	movs	r2, #3
 8004bae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a7b      	ldr	r2, [pc, #492]	@ (8004da4 <HAL_PCD_Init+0x22c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d102      	bne.n	8004bc0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f005 fcca 	bl	800a55e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	7c1a      	ldrb	r2, [r3, #16]
 8004bd2:	f88d 2000 	strb.w	r2, [sp]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bda:	f005 fc93 	bl	800a504 <USB_CoreInit>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0d5      	b.n	8004d9c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f005 fcc2 	bl	800a580 <USB_SetCurrentMode>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0c6      	b.n	8004d9c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	e04a      	b.n	8004caa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3315      	adds	r3, #21
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3314      	adds	r3, #20
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	b298      	uxth	r0, r3
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	332e      	adds	r3, #46	@ 0x2e
 8004c50:	4602      	mov	r2, r0
 8004c52:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	3318      	adds	r3, #24
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	331c      	adds	r3, #28
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c7c:	7bfa      	ldrb	r2, [r7, #15]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3320      	adds	r3, #32
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3324      	adds	r3, #36	@ 0x24
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d3af      	bcc.n	8004c14 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
 8004cb8:	e044      	b.n	8004d44 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d12:	7bfa      	ldrb	r2, [r7, #15]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d28:	7bfa      	ldrb	r2, [r7, #15]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	3301      	adds	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	791b      	ldrb	r3, [r3, #4]
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3b5      	bcc.n	8004cba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7c1a      	ldrb	r2, [r3, #16]
 8004d56:	f88d 2000 	strb.w	r2, [sp]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d5e:	f005 fc5b 	bl	800a618 <USB_DevInit>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e013      	b.n	8004d9c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7b1b      	ldrb	r3, [r3, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f80c 	bl	8004da8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f005 fe04 	bl	800a9a2 <USB_DevDisconnect>

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	42040000 	.word	0x42040000

08004da8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dda:	f043 0303 	orr.w	r3, r3, #3
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004df8:	4b39      	ldr	r3, [pc, #228]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e00:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d10b      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e10:	d905      	bls.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004e12:	4b33      	ldr	r3, [pc, #204]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a32      	ldr	r2, [pc, #200]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e1c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e057      	b.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e28:	d90a      	bls.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e3c:	60d3      	str	r3, [r2, #12]
 8004e3e:	e007      	b.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004e40:	4b27      	ldr	r3, [pc, #156]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e48:	4925      	ldr	r1, [pc, #148]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e50:	4b24      	ldr	r3, [pc, #144]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	2232      	movs	r2, #50	@ 0x32
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	4a21      	ldr	r2, [pc, #132]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e6e:	e002      	b.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004e76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f3      	bne.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01b      	beq.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004e8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	2232      	movs	r2, #50	@ 0x32
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	4a11      	ldr	r2, [pc, #68]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004eac:	e002      	b.n	8004eb4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f3      	bne.n	8004eae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e000      	b.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	46020800 	.word	0x46020800
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	10624dd3 	.word	0x10624dd3

08004eec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004ef0:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	46020800 	.word	0x46020800

08004f08 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f10:	4b22      	ldr	r3, [pc, #136]	@ (8004f9c <HAL_PWREx_ConfigSupply+0x94>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a22      	ldr	r2, [pc, #136]	@ (8004fa0 <HAL_PWREx_ConfigSupply+0x98>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	2232      	movs	r2, #50	@ 0x32
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa0 <HAL_PWREx_ConfigSupply+0x98>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d113      	bne.n	8004f5c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004f34:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f3a:	f023 0302 	bic.w	r3, r3, #2
 8004f3e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f40:	e002      	b.n	8004f48 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f48:	4b16      	ldr	r3, [pc, #88]	@ (8004fa4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d116      	bne.n	8004f82 <HAL_PWREx_ConfigSupply+0x7a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f3      	bne.n	8004f42 <HAL_PWREx_ConfigSupply+0x3a>
 8004f5a:	e012      	b.n	8004f82 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004f5c:	4b11      	ldr	r3, [pc, #68]	@ (8004fa4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a10      	ldr	r2, [pc, #64]	@ (8004fa4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f62:	f043 0302 	orr.w	r3, r3, #2
 8004f66:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f68:	e002      	b.n	8004f70 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004f70:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <HAL_PWREx_ConfigSupply+0x7a>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f3      	bne.n	8004f6a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e000      	b.n	8004f8e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000000 	.word	0x20000000
 8004fa0:	10624dd3 	.word	0x10624dd3
 8004fa4:	46020800 	.word	0x46020800

08004fa8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	4a04      	ldr	r2, [pc, #16]	@ (8004fc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	6113      	str	r3, [r2, #16]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	46020800 	.word	0x46020800

08004fc8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	4a04      	ldr	r2, [pc, #16]	@ (8004fe4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fd6:	6113      	str	r3, [r2, #16]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	46020800 	.word	0x46020800

08004fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08e      	sub	sp, #56	@ 0x38
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f000 bec8 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005002:	4b99      	ldr	r3, [pc, #612]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800500c:	4b96      	ldr	r3, [pc, #600]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 816c 	beq.w	80052fc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_RCC_OscConfig+0x52>
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	2b0c      	cmp	r3, #12
 800502e:	f040 80de 	bne.w	80051ee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 80da 	bne.w	80051ee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f000 bea5 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800504c:	4b86      	ldr	r3, [pc, #536]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <HAL_RCC_OscConfig+0x7a>
 8005058:	4b83      	ldr	r3, [pc, #524]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005060:	e005      	b.n	800506e <HAL_RCC_OscConfig+0x86>
 8005062:	4b81      	ldr	r3, [pc, #516]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800506e:	4293      	cmp	r3, r2
 8005070:	d255      	bcs.n	800511e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	4618      	mov	r0, r3
 800507e:	f001 f9d9 	bl	8006434 <RCC_SetFlashLatencyFromMSIRange>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f000 be82 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800508e:	4b76      	ldr	r3, [pc, #472]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4a75      	ldr	r2, [pc, #468]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005094:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005098:	6093      	str	r3, [r2, #8]
 800509a:	4b73      	ldr	r3, [pc, #460]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	4970      	ldr	r1, [pc, #448]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80050b4:	d309      	bcc.n	80050ca <HAL_RCC_OscConfig+0xe2>
 80050b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f023 021f 	bic.w	r2, r3, #31
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	4969      	ldr	r1, [pc, #420]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60cb      	str	r3, [r1, #12]
 80050c8:	e07e      	b.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da0a      	bge.n	80050e8 <HAL_RCC_OscConfig+0x100>
 80050d2:	4b65      	ldr	r3, [pc, #404]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	015b      	lsls	r3, r3, #5
 80050e0:	4961      	ldr	r1, [pc, #388]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60cb      	str	r3, [r1, #12]
 80050e6:	e06f      	b.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f0:	d30a      	bcc.n	8005108 <HAL_RCC_OscConfig+0x120>
 80050f2:	4b5d      	ldr	r3, [pc, #372]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	029b      	lsls	r3, r3, #10
 8005100:	4959      	ldr	r1, [pc, #356]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005102:	4313      	orrs	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
 8005106:	e05f      	b.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
 8005108:	4b57      	ldr	r3, [pc, #348]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	03db      	lsls	r3, r3, #15
 8005116:	4954      	ldr	r1, [pc, #336]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005118:	4313      	orrs	r3, r2
 800511a:	60cb      	str	r3, [r1, #12]
 800511c:	e054      	b.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800511e:	4b52      	ldr	r3, [pc, #328]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	4a51      	ldr	r2, [pc, #324]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005128:	6093      	str	r3, [r2, #8]
 800512a:	4b4f      	ldr	r3, [pc, #316]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	494c      	ldr	r1, [pc, #304]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005138:	4313      	orrs	r3, r2
 800513a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005144:	d309      	bcc.n	800515a <HAL_RCC_OscConfig+0x172>
 8005146:	4b48      	ldr	r3, [pc, #288]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f023 021f 	bic.w	r2, r3, #31
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4945      	ldr	r1, [pc, #276]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005154:	4313      	orrs	r3, r2
 8005156:	60cb      	str	r3, [r1, #12]
 8005158:	e028      	b.n	80051ac <HAL_RCC_OscConfig+0x1c4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	da0a      	bge.n	8005178 <HAL_RCC_OscConfig+0x190>
 8005162:	4b41      	ldr	r3, [pc, #260]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	015b      	lsls	r3, r3, #5
 8005170:	493d      	ldr	r1, [pc, #244]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005172:	4313      	orrs	r3, r2
 8005174:	60cb      	str	r3, [r1, #12]
 8005176:	e019      	b.n	80051ac <HAL_RCC_OscConfig+0x1c4>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005180:	d30a      	bcc.n	8005198 <HAL_RCC_OscConfig+0x1b0>
 8005182:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	4935      	ldr	r1, [pc, #212]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005192:	4313      	orrs	r3, r2
 8005194:	60cb      	str	r3, [r1, #12]
 8005196:	e009      	b.n	80051ac <HAL_RCC_OscConfig+0x1c4>
 8005198:	4b33      	ldr	r3, [pc, #204]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	03db      	lsls	r3, r3, #15
 80051a6:	4930      	ldr	r1, [pc, #192]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 f93c 	bl	8006434 <RCC_SetFlashLatencyFromMSIRange>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f000 bde5 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80051c8:	f001 f8de 	bl	8006388 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <HAL_RCC_OscConfig+0x284>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd fccf 	bl	8002b74 <HAL_InitTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80051dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 808a 	beq.w	80052fa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80051e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051ea:	f000 bdd2 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d066      	beq.n	80052c4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80051f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005202:	f7fd fd41 	bl	8002c88 <HAL_GetTick>
 8005206:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005208:	e009      	b.n	800521e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800520a:	f7fd fd3d 	bl	8002c88 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d902      	bls.n	800521e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	f000 bdba 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800521e:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ef      	beq.n	800520a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800522a:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4a0e      	ldr	r2, [pc, #56]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005230:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005234:	6093      	str	r3, [r2, #8]
 8005236:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	4909      	ldr	r1, [pc, #36]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005244:	4313      	orrs	r3, r2
 8005246:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005250:	d30e      	bcc.n	8005270 <HAL_RCC_OscConfig+0x288>
 8005252:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f023 021f 	bic.w	r2, r3, #31
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4902      	ldr	r1, [pc, #8]	@ (8005268 <HAL_RCC_OscConfig+0x280>)
 8005260:	4313      	orrs	r3, r2
 8005262:	60cb      	str	r3, [r1, #12]
 8005264:	e04a      	b.n	80052fc <HAL_RCC_OscConfig+0x314>
 8005266:	bf00      	nop
 8005268:	46020c00 	.word	0x46020c00
 800526c:	20000004 	.word	0x20000004
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	da0a      	bge.n	800528e <HAL_RCC_OscConfig+0x2a6>
 8005278:	4b98      	ldr	r3, [pc, #608]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	015b      	lsls	r3, r3, #5
 8005286:	4995      	ldr	r1, [pc, #596]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	60cb      	str	r3, [r1, #12]
 800528c:	e036      	b.n	80052fc <HAL_RCC_OscConfig+0x314>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d30a      	bcc.n	80052ae <HAL_RCC_OscConfig+0x2c6>
 8005298:	4b90      	ldr	r3, [pc, #576]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	029b      	lsls	r3, r3, #10
 80052a6:	498d      	ldr	r1, [pc, #564]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60cb      	str	r3, [r1, #12]
 80052ac:	e026      	b.n	80052fc <HAL_RCC_OscConfig+0x314>
 80052ae:	4b8b      	ldr	r3, [pc, #556]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	03db      	lsls	r3, r3, #15
 80052bc:	4987      	ldr	r1, [pc, #540]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]
 80052c2:	e01b      	b.n	80052fc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80052c4:	4b85      	ldr	r3, [pc, #532]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a84      	ldr	r2, [pc, #528]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052d0:	f7fd fcda 	bl	8002c88 <HAL_GetTick>
 80052d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80052d6:	e009      	b.n	80052ec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052d8:	f7fd fcd6 	bl	8002c88 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	f000 bd53 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80052ec:	4b7b      	ldr	r3, [pc, #492]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ef      	bne.n	80052d8 <HAL_RCC_OscConfig+0x2f0>
 80052f8:	e000      	b.n	80052fc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 808b 	beq.w	8005420 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2b08      	cmp	r3, #8
 800530e:	d005      	beq.n	800531c <HAL_RCC_OscConfig+0x334>
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d109      	bne.n	800532a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	2b03      	cmp	r3, #3
 800531a:	d106      	bne.n	800532a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d17d      	bne.n	8005420 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	f000 bd34 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x35a>
 8005334:	4b69      	ldr	r3, [pc, #420]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a68      	ldr	r2, [pc, #416]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800533a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e041      	b.n	80053c6 <HAL_RCC_OscConfig+0x3de>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800534a:	d112      	bne.n	8005372 <HAL_RCC_OscConfig+0x38a>
 800534c:	4b63      	ldr	r3, [pc, #396]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a62      	ldr	r2, [pc, #392]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005352:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b60      	ldr	r3, [pc, #384]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a5f      	ldr	r2, [pc, #380]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800535e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b5d      	ldr	r3, [pc, #372]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5c      	ldr	r2, [pc, #368]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800536a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	e029      	b.n	80053c6 <HAL_RCC_OscConfig+0x3de>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800537a:	d112      	bne.n	80053a2 <HAL_RCC_OscConfig+0x3ba>
 800537c:	4b57      	ldr	r3, [pc, #348]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a56      	ldr	r2, [pc, #344]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005382:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	4b54      	ldr	r3, [pc, #336]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a53      	ldr	r2, [pc, #332]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b51      	ldr	r3, [pc, #324]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a50      	ldr	r2, [pc, #320]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e011      	b.n	80053c6 <HAL_RCC_OscConfig+0x3de>
 80053a2:	4b4e      	ldr	r3, [pc, #312]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4d      	ldr	r2, [pc, #308]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b4b      	ldr	r3, [pc, #300]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a4a      	ldr	r2, [pc, #296]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b48      	ldr	r3, [pc, #288]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a47      	ldr	r2, [pc, #284]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80053c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d014      	beq.n	80053f8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80053ce:	f7fd fc5b 	bl	8002c88 <HAL_GetTick>
 80053d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d4:	e009      	b.n	80053ea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d6:	f7fd fc57 	bl	8002c88 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	@ 0x64
 80053e2:	d902      	bls.n	80053ea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	f000 bcd4 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ea:	4b3c      	ldr	r3, [pc, #240]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ef      	beq.n	80053d6 <HAL_RCC_OscConfig+0x3ee>
 80053f6:	e013      	b.n	8005420 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80053f8:	f7fd fc46 	bl	8002c88 <HAL_GetTick>
 80053fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053fe:	e009      	b.n	8005414 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005400:	f7fd fc42 	bl	8002c88 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	@ 0x64
 800540c:	d902      	bls.n	8005414 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	f000 bcbf 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005414:	4b31      	ldr	r3, [pc, #196]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ef      	bne.n	8005400 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05f      	beq.n	80054ec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	2b04      	cmp	r3, #4
 8005430:	d005      	beq.n	800543e <HAL_RCC_OscConfig+0x456>
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	2b0c      	cmp	r3, #12
 8005436:	d114      	bne.n	8005462 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543a:	2b02      	cmp	r3, #2
 800543c:	d111      	bne.n	8005462 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f000 bca3 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800544c:	4b23      	ldr	r3, [pc, #140]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	4920      	ldr	r1, [pc, #128]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005460:	e044      	b.n	80054ec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d024      	beq.n	80054b4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800546a:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005474:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005476:	f7fd fc07 	bl	8002c88 <HAL_GetTick>
 800547a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800547c:	e009      	b.n	8005492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547e:	f7fd fc03 	bl	8002c88 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d902      	bls.n	8005492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	f000 bc80 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005492:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800549e:	4b0f      	ldr	r3, [pc, #60]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	490b      	ldr	r1, [pc, #44]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	610b      	str	r3, [r1, #16]
 80054b2:	e01b      	b.n	80054ec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80054b4:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a08      	ldr	r2, [pc, #32]	@ (80054dc <HAL_RCC_OscConfig+0x4f4>)
 80054ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054c0:	f7fd fbe2 	bl	8002c88 <HAL_GetTick>
 80054c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054c6:	e00b      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c8:	f7fd fbde 	bl	8002c88 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d904      	bls.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	f000 bc5b 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
 80054dc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e0:	4baf      	ldr	r3, [pc, #700]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ed      	bne.n	80054c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80c8 	beq.w	800568a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005500:	4ba7      	ldr	r3, [pc, #668]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d111      	bne.n	8005532 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550e:	4ba4      	ldr	r3, [pc, #656]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005510:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005514:	4aa2      	ldr	r2, [pc, #648]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800551e:	4ba0      	ldr	r3, [pc, #640]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005532:	4b9c      	ldr	r3, [pc, #624]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 8005534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d119      	bne.n	8005572 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800553e:	4b99      	ldr	r3, [pc, #612]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005542:	4a98      	ldr	r2, [pc, #608]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554a:	f7fd fb9d 	bl	8002c88 <HAL_GetTick>
 800554e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005550:	e009      	b.n	8005566 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fd fb99 	bl	8002c88 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d902      	bls.n	8005566 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	f000 bc16 	b.w	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005566:	4b8f      	ldr	r3, [pc, #572]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ef      	beq.n	8005552 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d05f      	beq.n	800563a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800557a:	4b89      	ldr	r3, [pc, #548]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800557c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005580:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558c:	429a      	cmp	r2, r3
 800558e:	d037      	beq.n	8005600 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e3f4      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80055b2:	4b7b      	ldr	r3, [pc, #492]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80055b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055b8:	4a79      	ldr	r2, [pc, #484]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80055ba:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80055be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80055c2:	f7fd fb61 	bl	8002c88 <HAL_GetTick>
 80055c6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ca:	f7fd fb5d 	bl	8002c88 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e3da      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80055dc:	4b70      	ldr	r3, [pc, #448]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80055de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ef      	bne.n	80055ca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80055ea:	4b6d      	ldr	r3, [pc, #436]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80055ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4969      	ldr	r1, [pc, #420]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005600:	4b67      	ldr	r3, [pc, #412]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005606:	4a66      	ldr	r2, [pc, #408]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005608:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800560c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005610:	f7fd fb3a 	bl	8002c88 <HAL_GetTick>
 8005614:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005618:	f7fd fb36 	bl	8002c88 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b05      	cmp	r3, #5
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e3b3      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800562a:	4b5d      	ldr	r3, [pc, #372]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ef      	beq.n	8005618 <HAL_RCC_OscConfig+0x630>
 8005638:	e01b      	b.n	8005672 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800563a:	4b59      	ldr	r3, [pc, #356]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800563c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005640:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005642:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800564a:	f7fd fb1d 	bl	8002c88 <HAL_GetTick>
 800564e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005652:	f7fd fb19 	bl	8002c88 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b05      	cmp	r3, #5
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e396      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005664:	4b4e      	ldr	r3, [pc, #312]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800566a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ef      	bne.n	8005652 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005672:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567a:	4b49      	ldr	r3, [pc, #292]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800567c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005680:	4a47      	ldr	r2, [pc, #284]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005682:	f023 0304 	bic.w	r3, r3, #4
 8005686:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8111 	beq.w	80058ba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569e:	4b40      	ldr	r3, [pc, #256]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80056a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d111      	bne.n	80056d0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b3c      	ldr	r3, [pc, #240]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80056ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056b2:	4a3b      	ldr	r2, [pc, #236]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80056bc:	4b38      	ldr	r3, [pc, #224]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 80056be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056d0:	4b34      	ldr	r3, [pc, #208]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d118      	bne.n	800570e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80056dc:	4b31      	ldr	r3, [pc, #196]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	4a30      	ldr	r2, [pc, #192]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e8:	f7fd face 	bl	8002c88 <HAL_GetTick>
 80056ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f0:	f7fd faca 	bl	8002c88 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e347      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005702:	4b28      	ldr	r3, [pc, #160]	@ (80057a4 <HAL_RCC_OscConfig+0x7bc>)
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01f      	beq.n	800575a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d010      	beq.n	8005748 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005726:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800572c:	4a1c      	ldr	r2, [pc, #112]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005736:	4b1a      	ldr	r3, [pc, #104]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800573c:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005746:	e018      	b.n	800577a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005748:	4b15      	ldr	r3, [pc, #84]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800574a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800574e:	4a14      	ldr	r2, [pc, #80]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005758:	e00f      	b.n	800577a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800575a:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800575c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005760:	4a0f      	ldr	r2, [pc, #60]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800576a:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 800576c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005770:	4a0b      	ldr	r2, [pc, #44]	@ (80057a0 <HAL_RCC_OscConfig+0x7b8>)
 8005772:	f023 0304 	bic.w	r3, r3, #4
 8005776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d057      	beq.n	8005832 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005782:	f7fd fa81 	bl	8002c88 <HAL_GetTick>
 8005786:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005788:	e00e      	b.n	80057a8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fd fa7d 	bl	8002c88 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d905      	bls.n	80057a8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e2f8      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
 80057a0:	46020c00 	.word	0x46020c00
 80057a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a8:	4b9c      	ldr	r3, [pc, #624]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80057aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0e9      	beq.n	800578a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057c2:	4b96      	ldr	r3, [pc, #600]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80057c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057c8:	4a94      	ldr	r2, [pc, #592]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80057ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fd fa58 	bl	8002c88 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e2d3      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80057ea:	4b8c      	ldr	r3, [pc, #560]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80057ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ed      	beq.n	80057d4 <HAL_RCC_OscConfig+0x7ec>
 80057f8:	e053      	b.n	80058a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057fa:	4b88      	ldr	r3, [pc, #544]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80057fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005800:	4a86      	ldr	r2, [pc, #536]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800580a:	e00a      	b.n	8005822 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f7fd fa3c 	bl	8002c88 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e2b7      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005822:	4b7e      	ldr	r3, [pc, #504]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1ed      	bne.n	800580c <HAL_RCC_OscConfig+0x824>
 8005830:	e037      	b.n	80058a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005832:	f7fd fa29 	bl	8002c88 <HAL_GetTick>
 8005836:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005838:	e00a      	b.n	8005850 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fd fa25 	bl	8002c88 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e2a0      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005850:	4b72      	ldr	r3, [pc, #456]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ed      	bne.n	800583a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800585e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01a      	beq.n	80058a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800586c:	4b6b      	ldr	r3, [pc, #428]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 800586e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005872:	4a6a      	ldr	r2, [pc, #424]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005878:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587e:	f7fd fa03 	bl	8002c88 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e27e      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005894:	4b61      	ldr	r3, [pc, #388]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800589a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1ed      	bne.n	800587e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058aa:	4b5c      	ldr	r3, [pc, #368]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80058ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b0:	4a5a      	ldr	r2, [pc, #360]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d036      	beq.n	8005934 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d019      	beq.n	8005902 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80058ce:	4b53      	ldr	r3, [pc, #332]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a52      	ldr	r2, [pc, #328]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80058d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058da:	f7fd f9d5 	bl	8002c88 <HAL_GetTick>
 80058de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058e2:	f7fd f9d1 	bl	8002c88 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e24e      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80058f4:	4b49      	ldr	r3, [pc, #292]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x8fa>
 8005900:	e018      	b.n	8005934 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005902:	4b46      	ldr	r3, [pc, #280]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a45      	ldr	r2, [pc, #276]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800590c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800590e:	f7fd f9bb 	bl	8002c88 <HAL_GetTick>
 8005912:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005916:	f7fd f9b7 	bl	8002c88 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e234      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005928:	4b3c      	ldr	r3, [pc, #240]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	d036      	beq.n	80059ae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005948:	4b34      	ldr	r3, [pc, #208]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a33      	ldr	r2, [pc, #204]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 800594e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005952:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005954:	f7fd f998 	bl	8002c88 <HAL_GetTick>
 8005958:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800595c:	f7fd f994 	bl	8002c88 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e211      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800596e:	4b2b      	ldr	r3, [pc, #172]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0x974>
 800597a:	e018      	b.n	80059ae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800597c:	4b27      	ldr	r3, [pc, #156]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a26      	ldr	r2, [pc, #152]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005986:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005988:	f7fd f97e 	bl	8002c88 <HAL_GetTick>
 800598c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005990:	f7fd f97a 	bl	8002c88 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e1f7      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80059a2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d07f      	beq.n	8005aba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d062      	beq.n	8005a88 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80059c2:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059cc:	6093      	str	r3, [r2, #8]
 80059ce:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	4910      	ldr	r1, [pc, #64]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80059e8:	d309      	bcc.n	80059fe <HAL_RCC_OscConfig+0xa16>
 80059ea:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 021f 	bic.w	r2, r3, #31
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	4909      	ldr	r1, [pc, #36]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60cb      	str	r3, [r1, #12]
 80059fc:	e02a      	b.n	8005a54 <HAL_RCC_OscConfig+0xa6c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da0c      	bge.n	8005a20 <HAL_RCC_OscConfig+0xa38>
 8005a06:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	015b      	lsls	r3, r3, #5
 8005a14:	4901      	ldr	r1, [pc, #4]	@ (8005a1c <HAL_RCC_OscConfig+0xa34>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60cb      	str	r3, [r1, #12]
 8005a1a:	e01b      	b.n	8005a54 <HAL_RCC_OscConfig+0xa6c>
 8005a1c:	46020c00 	.word	0x46020c00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a28:	d30a      	bcc.n	8005a40 <HAL_RCC_OscConfig+0xa58>
 8005a2a:	4ba1      	ldr	r3, [pc, #644]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	499d      	ldr	r1, [pc, #628]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]
 8005a3e:	e009      	b.n	8005a54 <HAL_RCC_OscConfig+0xa6c>
 8005a40:	4b9b      	ldr	r3, [pc, #620]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	03db      	lsls	r3, r3, #15
 8005a4e:	4998      	ldr	r1, [pc, #608]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005a54:	4b96      	ldr	r3, [pc, #600]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a95      	ldr	r2, [pc, #596]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a5a:	f043 0310 	orr.w	r3, r3, #16
 8005a5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a60:	f7fd f912 	bl	8002c88 <HAL_GetTick>
 8005a64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005a68:	f7fd f90e 	bl	8002c88 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e18b      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0xa80>
 8005a86:	e018      	b.n	8005aba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005a88:	4b89      	ldr	r3, [pc, #548]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a88      	ldr	r2, [pc, #544]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a94:	f7fd f8f8 	bl	8002c88 <HAL_GetTick>
 8005a98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005a9c:	f7fd f8f4 	bl	8002c88 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e171      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005aae:	4b80      	ldr	r3, [pc, #512]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8166 	beq.w	8005d90 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aca:	4b79      	ldr	r3, [pc, #484]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f003 030c 	and.w	r3, r3, #12
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	f000 80f2 	beq.w	8005cbc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	f040 80c5 	bne.w	8005c6c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005ae2:	4b73      	ldr	r3, [pc, #460]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a72      	ldr	r2, [pc, #456]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005ae8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005aee:	f7fd f8cb 	bl	8002c88 <HAL_GetTick>
 8005af2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af6:	f7fd f8c7 	bl	8002c88 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e144      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b08:	4b69      	ldr	r3, [pc, #420]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f0      	bne.n	8005af6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b14:	4b66      	ldr	r3, [pc, #408]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d111      	bne.n	8005b46 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005b22:	4b63      	ldr	r3, [pc, #396]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b28:	4a61      	ldr	r2, [pc, #388]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005b32:	4b5f      	ldr	r3, [pc, #380]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005b46:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb4 <HAL_RCC_OscConfig+0xccc>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b52:	d102      	bne.n	8005b5a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b5a:	4b56      	ldr	r3, [pc, #344]	@ (8005cb4 <HAL_RCC_OscConfig+0xccc>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a55      	ldr	r2, [pc, #340]	@ (8005cb4 <HAL_RCC_OscConfig+0xccc>)
 8005b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b64:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005b66:	4b52      	ldr	r3, [pc, #328]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b7a:	3a01      	subs	r2, #1
 8005b7c:	0212      	lsls	r2, r2, #8
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b84:	430a      	orrs	r2, r1
 8005b86:	494a      	ldr	r1, [pc, #296]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b8c:	4b48      	ldr	r3, [pc, #288]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b90:	4b49      	ldr	r3, [pc, #292]	@ (8005cb8 <HAL_RCC_OscConfig+0xcd0>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b98:	3a01      	subs	r2, #1
 8005b9a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005ba2:	3a01      	subs	r2, #1
 8005ba4:	0252      	lsls	r2, r2, #9
 8005ba6:	b292      	uxth	r2, r2
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	0412      	lsls	r2, r2, #16
 8005bb2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005bb6:	4311      	orrs	r1, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	0612      	lsls	r2, r2, #24
 8005bc0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	493a      	ldr	r1, [pc, #232]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005bcc:	4b38      	ldr	r3, [pc, #224]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	4a37      	ldr	r2, [pc, #220]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005bd2:	f023 0310 	bic.w	r3, r3, #16
 8005bd6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	4a34      	ldr	r2, [pc, #208]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005be2:	4b33      	ldr	r3, [pc, #204]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	4a32      	ldr	r2, [pc, #200]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005be8:	f043 0310 	orr.w	r3, r3, #16
 8005bec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005bee:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f023 020c 	bic.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfa:	492d      	ldr	r1, [pc, #180]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005c00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d105      	bne.n	8005c14 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005c08:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb4 <HAL_RCC_OscConfig+0xccc>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a29      	ldr	r2, [pc, #164]	@ (8005cb4 <HAL_RCC_OscConfig+0xccc>)
 8005c0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c12:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005c14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005c1c:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c22:	4a23      	ldr	r2, [pc, #140]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c24:	f023 0304 	bic.w	r3, r3, #4
 8005c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005c2c:	4b20      	ldr	r3, [pc, #128]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c38:	f7fd f826 	bl	8002c88 <HAL_GetTick>
 8005c3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c40:	f7fd f822 	bl	8002c88 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e09f      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c52:	4b17      	ldr	r3, [pc, #92]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c5e:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	4a13      	ldr	r2, [pc, #76]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c68:	6293      	str	r3, [r2, #40]	@ 0x28
 8005c6a:	e091      	b.n	8005d90 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005c6c:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0f      	ldr	r2, [pc, #60]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005c78:	f7fd f806 	bl	8002c88 <HAL_GetTick>
 8005c7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c80:	f7fd f802 	bl	8002c88 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e07f      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005c92:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005c9e:	4b04      	ldr	r3, [pc, #16]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	4a03      	ldr	r2, [pc, #12]	@ (8005cb0 <HAL_RCC_OscConfig+0xcc8>)
 8005ca4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005ca8:	f023 0303 	bic.w	r3, r3, #3
 8005cac:	6293      	str	r3, [r2, #40]	@ 0x28
 8005cae:	e06f      	b.n	8005d90 <HAL_RCC_OscConfig+0xda8>
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	46020800 	.word	0x46020800
 8005cb8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005cbc:	4b37      	ldr	r3, [pc, #220]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005cc2:	4b36      	ldr	r3, [pc, #216]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d039      	beq.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0203 	and.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d132      	bne.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	0a1b      	lsrs	r3, r3, #8
 8005ce2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d129      	bne.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d122      	bne.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d08:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d11a      	bne.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	0a5b      	lsrs	r3, r3, #9
 8005d12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d111      	bne.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d108      	bne.n	8005d44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	0e1b      	lsrs	r3, r3, #24
 8005d36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e024      	b.n	8005d92 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d48:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d01a      	beq.n	8005d90 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005d5a:	4b10      	ldr	r3, [pc, #64]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d66:	f7fc ff8f 	bl	8002c88 <HAL_GetTick>
 8005d6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005d6c:	bf00      	nop
 8005d6e:	f7fc ff8b 	bl	8002c88 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d0f9      	beq.n	8005d6e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7e:	4a07      	ldr	r2, [pc, #28]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005d84:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	4a04      	ldr	r2, [pc, #16]	@ (8005d9c <HAL_RCC_OscConfig+0xdb4>)
 8005d8a:	f043 0310 	orr.w	r3, r3, #16
 8005d8e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3738      	adds	r7, #56	@ 0x38
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	46020c00 	.word	0x46020c00

08005da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e1d9      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005db4:	4b9b      	ldr	r3, [pc, #620]	@ (8006024 <HAL_RCC_ClockConfig+0x284>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d910      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc2:	4b98      	ldr	r3, [pc, #608]	@ (8006024 <HAL_RCC_ClockConfig+0x284>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f023 020f 	bic.w	r2, r3, #15
 8005dca:	4996      	ldr	r1, [pc, #600]	@ (8006024 <HAL_RCC_ClockConfig+0x284>)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b94      	ldr	r3, [pc, #592]	@ (8006024 <HAL_RCC_ClockConfig+0x284>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e1c1      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d010      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	4b8c      	ldr	r3, [pc, #560]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d908      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005e00:	4b89      	ldr	r3, [pc, #548]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	4986      	ldr	r1, [pc, #536]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	4b81      	ldr	r3, [pc, #516]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d909      	bls.n	8005e44 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005e30:	4b7d      	ldr	r3, [pc, #500]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	497a      	ldr	r1, [pc, #488]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d010      	beq.n	8005e72 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	4b74      	ldr	r3, [pc, #464]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d908      	bls.n	8005e72 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005e60:	4b71      	ldr	r3, [pc, #452]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	496e      	ldr	r1, [pc, #440]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	4b69      	ldr	r3, [pc, #420]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d908      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005e8e:	4b66      	ldr	r3, [pc, #408]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 020f 	bic.w	r2, r3, #15
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4963      	ldr	r1, [pc, #396]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80d2 	beq.w	8006052 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d143      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eba:	4b5b      	ldr	r3, [pc, #364]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d110      	bne.n	8005eea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005ec8:	4b57      	ldr	r3, [pc, #348]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ece:	4a56      	ldr	r2, [pc, #344]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005ed0:	f043 0304 	orr.w	r3, r3, #4
 8005ed4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005ed8:	4b53      	ldr	r3, [pc, #332]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005eea:	f7fc fecd 	bl	8002c88 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005ef0:	4b4e      	ldr	r3, [pc, #312]	@ (800602c <HAL_RCC_ClockConfig+0x28c>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00f      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005efe:	f7fc fec3 	bl	8002c88 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e12b      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005f10:	4b46      	ldr	r3, [pc, #280]	@ (800602c <HAL_RCC_ClockConfig+0x28c>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0f0      	beq.n	8005efe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d107      	bne.n	8005f32 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005f22:	4b41      	ldr	r3, [pc, #260]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f28:	4a3f      	ldr	r2, [pc, #252]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f2a:	f023 0304 	bic.w	r3, r3, #4
 8005f2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f32:	4b3d      	ldr	r3, [pc, #244]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d121      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e112      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d107      	bne.n	8005f5a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f4a:	4b37      	ldr	r3, [pc, #220]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d115      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e106      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005f62:	4b31      	ldr	r3, [pc, #196]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e0fa      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f72:	4b2d      	ldr	r3, [pc, #180]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e0f2      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005f82:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4926      	ldr	r1, [pc, #152]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005f94:	f7fc fe78 	bl	8002c88 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d112      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fa2:	e00a      	b.n	8005fba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa4:	f7fc fe70 	bl	8002c88 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e0d6      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fba:	4b1b      	ldr	r3, [pc, #108]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	d1ee      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x204>
 8005fc6:	e044      	b.n	8006052 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d112      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd2:	f7fc fe59 	bl	8002c88 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0bf      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d1ee      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0x232>
 8005ff4:	e02d      	b.n	8006052 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d123      	bne.n	8006046 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fc fe42 	bl	8002c88 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e0a8      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006016:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <HAL_RCC_ClockConfig+0x288>)
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1ee      	bne.n	8006000 <HAL_RCC_ClockConfig+0x260>
 8006022:	e016      	b.n	8006052 <HAL_RCC_ClockConfig+0x2b2>
 8006024:	40022000 	.word	0x40022000
 8006028:	46020c00 	.word	0x46020c00
 800602c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006030:	f7fc fe2a 	bl	8002c88 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e090      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006046:	4b4a      	ldr	r3, [pc, #296]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b04      	cmp	r3, #4
 8006050:	d1ee      	bne.n	8006030 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d010      	beq.n	8006080 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	429a      	cmp	r2, r3
 800606c:	d208      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800606e:	4b40      	ldr	r3, [pc, #256]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 020f 	bic.w	r2, r3, #15
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	493d      	ldr	r1, [pc, #244]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 800607c:	4313      	orrs	r3, r2
 800607e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006080:	4b3c      	ldr	r3, [pc, #240]	@ (8006174 <HAL_RCC_ClockConfig+0x3d4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d210      	bcs.n	80060b0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608e:	4b39      	ldr	r3, [pc, #228]	@ (8006174 <HAL_RCC_ClockConfig+0x3d4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 020f 	bic.w	r2, r3, #15
 8006096:	4937      	ldr	r1, [pc, #220]	@ (8006174 <HAL_RCC_ClockConfig+0x3d4>)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	4313      	orrs	r3, r2
 800609c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800609e:	4b35      	ldr	r3, [pc, #212]	@ (8006174 <HAL_RCC_ClockConfig+0x3d4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d001      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e05b      	b.n	8006168 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d010      	beq.n	80060de <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d208      	bcs.n	80060de <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80060cc:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4925      	ldr	r1, [pc, #148]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d012      	beq.n	8006110 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d209      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80060fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	4919      	ldr	r1, [pc, #100]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 800610c:	4313      	orrs	r3, r2
 800610e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b00      	cmp	r3, #0
 800611a:	d010      	beq.n	800613e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	4b13      	ldr	r3, [pc, #76]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006128:	429a      	cmp	r2, r3
 800612a:	d208      	bcs.n	800613e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800612c:	4b10      	ldr	r3, [pc, #64]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	490d      	ldr	r1, [pc, #52]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 800613a:	4313      	orrs	r3, r2
 800613c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800613e:	f000 f821 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <HAL_RCC_ClockConfig+0x3d0>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	490a      	ldr	r1, [pc, #40]	@ (8006178 <HAL_RCC_ClockConfig+0x3d8>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
 8006154:	4a09      	ldr	r2, [pc, #36]	@ (800617c <HAL_RCC_ClockConfig+0x3dc>)
 8006156:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006158:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <HAL_RCC_ClockConfig+0x3e0>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f7fc fd09 	bl	8002b74 <HAL_InitTick>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]

  return status;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	46020c00 	.word	0x46020c00
 8006174:	40022000 	.word	0x40022000
 8006178:	0800ec08 	.word	0x0800ec08
 800617c:	20000000 	.word	0x20000000
 8006180:	20000004 	.word	0x20000004

08006184 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006184:	b480      	push	{r7}
 8006186:	b08b      	sub	sp, #44	@ 0x2c
 8006188:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006192:	4b78      	ldr	r3, [pc, #480]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800619c:	4b75      	ldr	r3, [pc, #468]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x34>
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b0c      	cmp	r3, #12
 80061b0:	d121      	bne.n	80061f6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d11e      	bne.n	80061f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80061b8:	4b6e      	ldr	r3, [pc, #440]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d107      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80061c4:	4b6b      	ldr	r3, [pc, #428]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061ca:	0b1b      	lsrs	r3, r3, #12
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d2:	e005      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80061d4:	4b67      	ldr	r3, [pc, #412]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	0f1b      	lsrs	r3, r3, #28
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061e0:	4a65      	ldr	r2, [pc, #404]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d110      	bne.n	8006212 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061f4:	e00d      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061f6:	4b5f      	ldr	r3, [pc, #380]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d102      	bne.n	8006208 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006202:	4b5e      	ldr	r3, [pc, #376]	@ (800637c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	e004      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2b08      	cmp	r3, #8
 800620c:	d101      	bne.n	8006212 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800620e:	4b5b      	ldr	r3, [pc, #364]	@ (800637c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006210:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	f040 80a5 	bne.w	8006364 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800621a:	4b56      	ldr	r3, [pc, #344]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006224:	4b53      	ldr	r3, [pc, #332]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006232:	4b50      	ldr	r3, [pc, #320]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800623e:	4b4d      	ldr	r3, [pc, #308]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	08db      	lsrs	r3, r3, #3
 8006244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	fb02 f303 	mul.w	r3, r2, r3
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006256:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d003      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0xe4>
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b03      	cmp	r3, #3
 8006264:	d022      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x128>
 8006266:	e043      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006380 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b3e      	ldr	r3, [pc, #248]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800627c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800628a:	ed97 6a01 	vldr	s12, [r7, #4]
 800628e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006384 <HAL_RCC_GetSysClockFreq+0x200>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800629a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062aa:	e046      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006380 <HAL_RCC_GetSysClockFreq+0x1fc>
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	4b2d      	ldr	r3, [pc, #180]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80062d2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006384 <HAL_RCC_GetSysClockFreq+0x200>
 80062d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80062de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ee:	e024      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006308:	4b1a      	ldr	r3, [pc, #104]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800630a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006318:	ed97 6a01 	vldr	s12, [r7, #4]
 800631c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006384 <HAL_RCC_GetSysClockFreq+0x200>
 8006320:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006324:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006334:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006338:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800633a:	4b0e      	ldr	r3, [pc, #56]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800633c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633e:	0e1b      	lsrs	r3, r3, #24
 8006340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006344:	3301      	adds	r3, #1
 8006346:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006352:	edd7 6a07 	vldr	s13, [r7, #28]
 8006356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800635e:	ee17 3a90 	vmov	r3, s15
 8006362:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006364:	6a3b      	ldr	r3, [r7, #32]
}
 8006366:	4618      	mov	r0, r3
 8006368:	372c      	adds	r7, #44	@ 0x2c
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	46020c00 	.word	0x46020c00
 8006378:	0800ec20 	.word	0x0800ec20
 800637c:	00f42400 	.word	0x00f42400
 8006380:	4b742400 	.word	0x4b742400
 8006384:	46000000 	.word	0x46000000

08006388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800638c:	f7ff fefa 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8006390:	4602      	mov	r2, r0
 8006392:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <HAL_RCC_GetHCLKFreq+0x28>)
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	4906      	ldr	r1, [pc, #24]	@ (80063b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800639c:	5ccb      	ldrb	r3, [r1, r3]
 800639e:	fa22 f303 	lsr.w	r3, r2, r3
 80063a2:	4a05      	ldr	r2, [pc, #20]	@ (80063b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80063a4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80063a6:	4b04      	ldr	r3, [pc, #16]	@ (80063b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80063a8:	681b      	ldr	r3, [r3, #0]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	46020c00 	.word	0x46020c00
 80063b4:	0800ec08 	.word	0x0800ec08
 80063b8:	20000000 	.word	0x20000000

080063bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80063c0:	f7ff ffe2 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 80063c4:	4602      	mov	r2, r0
 80063c6:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4903      	ldr	r1, [pc, #12]	@ (80063e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063d2:	5ccb      	ldrb	r3, [r1, r3]
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	46020c00 	.word	0x46020c00
 80063e0:	0800ec18 	.word	0x0800ec18

080063e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80063e8:	f7ff ffce 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b05      	ldr	r3, [pc, #20]	@ (8006404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	0a1b      	lsrs	r3, r3, #8
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4903      	ldr	r1, [pc, #12]	@ (8006408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	46020c00 	.word	0x46020c00
 8006408:	0800ec18 	.word	0x0800ec18

0800640c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006410:	f7ff ffba 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	@ (800642c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4903      	ldr	r1, [pc, #12]	@ (8006430 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	46020c00 	.word	0x46020c00
 8006430:	0800ec18 	.word	0x0800ec18

08006434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800643c:	4b3e      	ldr	r3, [pc, #248]	@ (8006538 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800643e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800644a:	f7fe fd4f 	bl	8004eec <HAL_PWREx_GetVoltageRange>
 800644e:	6178      	str	r0, [r7, #20]
 8006450:	e019      	b.n	8006486 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006452:	4b39      	ldr	r3, [pc, #228]	@ (8006538 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006458:	4a37      	ldr	r2, [pc, #220]	@ (8006538 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800645a:	f043 0304 	orr.w	r3, r3, #4
 800645e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006462:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006470:	f7fe fd3c 	bl	8004eec <HAL_PWREx_GetVoltageRange>
 8006474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006476:	4b30      	ldr	r3, [pc, #192]	@ (8006538 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800647c:	4a2e      	ldr	r2, [pc, #184]	@ (8006538 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800647e:	f023 0304 	bic.w	r3, r3, #4
 8006482:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800648c:	d003      	beq.n	8006496 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006494:	d109      	bne.n	80064aa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800649c:	d202      	bcs.n	80064a4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800649e:	2301      	movs	r3, #1
 80064a0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80064a2:	e033      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80064a8:	e030      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064b0:	d208      	bcs.n	80064c4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b8:	d102      	bne.n	80064c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80064ba:	2303      	movs	r3, #3
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	e025      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e035      	b.n	8006530 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ca:	d90f      	bls.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064d8:	d902      	bls.n	80064e0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80064da:	2300      	movs	r3, #0
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	e015      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80064e0:	2301      	movs	r3, #1
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	e012      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e00f      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064f2:	d109      	bne.n	8006508 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fa:	d102      	bne.n	8006502 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80064fc:	2301      	movs	r3, #1
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	e004      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006502:	2302      	movs	r3, #2
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e001      	b.n	800650c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006508:	2301      	movs	r3, #1
 800650a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 020f 	bic.w	r2, r3, #15
 8006514:	4909      	ldr	r1, [pc, #36]	@ (800653c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800651c:	4b07      	ldr	r3, [pc, #28]	@ (800653c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	429a      	cmp	r2, r3
 8006528:	d001      	beq.n	800652e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	46020c00 	.word	0x46020c00
 800653c:	40022000 	.word	0x40022000

08006540 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006544:	b0ba      	sub	sp, #232	@ 0xe8
 8006546:	af00      	add	r7, sp, #0
 8006548:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800654c:	2300      	movs	r3, #0
 800654e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006552:	2300      	movs	r3, #0
 8006554:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f002 0401 	and.w	r4, r2, #1
 8006564:	2500      	movs	r5, #0
 8006566:	ea54 0305 	orrs.w	r3, r4, r5
 800656a:	d00b      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800656c:	4bcb      	ldr	r3, [pc, #812]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800656e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006572:	f023 0103 	bic.w	r1, r3, #3
 8006576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800657a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657c:	4ac7      	ldr	r2, [pc, #796]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657e:	430b      	orrs	r3, r1
 8006580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 0802 	and.w	r8, r2, #2
 8006590:	f04f 0900 	mov.w	r9, #0
 8006594:	ea58 0309 	orrs.w	r3, r8, r9
 8006598:	d00b      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800659a:	4bc0      	ldr	r3, [pc, #768]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800659c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a0:	f023 010c 	bic.w	r1, r3, #12
 80065a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	4abc      	ldr	r2, [pc, #752]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f002 0a04 	and.w	sl, r2, #4
 80065be:	f04f 0b00 	mov.w	fp, #0
 80065c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80065c6:	d00b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80065c8:	4bb4      	ldr	r3, [pc, #720]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ce:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80065d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d8:	4ab0      	ldr	r2, [pc, #704]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f002 0308 	and.w	r3, r2, #8
 80065ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006600:	4ba6      	ldr	r3, [pc, #664]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006606:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800660a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	4aa2      	ldr	r2, [pc, #648]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0310 	and.w	r3, r2, #16
 8006624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800662e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d00b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006638:	4b98      	ldr	r3, [pc, #608]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006648:	4a94      	ldr	r2, [pc, #592]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f002 0320 	and.w	r3, r2, #32
 800665c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006660:	2300      	movs	r3, #0
 8006662:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006666:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800666a:	460b      	mov	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	d00b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006670:	4b8a      	ldr	r3, [pc, #552]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006676:	f023 0107 	bic.w	r1, r3, #7
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800667e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006680:	4a86      	ldr	r2, [pc, #536]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800669e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80066a8:	4b7c      	ldr	r3, [pc, #496]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ae:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80066b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066b8:	4a78      	ldr	r2, [pc, #480]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066d0:	2300      	movs	r3, #0
 80066d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066da:	460b      	mov	r3, r1
 80066dc:	4313      	orrs	r3, r2
 80066de:	d00b      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80066e0:	4b6e      	ldr	r3, [pc, #440]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066f0:	4a6a      	ldr	r2, [pc, #424]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006704:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006708:	2300      	movs	r3, #0
 800670a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800670e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006712:	460b      	mov	r3, r1
 8006714:	4313      	orrs	r3, r2
 8006716:	d00b      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006718:	4b60      	ldr	r3, [pc, #384]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800671a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800671e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	4a5c      	ldr	r2, [pc, #368]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800672a:	430b      	orrs	r3, r1
 800672c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006746:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d00b      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006750:	4b52      	ldr	r3, [pc, #328]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006756:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800675a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800675e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006760:	4a4e      	ldr	r2, [pc, #312]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006762:	430b      	orrs	r3, r1
 8006764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006778:	2300      	movs	r3, #0
 800677a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800677e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d00b      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006788:	4b44      	ldr	r3, [pc, #272]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800678a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800678e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006798:	4a40      	ldr	r2, [pc, #256]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800679a:	430b      	orrs	r3, r1
 800679c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80067ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d00b      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80067c0:	4b36      	ldr	r3, [pc, #216]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067c6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80067ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067d0:	4a32      	ldr	r2, [pc, #200]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067d2:	430b      	orrs	r3, r1
 80067d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80067d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80067e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067f2:	460b      	mov	r3, r1
 80067f4:	4313      	orrs	r3, r2
 80067f6:	d00c      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80067f8:	4b28      	ldr	r3, [pc, #160]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680a:	4a24      	ldr	r2, [pc, #144]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800680c:	430b      	orrs	r3, r1
 800680e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800681e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006820:	2300      	movs	r3, #0
 8006822:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006824:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006828:	460b      	mov	r3, r1
 800682a:	4313      	orrs	r3, r2
 800682c:	d04f      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800682e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006836:	2b80      	cmp	r3, #128	@ 0x80
 8006838:	d02d      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800683a:	2b80      	cmp	r3, #128	@ 0x80
 800683c:	d827      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800683e:	2b60      	cmp	r3, #96	@ 0x60
 8006840:	d02e      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006842:	2b60      	cmp	r3, #96	@ 0x60
 8006844:	d823      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006846:	2b40      	cmp	r3, #64	@ 0x40
 8006848:	d006      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800684a:	2b40      	cmp	r3, #64	@ 0x40
 800684c:	d81f      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d011      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006856:	e01a      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006858:	4b10      	ldr	r3, [pc, #64]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685c:	4a0f      	ldr	r2, [pc, #60]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800685e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006862:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006864:	e01d      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800686a:	3308      	adds	r3, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f002 fa17 	bl	8008ca0 <RCCEx_PLL2_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006878:	e013      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800687a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800687e:	332c      	adds	r3, #44	@ 0x2c
 8006880:	4618      	mov	r0, r3
 8006882:	f002 faa5 	bl	8008dd0 <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800688c:	e009      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006894:	e005      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006896:	bf00      	nop
 8006898:	e003      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800689a:	bf00      	nop
 800689c:	46020c00 	.word	0x46020c00
        break;
 80068a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80068aa:	4bb6      	ldr	r3, [pc, #728]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068b0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80068b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068bc:	4ab1      	ldr	r2, [pc, #708]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068c4:	e003      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068ca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80068ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80068da:	673b      	str	r3, [r7, #112]	@ 0x70
 80068dc:	2300      	movs	r3, #0
 80068de:	677b      	str	r3, [r7, #116]	@ 0x74
 80068e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d053      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f6:	d033      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fc:	d82c      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80068fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006902:	d02f      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006908:	d826      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800690a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800690e:	d008      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006914:	d820      	bhi.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800691a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691e:	d011      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006920:	e01a      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006922:	4b98      	ldr	r3, [pc, #608]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	4a97      	ldr	r2, [pc, #604]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800692e:	e01a      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006934:	3308      	adds	r3, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f002 f9b2 	bl	8008ca0 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006942:	e010      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006948:	332c      	adds	r3, #44	@ 0x2c
 800694a:	4618      	mov	r0, r3
 800694c:	f002 fa40 	bl	8008dd0 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006956:	e006      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800695e:	e002      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006960:	bf00      	nop
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800696e:	4b85      	ldr	r3, [pc, #532]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006974:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800697c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006980:	4a80      	ldr	r2, [pc, #512]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006982:	430b      	orrs	r3, r1
 8006984:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800698e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800699e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069a0:	2300      	movs	r3, #0
 80069a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d046      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069ba:	d028      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80069c0:	d821      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80069c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c6:	d022      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069cc:	d81b      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80069ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069d2:	d01c      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069d8:	d815      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80069da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069de:	d008      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80069e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e4:	d80f      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d011      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ee:	d00e      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80069f0:	e009      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069f6:	3308      	adds	r3, #8
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 f951 	bl	8008ca0 <RCCEx_PLL2_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a04:	e004      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a0c:	e000      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10d      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006a18:	4b5a      	ldr	r3, [pc, #360]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a1e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a2a:	4a56      	ldr	r2, [pc, #344]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a38:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006a3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a4e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a52:	460b      	mov	r3, r1
 8006a54:	4313      	orrs	r3, r2
 8006a56:	d03f      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d81e      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006a64:	a201      	add	r2, pc, #4	@ (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006aab 	.word	0x08006aab
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006a8f 	.word	0x08006a8f
 8006a78:	08006aab 	.word	0x08006aab
 8006a7c:	08006aab 	.word	0x08006aab
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a80:	4b40      	ldr	r3, [pc, #256]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	4a3f      	ldr	r2, [pc, #252]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a8a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006a8c:	e00e      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a92:	332c      	adds	r3, #44	@ 0x2c
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 f99b 	bl	8008dd0 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006aa0:	e004      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006aaa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006aac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006ab4:	4b33      	ldr	r3, [pc, #204]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aba:	f023 0107 	bic.w	r1, r3, #7
 8006abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ace:	e003      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ad4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d04d      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b00:	d028      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006b02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b06:	d821      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b0c:	d024      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b12:	d81b      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b18:	d00e      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b1e:	d815      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b28:	d110      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b2a:	4b16      	ldr	r3, [pc, #88]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	4a15      	ldr	r2, [pc, #84]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b34:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006b36:	e012      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b3c:	332c      	adds	r3, #44	@ 0x2c
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f002 f946 	bl	8008dd0 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b4a:	e008      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b52:	e004      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006b54:	bf00      	nop
 8006b56:	e002      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006b58:	bf00      	nop
 8006b5a:	e000      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006b5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d110      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006b66:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b78:	4a02      	ldr	r2, [pc, #8]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b80:	e006      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006b82:	bf00      	nop
 8006b84:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ba2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f000 80b5 	beq.w	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bb4:	4b9d      	ldr	r3, [pc, #628]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d113      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	4b9a      	ldr	r3, [pc, #616]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bc8:	4a98      	ldr	r2, [pc, #608]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bca:	f043 0304 	orr.w	r3, r3, #4
 8006bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006bd2:	4b96      	ldr	r3, [pc, #600]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006bea:	4b91      	ldr	r3, [pc, #580]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	4a90      	ldr	r2, [pc, #576]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf6:	f7fc f847 	bl	8002c88 <HAL_GetTick>
 8006bfa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bfe:	e00b      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c00:	f7fc f842 	bl	8002c88 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d903      	bls.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c16:	e005      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c18:	4b85      	ldr	r3, [pc, #532]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0ed      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006c24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d165      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d023      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c52:	4b76      	ldr	r3, [pc, #472]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c60:	4b72      	ldr	r3, [pc, #456]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c66:	4a71      	ldr	r2, [pc, #452]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c70:	4b6e      	ldr	r3, [pc, #440]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c76:	4a6d      	ldr	r2, [pc, #436]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c80:	4a6a      	ldr	r2, [pc, #424]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d019      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c96:	f7fb fff7 	bl	8002c88 <HAL_GetTick>
 8006c9a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c9e:	e00d      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca0:	f7fb fff2 	bl	8002c88 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8006cba:	e006      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0ea      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006cca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006cd2:	4b56      	ldr	r3, [pc, #344]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ce0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ce4:	4a51      	ldr	r2, [pc, #324]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006cec:	e008      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cf2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cfc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d00:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d107      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d08:	4b48      	ldr	r3, [pc, #288]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d0e:	4a47      	ldr	r2, [pc, #284]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d26:	2300      	movs	r3, #0
 8006d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4313      	orrs	r3, r2
 8006d32:	d042      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d40:	d022      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006d42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006d46:	d81b      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d4c:	d011      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d52:	d815      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d019      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006d58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5c:	d110      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d62:	3308      	adds	r3, #8
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 ff9b 	bl	8008ca0 <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d70:	e00d      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d72:	4b2e      	ldr	r3, [pc, #184]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d76:	4a2d      	ldr	r2, [pc, #180]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006d7e:	e006      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d86:	e002      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006d8c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006d8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10d      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006d96:	4b25      	ldr	r3, [pc, #148]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d9c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006da4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006da8:	4a20      	ldr	r2, [pc, #128]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006daa:	430b      	orrs	r3, r1
 8006dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006db0:	e003      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006db6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006dc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc8:	2300      	movs	r3, #0
 8006dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dcc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d032      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de2:	d00b      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de8:	d804      	bhi.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df2:	d007      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006e04:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e06:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d112      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006e0e:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e14:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e20:	4a02      	ldr	r2, [pc, #8]	@ (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006e22:	430b      	orrs	r3, r1
 8006e24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006e28:	e008      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006e2a:	bf00      	nop
 8006e2c:	46020c00 	.word	0x46020c00
 8006e30:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e38:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d00c      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006e58:	4b98      	ldr	r3, [pc, #608]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e5e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e6a:	4a94      	ldr	r2, [pc, #592]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e80:	2300      	movs	r3, #0
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	d019      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e9a:	d105      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e9c:	4b87      	ldr	r3, [pc, #540]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	4a86      	ldr	r2, [pc, #536]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ea6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006ea8:	4b84      	ldr	r3, [pc, #528]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006eaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eae:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006eba:	4a80      	ldr	r2, [pc, #512]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ece:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ed4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4313      	orrs	r3, r2
 8006edc:	d00c      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006ede:	4b77      	ldr	r3, [pc, #476]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ef0:	4972      	ldr	r1, [pc, #456]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f04:	623b      	str	r3, [r7, #32]
 8006f06:	2300      	movs	r3, #0
 8006f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d00c      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006f14:	4b69      	ldr	r3, [pc, #420]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006f26:	4965      	ldr	r1, [pc, #404]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d00c      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f50:	f023 0218 	bic.w	r2, r3, #24
 8006f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f5c:	4957      	ldr	r1, [pc, #348]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d032      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f8c:	d105      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	4a4a      	ldr	r2, [pc, #296]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f98:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fa6:	d108      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fac:	3308      	adds	r3, #8
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 fe76 	bl	8008ca0 <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8006fba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fc8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fd4:	4939      	ldr	r1, [pc, #228]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006fdc:	e003      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fde:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006fe2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d03a      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800700a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700e:	d00e      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007014:	d815      	bhi.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d017      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800701a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800701e:	d110      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007020:	4b26      	ldr	r3, [pc, #152]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	4a25      	ldr	r2, [pc, #148]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800702a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800702c:	e00e      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800702e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007032:	3308      	adds	r3, #8
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fe33 	bl	8008ca0 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007040:	e004      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007048:	e000      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800704a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800704c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10d      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007054:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800705a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800705e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007066:	4915      	ldr	r1, [pc, #84]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800706e:	e003      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007074:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	2300      	movs	r3, #0
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800708e:	460b      	mov	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	d00c      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007094:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800709a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800709e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070a6:	4905      	ldr	r1, [pc, #20]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80070ae:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	37e8      	adds	r7, #232	@ 0xe8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070bc:	46020c00 	.word	0x46020c00

080070c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	@ 0x24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80070c8:	4ba6      	ldr	r3, [pc, #664]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80070d2:	4ba4      	ldr	r3, [pc, #656]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80070dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	0a1b      	lsrs	r3, r3, #8
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	3301      	adds	r3, #1
 80070e8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80070ea:	4b9e      	ldr	r3, [pc, #632]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80070f6:	4b9b      	ldr	r3, [pc, #620]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	08db      	lsrs	r3, r3, #3
 80070fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d062      	beq.n	80071de <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2b03      	cmp	r3, #3
 800711c:	f200 8081 	bhi.w	8007222 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d024      	beq.n	8007170 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d17a      	bne.n	8007222 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007368 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b89      	ldr	r3, [pc, #548]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800714e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007152:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800736c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800715e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800716e:	e08f      	b.n	8007290 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007170:	4b7c      	ldr	r3, [pc, #496]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800717c:	4b79      	ldr	r3, [pc, #484]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	0f1b      	lsrs	r3, r3, #28
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	e006      	b.n	8007196 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007188:	4b76      	ldr	r3, [pc, #472]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800718a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	0f1b      	lsrs	r3, r3, #28
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	4a76      	ldr	r2, [pc, #472]	@ (8007370 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80071c0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800736c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80071c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071dc:	e058      	b.n	8007290 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007368 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80071ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007200:	ed97 6a02 	vldr	s12, [r7, #8]
 8007204:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800736c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007208:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800720c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007210:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007214:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007220:	e036      	b.n	8007290 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007222:	4b50      	ldr	r3, [pc, #320]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800722e:	4b4d      	ldr	r3, [pc, #308]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	0f1b      	lsrs	r3, r3, #28
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	e006      	b.n	8007248 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800723a:	4b4a      	ldr	r3, [pc, #296]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800723c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	0f1b      	lsrs	r3, r3, #28
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	4a49      	ldr	r2, [pc, #292]	@ (8007370 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800724a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007272:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800736c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800728e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007290:	4b34      	ldr	r3, [pc, #208]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d017      	beq.n	80072cc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800729c:	4b31      	ldr	r3, [pc, #196]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800729e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072a0:	0a5b      	lsrs	r3, r3, #9
 80072a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80072ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c2:	ee17 2a90 	vmov	r2, s15
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e002      	b.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80072d2:	4b24      	ldr	r3, [pc, #144]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d017      	beq.n	800730e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072de:	4b21      	ldr	r3, [pc, #132]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80072e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e2:	0c1b      	lsrs	r3, r3, #16
 80072e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80072f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007304:	ee17 2a90 	vmov	r2, s15
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	e002      	b.n	8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007314:	4b13      	ldr	r3, [pc, #76]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d017      	beq.n	8007350 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007320:	4b10      	ldr	r3, [pc, #64]	@ (8007364 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007324:	0e1b      	lsrs	r3, r3, #24
 8007326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007336:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800733a:	edd7 6a07 	vldr	s13, [r7, #28]
 800733e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007346:	ee17 2a90 	vmov	r2, s15
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800734e:	e002      	b.n	8007356 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	609a      	str	r2, [r3, #8]
}
 8007356:	bf00      	nop
 8007358:	3724      	adds	r7, #36	@ 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	46020c00 	.word	0x46020c00
 8007368:	4b742400 	.word	0x4b742400
 800736c:	46000000 	.word	0x46000000
 8007370:	0800ec20 	.word	0x0800ec20

08007374 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007374:	b480      	push	{r7}
 8007376:	b089      	sub	sp, #36	@ 0x24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800737c:	4ba6      	ldr	r3, [pc, #664]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800737e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007384:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007386:	4ba4      	ldr	r3, [pc, #656]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007390:	4ba1      	ldr	r3, [pc, #644]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007394:	0a1b      	lsrs	r3, r3, #8
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	3301      	adds	r3, #1
 800739c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800739e:	4b9e      	ldr	r3, [pc, #632]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	091b      	lsrs	r3, r3, #4
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80073aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d062      	beq.n	8007492 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	f200 8081 	bhi.w	80074d6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d024      	beq.n	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d17a      	bne.n	80074d6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b89      	ldr	r3, [pc, #548]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007402:	ed97 6a02 	vldr	s12, [r7, #8]
 8007406:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007422:	e08f      	b.n	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007424:	4b7c      	ldr	r3, [pc, #496]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007430:	4b79      	ldr	r3, [pc, #484]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	0f1b      	lsrs	r3, r3, #28
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	e006      	b.n	800744a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800743c:	4b76      	ldr	r3, [pc, #472]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800743e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	0f1b      	lsrs	r3, r3, #28
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	4a76      	ldr	r2, [pc, #472]	@ (8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800744c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007470:	ed97 6a02 	vldr	s12, [r7, #8]
 8007474:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007480:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007484:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007490:	e058      	b.n	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800761c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80074a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ac:	ee07 3a90 	vmov	s15, r3
 80074b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80074b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80074b8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80074bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80074c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80074cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d4:	e036      	b.n	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80074d6:	4b50      	ldr	r3, [pc, #320]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80074e2:	4b4d      	ldr	r3, [pc, #308]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	0f1b      	lsrs	r3, r3, #28
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	e006      	b.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80074ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	0f1b      	lsrs	r3, r3, #28
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	4a49      	ldr	r2, [pc, #292]	@ (8007624 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80074fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a02 	vldr	s12, [r7, #8]
 8007526:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007620 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007542:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007544:	4b34      	ldr	r3, [pc, #208]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d017      	beq.n	8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007550:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007554:	0a5b      	lsrs	r3, r3, #9
 8007556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007566:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800756a:	edd7 6a07 	vldr	s13, [r7, #28]
 800756e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007576:	ee17 2a90 	vmov	r2, s15
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e002      	b.n	8007586 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d017      	beq.n	80075c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007592:	4b21      	ldr	r3, [pc, #132]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80075a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075a8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b8:	ee17 2a90 	vmov	r2, s15
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	605a      	str	r2, [r3, #4]
 80075c0:	e002      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80075c8:	4b13      	ldr	r3, [pc, #76]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d017      	beq.n	8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075d4:	4b10      	ldr	r3, [pc, #64]	@ (8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d8:	0e1b      	lsrs	r3, r3, #24
 80075da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80075e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fa:	ee17 2a90 	vmov	r2, s15
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007602:	e002      	b.n	800760a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	609a      	str	r2, [r3, #8]
}
 800760a:	bf00      	nop
 800760c:	3724      	adds	r7, #36	@ 0x24
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	46020c00 	.word	0x46020c00
 800761c:	4b742400 	.word	0x4b742400
 8007620:	46000000 	.word	0x46000000
 8007624:	0800ec20 	.word	0x0800ec20

08007628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	@ 0x24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007630:	4ba6      	ldr	r3, [pc, #664]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007638:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800763a:	4ba4      	ldr	r3, [pc, #656]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007644:	4ba1      	ldr	r3, [pc, #644]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	0a1b      	lsrs	r3, r3, #8
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	3301      	adds	r3, #1
 8007650:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007652:	4b9e      	ldr	r3, [pc, #632]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	091b      	lsrs	r3, r3, #4
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800765e:	4b9b      	ldr	r3, [pc, #620]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007662:	08db      	lsrs	r3, r3, #3
 8007664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d062      	beq.n	8007746 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b03      	cmp	r3, #3
 8007684:	f200 8081 	bhi.w	800778a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d024      	beq.n	80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d17a      	bne.n	800778a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b89      	ldr	r3, [pc, #548]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80076d6:	e08f      	b.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80076d8:	4b7c      	ldr	r3, [pc, #496]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80076e4:	4b79      	ldr	r3, [pc, #484]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	0f1b      	lsrs	r3, r3, #28
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	e006      	b.n	80076fe <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80076f0:	4b76      	ldr	r3, [pc, #472]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	0f1b      	lsrs	r3, r3, #28
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	4a76      	ldr	r2, [pc, #472]	@ (80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	ee07 3a90 	vmov	s15, r3
 8007720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007724:	ed97 6a02 	vldr	s12, [r7, #8]
 8007728:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800772c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007738:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800773c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007740:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007744:	e058      	b.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007750:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007758:	4b5c      	ldr	r3, [pc, #368]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800775a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800775c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007768:	ed97 6a02 	vldr	s12, [r7, #8]
 800776c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007770:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007774:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8007778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800777c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007788:	e036      	b.n	80077f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800778a:	4b50      	ldr	r3, [pc, #320]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8007796:	4b4d      	ldr	r3, [pc, #308]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	0f1b      	lsrs	r3, r3, #28
 800779c:	f003 030f 	and.w	r3, r3, #15
 80077a0:	e006      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80077a2:	4b4a      	ldr	r3, [pc, #296]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	0f1b      	lsrs	r3, r3, #28
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	4a49      	ldr	r2, [pc, #292]	@ (80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80077b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077da:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80077de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80077f8:	4b34      	ldr	r3, [pc, #208]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d017      	beq.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007804:	4b31      	ldr	r3, [pc, #196]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007808:	0a5b      	lsrs	r3, r3, #9
 800780a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800781a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800781e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782a:	ee17 2a90 	vmov	r2, s15
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e002      	b.n	800783a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800783a:	4b24      	ldr	r3, [pc, #144]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d017      	beq.n	8007876 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007846:	4b21      	ldr	r3, [pc, #132]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784a:	0c1b      	lsrs	r3, r3, #16
 800784c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007858:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800785c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007860:	edd7 6a07 	vldr	s13, [r7, #28]
 8007864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800786c:	ee17 2a90 	vmov	r2, s15
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
 8007874:	e002      	b.n	800787c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800787c:	4b13      	ldr	r3, [pc, #76]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800787e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d017      	beq.n	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007888:	4b10      	ldr	r3, [pc, #64]	@ (80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800788a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788c:	0e1b      	lsrs	r3, r3, #24
 800788e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800789a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800789e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ae:	ee17 2a90 	vmov	r2, s15
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078b6:	e002      	b.n	80078be <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	609a      	str	r2, [r3, #8]
}
 80078be:	bf00      	nop
 80078c0:	3724      	adds	r7, #36	@ 0x24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	46020c00 	.word	0x46020c00
 80078d0:	4b742400 	.word	0x4b742400
 80078d4:	46000000 	.word	0x46000000
 80078d8:	0800ec20 	.word	0x0800ec20

080078dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08e      	sub	sp, #56	@ 0x38
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80078e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ea:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80078ee:	430b      	orrs	r3, r1
 80078f0:	d145      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80078f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078fc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80078fe:	4ba4      	ldr	r3, [pc, #656]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b02      	cmp	r3, #2
 800790a:	d108      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007912:	d104      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007918:	637b      	str	r3, [r7, #52]	@ 0x34
 800791a:	f001 b9b3 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800791e:	4b9c      	ldr	r3, [pc, #624]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800792c:	d114      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007934:	d110      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007936:	4b96      	ldr	r3, [pc, #600]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800793c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007944:	d103      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007946:	23fa      	movs	r3, #250	@ 0xfa
 8007948:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800794a:	f001 b99b 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800794e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007954:	f001 b996 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007958:	4b8d      	ldr	r3, [pc, #564]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007964:	d107      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800796c:	d103      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800796e:	4b89      	ldr	r3, [pc, #548]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007970:	637b      	str	r3, [r7, #52]	@ 0x34
 8007972:	f001 b987 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
 800797a:	f001 b983 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800797e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007982:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007986:	430b      	orrs	r3, r1
 8007988:	d151      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800798a:	4b81      	ldr	r3, [pc, #516]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800798c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007990:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007994:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	2b80      	cmp	r3, #128	@ 0x80
 800799a:	d035      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	2b80      	cmp	r3, #128	@ 0x80
 80079a0:	d841      	bhi.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	2b60      	cmp	r3, #96	@ 0x60
 80079a6:	d02a      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	2b60      	cmp	r3, #96	@ 0x60
 80079ac:	d83b      	bhi.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	2b40      	cmp	r3, #64	@ 0x40
 80079b2:	d009      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	2b40      	cmp	r3, #64	@ 0x40
 80079b8:	d835      	bhi.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00c      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d012      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079c6:	e02e      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff fb77 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079d6:	f001 b955 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079da:	f107 0318 	add.w	r3, r7, #24
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff fcc8 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079e8:	f001 b94c 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ec:	f107 030c 	add.w	r3, r7, #12
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fe19 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079fa:	f001 b943 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a04:	f001 b93e 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a08:	4b61      	ldr	r3, [pc, #388]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a14:	d103      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007a16:	4b60      	ldr	r3, [pc, #384]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a1a:	f001 b933 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a22:	f001 b92f 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a2a:	f001 b92b 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a32:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007a36:	430b      	orrs	r3, r1
 8007a38:	d158      	bne.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007a3a:	4b55      	ldr	r3, [pc, #340]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a4c:	d03b      	beq.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a54:	d846      	bhi.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a5c:	d02e      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a64:	d83e      	bhi.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a6c:	d00b      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a74:	d836      	bhi.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a82:	d012      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007a84:	e02e      	b.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fb18 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a94:	f001 b8f6 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a98:	f107 0318 	add.w	r3, r7, #24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fc69 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aa6:	f001 b8ed 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aaa:	f107 030c 	add.w	r3, r7, #12
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fdba 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ab8:	f001 b8e4 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007abc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ac2:	f001 b8df 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ac6:	4b32      	ldr	r3, [pc, #200]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ad2:	d103      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007ad4:	4b30      	ldr	r3, [pc, #192]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ad8:	f001 b8d4 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ae0:	f001 b8d0 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ae8:	f001 b8cc 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007af4:	430b      	orrs	r3, r1
 8007af6:	d126      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007af8:	4b25      	ldr	r3, [pc, #148]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007afa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007b04:	4b22      	ldr	r3, [pc, #136]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b10:	d106      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007b18:	4b1f      	ldr	r3, [pc, #124]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1c:	f001 b8b2 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007b20:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b34:	d103      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007b36:	4b19      	ldr	r3, [pc, #100]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3a:	f001 b8a3 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b42:	f001 b89f 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	d16e      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007b52:	4b0f      	ldr	r3, [pc, #60]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b58:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b64:	d03d      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b6c:	d85c      	bhi.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b74:	d014      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b7c:	d854      	bhi.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01f      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b8a:	d012      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007b8c:	e04c      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007b8e:	bf00      	nop
 8007b90:	46020c00 	.word	0x46020c00
 8007b94:	0007a120 	.word	0x0007a120
 8007b98:	00f42400 	.word	0x00f42400
 8007b9c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff fa8b 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bae:	f001 b869 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fbdc 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc0:	f001 b860 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007bc4:	4ba7      	ldr	r3, [pc, #668]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd0:	d103      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007bd2:	4ba5      	ldr	r3, [pc, #660]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bd6:	f001 b855 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bde:	f001 b851 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007be2:	4ba0      	ldr	r3, [pc, #640]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d118      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bee:	4b9d      	ldr	r3, [pc, #628]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007bfa:	4b9a      	ldr	r3, [pc, #616]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	0e1b      	lsrs	r3, r3, #24
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	e006      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007c06:	4b97      	ldr	r3, [pc, #604]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c0c:	041b      	lsls	r3, r3, #16
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	f003 030f 	and.w	r3, r3, #15
 8007c14:	4a95      	ldr	r2, [pc, #596]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c1c:	f001 b832 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c24:	f001 b82e 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c2c:	f001 b82a 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c34:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	d17f      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c3c:	4b89      	ldr	r3, [pc, #548]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c46:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d165      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007c4e:	4b85      	ldr	r3, [pc, #532]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c54:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007c58:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c60:	d034      	beq.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c68:	d853      	bhi.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c70:	d00b      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c78:	d84b      	bhi.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d016      	beq.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c86:	d009      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007c88:	e043      	b.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fa16 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007c98:	f000 bff4 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c9c:	f107 0318 	add.w	r3, r7, #24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fb67 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007caa:	f000 bfeb 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007cae:	4b6d      	ldr	r3, [pc, #436]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cba:	d103      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8007cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007cbe:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007cc0:	f000 bfe0 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007cc8:	f000 bfdc 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ccc:	4b65      	ldr	r3, [pc, #404]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d118      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cd8:	4b62      	ldr	r3, [pc, #392]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	0e1b      	lsrs	r3, r3, #24
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	e006      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007cf0:	4b5c      	ldr	r3, [pc, #368]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007cf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	0e1b      	lsrs	r3, r3, #24
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d04:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007d06:	f000 bfbd 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007d0e:	f000 bfb9 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007d16:	f000 bfb5 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d20:	d108      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff f9ca 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d30:	f000 bfa8 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d38:	f000 bfa4 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d40:	1e51      	subs	r1, r2, #1
 8007d42:	430b      	orrs	r3, r1
 8007d44:	d136      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007d46:	4b47      	ldr	r3, [pc, #284]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007d58:	f7fe fb44 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 8007d5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d5e:	f000 bf91 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d104      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d68:	f7fe fa0c 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8007d6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d6e:	f000 bf89 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007d72:	4b3c      	ldr	r3, [pc, #240]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d103      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8007d86:	4b3a      	ldr	r3, [pc, #232]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8a:	f000 bf7b 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007d8e:	4b35      	ldr	r3, [pc, #212]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d107      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d104      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da8:	f000 bf6c 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db0:	f000 bf68 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db8:	1e91      	subs	r1, r2, #2
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	d136      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007dbe:	4b29      	ldr	r3, [pc, #164]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dc4:	f003 030c 	and.w	r3, r3, #12
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dd0:	f7fe faf4 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8007dd4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007dd6:	f000 bf55 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d104      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007de0:	f7fe f9d0 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8007de4:	6378      	str	r0, [r7, #52]	@ 0x34
 8007de6:	f000 bf4d 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007dea:	4b1e      	ldr	r3, [pc, #120]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007df6:	d106      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d103      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8007dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e02:	f000 bf3f 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007e06:	4b17      	ldr	r3, [pc, #92]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d107      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e16:	2b0c      	cmp	r3, #12
 8007e18:	d104      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e20:	f000 bf30 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e28:	f000 bf2c 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e30:	1f11      	subs	r1, r2, #4
 8007e32:	430b      	orrs	r3, r1
 8007e34:	d13f      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007e36:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e48:	f7fe fab8 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8007e4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e4e:	f000 bf19 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d10d      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e58:	f7fe f994 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8007e5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e5e:	f000 bf11 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e62:	bf00      	nop
 8007e64:	46020c00 	.word	0x46020c00
 8007e68:	02dc6c00 	.word	0x02dc6c00
 8007e6c:	0800ec20 	.word	0x0800ec20
 8007e70:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007e74:	4ba6      	ldr	r3, [pc, #664]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e80:	d106      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d103      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8007e88:	4ba2      	ldr	r3, [pc, #648]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e8c:	f000 befa 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007e90:	4b9f      	ldr	r3, [pc, #636]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d107      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	2b30      	cmp	r3, #48	@ 0x30
 8007ea2:	d104      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eaa:	f000 beeb 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb2:	f000 bee7 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eba:	f1a2 0108 	sub.w	r1, r2, #8
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	d136      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ec2:	4b93      	ldr	r3, [pc, #588]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ec8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ecc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ed4:	f7fe fa72 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8007ed8:	6378      	str	r0, [r7, #52]	@ 0x34
 8007eda:	f000 bed3 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	2b40      	cmp	r3, #64	@ 0x40
 8007ee2:	d104      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ee4:	f7fe f94e 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8007ee8:	6378      	str	r0, [r7, #52]	@ 0x34
 8007eea:	f000 becb 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007eee:	4b88      	ldr	r3, [pc, #544]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007efa:	d106      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	2b80      	cmp	r3, #128	@ 0x80
 8007f00:	d103      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8007f02:	4b84      	ldr	r3, [pc, #528]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f06:	f000 bebd 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007f0a:	4b81      	ldr	r3, [pc, #516]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d107      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f1c:	d104      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8007f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f24:	f000 beae 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2c:	f000 beaa 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f34:	f1a2 0110 	sub.w	r1, r2, #16
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	d139      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007f3c:	4b74      	ldr	r3, [pc, #464]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f4e:	f7fe fa35 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8007f52:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f54:	f000 be96 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f5e:	d104      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f60:	f7fe f910 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8007f64:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f66:	f000 be8d 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007f6a:	4b69      	ldr	r3, [pc, #420]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f76:	d107      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8007f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f7e:	d103      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007f80:	4b64      	ldr	r3, [pc, #400]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f84:	f000 be7e 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f88:	4b61      	ldr	r3, [pc, #388]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d108      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f9c:	d104      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa4:	f000 be6e 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fac:	f000 be6a 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb4:	f1a2 0120 	sub.w	r1, r2, #32
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	d158      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007fbc:	4b54      	ldr	r3, [pc, #336]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007fce:	f7fe fa1d 	bl	800640c <HAL_RCC_GetPCLK3Freq>
 8007fd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007fd4:	f000 be56 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d104      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fde:	f7fe f8d1 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8007fe2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007fe4:	f000 be4e 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007fe8:	4b49      	ldr	r3, [pc, #292]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ff4:	d106      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d103      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8007ffc:	4b45      	ldr	r3, [pc, #276]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008000:	f000 be40 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008004:	4b42      	ldr	r3, [pc, #264]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b02      	cmp	r3, #2
 8008010:	d107      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008014:	2b03      	cmp	r3, #3
 8008016:	d104      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8008018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800801c:	637b      	str	r3, [r7, #52]	@ 0x34
 800801e:	f000 be31 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008022:	4b3b      	ldr	r3, [pc, #236]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d11b      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	2b04      	cmp	r3, #4
 8008032:	d118      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008034:	4b36      	ldr	r3, [pc, #216]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008040:	4b33      	ldr	r3, [pc, #204]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	e006      	b.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800804c:	4b30      	ldr	r3, [pc, #192]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800804e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	0e1b      	lsrs	r3, r3, #24
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	4a2f      	ldr	r2, [pc, #188]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008060:	637b      	str	r3, [r7, #52]	@ 0x34
 8008062:	f000 be0f 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
 800806a:	f000 be0b 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800806e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008072:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008076:	430b      	orrs	r3, r1
 8008078:	d172      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800807a:	4b25      	ldr	r3, [pc, #148]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800807c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008080:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008084:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800808c:	d104      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800808e:	f7fe f879 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8008092:	6378      	str	r0, [r7, #52]	@ 0x34
 8008094:	f000 bdf6 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809e:	d108      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a0:	f107 0318 	add.w	r3, r7, #24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff f965 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ae:	f000 bde9 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80080b8:	f7fe f966 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 80080bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80080be:	f000 bde1 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080c8:	d128      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080ca:	4b11      	ldr	r3, [pc, #68]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d118      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80080e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	0e1b      	lsrs	r3, r3, #24
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80080ee:	4b08      	ldr	r3, [pc, #32]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80080f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080f4:	041b      	lsls	r3, r3, #16
 80080f6:	0e1b      	lsrs	r3, r3, #24
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	4a06      	ldr	r2, [pc, #24]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80080fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008102:	637b      	str	r3, [r7, #52]	@ 0x34
 8008104:	f000 bdbe 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
 800810c:	f000 bdba 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008110:	46020c00 	.word	0x46020c00
 8008114:	00f42400 	.word	0x00f42400
 8008118:	0800ec20 	.word	0x0800ec20
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800811c:	4baf      	ldr	r3, [pc, #700]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008128:	d107      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008130:	d103      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8008132:	4bab      	ldr	r3, [pc, #684]	@ (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
 8008136:	f000 bda5 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800813a:	4ba8      	ldr	r3, [pc, #672]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008146:	d107      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814e:	d103      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8008150:	4ba3      	ldr	r3, [pc, #652]	@ (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008152:	637b      	str	r3, [r7, #52]	@ 0x34
 8008154:	f000 bd96 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	637b      	str	r3, [r7, #52]	@ 0x34
 800815c:	f000 bd92 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008164:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008168:	430b      	orrs	r3, r1
 800816a:	d158      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800816c:	4b9b      	ldr	r3, [pc, #620]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800816e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	2b04      	cmp	r3, #4
 800817c:	d84b      	bhi.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	080081bd 	.word	0x080081bd
 8008188:	08008199 	.word	0x08008199
 800818c:	080081ab 	.word	0x080081ab
 8008190:	080081c7 	.word	0x080081c7
 8008194:	080081d1 	.word	0x080081d1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe ff8f 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a6:	f000 bd6d 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081aa:	f107 030c 	add.w	r3, r7, #12
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff fa3a 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081b8:	f000 bd64 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80081bc:	f7fe f8e4 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 80081c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80081c2:	f000 bd5f 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80081c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081cc:	f000 bd5a 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081d0:	4b82      	ldr	r3, [pc, #520]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d118      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081dc:	4b7f      	ldr	r3, [pc, #508]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80081e8:	4b7c      	ldr	r3, [pc, #496]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	0e1b      	lsrs	r3, r3, #24
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	e006      	b.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80081f4:	4b79      	ldr	r3, [pc, #484]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80081f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	4a78      	ldr	r2, [pc, #480]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008208:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800820a:	f000 bd3b 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008212:	f000 bd37 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800821a:	f000 bd33 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800821e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008222:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008226:	430b      	orrs	r3, r1
 8008228:	d167      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800822a:	4b6c      	ldr	r3, [pc, #432]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800822c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008230:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008234:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800823c:	d036      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008244:	d855      	bhi.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800824c:	d029      	beq.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008254:	d84d      	bhi.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800825c:	d013      	beq.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008264:	d845      	bhi.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	2b00      	cmp	r3, #0
 800826a:	d015      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008272:	d13e      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe ff21 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008282:	f000 bcff 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008286:	f107 030c 	add.w	r3, r7, #12
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff f9cc 	bl	8007628 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008294:	f000 bcf6 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008298:	f7fe f876 	bl	8006388 <HAL_RCC_GetHCLKFreq>
 800829c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800829e:	f000 bcf1 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80082a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082a8:	f000 bcec 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082ac:	4b4b      	ldr	r3, [pc, #300]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d118      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082b8:	4b48      	ldr	r3, [pc, #288]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80082c4:	4b45      	ldr	r3, [pc, #276]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	0e1b      	lsrs	r3, r3, #24
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	e006      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80082d0:	4b42      	ldr	r3, [pc, #264]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80082d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082d6:	041b      	lsls	r3, r3, #16
 80082d8:	0e1b      	lsrs	r3, r3, #24
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	4a41      	ldr	r2, [pc, #260]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80082e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082e6:	f000 bccd 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082ee:	f000 bcc9 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082f6:	f000 bcc5 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80082fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fe:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008302:	430b      	orrs	r3, r1
 8008304:	d14c      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008306:	4b35      	ldr	r3, [pc, #212]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800830c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008310:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008318:	f7fe f850 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 800831c:	6378      	str	r0, [r7, #52]	@ 0x34
 800831e:	f000 bcb1 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008328:	d104      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800832a:	f7fd ff2b 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 800832e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008330:	f000 bca8 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008334:	4b29      	ldr	r3, [pc, #164]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800833c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008340:	d107      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008348:	d103      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800834a:	4b25      	ldr	r3, [pc, #148]	@ (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800834c:	637b      	str	r3, [r7, #52]	@ 0x34
 800834e:	f000 bc99 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008352:	4b22      	ldr	r3, [pc, #136]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b20      	cmp	r3, #32
 800835c:	d11c      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008364:	d118      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8008372:	4b1a      	ldr	r3, [pc, #104]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	0e1b      	lsrs	r3, r3, #24
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	e006      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800837e:	4b17      	ldr	r3, [pc, #92]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800838e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
 8008394:	f000 bc76 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	637b      	str	r3, [r7, #52]	@ 0x34
 800839c:	f000 bc72 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80083a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80083a8:	430b      	orrs	r3, r1
 80083aa:	d153      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80083ac:	4b0b      	ldr	r3, [pc, #44]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80083ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80083b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083be:	f7fd fffd 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 80083c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80083c4:	f000 bc5e 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ce:	d10b      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80083d0:	f7fd fed8 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 80083d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80083d6:	f000 bc55 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80083da:	bf00      	nop
 80083dc:	46020c00 	.word	0x46020c00
 80083e0:	00f42400 	.word	0x00f42400
 80083e4:	0800ec20 	.word	0x0800ec20
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80083e8:	4ba1      	ldr	r3, [pc, #644]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f4:	d107      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083fc:	d103      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80083fe:	4b9d      	ldr	r3, [pc, #628]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008400:	637b      	str	r3, [r7, #52]	@ 0x34
 8008402:	f000 bc3f 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008406:	4b9a      	ldr	r3, [pc, #616]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b20      	cmp	r3, #32
 8008410:	d11c      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008418:	d118      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800841a:	4b95      	ldr	r3, [pc, #596]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8008426:	4b92      	ldr	r3, [pc, #584]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	0e1b      	lsrs	r3, r3, #24
 800842c:	f003 030f 	and.w	r3, r3, #15
 8008430:	e006      	b.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008432:	4b8f      	ldr	r3, [pc, #572]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	4a8d      	ldr	r2, [pc, #564]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008446:	637b      	str	r3, [r7, #52]	@ 0x34
 8008448:	f000 bc1c 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008450:	f000 bc18 	b.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008458:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800845c:	430b      	orrs	r3, r1
 800845e:	d151      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008460:	4b83      	ldr	r3, [pc, #524]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008466:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800846a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008470:	d024      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	2bc0      	cmp	r3, #192	@ 0xc0
 8008476:	d842      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	2b80      	cmp	r3, #128	@ 0x80
 800847c:	d00d      	beq.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	2b80      	cmp	r3, #128	@ 0x80
 8008482:	d83c      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	2b40      	cmp	r3, #64	@ 0x40
 800848e:	d011      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008490:	e035      	b.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008492:	f7fd ffbb 	bl	800640c <HAL_RCC_GetPCLK3Freq>
 8008496:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008498:	e3f4      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800849a:	4b75      	ldr	r3, [pc, #468]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084a6:	d102      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80084a8:	4b72      	ldr	r3, [pc, #456]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80084aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084ac:	e3ea      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084b2:	e3e7      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80084b4:	f7fd fe66 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 80084b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084ba:	e3e3      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d117      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084c8:	4b69      	ldr	r3, [pc, #420]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80084d4:	4b66      	ldr	r3, [pc, #408]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	e006      	b.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80084e0:	4b63      	ldr	r3, [pc, #396]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80084e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	0e1b      	lsrs	r3, r3, #24
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	4a62      	ldr	r2, [pc, #392]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80084f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084f6:	e3c5      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084fc:	e3c2      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008502:	e3bf      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008508:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800850c:	430b      	orrs	r3, r1
 800850e:	d147      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008510:	4b57      	ldr	r3, [pc, #348]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008516:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800851a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	2b00      	cmp	r3, #0
 8008520:	d103      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008522:	f7fd ff4b 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8008526:	6378      	str	r0, [r7, #52]	@ 0x34
 8008528:	e3ac      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008530:	d103      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008532:	f7fd fe27 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8008536:	6378      	str	r0, [r7, #52]	@ 0x34
 8008538:	e3a4      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800853a:	4b4d      	ldr	r3, [pc, #308]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008546:	d106      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800854e:	d102      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8008550:	4b48      	ldr	r3, [pc, #288]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008552:	637b      	str	r3, [r7, #52]	@ 0x34
 8008554:	e396      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008556:	4b46      	ldr	r3, [pc, #280]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b20      	cmp	r3, #32
 8008560:	d11b      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008568:	d117      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800856a:	4b41      	ldr	r3, [pc, #260]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8008576:	4b3e      	ldr	r3, [pc, #248]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	0e1b      	lsrs	r3, r3, #24
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	e006      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8008582:	4b3b      	ldr	r3, [pc, #236]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008588:	041b      	lsls	r3, r3, #16
 800858a:	0e1b      	lsrs	r3, r3, #24
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	4a39      	ldr	r2, [pc, #228]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008596:	637b      	str	r3, [r7, #52]	@ 0x34
 8008598:	e374      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
 800859e:	e371      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80085a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085a8:	430b      	orrs	r3, r1
 80085aa:	d16a      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80085ac:	4b30      	ldr	r3, [pc, #192]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d120      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085be:	4b2c      	ldr	r3, [pc, #176]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0320 	and.w	r3, r3, #32
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d117      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085ca:	4b29      	ldr	r3, [pc, #164]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80085d6:	4b26      	ldr	r3, [pc, #152]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	0e1b      	lsrs	r3, r3, #24
 80085dc:	f003 030f 	and.w	r3, r3, #15
 80085e0:	e006      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80085e2:	4b23      	ldr	r3, [pc, #140]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80085e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	0e1b      	lsrs	r3, r3, #24
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	4a21      	ldr	r2, [pc, #132]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80085f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f8:	e344      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fe:	e341      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008600:	4b1b      	ldr	r3, [pc, #108]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800860a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800860e:	d112      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008616:	d10e      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008618:	4b15      	ldr	r3, [pc, #84]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800861a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800861e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008626:	d102      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8008628:	23fa      	movs	r3, #250	@ 0xfa
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800862c:	e32a      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800862e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008634:	e326      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008636:	4b0e      	ldr	r3, [pc, #56]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800863e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008642:	d106      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800864a:	d102      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800864c:	4b09      	ldr	r3, [pc, #36]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008650:	e318      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008652:	4b07      	ldr	r3, [pc, #28]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b02      	cmp	r3, #2
 800865e:	d10d      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008666:	d109      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8008668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866c:	637b      	str	r3, [r7, #52]	@ 0x34
 800866e:	e309      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008670:	46020c00 	.word	0x46020c00
 8008674:	00f42400 	.word	0x00f42400
 8008678:	0800ec20 	.word	0x0800ec20
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008680:	e300      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008686:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800868a:	430b      	orrs	r3, r1
 800868c:	d164      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800868e:	4ba2      	ldr	r3, [pc, #648]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008694:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008698:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	2b00      	cmp	r3, #0
 800869e:	d120      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086a0:	4b9d      	ldr	r3, [pc, #628]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d117      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086ac:	4b9a      	ldr	r3, [pc, #616]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80086b8:	4b97      	ldr	r3, [pc, #604]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	0e1b      	lsrs	r3, r3, #24
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	e006      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80086c4:	4b94      	ldr	r3, [pc, #592]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	0e1b      	lsrs	r3, r3, #24
 80086ce:	f003 030f 	and.w	r3, r3, #15
 80086d2:	4a92      	ldr	r2, [pc, #584]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80086d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086da:	e2d3      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	637b      	str	r3, [r7, #52]	@ 0x34
 80086e0:	e2d0      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80086e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086f0:	d112      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086f8:	d10e      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80086fa:	4b87      	ldr	r3, [pc, #540]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80086fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008708:	d102      	bne.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800870a:	23fa      	movs	r3, #250	@ 0xfa
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800870e:	e2b9      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008710:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008714:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008716:	e2b5      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008718:	4b7f      	ldr	r3, [pc, #508]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008724:	d106      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800872c:	d102      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800872e:	4b7c      	ldr	r3, [pc, #496]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008730:	637b      	str	r3, [r7, #52]	@ 0x34
 8008732:	e2a7      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008734:	4b78      	ldr	r3, [pc, #480]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b02      	cmp	r3, #2
 8008740:	d107      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008748:	d103      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800874a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008750:	e298      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34
 8008756:	e295      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008760:	430b      	orrs	r3, r1
 8008762:	d147      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008764:	4b6c      	ldr	r3, [pc, #432]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800876a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800876e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d103      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008776:	f7fd fe21 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 800877a:	6378      	str	r0, [r7, #52]	@ 0x34
 800877c:	e282      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800877e:	4b66      	ldr	r3, [pc, #408]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800878c:	d112      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008794:	d10e      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008796:	4b60      	ldr	r3, [pc, #384]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800879c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087a4:	d102      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80087a6:	23fa      	movs	r3, #250	@ 0xfa
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087aa:	e26b      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80087ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087b2:	e267      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80087b4:	4b58      	ldr	r3, [pc, #352]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c0:	d106      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087c8:	d102      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80087ca:	4b55      	ldr	r3, [pc, #340]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ce:	e259      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80087d0:	4b51      	ldr	r3, [pc, #324]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80087d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d107      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80087e4:	d103      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80087e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ec:	e24a      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f2:	e247      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80087f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80087fc:	430b      	orrs	r3, r1
 80087fe:	d12d      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008800:	4b45      	ldr	r3, [pc, #276]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008806:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800880a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800880c:	4b42      	ldr	r3, [pc, #264]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008818:	d105      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800881a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008820:	4b3f      	ldr	r3, [pc, #252]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
 8008824:	e22e      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800882c:	d107      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800882e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fc44 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	637b      	str	r3, [r7, #52]	@ 0x34
 800883c:	e222      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008844:	d107      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008846:	f107 0318 	add.w	r3, r7, #24
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fd92 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
 8008854:	e216      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
 800885a:	e213      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800885c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008860:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008864:	430b      	orrs	r3, r1
 8008866:	d15d      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008868:	4b2b      	ldr	r3, [pc, #172]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800886a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800886e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008872:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800887a:	d028      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008882:	d845      	bhi.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800888a:	d013      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008892:	d83d      	bhi.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088a0:	d004      	beq.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80088a2:	e035      	b.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80088a4:	f7fd fd9e 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 80088a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088aa:	e1eb      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088ac:	f7fd fc6a 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 80088b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088b2:	e1e7      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088b4:	4b18      	ldr	r3, [pc, #96]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80088c2:	4b17      	ldr	r3, [pc, #92]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80088c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088c6:	e1dd      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088cc:	e1da      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088ce:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d117      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088da:	4b0f      	ldr	r3, [pc, #60]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80088e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	0e1b      	lsrs	r3, r3, #24
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	e006      	b.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80088f2:	4b09      	ldr	r3, [pc, #36]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80088f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	0e1b      	lsrs	r3, r3, #24
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	4a06      	ldr	r2, [pc, #24]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008908:	e1bc      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800890e:	e1b9      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008914:	e1b6      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008916:	bf00      	nop
 8008918:	46020c00 	.word	0x46020c00
 800891c:	0800ec20 	.word	0x0800ec20
 8008920:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008928:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800892c:	430b      	orrs	r3, r1
 800892e:	d156      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008930:	4ba5      	ldr	r3, [pc, #660]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800893a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008942:	d028      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8008944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008946:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800894a:	d845      	bhi.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008952:	d013      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800895a:	d83d      	bhi.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008968:	d004      	beq.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800896a:	e035      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fd fd26 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8008970:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008972:	e187      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008974:	f7fd fc06 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8008978:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800897a:	e183      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800897c:	4b92      	ldr	r3, [pc, #584]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008988:	d102      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800898a:	4b90      	ldr	r3, [pc, #576]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800898e:	e179      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008994:	e176      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008996:	4b8c      	ldr	r3, [pc, #560]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b20      	cmp	r3, #32
 80089a0:	d117      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80089a2:	4b89      	ldr	r3, [pc, #548]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80089ae:	4b86      	ldr	r3, [pc, #536]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	0e1b      	lsrs	r3, r3, #24
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	e006      	b.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80089ba:	4b83      	ldr	r3, [pc, #524]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089c0:	041b      	lsls	r3, r3, #16
 80089c2:	0e1b      	lsrs	r3, r3, #24
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	4a81      	ldr	r2, [pc, #516]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80089ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089d0:	e158      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089d6:	e155      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089dc:	e152      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80089de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80089e6:	430b      	orrs	r3, r1
 80089e8:	d177      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80089ea:	4b77      	ldr	r3, [pc, #476]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80089ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089f0:	f003 0318 	and.w	r3, r3, #24
 80089f4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	2b18      	cmp	r3, #24
 80089fa:	d86b      	bhi.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80089fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a69 	.word	0x08008a69
 8008a08:	08008ad5 	.word	0x08008ad5
 8008a0c:	08008ad5 	.word	0x08008ad5
 8008a10:	08008ad5 	.word	0x08008ad5
 8008a14:	08008ad5 	.word	0x08008ad5
 8008a18:	08008ad5 	.word	0x08008ad5
 8008a1c:	08008ad5 	.word	0x08008ad5
 8008a20:	08008ad5 	.word	0x08008ad5
 8008a24:	08008a71 	.word	0x08008a71
 8008a28:	08008ad5 	.word	0x08008ad5
 8008a2c:	08008ad5 	.word	0x08008ad5
 8008a30:	08008ad5 	.word	0x08008ad5
 8008a34:	08008ad5 	.word	0x08008ad5
 8008a38:	08008ad5 	.word	0x08008ad5
 8008a3c:	08008ad5 	.word	0x08008ad5
 8008a40:	08008ad5 	.word	0x08008ad5
 8008a44:	08008a79 	.word	0x08008a79
 8008a48:	08008ad5 	.word	0x08008ad5
 8008a4c:	08008ad5 	.word	0x08008ad5
 8008a50:	08008ad5 	.word	0x08008ad5
 8008a54:	08008ad5 	.word	0x08008ad5
 8008a58:	08008ad5 	.word	0x08008ad5
 8008a5c:	08008ad5 	.word	0x08008ad5
 8008a60:	08008ad5 	.word	0x08008ad5
 8008a64:	08008a93 	.word	0x08008a93
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008a68:	f7fd fcd0 	bl	800640c <HAL_RCC_GetPCLK3Freq>
 8008a6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a6e:	e109      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a70:	f7fd fb88 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8008a74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a76:	e105      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a78:	4b53      	ldr	r3, [pc, #332]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a84:	d102      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8008a86:	4b51      	ldr	r3, [pc, #324]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a8a:	e0fb      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a90:	e0f8      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a92:	4b4d      	ldr	r3, [pc, #308]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b20      	cmp	r3, #32
 8008a9c:	d117      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8008aaa:	4b47      	ldr	r3, [pc, #284]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	0e1b      	lsrs	r3, r3, #24
 8008ab0:	f003 030f 	and.w	r3, r3, #15
 8008ab4:	e006      	b.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8008ab6:	4b44      	ldr	r3, [pc, #272]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008abc:	041b      	lsls	r3, r3, #16
 8008abe:	0e1b      	lsrs	r3, r3, #24
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	4a42      	ldr	r2, [pc, #264]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008acc:	e0da      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad2:	e0d7      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad8:	e0d4      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ade:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	d155      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008ae6:	4b38      	ldr	r3, [pc, #224]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008ae8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008aec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008af0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008af8:	d013      	beq.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b00:	d844      	bhi.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b08:	d013      	beq.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b10:	d83c      	bhi.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d014      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b1e:	d014      	beq.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8008b20:	e034      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b22:	f107 0318 	add.w	r3, r7, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fc24 	bl	8007374 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b30:	e0a8      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fac2 	bl	80070c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b40:	e0a0      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008b42:	f7fd fb1f 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8008b46:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008b48:	e09c      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d117      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b56:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8008b62:	4b19      	ldr	r3, [pc, #100]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	0e1b      	lsrs	r3, r3, #24
 8008b68:	f003 030f 	and.w	r3, r3, #15
 8008b6c:	e006      	b.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008b6e:	4b16      	ldr	r3, [pc, #88]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b74:	041b      	lsls	r3, r3, #16
 8008b76:	0e1b      	lsrs	r3, r3, #24
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	4a14      	ldr	r2, [pc, #80]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8008b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b84:	e07e      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b8a:	e07b      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b90:	e078      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b96:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	d138      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ba8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8008bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d10d      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8008bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc4:	e05e      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008bc6:	bf00      	nop
 8008bc8:	46020c00 	.word	0x46020c00
 8008bcc:	00f42400 	.word	0x00f42400
 8008bd0:	0800ec20 	.word	0x0800ec20
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008be2:	d112      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bea:	d10e      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bec:	4b28      	ldr	r3, [pc, #160]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bfa:	d102      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8008bfc:	23fa      	movs	r3, #250	@ 0xfa
 8008bfe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c00:	e040      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008c02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c08:	e03c      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0e:	e039      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c14:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	d131      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008c26:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008c28:	4b19      	ldr	r3, [pc, #100]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c34:	d105      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8008c3c:	4b15      	ldr	r3, [pc, #84]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8008c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c40:	e020      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008c42:	4b13      	ldr	r3, [pc, #76]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c56:	d102      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008c58:	4b0f      	ldr	r3, [pc, #60]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5c:	e012      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c6a:	d106      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c72:	d102      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8008c74:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c78:	e004      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7e:	e001      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3738      	adds	r7, #56	@ 0x38
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	46020c00 	.word	0x46020c00
 8008c94:	02dc6c00 	.word	0x02dc6c00
 8008c98:	016e3600 	.word	0x016e3600
 8008c9c:	00f42400 	.word	0x00f42400

08008ca0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008ca8:	4b47      	ldr	r3, [pc, #284]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a46      	ldr	r2, [pc, #280]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008cae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cb4:	f7f9 ffe8 	bl	8002c88 <HAL_GetTick>
 8008cb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cba:	e008      	b.n	8008cce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cbc:	f7f9 ffe4 	bl	8002c88 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d901      	bls.n	8008cce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e077      	b.n	8008dbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cce:	4b3e      	ldr	r3, [pc, #248]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f0      	bne.n	8008cbc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008cda:	4b3b      	ldr	r3, [pc, #236]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6811      	ldr	r1, [r2, #0]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6852      	ldr	r2, [r2, #4]
 8008cee:	3a01      	subs	r2, #1
 8008cf0:	0212      	lsls	r2, r2, #8
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	4934      	ldr	r1, [pc, #208]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008cfa:	4b33      	ldr	r3, [pc, #204]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cfe:	4b33      	ldr	r3, [pc, #204]	@ (8008dcc <RCCEx_PLL2_Config+0x12c>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6892      	ldr	r2, [r2, #8]
 8008d06:	3a01      	subs	r2, #1
 8008d08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	68d2      	ldr	r2, [r2, #12]
 8008d10:	3a01      	subs	r2, #1
 8008d12:	0252      	lsls	r2, r2, #9
 8008d14:	b292      	uxth	r2, r2
 8008d16:	4311      	orrs	r1, r2
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6912      	ldr	r2, [r2, #16]
 8008d1c:	3a01      	subs	r2, #1
 8008d1e:	0412      	lsls	r2, r2, #16
 8008d20:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008d24:	4311      	orrs	r1, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6952      	ldr	r2, [r2, #20]
 8008d2a:	3a01      	subs	r2, #1
 8008d2c:	0612      	lsls	r2, r2, #24
 8008d2e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008d32:	430a      	orrs	r2, r1
 8008d34:	4924      	ldr	r1, [pc, #144]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008d3a:	4b23      	ldr	r3, [pc, #140]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	f023 020c 	bic.w	r2, r3, #12
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	4920      	ldr	r1, [pc, #128]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	491c      	ldr	r1, [pc, #112]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d60:	f023 0310 	bic.w	r3, r3, #16
 8008d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d66:	4b18      	ldr	r3, [pc, #96]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	69d2      	ldr	r2, [r2, #28]
 8008d76:	00d2      	lsls	r2, r2, #3
 8008d78:	4913      	ldr	r1, [pc, #76]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008d7e:	4b12      	ldr	r3, [pc, #72]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d82:	4a11      	ldr	r2, [pc, #68]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d84:	f043 0310 	orr.w	r3, r3, #16
 8008d88:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d96:	f7f9 ff77 	bl	8002c88 <HAL_GetTick>
 8008d9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d9c:	e008      	b.n	8008db0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d9e:	f7f9 ff73 	bl	8002c88 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d901      	bls.n	8008db0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e006      	b.n	8008dbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008db0:	4b05      	ldr	r3, [pc, #20]	@ (8008dc8 <RCCEx_PLL2_Config+0x128>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0

}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	46020c00 	.word	0x46020c00
 8008dcc:	80800000 	.word	0x80800000

08008dd0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008dd8:	4b47      	ldr	r3, [pc, #284]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a46      	ldr	r2, [pc, #280]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008de2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008de4:	f7f9 ff50 	bl	8002c88 <HAL_GetTick>
 8008de8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dea:	e008      	b.n	8008dfe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dec:	f7f9 ff4c 	bl	8002c88 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d901      	bls.n	8008dfe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e077      	b.n	8008eee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1f0      	bne.n	8008dec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6811      	ldr	r1, [r2, #0]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6852      	ldr	r2, [r2, #4]
 8008e1e:	3a01      	subs	r2, #1
 8008e20:	0212      	lsls	r2, r2, #8
 8008e22:	430a      	orrs	r2, r1
 8008e24:	4934      	ldr	r1, [pc, #208]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	630b      	str	r3, [r1, #48]	@ 0x30
 8008e2a:	4b33      	ldr	r3, [pc, #204]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e2e:	4b33      	ldr	r3, [pc, #204]	@ (8008efc <RCCEx_PLL3_Config+0x12c>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6892      	ldr	r2, [r2, #8]
 8008e36:	3a01      	subs	r2, #1
 8008e38:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68d2      	ldr	r2, [r2, #12]
 8008e40:	3a01      	subs	r2, #1
 8008e42:	0252      	lsls	r2, r2, #9
 8008e44:	b292      	uxth	r2, r2
 8008e46:	4311      	orrs	r1, r2
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6912      	ldr	r2, [r2, #16]
 8008e4c:	3a01      	subs	r2, #1
 8008e4e:	0412      	lsls	r2, r2, #16
 8008e50:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008e54:	4311      	orrs	r1, r2
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	6952      	ldr	r2, [r2, #20]
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	0612      	lsls	r2, r2, #24
 8008e5e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008e62:	430a      	orrs	r2, r1
 8008e64:	4924      	ldr	r1, [pc, #144]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008e6a:	4b23      	ldr	r3, [pc, #140]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6e:	f023 020c 	bic.w	r2, r3, #12
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	4920      	ldr	r1, [pc, #128]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	491c      	ldr	r1, [pc, #112]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e90:	f023 0310 	bic.w	r3, r3, #16
 8008e94:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e96:	4b18      	ldr	r3, [pc, #96]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	69d2      	ldr	r2, [r2, #28]
 8008ea6:	00d2      	lsls	r2, r2, #3
 8008ea8:	4913      	ldr	r1, [pc, #76]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008eae:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb2:	4a11      	ldr	r2, [pc, #68]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008eb4:	f043 0310 	orr.w	r3, r3, #16
 8008eb8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008eba:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ec4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ec6:	f7f9 fedf 	bl	8002c88 <HAL_GetTick>
 8008eca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ecc:	e008      	b.n	8008ee0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ece:	f7f9 fedb 	bl	8002c88 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d901      	bls.n	8008ee0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e006      	b.n	8008eee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <RCCEx_PLL3_Config+0x128>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0f0      	beq.n	8008ece <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	46020c00 	.word	0x46020c00
 8008efc:	80800000 	.word	0x80800000

08008f00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e0fb      	b.n	800910a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a7f      	ldr	r2, [pc, #508]	@ (8009114 <HAL_SPI_Init+0x214>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d004      	beq.n	8008f26 <HAL_SPI_Init+0x26>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a7d      	ldr	r2, [pc, #500]	@ (8009118 <HAL_SPI_Init+0x218>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	e000      	b.n	8008f28 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008f26:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a78      	ldr	r2, [pc, #480]	@ (8009114 <HAL_SPI_Init+0x214>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <HAL_SPI_Init+0x42>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a76      	ldr	r2, [pc, #472]	@ (8009118 <HAL_SPI_Init+0x218>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d105      	bne.n	8008f4e <HAL_SPI_Init+0x4e>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	d901      	bls.n	8008f4e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e0dd      	b.n	800910a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8ec 	bl	800912c <SPI_GetPacketSize>
 8008f54:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8009114 <HAL_SPI_Init+0x214>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d004      	beq.n	8008f6a <HAL_SPI_Init+0x6a>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a6c      	ldr	r2, [pc, #432]	@ (8009118 <HAL_SPI_Init+0x218>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d102      	bne.n	8008f70 <HAL_SPI_Init+0x70>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	d816      	bhi.n	8008f9e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f74:	4a69      	ldr	r2, [pc, #420]	@ (800911c <HAL_SPI_Init+0x21c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00e      	beq.n	8008f98 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a68      	ldr	r2, [pc, #416]	@ (8009120 <HAL_SPI_Init+0x220>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d009      	beq.n	8008f98 <HAL_SPI_Init+0x98>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a66      	ldr	r2, [pc, #408]	@ (8009124 <HAL_SPI_Init+0x224>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d004      	beq.n	8008f98 <HAL_SPI_Init+0x98>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a65      	ldr	r2, [pc, #404]	@ (8009128 <HAL_SPI_Init+0x228>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d104      	bne.n	8008fa2 <HAL_SPI_Init+0xa2>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d901      	bls.n	8008fa2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e0b3      	b.n	800910a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7f9 fa5e 	bl	8002478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008fde:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fe8:	d119      	bne.n	800901e <HAL_SPI_Init+0x11e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ff2:	d103      	bne.n	8008ffc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d008      	beq.n	800900e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10c      	bne.n	800901e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800900c:	d107      	bne.n	800901e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800901c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00f      	beq.n	800904a <HAL_SPI_Init+0x14a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b06      	cmp	r3, #6
 8009030:	d90b      	bls.n	800904a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	e007      	b.n	800905a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009058:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69da      	ldr	r2, [r3, #28]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009062:	431a      	orrs	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906c:	ea42 0103 	orr.w	r1, r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090c6:	ea42 0103 	orr.w	r1, r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	46002000 	.word	0x46002000
 8009118:	56002000 	.word	0x56002000
 800911c:	40013000 	.word	0x40013000
 8009120:	50013000 	.word	0x50013000
 8009124:	40003800 	.word	0x40003800
 8009128:	50003800 	.word	0x50003800

0800912c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009138:	095b      	lsrs	r3, r3, #5
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	3301      	adds	r3, #1
 8009144:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3307      	adds	r3, #7
 800914a:	08db      	lsrs	r3, r3, #3
 800914c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	fb02 f303 	mul.w	r3, r2, r3
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	d12e      	bne.n	80091d6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8009182:	2302      	movs	r3, #2
 8009184:	e028      	b.n	80091d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0201 	bic.w	r2, r2, #1
 80091a4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80091b2:	ea42 0103 	orr.w	r1, r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	e000      	b.n	80091d8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
  }
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e049      	b.n	800928a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7f9 f9c4 	bl	8002598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f000 f8ce 	bl	80093c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d001      	beq.n	80092ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e06a      	b.n	8009382 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a35      	ldr	r2, [pc, #212]	@ (8009390 <HAL_TIM_Base_Start+0xfc>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d040      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a34      	ldr	r2, [pc, #208]	@ (8009394 <HAL_TIM_Base_Start+0x100>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d03b      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092d0:	d036      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092da:	d031      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009398 <HAL_TIM_Base_Start+0x104>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d02c      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a2c      	ldr	r2, [pc, #176]	@ (800939c <HAL_TIM_Base_Start+0x108>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d027      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a2a      	ldr	r2, [pc, #168]	@ (80093a0 <HAL_TIM_Base_Start+0x10c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d022      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a29      	ldr	r2, [pc, #164]	@ (80093a4 <HAL_TIM_Base_Start+0x110>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d01d      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a27      	ldr	r2, [pc, #156]	@ (80093a8 <HAL_TIM_Base_Start+0x114>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d018      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a26      	ldr	r2, [pc, #152]	@ (80093ac <HAL_TIM_Base_Start+0x118>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d013      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a24      	ldr	r2, [pc, #144]	@ (80093b0 <HAL_TIM_Base_Start+0x11c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00e      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a23      	ldr	r2, [pc, #140]	@ (80093b4 <HAL_TIM_Base_Start+0x120>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d009      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a21      	ldr	r2, [pc, #132]	@ (80093b8 <HAL_TIM_Base_Start+0x124>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIM_Base_Start+0xac>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a20      	ldr	r2, [pc, #128]	@ (80093bc <HAL_TIM_Base_Start+0x128>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d115      	bne.n	800936c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689a      	ldr	r2, [r3, #8]
 8009346:	4b1e      	ldr	r3, [pc, #120]	@ (80093c0 <HAL_TIM_Base_Start+0x12c>)
 8009348:	4013      	ands	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b06      	cmp	r3, #6
 8009350:	d015      	beq.n	800937e <HAL_TIM_Base_Start+0xea>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009358:	d011      	beq.n	800937e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f042 0201 	orr.w	r2, r2, #1
 8009368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800936a:	e008      	b.n	800937e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	e000      	b.n	8009380 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800937e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40012c00 	.word	0x40012c00
 8009394:	50012c00 	.word	0x50012c00
 8009398:	40000400 	.word	0x40000400
 800939c:	50000400 	.word	0x50000400
 80093a0:	40000800 	.word	0x40000800
 80093a4:	50000800 	.word	0x50000800
 80093a8:	40000c00 	.word	0x40000c00
 80093ac:	50000c00 	.word	0x50000c00
 80093b0:	40013400 	.word	0x40013400
 80093b4:	50013400 	.word	0x50013400
 80093b8:	40014000 	.word	0x40014000
 80093bc:	50014000 	.word	0x50014000
 80093c0:	00010007 	.word	0x00010007

080093c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a6e      	ldr	r2, [pc, #440]	@ (8009590 <TIM_Base_SetConfig+0x1cc>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d02b      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a6d      	ldr	r2, [pc, #436]	@ (8009594 <TIM_Base_SetConfig+0x1d0>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d027      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ea:	d023      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093f2:	d01f      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a68      	ldr	r2, [pc, #416]	@ (8009598 <TIM_Base_SetConfig+0x1d4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d01b      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a67      	ldr	r2, [pc, #412]	@ (800959c <TIM_Base_SetConfig+0x1d8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d017      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a66      	ldr	r2, [pc, #408]	@ (80095a0 <TIM_Base_SetConfig+0x1dc>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d013      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a65      	ldr	r2, [pc, #404]	@ (80095a4 <TIM_Base_SetConfig+0x1e0>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00f      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a64      	ldr	r2, [pc, #400]	@ (80095a8 <TIM_Base_SetConfig+0x1e4>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00b      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a63      	ldr	r2, [pc, #396]	@ (80095ac <TIM_Base_SetConfig+0x1e8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d007      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a62      	ldr	r2, [pc, #392]	@ (80095b0 <TIM_Base_SetConfig+0x1ec>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_Base_SetConfig+0x70>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a61      	ldr	r2, [pc, #388]	@ (80095b4 <TIM_Base_SetConfig+0x1f0>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d108      	bne.n	8009446 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a51      	ldr	r2, [pc, #324]	@ (8009590 <TIM_Base_SetConfig+0x1cc>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d043      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a50      	ldr	r2, [pc, #320]	@ (8009594 <TIM_Base_SetConfig+0x1d0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d03f      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945c:	d03b      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009464:	d037      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a4b      	ldr	r2, [pc, #300]	@ (8009598 <TIM_Base_SetConfig+0x1d4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d033      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a4a      	ldr	r2, [pc, #296]	@ (800959c <TIM_Base_SetConfig+0x1d8>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d02f      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a49      	ldr	r2, [pc, #292]	@ (80095a0 <TIM_Base_SetConfig+0x1dc>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d02b      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a48      	ldr	r2, [pc, #288]	@ (80095a4 <TIM_Base_SetConfig+0x1e0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d027      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a47      	ldr	r2, [pc, #284]	@ (80095a8 <TIM_Base_SetConfig+0x1e4>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d023      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a46      	ldr	r2, [pc, #280]	@ (80095ac <TIM_Base_SetConfig+0x1e8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d01f      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a45      	ldr	r2, [pc, #276]	@ (80095b0 <TIM_Base_SetConfig+0x1ec>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d01b      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a44      	ldr	r2, [pc, #272]	@ (80095b4 <TIM_Base_SetConfig+0x1f0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d017      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a43      	ldr	r2, [pc, #268]	@ (80095b8 <TIM_Base_SetConfig+0x1f4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d013      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a42      	ldr	r2, [pc, #264]	@ (80095bc <TIM_Base_SetConfig+0x1f8>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00f      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a41      	ldr	r2, [pc, #260]	@ (80095c0 <TIM_Base_SetConfig+0x1fc>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00b      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a40      	ldr	r2, [pc, #256]	@ (80095c4 <TIM_Base_SetConfig+0x200>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d007      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a3f      	ldr	r2, [pc, #252]	@ (80095c8 <TIM_Base_SetConfig+0x204>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d003      	beq.n	80094d6 <TIM_Base_SetConfig+0x112>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a3e      	ldr	r2, [pc, #248]	@ (80095cc <TIM_Base_SetConfig+0x208>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d108      	bne.n	80094e8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a20      	ldr	r2, [pc, #128]	@ (8009590 <TIM_Base_SetConfig+0x1cc>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d023      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a1f      	ldr	r2, [pc, #124]	@ (8009594 <TIM_Base_SetConfig+0x1d0>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d01f      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a24      	ldr	r2, [pc, #144]	@ (80095b0 <TIM_Base_SetConfig+0x1ec>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d01b      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a23      	ldr	r2, [pc, #140]	@ (80095b4 <TIM_Base_SetConfig+0x1f0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d017      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a22      	ldr	r2, [pc, #136]	@ (80095b8 <TIM_Base_SetConfig+0x1f4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d013      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a21      	ldr	r2, [pc, #132]	@ (80095bc <TIM_Base_SetConfig+0x1f8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00f      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a20      	ldr	r2, [pc, #128]	@ (80095c0 <TIM_Base_SetConfig+0x1fc>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d00b      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a1f      	ldr	r2, [pc, #124]	@ (80095c4 <TIM_Base_SetConfig+0x200>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d007      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a1e      	ldr	r2, [pc, #120]	@ (80095c8 <TIM_Base_SetConfig+0x204>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d003      	beq.n	800955c <TIM_Base_SetConfig+0x198>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a1d      	ldr	r2, [pc, #116]	@ (80095cc <TIM_Base_SetConfig+0x208>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d103      	bne.n	8009564 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b01      	cmp	r3, #1
 8009574:	d105      	bne.n	8009582 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f023 0201 	bic.w	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	611a      	str	r2, [r3, #16]
  }
}
 8009582:	bf00      	nop
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	40012c00 	.word	0x40012c00
 8009594:	50012c00 	.word	0x50012c00
 8009598:	40000400 	.word	0x40000400
 800959c:	50000400 	.word	0x50000400
 80095a0:	40000800 	.word	0x40000800
 80095a4:	50000800 	.word	0x50000800
 80095a8:	40000c00 	.word	0x40000c00
 80095ac:	50000c00 	.word	0x50000c00
 80095b0:	40013400 	.word	0x40013400
 80095b4:	50013400 	.word	0x50013400
 80095b8:	40014000 	.word	0x40014000
 80095bc:	50014000 	.word	0x50014000
 80095c0:	40014400 	.word	0x40014400
 80095c4:	50014400 	.word	0x50014400
 80095c8:	40014800 	.word	0x40014800
 80095cc:	50014800 	.word	0x50014800

080095d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e042      	b.n	8009668 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7f8 fff1 	bl	80025dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2224      	movs	r2, #36	@ 0x24
 80095fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0201 	bic.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fa68 	bl	8009af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f8c3 	bl	80097ac <UART_SetConfig>
 8009626:	4603      	mov	r3, r0
 8009628:	2b01      	cmp	r3, #1
 800962a:	d101      	bne.n	8009630 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e01b      	b.n	8009668 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800963e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800964e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fae7 	bl	8009c34 <UART_CheckIdleState>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	@ 0x28
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4613      	mov	r3, r2
 800967e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009686:	2b20      	cmp	r3, #32
 8009688:	f040 808b 	bne.w	80097a2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <HAL_UART_Transmit+0x28>
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e083      	b.n	80097a4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a6:	2b80      	cmp	r3, #128	@ 0x80
 80096a8:	d107      	bne.n	80096ba <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689a      	ldr	r2, [r3, #8]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096b8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2221      	movs	r2, #33	@ 0x21
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096ca:	f7f9 fadd 	bl	8002c88 <HAL_GetTick>
 80096ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	88fa      	ldrh	r2, [r7, #6]
 80096d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	88fa      	ldrh	r2, [r7, #6]
 80096dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e8:	d108      	bne.n	80096fc <HAL_UART_Transmit+0x8c>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d104      	bne.n	80096fc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	61bb      	str	r3, [r7, #24]
 80096fa:	e003      	b.n	8009704 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009700:	2300      	movs	r3, #0
 8009702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009704:	e030      	b.n	8009768 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2200      	movs	r2, #0
 800970e:	2180      	movs	r1, #128	@ 0x80
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fb39 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2220      	movs	r2, #32
 8009720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e03d      	b.n	80097a4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10b      	bne.n	8009746 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800973c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	3302      	adds	r3, #2
 8009742:	61bb      	str	r3, [r7, #24]
 8009744:	e007      	b.n	8009756 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	781a      	ldrb	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	3301      	adds	r3, #1
 8009754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800975c:	b29b      	uxth	r3, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	b29a      	uxth	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1c8      	bne.n	8009706 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2200      	movs	r2, #0
 800977c:	2140      	movs	r1, #64	@ 0x40
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fb02 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2220      	movs	r2, #32
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e006      	b.n	80097a4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	e000      	b.n	80097a4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80097a2:	2302      	movs	r3, #2
  }
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097b0:	b094      	sub	sp, #80	@ 0x50
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80097bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	4b7e      	ldr	r3, [pc, #504]	@ (80099bc <UART_SetConfig+0x210>)
 80097c2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	431a      	orrs	r2, r3
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	431a      	orrs	r2, r3
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	4313      	orrs	r3, r2
 80097da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4977      	ldr	r1, [pc, #476]	@ (80099c0 <UART_SetConfig+0x214>)
 80097e4:	4019      	ands	r1, r3
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ec:	430b      	orrs	r3, r1
 80097ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80097fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fc:	68d9      	ldr	r1, [r3, #12]
 80097fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	ea40 0301 	orr.w	r3, r0, r1
 8009806:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4b6a      	ldr	r3, [pc, #424]	@ (80099bc <UART_SetConfig+0x210>)
 8009814:	429a      	cmp	r2, r3
 8009816:	d009      	beq.n	800982c <UART_SetConfig+0x80>
 8009818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	4b69      	ldr	r3, [pc, #420]	@ (80099c4 <UART_SetConfig+0x218>)
 800981e:	429a      	cmp	r2, r3
 8009820:	d004      	beq.n	800982c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	6a1a      	ldr	r2, [r3, #32]
 8009826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009828:	4313      	orrs	r3, r2
 800982a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009836:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009840:	430b      	orrs	r3, r1
 8009842:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	f023 000f 	bic.w	r0, r3, #15
 800984e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009850:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	ea40 0301 	orr.w	r3, r0, r1
 800985a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	4b59      	ldr	r3, [pc, #356]	@ (80099c8 <UART_SetConfig+0x21c>)
 8009862:	429a      	cmp	r2, r3
 8009864:	d102      	bne.n	800986c <UART_SetConfig+0xc0>
 8009866:	2301      	movs	r3, #1
 8009868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800986a:	e029      	b.n	80098c0 <UART_SetConfig+0x114>
 800986c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4b56      	ldr	r3, [pc, #344]	@ (80099cc <UART_SetConfig+0x220>)
 8009872:	429a      	cmp	r2, r3
 8009874:	d102      	bne.n	800987c <UART_SetConfig+0xd0>
 8009876:	2302      	movs	r3, #2
 8009878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800987a:	e021      	b.n	80098c0 <UART_SetConfig+0x114>
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	4b53      	ldr	r3, [pc, #332]	@ (80099d0 <UART_SetConfig+0x224>)
 8009882:	429a      	cmp	r2, r3
 8009884:	d102      	bne.n	800988c <UART_SetConfig+0xe0>
 8009886:	2304      	movs	r3, #4
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800988a:	e019      	b.n	80098c0 <UART_SetConfig+0x114>
 800988c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b50      	ldr	r3, [pc, #320]	@ (80099d4 <UART_SetConfig+0x228>)
 8009892:	429a      	cmp	r2, r3
 8009894:	d102      	bne.n	800989c <UART_SetConfig+0xf0>
 8009896:	2308      	movs	r3, #8
 8009898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800989a:	e011      	b.n	80098c0 <UART_SetConfig+0x114>
 800989c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	4b4d      	ldr	r3, [pc, #308]	@ (80099d8 <UART_SetConfig+0x22c>)
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d102      	bne.n	80098ac <UART_SetConfig+0x100>
 80098a6:	2310      	movs	r3, #16
 80098a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098aa:	e009      	b.n	80098c0 <UART_SetConfig+0x114>
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	4b42      	ldr	r3, [pc, #264]	@ (80099bc <UART_SetConfig+0x210>)
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d102      	bne.n	80098bc <UART_SetConfig+0x110>
 80098b6:	2320      	movs	r3, #32
 80098b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ba:	e001      	b.n	80098c0 <UART_SetConfig+0x114>
 80098bc:	2300      	movs	r3, #0
 80098be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	4b3d      	ldr	r3, [pc, #244]	@ (80099bc <UART_SetConfig+0x210>)
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d005      	beq.n	80098d6 <UART_SetConfig+0x12a>
 80098ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b3d      	ldr	r3, [pc, #244]	@ (80099c4 <UART_SetConfig+0x218>)
 80098d0:	429a      	cmp	r2, r3
 80098d2:	f040 8085 	bne.w	80099e0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80098d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098d8:	2200      	movs	r2, #0
 80098da:	623b      	str	r3, [r7, #32]
 80098dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80098de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80098e2:	f7fd fffb 	bl	80078dc <HAL_RCCEx_GetPeriphCLKFreq>
 80098e6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80098e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80e8 	beq.w	8009ac0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80098f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f4:	4a39      	ldr	r2, [pc, #228]	@ (80099dc <UART_SetConfig+0x230>)
 80098f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	4613      	mov	r3, r2
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4413      	add	r3, r2
 800990e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009910:	429a      	cmp	r2, r3
 8009912:	d305      	bcc.n	8009920 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800991a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800991c:	429a      	cmp	r2, r3
 800991e:	d903      	bls.n	8009928 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009926:	e048      	b.n	80099ba <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800992a:	2200      	movs	r2, #0
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	61fa      	str	r2, [r7, #28]
 8009930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009934:	4a29      	ldr	r2, [pc, #164]	@ (80099dc <UART_SetConfig+0x230>)
 8009936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993a:	b29b      	uxth	r3, r3
 800993c:	2200      	movs	r2, #0
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	617a      	str	r2, [r7, #20]
 8009942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009946:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800994a:	f7f7 f931 	bl	8000bb0 <__aeabi_uldivmod>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4610      	mov	r0, r2
 8009954:	4619      	mov	r1, r3
 8009956:	f04f 0200 	mov.w	r2, #0
 800995a:	f04f 0300 	mov.w	r3, #0
 800995e:	020b      	lsls	r3, r1, #8
 8009960:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009964:	0202      	lsls	r2, r0, #8
 8009966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009968:	6849      	ldr	r1, [r1, #4]
 800996a:	0849      	lsrs	r1, r1, #1
 800996c:	2000      	movs	r0, #0
 800996e:	460c      	mov	r4, r1
 8009970:	4605      	mov	r5, r0
 8009972:	eb12 0804 	adds.w	r8, r2, r4
 8009976:	eb43 0905 	adc.w	r9, r3, r5
 800997a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	60bb      	str	r3, [r7, #8]
 8009982:	60fa      	str	r2, [r7, #12]
 8009984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009988:	4640      	mov	r0, r8
 800998a:	4649      	mov	r1, r9
 800998c:	f7f7 f910 	bl	8000bb0 <__aeabi_uldivmod>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4613      	mov	r3, r2
 8009996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800999a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800999e:	d308      	bcc.n	80099b2 <UART_SetConfig+0x206>
 80099a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099a6:	d204      	bcs.n	80099b2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80099a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80099ae:	60da      	str	r2, [r3, #12]
 80099b0:	e003      	b.n	80099ba <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80099b8:	e082      	b.n	8009ac0 <UART_SetConfig+0x314>
 80099ba:	e081      	b.n	8009ac0 <UART_SetConfig+0x314>
 80099bc:	46002400 	.word	0x46002400
 80099c0:	cfff69f3 	.word	0xcfff69f3
 80099c4:	56002400 	.word	0x56002400
 80099c8:	40013800 	.word	0x40013800
 80099cc:	40004400 	.word	0x40004400
 80099d0:	40004800 	.word	0x40004800
 80099d4:	40004c00 	.word	0x40004c00
 80099d8:	40005000 	.word	0x40005000
 80099dc:	0800ece0 	.word	0x0800ece0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099e8:	d13c      	bne.n	8009a64 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80099ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ec:	2200      	movs	r2, #0
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	607a      	str	r2, [r7, #4]
 80099f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099f6:	f7fd ff71 	bl	80078dc <HAL_RCCEx_GetPeriphCLKFreq>
 80099fa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d05e      	beq.n	8009ac0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	4a39      	ldr	r2, [pc, #228]	@ (8009aec <UART_SetConfig+0x340>)
 8009a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a14:	005a      	lsls	r2, r3, #1
 8009a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	085b      	lsrs	r3, r3, #1
 8009a1c:	441a      	add	r2, r3
 8009a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2a:	2b0f      	cmp	r3, #15
 8009a2c:	d916      	bls.n	8009a5c <UART_SetConfig+0x2b0>
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a34:	d212      	bcs.n	8009a5c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f023 030f 	bic.w	r3, r3, #15
 8009a3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a42:	085b      	lsrs	r3, r3, #1
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009a58:	60da      	str	r2, [r3, #12]
 8009a5a:	e031      	b.n	8009ac0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a62:	e02d      	b.n	8009ac0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a66:	2200      	movs	r2, #0
 8009a68:	469a      	mov	sl, r3
 8009a6a:	4693      	mov	fp, r2
 8009a6c:	4650      	mov	r0, sl
 8009a6e:	4659      	mov	r1, fp
 8009a70:	f7fd ff34 	bl	80078dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009a74:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d021      	beq.n	8009ac0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a80:	4a1a      	ldr	r2, [pc, #104]	@ (8009aec <UART_SetConfig+0x340>)
 8009a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	085b      	lsrs	r3, r3, #1
 8009a94:	441a      	add	r2, r3
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa2:	2b0f      	cmp	r3, #15
 8009aa4:	d909      	bls.n	8009aba <UART_SetConfig+0x30e>
 8009aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aac:	d205      	bcs.n	8009aba <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60da      	str	r2, [r3, #12]
 8009ab8:	e002      	b.n	8009ac0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	2201      	movs	r2, #1
 8009acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad8:	2200      	movs	r2, #0
 8009ada:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009adc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3750      	adds	r7, #80	@ 0x50
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aea:	bf00      	nop
 8009aec:	0800ece0 	.word	0x0800ece0

08009af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00a      	beq.n	8009b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01a      	beq.n	8009c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bee:	d10a      	bne.n	8009c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	605a      	str	r2, [r3, #4]
  }
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b098      	sub	sp, #96	@ 0x60
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c44:	f7f9 f820 	bl	8002c88 <HAL_GetTick>
 8009c48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d12f      	bne.n	8009cb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c60:	2200      	movs	r2, #0
 8009c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f88e 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d022      	beq.n	8009cb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e6      	bne.n	8009c72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e063      	b.n	8009d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d149      	bne.n	8009d5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f857 	bl	8009d88 <UART_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d03c      	beq.n	8009d5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	623b      	str	r3, [r7, #32]
   return(result);
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e6      	bne.n	8009ce0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3308      	adds	r3, #8
 8009d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d32:	61fa      	str	r2, [r7, #28]
 8009d34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	69b9      	ldr	r1, [r7, #24]
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e012      	b.n	8009d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3758      	adds	r7, #88	@ 0x58
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d98:	e04f      	b.n	8009e3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da0:	d04b      	beq.n	8009e3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da2:	f7f8 ff71 	bl	8002c88 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d302      	bcc.n	8009db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e04e      	b.n	8009e5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d037      	beq.n	8009e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b80      	cmp	r3, #128	@ 0x80
 8009dce:	d034      	beq.n	8009e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b40      	cmp	r3, #64	@ 0x40
 8009dd4:	d031      	beq.n	8009e3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f003 0308 	and.w	r3, r3, #8
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	d110      	bne.n	8009e06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2208      	movs	r2, #8
 8009dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f838 	bl	8009e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2208      	movs	r2, #8
 8009df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e029      	b.n	8009e5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e14:	d111      	bne.n	8009e3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f81e 	bl	8009e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e00f      	b.n	8009e5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69da      	ldr	r2, [r3, #28]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4013      	ands	r3, r2
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	bf0c      	ite	eq
 8009e4a:	2301      	moveq	r3, #1
 8009e4c:	2300      	movne	r3, #0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d0a0      	beq.n	8009d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b095      	sub	sp, #84	@ 0x54
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e6      	bne.n	8009e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009eb2:	f023 0301 	bic.w	r3, r3, #1
 8009eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e3      	bne.n	8009e9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d118      	bne.n	8009f0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f023 0310 	bic.w	r3, r3, #16
 8009ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009efa:	61bb      	str	r3, [r7, #24]
 8009efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6979      	ldr	r1, [r7, #20]
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	613b      	str	r3, [r7, #16]
   return(result);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e6      	bne.n	8009edc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f22:	bf00      	nop
 8009f24:	3754      	adds	r7, #84	@ 0x54
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d101      	bne.n	8009f44 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e027      	b.n	8009f94 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2224      	movs	r2, #36	@ 0x24
 8009f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0201 	bic.w	r2, r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e02d      	b.n	800a014 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2224      	movs	r2, #36	@ 0x24
 8009fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f022 0201 	bic.w	r2, r2, #1
 8009fde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f84f 	bl	800a098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2220      	movs	r2, #32
 800a006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a030:	2302      	movs	r3, #2
 800a032:	e02d      	b.n	800a090 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2224      	movs	r2, #36	@ 0x24
 800a040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0201 	bic.w	r2, r2, #1
 800a05a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f811 	bl	800a098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2220      	movs	r2, #32
 800a082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d108      	bne.n	800a0ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0b8:	e031      	b.n	800a11e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0ba:	2308      	movs	r3, #8
 800a0bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0be:	2308      	movs	r3, #8
 800a0c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	0e5b      	lsrs	r3, r3, #25
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	0f5b      	lsrs	r3, r3, #29
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	7b3a      	ldrb	r2, [r7, #12]
 800a0e6:	4911      	ldr	r1, [pc, #68]	@ (800a12c <UARTEx_SetNbDataToProcess+0x94>)
 800a0e8:	5c8a      	ldrb	r2, [r1, r2]
 800a0ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0ee:	7b3a      	ldrb	r2, [r7, #12]
 800a0f0:	490f      	ldr	r1, [pc, #60]	@ (800a130 <UARTEx_SetNbDataToProcess+0x98>)
 800a0f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	7b7a      	ldrb	r2, [r7, #13]
 800a104:	4909      	ldr	r1, [pc, #36]	@ (800a12c <UARTEx_SetNbDataToProcess+0x94>)
 800a106:	5c8a      	ldrb	r2, [r1, r2]
 800a108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a10c:	7b7a      	ldrb	r2, [r7, #13]
 800a10e:	4908      	ldr	r1, [pc, #32]	@ (800a130 <UARTEx_SetNbDataToProcess+0x98>)
 800a110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a112:	fb93 f3f2 	sdiv	r3, r3, r2
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	0800ecf8 	.word	0x0800ecf8
 800a130:	0800ed00 	.word	0x0800ed00

0800a134 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f043 0202 	orr.w	r2, r3, #2
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f023 0202 	bic.w	r2, r3, #2
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a172:	b480      	push	{r7}
 800a174:	b08b      	sub	sp, #44	@ 0x2c
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	fa93 f3a3 	rbit	r3, r3
 800a18c:	613b      	str	r3, [r7, #16]
  return result;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a198:	2320      	movs	r3, #32
 800a19a:	e003      	b.n	800a1a4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	fab3 f383 	clz	r3, r3
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	2103      	movs	r1, #3
 800a1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ac:	43db      	mvns	r3, r3
 800a1ae:	401a      	ands	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	fa93 f3a3 	rbit	r3, r3
 800a1ba:	61fb      	str	r3, [r7, #28]
  return result;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a1c6:	2320      	movs	r3, #32
 800a1c8:	e003      	b.n	800a1d2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	fab3 f383 	clz	r3, r3
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 800a1e0:	bf00      	nop
 800a1e2:	372c      	adds	r7, #44	@ 0x2c
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	43db      	mvns	r3, r3
 800a200:	401a      	ands	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	fb01 f303 	mul.w	r3, r1, r3
 800a20a:	431a      	orrs	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	605a      	str	r2, [r3, #4]
}
 800a210:	bf00      	nop
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b08b      	sub	sp, #44	@ 0x2c
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	fa93 f3a3 	rbit	r3, r3
 800a236:	613b      	str	r3, [r7, #16]
  return result;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a242:	2320      	movs	r3, #32
 800a244:	e003      	b.n	800a24e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	fab3 f383 	clz	r3, r3
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	2103      	movs	r1, #3
 800a252:	fa01 f303 	lsl.w	r3, r1, r3
 800a256:	43db      	mvns	r3, r3
 800a258:	401a      	ands	r2, r3
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	fa93 f3a3 	rbit	r3, r3
 800a264:	61fb      	str	r3, [r7, #28]
  return result;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d101      	bne.n	800a274 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a270:	2320      	movs	r3, #32
 800a272:	e003      	b.n	800a27c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	fab3 f383 	clz	r3, r3
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	fa01 f303 	lsl.w	r3, r1, r3
 800a284:	431a      	orrs	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 800a28a:	bf00      	nop
 800a28c:	372c      	adds	r7, #44	@ 0x2c
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a296:	b480      	push	{r7}
 800a298:	b08b      	sub	sp, #44	@ 0x2c
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	fa93 f3a3 	rbit	r3, r3
 800a2b0:	613b      	str	r3, [r7, #16]
  return result;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a2bc:	2320      	movs	r3, #32
 800a2be:	e003      	b.n	800a2c8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	fab3 f383 	clz	r3, r3
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	2103      	movs	r1, #3
 800a2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	401a      	ands	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	fa93 f3a3 	rbit	r3, r3
 800a2de:	61fb      	str	r3, [r7, #28]
  return result;
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a2ea:	2320      	movs	r3, #32
 800a2ec:	e003      	b.n	800a2f6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	fab3 f383 	clz	r3, r3
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a2fe:	431a      	orrs	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 800a304:	bf00      	nop
 800a306:	372c      	adds	r7, #44	@ 0x2c
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a310:	b480      	push	{r7}
 800a312:	b08b      	sub	sp, #44	@ 0x2c
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1a      	ldr	r2, [r3, #32]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	fa93 f3a3 	rbit	r3, r3
 800a32a:	613b      	str	r3, [r7, #16]
  return result;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a336:	2320      	movs	r3, #32
 800a338:	e003      	b.n	800a342 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	fab3 f383 	clz	r3, r3
 800a340:	b2db      	uxtb	r3, r3
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	210f      	movs	r1, #15
 800a346:	fa01 f303 	lsl.w	r3, r1, r3
 800a34a:	43db      	mvns	r3, r3
 800a34c:	401a      	ands	r2, r3
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	fa93 f3a3 	rbit	r3, r3
 800a358:	61fb      	str	r3, [r7, #28]
  return result;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a364:	2320      	movs	r3, #32
 800a366:	e003      	b.n	800a370 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	fab3 f383 	clz	r3, r3
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	fa01 f303 	lsl.w	r3, r1, r3
 800a378:	431a      	orrs	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 800a37e:	bf00      	nop
 800a380:	372c      	adds	r7, #44	@ 0x2c
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b08b      	sub	sp, #44	@ 0x2c
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	0a1b      	lsrs	r3, r3, #8
 800a39e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	fa93 f3a3 	rbit	r3, r3
 800a3a6:	613b      	str	r3, [r7, #16]
  return result;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a3b2:	2320      	movs	r3, #32
 800a3b4:	e003      	b.n	800a3be <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	fab3 f383 	clz	r3, r3
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	210f      	movs	r1, #15
 800a3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	401a      	ands	r2, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	fa93 f3a3 	rbit	r3, r3
 800a3d6:	61fb      	str	r3, [r7, #28]
  return result;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	e003      	b.n	800a3ee <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	fab3 f383 	clz	r3, r3
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 800a3fc:	bf00      	nop
 800a3fe:	372c      	adds	r7, #44	@ 0x2c
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	@ 0x28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	fa93 f3a3 	rbit	r3, r3
 800a41e:	617b      	str	r3, [r7, #20]
  return result;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <LL_GPIO_Init+0x26>
    return 32U;
 800a42a:	2320      	movs	r3, #32
 800a42c:	e003      	b.n	800a436 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	fab3 f383 	clz	r3, r3
 800a434:	b2db      	uxtb	r3, r3
 800a436:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a438:	e058      	b.n	800a4ec <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	2101      	movs	r1, #1
 800a440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a442:	fa01 f303 	lsl.w	r3, r1, r3
 800a446:	4013      	ands	r3, r2
 800a448:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d04a      	beq.n	800a4e6 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d003      	beq.n	800a460 <LL_GPIO_Init+0x58>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d10e      	bne.n	800a47e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	461a      	mov	r2, r3
 800a466:	6a39      	ldr	r1, [r7, #32]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff fed7 	bl	800a21c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	461a      	mov	r2, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff feb7 	bl	800a1ec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	461a      	mov	r2, r3
 800a484:	6a39      	ldr	r1, [r7, #32]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff ff05 	bl	800a296 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d121      	bne.n	800a4d8 <LL_GPIO_Init+0xd0>
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	fa93 f3a3 	rbit	r3, r3
 800a49e:	60bb      	str	r3, [r7, #8]
  return result;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <LL_GPIO_Init+0xa6>
    return 32U;
 800a4aa:	2320      	movs	r3, #32
 800a4ac:	e003      	b.n	800a4b6 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	fab3 f383 	clz	r3, r3
 800a4b4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a4b6:	2b07      	cmp	r3, #7
 800a4b8:	d807      	bhi.n	800a4ca <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6a39      	ldr	r1, [r7, #32]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff ff24 	bl	800a310 <LL_GPIO_SetAFPin_0_7>
 800a4c8:	e006      	b.n	800a4d8 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6a39      	ldr	r1, [r7, #32]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff ff59 	bl	800a38a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6a39      	ldr	r1, [r7, #32]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff fe46 	bl	800a172 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d19f      	bne.n	800a43a <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3728      	adds	r7, #40	@ 0x28
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a504:	b084      	sub	sp, #16
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	f107 001c 	add.w	r0, r7, #28
 800a512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fa6c 	bl	800aa00 <USB_CoreReset>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a52c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a540:	e005      	b.n	800a54e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a546:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a55a:	b004      	add	sp, #16
 800a55c:	4770      	bx	lr

0800a55e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f023 0201 	bic.w	r2, r3, #1
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d115      	bne.n	800a5ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5ae:	200a      	movs	r0, #10
 800a5b0:	f7f8 fb76 	bl	8002ca0 <HAL_Delay>
      ms += 10U;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	330a      	adds	r3, #10
 800a5b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fa12 	bl	800a9e4 <USB_GetMode>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d01e      	beq.n	800a604 <USB_SetCurrentMode+0x84>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5ca:	d9f0      	bls.n	800a5ae <USB_SetCurrentMode+0x2e>
 800a5cc:	e01a      	b.n	800a604 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d115      	bne.n	800a600 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5e0:	200a      	movs	r0, #10
 800a5e2:	f7f8 fb5d 	bl	8002ca0 <HAL_Delay>
      ms += 10U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	330a      	adds	r3, #10
 800a5ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f9f9 	bl	800a9e4 <USB_GetMode>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <USB_SetCurrentMode+0x84>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5fc:	d9f0      	bls.n	800a5e0 <USB_SetCurrentMode+0x60>
 800a5fe:	e001      	b.n	800a604 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e005      	b.n	800a610 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2bc8      	cmp	r3, #200	@ 0xc8
 800a608:	d101      	bne.n	800a60e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a618:	b084      	sub	sp, #16
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b086      	sub	sp, #24
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a632:	2300      	movs	r3, #0
 800a634:	613b      	str	r3, [r7, #16]
 800a636:	e009      	b.n	800a64c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	3340      	adds	r3, #64	@ 0x40
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	2200      	movs	r2, #0
 800a644:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	3301      	adds	r3, #1
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2b0e      	cmp	r3, #14
 800a650:	d9f2      	bls.n	800a638 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a652:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a656:	2b00      	cmp	r3, #0
 800a658:	d11c      	bne.n	800a694 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a668:	f043 0302 	orr.w	r3, r3, #2
 800a66c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a672:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	e005      	b.n	800a6a0 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a698:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6ac:	2103      	movs	r1, #3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f95e 	bl	800a970 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6b4:	2110      	movs	r1, #16
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f8fa 	bl	800a8b0 <USB_FlushTxFifo>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f924 	bl	800a914 <USB_FlushRxFifo>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	613b      	str	r3, [r7, #16]
 800a6fe:	e043      	b.n	800a788 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a712:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a716:	d118      	bne.n	800a74a <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a72a:	461a      	mov	r2, r3
 800a72c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	e013      	b.n	800a75c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a740:	461a      	mov	r2, r3
 800a742:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e008      	b.n	800a75c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a756:	461a      	mov	r2, r3
 800a758:	2300      	movs	r3, #0
 800a75a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a768:	461a      	mov	r2, r3
 800a76a:	2300      	movs	r3, #0
 800a76c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77a:	461a      	mov	r2, r3
 800a77c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a780:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	3301      	adds	r3, #1
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a78c:	461a      	mov	r2, r3
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	4293      	cmp	r3, r2
 800a792:	d3b5      	bcc.n	800a700 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a794:	2300      	movs	r3, #0
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	e043      	b.n	800a822 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7b0:	d118      	bne.n	800a7e4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10a      	bne.n	800a7ce <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	e013      	b.n	800a7f6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	e008      	b.n	800a7f6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a802:	461a      	mov	r2, r3
 800a804:	2300      	movs	r3, #0
 800a806:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a814:	461a      	mov	r2, r3
 800a816:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a81a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	3301      	adds	r3, #1
 800a820:	613b      	str	r3, [r7, #16]
 800a822:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a826:	461a      	mov	r2, r3
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d3b5      	bcc.n	800a79a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a83c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a840:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a84e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a854:	2b00      	cmp	r3, #0
 800a856:	d105      	bne.n	800a864 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	f043 0210 	orr.w	r2, r3, #16
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	699a      	ldr	r2, [r3, #24]
 800a868:	4b10      	ldr	r3, [pc, #64]	@ (800a8ac <USB_DevInit+0x294>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a870:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	f043 0208 	orr.w	r2, r3, #8
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a884:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d107      	bne.n	800a89c <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a894:	f043 0304 	orr.w	r3, r3, #4
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8a8:	b004      	add	sp, #16
 800a8aa:	4770      	bx	lr
 800a8ac:	803c3800 	.word	0x803c3800

0800a8b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8ca:	d901      	bls.n	800a8d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e01b      	b.n	800a908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	daf2      	bge.n	800a8be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	019b      	lsls	r3, r3, #6
 800a8e0:	f043 0220 	orr.w	r2, r3, #32
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8f4:	d901      	bls.n	800a8fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e006      	b.n	800a908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b20      	cmp	r3, #32
 800a904:	d0f0      	beq.n	800a8e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3301      	adds	r3, #1
 800a924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a92c:	d901      	bls.n	800a932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e018      	b.n	800a964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	daf2      	bge.n	800a920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2210      	movs	r2, #16
 800a942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3301      	adds	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a950:	d901      	bls.n	800a956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e006      	b.n	800a964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d0f0      	beq.n	800a944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a990:	4313      	orrs	r3, r2
 800a992:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b085      	sub	sp, #20
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9d0:	f043 0302 	orr.w	r3, r3, #2
 800a9d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa18:	d901      	bls.n	800aa1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e01b      	b.n	800aa56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	daf2      	bge.n	800aa0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	f043 0201 	orr.w	r2, r3, #1
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa42:	d901      	bls.n	800aa48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e006      	b.n	800aa56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d0f0      	beq.n	800aa36 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
	...

0800aa64 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_SINE_MODEL_ACTIVATIONS_ALIGNMENT));
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	3303      	adds	r3, #3
 800aa74:	f023 0303 	bic.w	r3, r3, #3
 800aa78:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_3_input0_output_array.data = AI_PTR(NULL);
 800aa7a:	4b16      	ldr	r3, [pc, #88]	@ (800aad4 <sine_model_configure_activations+0x70>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	609a      	str	r2, [r3, #8]
    serving_default_dense_3_input0_output_array.data_start = AI_PTR(NULL);
 800aa80:	4b14      	ldr	r3, [pc, #80]	@ (800aad4 <sine_model_configure_activations+0x70>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800aa86:	4a14      	ldr	r2, [pc, #80]	@ (800aad8 <sine_model_configure_activations+0x74>)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800aa8c:	4a12      	ldr	r2, [pc, #72]	@ (800aad8 <sine_model_configure_activations+0x74>)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800aa92:	4a12      	ldr	r2, [pc, #72]	@ (800aadc <sine_model_configure_activations+0x78>)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800aa98:	4a10      	ldr	r2, [pc, #64]	@ (800aadc <sine_model_configure_activations+0x78>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3340      	adds	r3, #64	@ 0x40
 800aaa2:	4a0f      	ldr	r2, [pc, #60]	@ (800aae0 <sine_model_configure_activations+0x7c>)
 800aaa4:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3340      	adds	r3, #64	@ 0x40
 800aaaa:	4a0d      	ldr	r2, [pc, #52]	@ (800aae0 <sine_model_configure_activations+0x7c>)
 800aaac:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 800aaae:	4a0d      	ldr	r2, [pc, #52]	@ (800aae4 <sine_model_configure_activations+0x80>)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 800aab4:	4a0b      	ldr	r2, [pc, #44]	@ (800aae4 <sine_model_configure_activations+0x80>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 800aaba:	4b0b      	ldr	r3, [pc, #44]	@ (800aae8 <sine_model_configure_activations+0x84>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 800aac0:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <sine_model_configure_activations+0x84>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800aac6:	2301      	movs	r3, #1
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	200000cc 	.word	0x200000cc
 800aad8:	200000dc 	.word	0x200000dc
 800aadc:	200000ec 	.word	0x200000ec
 800aae0:	200000fc 	.word	0x200000fc
 800aae4:	2000010c 	.word	0x2000010c
 800aae8:	2000011c 	.word	0x2000011c

0800aaec <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800aafc:	4b2f      	ldr	r3, [pc, #188]	@ (800abbc <sine_model_configure_weights+0xd0>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab04:	4a2d      	ldr	r2, [pc, #180]	@ (800abbc <sine_model_configure_weights+0xd0>)
 800ab06:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab0e:	4a2b      	ldr	r2, [pc, #172]	@ (800abbc <sine_model_configure_weights+0xd0>)
 800ab10:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab18:	4a28      	ldr	r2, [pc, #160]	@ (800abbc <sine_model_configure_weights+0xd0>)
 800ab1a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab1c:	4b28      	ldr	r3, [pc, #160]	@ (800abc0 <sine_model_configure_weights+0xd4>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab24:	4a26      	ldr	r2, [pc, #152]	@ (800abc0 <sine_model_configure_weights+0xd4>)
 800ab26:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800ab2e:	4a24      	ldr	r2, [pc, #144]	@ (800abc0 <sine_model_configure_weights+0xd4>)
 800ab30:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800ab38:	4a21      	ldr	r2, [pc, #132]	@ (800abc0 <sine_model_configure_weights+0xd4>)
 800ab3a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab3c:	4b21      	ldr	r3, [pc, #132]	@ (800abc4 <sine_model_configure_weights+0xd8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab44:	4a1f      	ldr	r2, [pc, #124]	@ (800abc4 <sine_model_configure_weights+0xd8>)
 800ab46:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800ab4e:	4a1d      	ldr	r2, [pc, #116]	@ (800abc4 <sine_model_configure_weights+0xd8>)
 800ab50:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800ab58:	4a1a      	ldr	r2, [pc, #104]	@ (800abc4 <sine_model_configure_weights+0xd8>)
 800ab5a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab5c:	4b1a      	ldr	r3, [pc, #104]	@ (800abc8 <sine_model_configure_weights+0xdc>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab64:	4a18      	ldr	r2, [pc, #96]	@ (800abc8 <sine_model_configure_weights+0xdc>)
 800ab66:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3380      	adds	r3, #128	@ 0x80
 800ab6c:	4a16      	ldr	r2, [pc, #88]	@ (800abc8 <sine_model_configure_weights+0xdc>)
 800ab6e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3380      	adds	r3, #128	@ 0x80
 800ab74:	4a14      	ldr	r2, [pc, #80]	@ (800abc8 <sine_model_configure_weights+0xdc>)
 800ab76:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab78:	4b14      	ldr	r3, [pc, #80]	@ (800abcc <sine_model_configure_weights+0xe0>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab80:	4a12      	ldr	r2, [pc, #72]	@ (800abcc <sine_model_configure_weights+0xe0>)
 800ab82:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	3340      	adds	r3, #64	@ 0x40
 800ab88:	4a10      	ldr	r2, [pc, #64]	@ (800abcc <sine_model_configure_weights+0xe0>)
 800ab8a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3340      	adds	r3, #64	@ 0x40
 800ab90:	4a0e      	ldr	r2, [pc, #56]	@ (800abcc <sine_model_configure_weights+0xe0>)
 800ab92:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab94:	4b0e      	ldr	r3, [pc, #56]	@ (800abd0 <sine_model_configure_weights+0xe4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab9c:	4a0c      	ldr	r2, [pc, #48]	@ (800abd0 <sine_model_configure_weights+0xe4>)
 800ab9e:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 800aba0:	4a0b      	ldr	r2, [pc, #44]	@ (800abd0 <sine_model_configure_weights+0xe4>)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800aba6:	4a0a      	ldr	r2, [pc, #40]	@ (800abd0 <sine_model_configure_weights+0xe4>)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800abac:	2301      	movs	r3, #1
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	2000006c 	.word	0x2000006c
 800abc0:	2000007c 	.word	0x2000007c
 800abc4:	2000008c 	.word	0x2000008c
 800abc8:	2000009c 	.word	0x2000009c
 800abcc:	200000ac 	.word	0x200000ac
 800abd0:	200000bc 	.word	0x200000bc

0800abd4 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af02      	add	r7, sp, #8
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800abde:	2300      	movs	r3, #0
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	2303      	movs	r3, #3
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	2301      	movs	r3, #1
 800abe8:	4a04      	ldr	r2, [pc, #16]	@ (800abfc <ai_sine_model_create+0x28>)
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f881 	bl	800acf4 <ai_platform_network_create>
 800abf2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2000000c 	.word	0x2000000c

0800ac00 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f8cb 	bl	800ada8 <ai_platform_network_init>
 800ac12:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d101      	bne.n	800ac1e <ai_sine_model_init+0x1e>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e02b      	b.n	800ac76 <ai_sine_model_init+0x76>

  ai_bool ok = true;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	4619      	mov	r1, r3
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7ff ff60 	bl	800aaec <sine_model_configure_weights>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	4013      	ands	r3, r2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bf14      	ite	ne
 800ac38:	2301      	movne	r3, #1
 800ac3a:	2300      	moveq	r3, #0
 800ac3c:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	3318      	adds	r3, #24
 800ac42:	4619      	mov	r1, r3
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7ff ff0d 	bl	800aa64 <sine_model_configure_activations>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	4013      	ands	r3, r2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2300      	moveq	r3, #0
 800ac5a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f923 	bl	800aea8 <ai_platform_network_post_init>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	4013      	ands	r3, r2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	bf14      	ite	ne
 800ac6e:	2301      	movne	r3, #1
 800ac70:	2300      	moveq	r3, #0
 800ac72:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ac74:	7afb      	ldrb	r3, [r7, #11]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	68b9      	ldr	r1, [r7, #8]
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 f952 	bl	800af38 <ai_platform_network_process>
 800ac94:	4603      	mov	r3, r0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
    0xdf, 0x4c, 0xbe, 0x6c, 0x3b, 0xf1, 0xbe, 0x26, 0x59,
    0x09, 0x40, 0x3b, 0x1a, 0xbf, 0xbe, 0xe2, 0xc0, 0x21,
    0x3f, 0x1c, 0x5c, 0x9d, 0x3f, 0x04, 0x86, 0xa4, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 800aca4:	4b02      	ldr	r3, [pc, #8]	@ (800acb0 <ai_sine_model_data_weights_get+0x10>)

}
 800aca6:	4618      	mov	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	0800ed30 	.word	0x0800ed30

0800acb4 <_platform_network_state_setup.isra.1>:
 800acb4:	b430      	push	{r4, r5}
 800acb6:	68dd      	ldr	r5, [r3, #12]
 800acb8:	695c      	ldr	r4, [r3, #20]
 800acba:	68ed      	ldr	r5, [r5, #12]
 800acbc:	68e4      	ldr	r4, [r4, #12]
 800acbe:	fb04 f405 	mul.w	r4, r4, r5
 800acc2:	6084      	str	r4, [r0, #8]
 800acc4:	8809      	ldrh	r1, [r1, #0]
 800acc6:	fb04 f401 	mul.w	r4, r4, r1
 800acca:	60c4      	str	r4, [r0, #12]
 800accc:	6811      	ldr	r1, [r2, #0]
 800acce:	6041      	str	r1, [r0, #4]
 800acd0:	6812      	ldr	r2, [r2, #0]
 800acd2:	4414      	add	r4, r2
 800acd4:	6004      	str	r4, [r0, #0]
 800acd6:	699a      	ldr	r2, [r3, #24]
 800acd8:	6814      	ldr	r4, [r2, #0]
 800acda:	00a4      	lsls	r4, r4, #2
 800acdc:	d407      	bmi.n	800acee <_platform_network_state_setup.isra.1+0x3a>
 800acde:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800ace2:	1b64      	subs	r4, r4, r5
 800ace4:	4421      	add	r1, r4
 800ace6:	6091      	str	r1, [r2, #8]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	6842      	ldr	r2, [r0, #4]
 800acec:	60da      	str	r2, [r3, #12]
 800acee:	bc30      	pop	{r4, r5}
 800acf0:	4770      	bx	lr
	...

0800acf4 <ai_platform_network_create>:
 800acf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf8:	4d24      	ldr	r5, [pc, #144]	@ (800ad8c <ai_platform_network_create+0x98>)
 800acfa:	2701      	movs	r7, #1
 800acfc:	46ac      	mov	ip, r5
 800acfe:	4e24      	ldr	r6, [pc, #144]	@ (800ad90 <ai_platform_network_create+0x9c>)
 800ad00:	b082      	sub	sp, #8
 800ad02:	6831      	ldr	r1, [r6, #0]
 800ad04:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800ad08:	f021 0101 	bic.w	r1, r1, #1
 800ad0c:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 800ad10:	6031      	str	r1, [r6, #0]
 800ad12:	602f      	str	r7, [r5, #0]
 800ad14:	f8dc 5000 	ldr.w	r5, [ip]
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	d1fb      	bne.n	800ad14 <ai_platform_network_create+0x20>
 800ad1c:	491d      	ldr	r1, [pc, #116]	@ (800ad94 <ai_platform_network_create+0xa0>)
 800ad1e:	4f1e      	ldr	r7, [pc, #120]	@ (800ad98 <ai_platform_network_create+0xa4>)
 800ad20:	4e1e      	ldr	r6, [pc, #120]	@ (800ad9c <ai_platform_network_create+0xa8>)
 800ad22:	600f      	str	r7, [r1, #0]
 800ad24:	6809      	ldr	r1, [r1, #0]
 800ad26:	42b1      	cmp	r1, r6
 800ad28:	d000      	beq.n	800ad2c <ai_platform_network_create+0x38>
 800ad2a:	e7fe      	b.n	800ad2a <ai_platform_network_create+0x36>
 800ad2c:	b1d0      	cbz	r0, 800ad64 <ai_platform_network_create+0x70>
 800ad2e:	461f      	mov	r7, r3
 800ad30:	4613      	mov	r3, r2
 800ad32:	4a1b      	ldr	r2, [pc, #108]	@ (800ada0 <ai_platform_network_create+0xac>)
 800ad34:	4606      	mov	r6, r0
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	6003      	str	r3, [r0, #0]
 800ad3a:	f000 fb09 	bl	800b350 <core_init>
 800ad3e:	b1b0      	cbz	r0, 800ad6e <ai_platform_network_create+0x7a>
 800ad40:	0223      	lsls	r3, r4, #8
 800ad42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800ad46:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800ad4a:	f1b3 7f82 	cmp.w	r3, #17039360	@ 0x1040000
 800ad4e:	d910      	bls.n	800ad72 <ai_platform_network_create+0x7e>
 800ad50:	2201      	movs	r2, #1
 800ad52:	2100      	movs	r1, #0
 800ad54:	2310      	movs	r3, #16
 800ad56:	6031      	str	r1, [r6, #0]
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f362 0007 	bfi	r0, r2, #0, #8
 800ad5e:	f363 201f 	bfi	r0, r3, #8, #24
 800ad62:	e001      	b.n	800ad68 <ai_platform_network_create+0x74>
 800ad64:	f241 0010 	movw	r0, #4112	@ 0x1010
 800ad68:	b002      	add	sp, #8
 800ad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6e:	2230      	movs	r2, #48	@ 0x30
 800ad70:	e7ef      	b.n	800ad52 <ai_platform_network_create+0x5e>
 800ad72:	4b0c      	ldr	r3, [pc, #48]	@ (800ada4 <ai_platform_network_create+0xb0>)
 800ad74:	a802      	add	r0, sp, #8
 800ad76:	f840 3d04 	str.w	r3, [r0, #-4]!
 800ad7a:	f000 ff9d 	bl	800bcb8 <ai_check_custom_types>
 800ad7e:	b110      	cbz	r0, 800ad86 <ai_platform_network_create+0x92>
 800ad80:	462b      	mov	r3, r5
 800ad82:	462a      	mov	r2, r5
 800ad84:	e7e8      	b.n	800ad58 <ai_platform_network_create+0x64>
 800ad86:	2202      	movs	r2, #2
 800ad88:	e7e3      	b.n	800ad52 <ai_platform_network_create+0x5e>
 800ad8a:	bf00      	nop
 800ad8c:	40023008 	.word	0x40023008
 800ad90:	e0002000 	.word	0xe0002000
 800ad94:	40023000 	.word	0x40023000
 800ad98:	f407a5c2 	.word	0xf407a5c2
 800ad9c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ada0:	a1c00100 	.word	0xa1c00100
 800ada4:	84048403 	.word	0x84048403

0800ada8 <ai_platform_network_init>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	460c      	mov	r4, r1
 800adac:	4605      	mov	r5, r0
 800adae:	b120      	cbz	r0, 800adba <ai_platform_network_init+0x12>
 800adb0:	4b37      	ldr	r3, [pc, #220]	@ (800ae90 <ai_platform_network_init+0xe8>)
 800adb2:	6802      	ldr	r2, [r0, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	bf18      	it	ne
 800adb8:	2500      	movne	r5, #0
 800adba:	4a36      	ldr	r2, [pc, #216]	@ (800ae94 <ai_platform_network_init+0xec>)
 800adbc:	2001      	movs	r0, #1
 800adbe:	4616      	mov	r6, r2
 800adc0:	4935      	ldr	r1, [pc, #212]	@ (800ae98 <ai_platform_network_init+0xf0>)
 800adc2:	680b      	ldr	r3, [r1, #0]
 800adc4:	f023 0301 	bic.w	r3, r3, #1
 800adc8:	600b      	str	r3, [r1, #0]
 800adca:	6010      	str	r0, [r2, #0]
 800adcc:	6833      	ldr	r3, [r6, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1fc      	bne.n	800adcc <ai_platform_network_init+0x24>
 800add2:	4b32      	ldr	r3, [pc, #200]	@ (800ae9c <ai_platform_network_init+0xf4>)
 800add4:	4932      	ldr	r1, [pc, #200]	@ (800aea0 <ai_platform_network_init+0xf8>)
 800add6:	4a33      	ldr	r2, [pc, #204]	@ (800aea4 <ai_platform_network_init+0xfc>)
 800add8:	6019      	str	r1, [r3, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4293      	cmp	r3, r2
 800adde:	d000      	beq.n	800ade2 <ai_platform_network_init+0x3a>
 800ade0:	e7fe      	b.n	800ade0 <ai_platform_network_init+0x38>
 800ade2:	b34d      	cbz	r5, 800ae38 <ai_platform_network_init+0x90>
 800ade4:	b354      	cbz	r4, 800ae3c <ai_platform_network_init+0x94>
 800ade6:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800ade8:	6926      	ldr	r6, [r4, #16]
 800adea:	2f00      	cmp	r7, #0
 800adec:	d03f      	beq.n	800ae6e <ai_platform_network_init+0xc6>
 800adee:	b36e      	cbz	r6, 800ae4c <ai_platform_network_init+0xa4>
 800adf0:	4627      	mov	r7, r4
 800adf2:	f04f 0c03 	mov.w	ip, #3
 800adf6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800adf8:	f105 0618 	add.w	r6, r5, #24
 800adfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800adfe:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ae02:	e886 0003 	stmia.w	r6, {r0, r1}
 800ae06:	3418      	adds	r4, #24
 800ae08:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 800ae0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ae10:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae14:	e886 0003 	stmia.w	r6, {r0, r1}
 800ae18:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800ae1a:	f8c5 c00c 	str.w	ip, [r5, #12]
 800ae1e:	b15a      	cbz	r2, 800ae38 <ai_platform_network_init+0x90>
 800ae20:	68d3      	ldr	r3, [r2, #12]
 800ae22:	6095      	str	r5, [r2, #8]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d007      	beq.n	800ae38 <ai_platform_network_init+0x90>
 800ae28:	b133      	cbz	r3, 800ae38 <ai_platform_network_init+0x90>
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	609d      	str	r5, [r3, #8]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d002      	beq.n	800ae38 <ai_platform_network_init+0x90>
 800ae32:	4613      	mov	r3, r2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1f8      	bne.n	800ae2a <ai_platform_network_init+0x82>
 800ae38:	4628      	mov	r0, r5
 800ae3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae3c:	f105 0010 	add.w	r0, r5, #16
 800ae40:	2211      	movs	r2, #17
 800ae42:	2110      	movs	r1, #16
 800ae44:	f000 fa86 	bl	800b354 <core_set_error>
 800ae48:	4625      	mov	r5, r4
 800ae4a:	e7f5      	b.n	800ae38 <ai_platform_network_init+0x90>
 800ae4c:	8921      	ldrh	r1, [r4, #8]
 800ae4e:	88e2      	ldrh	r2, [r4, #6]
 800ae50:	68e3      	ldr	r3, [r4, #12]
 800ae52:	fb02 f201 	mul.w	r2, r2, r1
 800ae56:	fb03 f302 	mul.w	r3, r3, r2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d0c8      	beq.n	800adf0 <ai_platform_network_init+0x48>
 800ae5e:	f105 0010 	add.w	r0, r5, #16
 800ae62:	2212      	movs	r2, #18
 800ae64:	2110      	movs	r1, #16
 800ae66:	f000 fa75 	bl	800b354 <core_set_error>
 800ae6a:	4635      	mov	r5, r6
 800ae6c:	e7e4      	b.n	800ae38 <ai_platform_network_init+0x90>
 800ae6e:	8c21      	ldrh	r1, [r4, #32]
 800ae70:	8be2      	ldrh	r2, [r4, #30]
 800ae72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ae74:	fb02 f201 	mul.w	r2, r2, r1
 800ae78:	fb03 f302 	mul.w	r3, r3, r2
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0b6      	beq.n	800adee <ai_platform_network_init+0x46>
 800ae80:	f105 0010 	add.w	r0, r5, #16
 800ae84:	2213      	movs	r2, #19
 800ae86:	2110      	movs	r1, #16
 800ae88:	f000 fa64 	bl	800b354 <core_set_error>
 800ae8c:	463d      	mov	r5, r7
 800ae8e:	e7d3      	b.n	800ae38 <ai_platform_network_init+0x90>
 800ae90:	a1c00100 	.word	0xa1c00100
 800ae94:	40023008 	.word	0x40023008
 800ae98:	e0002000 	.word	0xe0002000
 800ae9c:	40023000 	.word	0x40023000
 800aea0:	f407a5c2 	.word	0xf407a5c2
 800aea4:	b5e8b5cd 	.word	0xb5e8b5cd

0800aea8 <ai_platform_network_post_init>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	4604      	mov	r4, r0
 800aeac:	b120      	cbz	r0, 800aeb8 <ai_platform_network_post_init+0x10>
 800aeae:	4b1c      	ldr	r3, [pc, #112]	@ (800af20 <ai_platform_network_post_init+0x78>)
 800aeb0:	6802      	ldr	r2, [r0, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	bf18      	it	ne
 800aeb6:	2400      	movne	r4, #0
 800aeb8:	4a1a      	ldr	r2, [pc, #104]	@ (800af24 <ai_platform_network_post_init+0x7c>)
 800aeba:	2001      	movs	r0, #1
 800aebc:	4615      	mov	r5, r2
 800aebe:	491a      	ldr	r1, [pc, #104]	@ (800af28 <ai_platform_network_post_init+0x80>)
 800aec0:	680b      	ldr	r3, [r1, #0]
 800aec2:	f023 0301 	bic.w	r3, r3, #1
 800aec6:	600b      	str	r3, [r1, #0]
 800aec8:	6010      	str	r0, [r2, #0]
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1fc      	bne.n	800aeca <ai_platform_network_post_init+0x22>
 800aed0:	4b16      	ldr	r3, [pc, #88]	@ (800af2c <ai_platform_network_post_init+0x84>)
 800aed2:	4917      	ldr	r1, [pc, #92]	@ (800af30 <ai_platform_network_post_init+0x88>)
 800aed4:	4a17      	ldr	r2, [pc, #92]	@ (800af34 <ai_platform_network_post_init+0x8c>)
 800aed6:	6019      	str	r1, [r3, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d000      	beq.n	800aee0 <ai_platform_network_post_init+0x38>
 800aede:	e7fe      	b.n	800aede <ai_platform_network_post_init+0x36>
 800aee0:	b1a4      	cbz	r4, 800af0c <ai_platform_network_post_init+0x64>
 800aee2:	68e3      	ldr	r3, [r4, #12]
 800aee4:	f013 0502 	ands.w	r5, r3, #2
 800aee8:	d012      	beq.n	800af10 <ai_platform_network_post_init+0x68>
 800aeea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aeec:	b163      	cbz	r3, 800af08 <ai_platform_network_post_init+0x60>
 800aeee:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 800aef0:	b91d      	cbnz	r5, 800aefa <ai_platform_network_post_init+0x52>
 800aef2:	e009      	b.n	800af08 <ai_platform_network_post_init+0x60>
 800aef4:	461d      	mov	r5, r3
 800aef6:	b13b      	cbz	r3, 800af08 <ai_platform_network_post_init+0x60>
 800aef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aefa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800aefc:	4629      	mov	r1, r5
 800aefe:	2000      	movs	r0, #0
 800af00:	4798      	blx	r3
 800af02:	68eb      	ldr	r3, [r5, #12]
 800af04:	42ab      	cmp	r3, r5
 800af06:	d1f5      	bne.n	800aef4 <ai_platform_network_post_init+0x4c>
 800af08:	2001      	movs	r0, #1
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	4620      	mov	r0, r4
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	f104 0010 	add.w	r0, r4, #16
 800af14:	2210      	movs	r2, #16
 800af16:	2111      	movs	r1, #17
 800af18:	f000 fa1c 	bl	800b354 <core_set_error>
 800af1c:	4628      	mov	r0, r5
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	a1c00100 	.word	0xa1c00100
 800af24:	40023008 	.word	0x40023008
 800af28:	e0002000 	.word	0xe0002000
 800af2c:	40023000 	.word	0x40023000
 800af30:	f407a5c2 	.word	0xf407a5c2
 800af34:	b5e8b5cd 	.word	0xb5e8b5cd

0800af38 <ai_platform_network_process>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	b083      	sub	sp, #12
 800af3e:	9201      	str	r2, [sp, #4]
 800af40:	4604      	mov	r4, r0
 800af42:	b120      	cbz	r0, 800af4e <ai_platform_network_process+0x16>
 800af44:	4ba3      	ldr	r3, [pc, #652]	@ (800b1d4 <ai_platform_network_process+0x29c>)
 800af46:	6802      	ldr	r2, [r0, #0]
 800af48:	429a      	cmp	r2, r3
 800af4a:	bf18      	it	ne
 800af4c:	2400      	movne	r4, #0
 800af4e:	4aa2      	ldr	r2, [pc, #648]	@ (800b1d8 <ai_platform_network_process+0x2a0>)
 800af50:	2501      	movs	r5, #1
 800af52:	4616      	mov	r6, r2
 800af54:	48a1      	ldr	r0, [pc, #644]	@ (800b1dc <ai_platform_network_process+0x2a4>)
 800af56:	6803      	ldr	r3, [r0, #0]
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	6003      	str	r3, [r0, #0]
 800af5e:	6015      	str	r5, [r2, #0]
 800af60:	6833      	ldr	r3, [r6, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1fc      	bne.n	800af60 <ai_platform_network_process+0x28>
 800af66:	4b9e      	ldr	r3, [pc, #632]	@ (800b1e0 <ai_platform_network_process+0x2a8>)
 800af68:	489e      	ldr	r0, [pc, #632]	@ (800b1e4 <ai_platform_network_process+0x2ac>)
 800af6a:	4a9f      	ldr	r2, [pc, #636]	@ (800b1e8 <ai_platform_network_process+0x2b0>)
 800af6c:	6018      	str	r0, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4293      	cmp	r3, r2
 800af72:	d000      	beq.n	800af76 <ai_platform_network_process+0x3e>
 800af74:	e7fe      	b.n	800af74 <ai_platform_network_process+0x3c>
 800af76:	2c00      	cmp	r4, #0
 800af78:	d063      	beq.n	800b042 <ai_platform_network_process+0x10a>
 800af7a:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 800af7e:	b107      	cbz	r7, 800af82 <ai_platform_network_process+0x4a>
 800af80:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800af82:	2600      	movs	r6, #0
 800af84:	68e3      	ldr	r3, [r4, #12]
 800af86:	6166      	str	r6, [r4, #20]
 800af88:	f003 0303 	and.w	r3, r3, #3
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	f040 80f8 	bne.w	800b182 <ai_platform_network_process+0x24a>
 800af92:	2900      	cmp	r1, #0
 800af94:	d07d      	beq.n	800b092 <ai_platform_network_process+0x15a>
 800af96:	2f00      	cmp	r7, #0
 800af98:	d07b      	beq.n	800b092 <ai_platform_network_process+0x15a>
 800af9a:	883b      	ldrh	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d078      	beq.n	800b092 <ai_platform_network_process+0x15a>
 800afa0:	460d      	mov	r5, r1
 800afa2:	46a0      	mov	r8, r4
 800afa4:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800afa8:	429e      	cmp	r6, r3
 800afaa:	d27b      	bcs.n	800b0a4 <ai_platform_network_process+0x16c>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d078      	beq.n	800b0a4 <ai_platform_network_process+0x16c>
 800afb2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800afb6:	2c00      	cmp	r4, #0
 800afb8:	d074      	beq.n	800b0a4 <ai_platform_network_process+0x16c>
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800afc2:	d065      	beq.n	800b090 <ai_platform_network_process+0x158>
 800afc4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800afc8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800afcc:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800afd0:	fb0b f30e 	mul.w	r3, fp, lr
 800afd4:	69a0      	ldr	r0, [r4, #24]
 800afd6:	fb0c f303 	mul.w	r3, ip, r3
 800afda:	6841      	ldr	r1, [r0, #4]
 800afdc:	4299      	cmp	r1, r3
 800afde:	d34e      	bcc.n	800b07e <ai_platform_network_process+0x146>
 800afe0:	68e3      	ldr	r3, [r4, #12]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	455a      	cmp	r2, fp
 800afe6:	d14a      	bne.n	800b07e <ai_platform_network_process+0x146>
 800afe8:	689a      	ldr	r2, [r3, #8]
 800afea:	4572      	cmp	r2, lr
 800afec:	d147      	bne.n	800b07e <ai_platform_network_process+0x146>
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	459c      	cmp	ip, r3
 800aff2:	d144      	bne.n	800b07e <ai_platform_network_process+0x146>
 800aff4:	6800      	ldr	r0, [r0, #0]
 800aff6:	f000 ff0f 	bl	800be18 <ai_array_get_byte_size>
 800affa:	68e2      	ldr	r2, [r4, #12]
 800affc:	6963      	ldr	r3, [r4, #20]
 800affe:	68d2      	ldr	r2, [r2, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	fb03 f302 	mul.w	r3, r3, r2
 800b006:	4298      	cmp	r0, r3
 800b008:	d339      	bcc.n	800b07e <ai_platform_network_process+0x146>
 800b00a:	69a3      	ldr	r3, [r4, #24]
 800b00c:	6818      	ldr	r0, [r3, #0]
 800b00e:	f000 feb7 	bl	800bd80 <ai_array_to_buffer_fmt>
 800b012:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b016:	4043      	eors	r3, r0
 800b018:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800b01c:	d126      	bne.n	800b06c <ai_platform_network_process+0x134>
 800b01e:	68eb      	ldr	r3, [r5, #12]
 800b020:	b1e3      	cbz	r3, 800b05c <ai_platform_network_process+0x124>
 800b022:	882b      	ldrh	r3, [r5, #0]
 800b024:	b193      	cbz	r3, 800b04c <ai_platform_network_process+0x114>
 800b026:	4599      	cmp	r9, r3
 800b028:	bf38      	it	cc
 800b02a:	4699      	movcc	r9, r3
 800b02c:	f105 020c 	add.w	r2, r5, #12
 800b030:	4623      	mov	r3, r4
 800b032:	4629      	mov	r1, r5
 800b034:	4650      	mov	r0, sl
 800b036:	f7ff fe3d 	bl	800acb4 <_platform_network_state_setup.isra.1>
 800b03a:	3601      	adds	r6, #1
 800b03c:	883b      	ldrh	r3, [r7, #0]
 800b03e:	3518      	adds	r5, #24
 800b040:	e7b2      	b.n	800afa8 <ai_platform_network_process+0x70>
 800b042:	46a3      	mov	fp, r4
 800b044:	4658      	mov	r0, fp
 800b046:	b003      	add	sp, #12
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	f108 0010 	add.w	r0, r8, #16
 800b050:	2221      	movs	r2, #33	@ 0x21
 800b052:	2112      	movs	r1, #18
 800b054:	469b      	mov	fp, r3
 800b056:	f000 f97d 	bl	800b354 <core_set_error>
 800b05a:	e7f3      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b05c:	f108 0010 	add.w	r0, r8, #16
 800b060:	2217      	movs	r2, #23
 800b062:	2112      	movs	r1, #18
 800b064:	469b      	mov	fp, r3
 800b066:	f000 f975 	bl	800b354 <core_set_error>
 800b06a:	e7eb      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b06c:	f108 0010 	add.w	r0, r8, #16
 800b070:	2219      	movs	r2, #25
 800b072:	2112      	movs	r1, #18
 800b074:	f000 f96e 	bl	800b354 <core_set_error>
 800b078:	f04f 0b00 	mov.w	fp, #0
 800b07c:	e7e2      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b07e:	f108 0010 	add.w	r0, r8, #16
 800b082:	2218      	movs	r2, #24
 800b084:	2112      	movs	r1, #18
 800b086:	f000 f965 	bl	800b354 <core_set_error>
 800b08a:	f04f 0b00 	mov.w	fp, #0
 800b08e:	e7d9      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b090:	4644      	mov	r4, r8
 800b092:	f104 0010 	add.w	r0, r4, #16
 800b096:	2217      	movs	r2, #23
 800b098:	2112      	movs	r1, #18
 800b09a:	f000 f95b 	bl	800b354 <core_set_error>
 800b09e:	f04f 0b00 	mov.w	fp, #0
 800b0a2:	e7cf      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b0a4:	9a01      	ldr	r2, [sp, #4]
 800b0a6:	4644      	mov	r4, r8
 800b0a8:	f8b8 3048 	ldrh.w	r3, [r8, #72]	@ 0x48
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	f000 80a1 	beq.w	800b1f4 <ai_platform_network_process+0x2bc>
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	f240 8142 	bls.w	800b33c <ai_platform_network_process+0x404>
 800b0b8:	f8d8 804c 	ldr.w	r8, [r8, #76]	@ 0x4c
 800b0bc:	f118 0f0c 	cmn.w	r8, #12
 800b0c0:	f000 813c 	beq.w	800b33c <ai_platform_network_process+0x404>
 800b0c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 8137 	beq.w	800b33c <ai_platform_network_process+0x404>
 800b0ce:	3204      	adds	r2, #4
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	2700      	movs	r7, #0
 800b0d4:	429f      	cmp	r7, r3
 800b0d6:	f080 8089 	bcs.w	800b1ec <ai_platform_network_process+0x2b4>
 800b0da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 8084 	beq.w	800b1ec <ai_platform_network_process+0x2b4>
 800b0e4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	d07f      	beq.n	800b1ec <ai_platform_network_process+0x2b4>
 800b0ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800b0f6:	d065      	beq.n	800b1c4 <ai_platform_network_process+0x28c>
 800b0f8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800b0fc:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800b100:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800b104:	fb0b f30e 	mul.w	r3, fp, lr
 800b108:	69b0      	ldr	r0, [r6, #24]
 800b10a:	fb0c f303 	mul.w	r3, ip, r3
 800b10e:	6841      	ldr	r1, [r0, #4]
 800b110:	4299      	cmp	r1, r3
 800b112:	f0c0 8113 	bcc.w	800b33c <ai_platform_network_process+0x404>
 800b116:	68f3      	ldr	r3, [r6, #12]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	455a      	cmp	r2, fp
 800b11c:	f040 810e 	bne.w	800b33c <ai_platform_network_process+0x404>
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	4572      	cmp	r2, lr
 800b124:	f040 810a 	bne.w	800b33c <ai_platform_network_process+0x404>
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	459c      	cmp	ip, r3
 800b12c:	f040 8106 	bne.w	800b33c <ai_platform_network_process+0x404>
 800b130:	6800      	ldr	r0, [r0, #0]
 800b132:	f000 fe71 	bl	800be18 <ai_array_get_byte_size>
 800b136:	68f2      	ldr	r2, [r6, #12]
 800b138:	6973      	ldr	r3, [r6, #20]
 800b13a:	68d2      	ldr	r2, [r2, #12]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	fb03 f302 	mul.w	r3, r3, r2
 800b142:	4298      	cmp	r0, r3
 800b144:	f0c0 80fa 	bcc.w	800b33c <ai_platform_network_process+0x404>
 800b148:	69b3      	ldr	r3, [r6, #24]
 800b14a:	6818      	ldr	r0, [r3, #0]
 800b14c:	f000 fe18 	bl	800bd80 <ai_array_to_buffer_fmt>
 800b150:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b154:	4043      	eors	r3, r0
 800b156:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800b15a:	d12a      	bne.n	800b1b2 <ai_platform_network_process+0x27a>
 800b15c:	68eb      	ldr	r3, [r5, #12]
 800b15e:	b303      	cbz	r3, 800b1a2 <ai_platform_network_process+0x26a>
 800b160:	882b      	ldrh	r3, [r5, #0]
 800b162:	b1b3      	cbz	r3, 800b192 <ai_platform_network_process+0x25a>
 800b164:	4599      	cmp	r9, r3
 800b166:	bf38      	it	cc
 800b168:	4699      	movcc	r9, r3
 800b16a:	f105 020c 	add.w	r2, r5, #12
 800b16e:	4633      	mov	r3, r6
 800b170:	4629      	mov	r1, r5
 800b172:	4650      	mov	r0, sl
 800b174:	f7ff fd9e 	bl	800acb4 <_platform_network_state_setup.isra.1>
 800b178:	3701      	adds	r7, #1
 800b17a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b17e:	3518      	adds	r5, #24
 800b180:	e7a8      	b.n	800b0d4 <ai_platform_network_process+0x19c>
 800b182:	f104 0010 	add.w	r0, r4, #16
 800b186:	2230      	movs	r2, #48	@ 0x30
 800b188:	2111      	movs	r1, #17
 800b18a:	f000 f8e3 	bl	800b354 <core_set_error>
 800b18e:	46b3      	mov	fp, r6
 800b190:	e758      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b192:	f104 0010 	add.w	r0, r4, #16
 800b196:	2221      	movs	r2, #33	@ 0x21
 800b198:	2113      	movs	r1, #19
 800b19a:	469b      	mov	fp, r3
 800b19c:	f000 f8da 	bl	800b354 <core_set_error>
 800b1a0:	e750      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b1a2:	f104 0010 	add.w	r0, r4, #16
 800b1a6:	2217      	movs	r2, #23
 800b1a8:	2113      	movs	r1, #19
 800b1aa:	469b      	mov	fp, r3
 800b1ac:	f000 f8d2 	bl	800b354 <core_set_error>
 800b1b0:	e748      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b1b2:	f104 0010 	add.w	r0, r4, #16
 800b1b6:	2219      	movs	r2, #25
 800b1b8:	2113      	movs	r1, #19
 800b1ba:	f000 f8cb 	bl	800b354 <core_set_error>
 800b1be:	f04f 0b00 	mov.w	fp, #0
 800b1c2:	e73f      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b1c4:	f104 0010 	add.w	r0, r4, #16
 800b1c8:	2217      	movs	r2, #23
 800b1ca:	2113      	movs	r1, #19
 800b1cc:	f000 f8c2 	bl	800b354 <core_set_error>
 800b1d0:	46d3      	mov	fp, sl
 800b1d2:	e737      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b1d4:	a1c00100 	.word	0xa1c00100
 800b1d8:	40023008 	.word	0x40023008
 800b1dc:	e0002000 	.word	0xe0002000
 800b1e0:	40023000 	.word	0x40023000
 800b1e4:	f407a5c2 	.word	0xf407a5c2
 800b1e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800b1ec:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 800b1f0:	f8a4 9014 	strh.w	r9, [r4, #20]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 809e 	beq.w	800b336 <ai_platform_network_process+0x3fe>
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800b1fe:	f240 8098 	bls.w	800b332 <ai_platform_network_process+0x3fa>
 800b202:	f105 070c 	add.w	r7, r5, #12
 800b206:	8ae0      	ldrh	r0, [r4, #22]
 800b208:	8aa3      	ldrh	r3, [r4, #20]
 800b20a:	4283      	cmp	r3, r0
 800b20c:	d97b      	bls.n	800b306 <ai_platform_network_process+0x3ce>
 800b20e:	2d00      	cmp	r5, #0
 800b210:	d035      	beq.n	800b27e <ai_platform_network_process+0x346>
 800b212:	882b      	ldrh	r3, [r5, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d032      	beq.n	800b27e <ai_platform_network_process+0x346>
 800b218:	686b      	ldr	r3, [r5, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d02f      	beq.n	800b27e <ai_platform_network_process+0x346>
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f04f 0800 	mov.w	r8, #0
 800b224:	b35b      	cbz	r3, 800b27e <ai_platform_network_process+0x346>
 800b226:	68a9      	ldr	r1, [r5, #8]
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	f8d1 a000 	ldr.w	sl, [r1]
 800b22e:	6811      	ldr	r1, [r2, #0]
 800b230:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800b234:	eb0a 0609 	add.w	r6, sl, r9
 800b238:	0089      	lsls	r1, r1, #2
 800b23a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b23e:	6890      	ldr	r0, [r2, #8]
 800b240:	d463      	bmi.n	800b30a <ai_platform_network_process+0x3d2>
 800b242:	68d1      	ldr	r1, [r2, #12]
 800b244:	1a40      	subs	r0, r0, r1
 800b246:	eb0c 0100 	add.w	r1, ip, r0
 800b24a:	6091      	str	r1, [r2, #8]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	6872      	ldr	r2, [r6, #4]
 800b250:	60da      	str	r2, [r3, #12]
 800b252:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b256:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800b25a:	440b      	add	r3, r1
 800b25c:	4293      	cmp	r3, r2
 800b25e:	bf28      	it	cs
 800b260:	68f3      	ldrcs	r3, [r6, #12]
 800b262:	f108 0801 	add.w	r8, r8, #1
 800b266:	bf28      	it	cs
 800b268:	1ad3      	subcs	r3, r2, r3
 800b26a:	6073      	str	r3, [r6, #4]
 800b26c:	882b      	ldrh	r3, [r5, #0]
 800b26e:	4598      	cmp	r8, r3
 800b270:	d205      	bcs.n	800b27e <ai_platform_network_process+0x346>
 800b272:	686b      	ldr	r3, [r5, #4]
 800b274:	b11b      	cbz	r3, 800b27e <ai_platform_network_process+0x346>
 800b276:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1d3      	bne.n	800b226 <ai_platform_network_process+0x2ee>
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fd44 	bl	800bd0c <ai_layers_forward_all>
 800b284:	2f00      	cmp	r7, #0
 800b286:	d037      	beq.n	800b2f8 <ai_platform_network_process+0x3c0>
 800b288:	883b      	ldrh	r3, [r7, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d034      	beq.n	800b2f8 <ai_platform_network_process+0x3c0>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d031      	beq.n	800b2f8 <ai_platform_network_process+0x3c0>
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	b378      	cbz	r0, 800b2f8 <ai_platform_network_process+0x3c0>
 800b298:	f04f 0800 	mov.w	r8, #0
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	6981      	ldr	r1, [r0, #24]
 800b2a0:	f8d3 a000 	ldr.w	sl, [r3]
 800b2a4:	680b      	ldr	r3, [r1, #0]
 800b2a6:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800b2aa:	eb0a 0609 	add.w	r6, sl, r9
 800b2ae:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800b2b2:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800b2b6:	eb0c 0e02 	add.w	lr, ip, r2
 800b2ba:	d12b      	bne.n	800b314 <ai_platform_network_process+0x3dc>
 800b2bc:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b2c0:	4596      	cmp	lr, r2
 800b2c2:	bf24      	itt	cs
 800b2c4:	68f3      	ldrcs	r3, [r6, #12]
 800b2c6:	eba2 0e03 	subcs.w	lr, r2, r3
 800b2ca:	f8c6 e004 	str.w	lr, [r6, #4]
 800b2ce:	6981      	ldr	r1, [r0, #24]
 800b2d0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800b2d4:	1ad2      	subs	r2, r2, r3
 800b2d6:	eb0e 0302 	add.w	r3, lr, r2
 800b2da:	608b      	str	r3, [r1, #8]
 800b2dc:	6983      	ldr	r3, [r0, #24]
 800b2de:	6872      	ldr	r2, [r6, #4]
 800b2e0:	60da      	str	r2, [r3, #12]
 800b2e2:	883b      	ldrh	r3, [r7, #0]
 800b2e4:	f108 0801 	add.w	r8, r8, #1
 800b2e8:	4598      	cmp	r8, r3
 800b2ea:	d205      	bcs.n	800b2f8 <ai_platform_network_process+0x3c0>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	b11b      	cbz	r3, 800b2f8 <ai_platform_network_process+0x3c0>
 800b2f0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d1d1      	bne.n	800b29c <ai_platform_network_process+0x364>
 800b2f8:	8ae0      	ldrh	r0, [r4, #22]
 800b2fa:	8aa3      	ldrh	r3, [r4, #20]
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	b280      	uxth	r0, r0
 800b300:	4283      	cmp	r3, r0
 800b302:	82e0      	strh	r0, [r4, #22]
 800b304:	d883      	bhi.n	800b20e <ai_platform_network_process+0x2d6>
 800b306:	4683      	mov	fp, r0
 800b308:	e69c      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b30a:	4661      	mov	r1, ip
 800b30c:	68b2      	ldr	r2, [r6, #8]
 800b30e:	f001 fd3a 	bl	800cd86 <memcpy>
 800b312:	e79e      	b.n	800b252 <ai_platform_network_process+0x31a>
 800b314:	6889      	ldr	r1, [r1, #8]
 800b316:	4660      	mov	r0, ip
 800b318:	f001 fd35 	bl	800cd86 <memcpy>
 800b31c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800b320:	f85a 2009 	ldr.w	r2, [sl, r9]
 800b324:	440b      	add	r3, r1
 800b326:	4293      	cmp	r3, r2
 800b328:	bf24      	itt	cs
 800b32a:	68f3      	ldrcs	r3, [r6, #12]
 800b32c:	1ad3      	subcs	r3, r2, r3
 800b32e:	6073      	str	r3, [r6, #4]
 800b330:	e7d7      	b.n	800b2e2 <ai_platform_network_process+0x3aa>
 800b332:	2700      	movs	r7, #0
 800b334:	e767      	b.n	800b206 <ai_platform_network_process+0x2ce>
 800b336:	461d      	mov	r5, r3
 800b338:	461f      	mov	r7, r3
 800b33a:	e764      	b.n	800b206 <ai_platform_network_process+0x2ce>
 800b33c:	f104 0010 	add.w	r0, r4, #16
 800b340:	2218      	movs	r2, #24
 800b342:	2113      	movs	r1, #19
 800b344:	f000 f806 	bl	800b354 <core_set_error>
 800b348:	f04f 0b00 	mov.w	fp, #0
 800b34c:	e67a      	b.n	800b044 <ai_platform_network_process+0x10c>
 800b34e:	bf00      	nop

0800b350 <core_init>:
 800b350:	2001      	movs	r0, #1
 800b352:	4770      	bx	lr

0800b354 <core_set_error>:
 800b354:	4603      	mov	r3, r0
 800b356:	7800      	ldrb	r0, [r0, #0]
 800b358:	b930      	cbnz	r0, 800b368 <core_set_error+0x14>
 800b35a:	7019      	strb	r1, [r3, #0]
 800b35c:	6819      	ldr	r1, [r3, #0]
 800b35e:	2001      	movs	r0, #1
 800b360:	f362 211f 	bfi	r1, r2, #8, #24
 800b364:	6019      	str	r1, [r3, #0]
 800b366:	4770      	bx	lr
 800b368:	2000      	movs	r0, #0
 800b36a:	4770      	bx	lr

0800b36c <ai_dict8_dot_array_f32>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	9f06      	ldr	r7, [sp, #24]
 800b372:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800b4ec <ai_dict8_dot_array_f32+0x180>
 800b376:	ea5f 0ed7 	movs.w	lr, r7, lsr #3
 800b37a:	d061      	beq.n	800b440 <ai_dict8_dot_array_f32+0xd4>
 800b37c:	f101 0408 	add.w	r4, r1, #8
 800b380:	ea4f 08ce 	mov.w	r8, lr, lsl #3
 800b384:	eb04 0c08 	add.w	ip, r4, r8
 800b388:	f103 0520 	add.w	r5, r3, #32
 800b38c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800b390:	ed55 6a07 	vldr	s13, [r5, #-28]	@ 0xffffffe4
 800b394:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b398:	edd6 7a00 	vldr	s15, [r6]
 800b39c:	f814 6c08 	ldrb.w	r6, [r4, #-8]
 800b3a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3a8:	ed96 6a00 	vldr	s12, [r6]
 800b3ac:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 800b3b0:	f814 6c06 	ldrb.w	r6, [r4, #-6]
 800b3b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b3b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3bc:	ed96 6a00 	vldr	s12, [r6]
 800b3c0:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800b3c4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800b3c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b3cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3d0:	ed96 6a00 	vldr	s12, [r6]
 800b3d4:	ed55 6a05 	vldr	s13, [r5, #-20]	@ 0xffffffec
 800b3d8:	f814 6c04 	ldrb.w	r6, [r4, #-4]
 800b3dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b3e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3e4:	ed96 6a00 	vldr	s12, [r6]
 800b3e8:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b3ec:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800b3f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b3f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3f8:	ed96 6a00 	vldr	s12, [r6]
 800b3fc:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b400:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800b404:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b408:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b40c:	ed96 6a00 	vldr	s12, [r6]
 800b410:	ed55 6a02 	vldr	s13, [r5, #-8]
 800b414:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800b418:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b41c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b420:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b424:	ed96 6a00 	vldr	s12, [r6]
 800b428:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b42c:	3408      	adds	r4, #8
 800b42e:	45a4      	cmp	ip, r4
 800b430:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b434:	f105 0520 	add.w	r5, r5, #32
 800b438:	d1a8      	bne.n	800b38c <ai_dict8_dot_array_f32+0x20>
 800b43a:	4441      	add	r1, r8
 800b43c:	eb03 134e 	add.w	r3, r3, lr, lsl #5
 800b440:	f017 0707 	ands.w	r7, r7, #7
 800b444:	d04a      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b446:	780c      	ldrb	r4, [r1, #0]
 800b448:	edd3 6a00 	vldr	s13, [r3]
 800b44c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b450:	edd4 7a00 	vldr	s15, [r4]
 800b454:	2f01      	cmp	r7, #1
 800b456:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b45a:	d03f      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b45c:	784c      	ldrb	r4, [r1, #1]
 800b45e:	edd3 6a01 	vldr	s13, [r3, #4]
 800b462:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b466:	edd4 7a00 	vldr	s15, [r4]
 800b46a:	2f02      	cmp	r7, #2
 800b46c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b470:	d034      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b472:	788c      	ldrb	r4, [r1, #2]
 800b474:	edd3 6a02 	vldr	s13, [r3, #8]
 800b478:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b47c:	edd4 7a00 	vldr	s15, [r4]
 800b480:	2f03      	cmp	r7, #3
 800b482:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b486:	d029      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b488:	78cc      	ldrb	r4, [r1, #3]
 800b48a:	edd3 6a03 	vldr	s13, [r3, #12]
 800b48e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b492:	edd4 7a00 	vldr	s15, [r4]
 800b496:	2f04      	cmp	r7, #4
 800b498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b49c:	d01e      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b49e:	790c      	ldrb	r4, [r1, #4]
 800b4a0:	edd3 6a04 	vldr	s13, [r3, #16]
 800b4a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b4a8:	edd4 7a00 	vldr	s15, [r4]
 800b4ac:	2f05      	cmp	r7, #5
 800b4ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4b2:	d013      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b4b4:	794c      	ldrb	r4, [r1, #5]
 800b4b6:	edd3 6a05 	vldr	s13, [r3, #20]
 800b4ba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b4be:	edd4 7a00 	vldr	s15, [r4]
 800b4c2:	2f06      	cmp	r7, #6
 800b4c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4c8:	d008      	beq.n	800b4dc <ai_dict8_dot_array_f32+0x170>
 800b4ca:	7989      	ldrb	r1, [r1, #6]
 800b4cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800b4d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b4d4:	edd2 6a00 	vldr	s13, [r2]
 800b4d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4dc:	edd0 7a00 	vldr	s15, [r0]
 800b4e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e4:	ed80 7a00 	vstr	s14, [r0]
 800b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ec:	00000000 	.word	0x00000000

0800b4f0 <ai_dict4_dot_array_f32>:
 800b4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f4:	9f08      	ldr	r7, [sp, #32]
 800b4f6:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800b660 <ai_dict4_dot_array_f32+0x170>
 800b4fa:	f027 0c01 	bic.w	ip, r7, #1
 800b4fe:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800b502:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800b506:	d067      	beq.n	800b5d8 <ai_dict4_dot_array_f32+0xe8>
 800b508:	1d0d      	adds	r5, r1, #4
 800b50a:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800b50e:	eb05 0e09 	add.w	lr, r5, r9
 800b512:	f103 0420 	add.w	r4, r3, #32
 800b516:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800b51a:	ed54 6a07 	vldr	s13, [r4, #-28]	@ 0xffffffe4
 800b51e:	f006 0a0f 	and.w	sl, r6, #15
 800b522:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b526:	edda 7a00 	vldr	s15, [sl]
 800b52a:	0936      	lsrs	r6, r6, #4
 800b52c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b530:	ed96 6a00 	vldr	s12, [r6]
 800b534:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b538:	ed54 6a08 	vldr	s13, [r4, #-32]	@ 0xffffffe0
 800b53c:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 800b540:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b544:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800b548:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b54c:	ed9a 6a00 	vldr	s12, [sl]
 800b550:	ed54 6a06 	vldr	s13, [r4, #-24]	@ 0xffffffe8
 800b554:	f006 060f 	and.w	r6, r6, #15
 800b558:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b55c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b560:	ed96 6a00 	vldr	s12, [r6]
 800b564:	ed54 6a05 	vldr	s13, [r4, #-20]	@ 0xffffffec
 800b568:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 800b56c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b570:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800b574:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b578:	ed9a 6a00 	vldr	s12, [sl]
 800b57c:	ed54 6a04 	vldr	s13, [r4, #-16]
 800b580:	f006 060f 	and.w	r6, r6, #15
 800b584:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b588:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b58c:	ed96 6a00 	vldr	s12, [r6]
 800b590:	ed54 6a03 	vldr	s13, [r4, #-12]
 800b594:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800b598:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b59c:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800b5a0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b5a4:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b5a8:	ed9a 6a00 	vldr	s12, [sl]
 800b5ac:	f006 060f 	and.w	r6, r6, #15
 800b5b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b5b8:	ed54 6a01 	vldr	s13, [r4, #-4]
 800b5bc:	ed96 6a00 	vldr	s12, [r6]
 800b5c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b5c4:	3504      	adds	r5, #4
 800b5c6:	45ae      	cmp	lr, r5
 800b5c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5cc:	f104 0420 	add.w	r4, r4, #32
 800b5d0:	d1a1      	bne.n	800b516 <ai_dict4_dot_array_f32+0x26>
 800b5d2:	4449      	add	r1, r9
 800b5d4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800b5d8:	459c      	cmp	ip, r3
 800b5da:	d92d      	bls.n	800b638 <ai_dict4_dot_array_f32+0x148>
 800b5dc:	f10c 0c07 	add.w	ip, ip, #7
 800b5e0:	f103 0508 	add.w	r5, r3, #8
 800b5e4:	ebac 0c05 	sub.w	ip, ip, r5
 800b5e8:	f02c 0407 	bic.w	r4, ip, #7
 800b5ec:	f103 0810 	add.w	r8, r3, #16
 800b5f0:	44a0      	add	r8, r4
 800b5f2:	f101 3eff 	add.w	lr, r1, #4294967295
 800b5f6:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800b5fa:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b5fe:	f004 060f 	and.w	r6, r4, #15
 800b602:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b606:	edd6 7a00 	vldr	s15, [r6]
 800b60a:	0924      	lsrs	r4, r4, #4
 800b60c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b614:	ed94 6a00 	vldr	s12, [r4]
 800b618:	ed55 6a02 	vldr	s13, [r5, #-8]
 800b61c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b620:	3508      	adds	r5, #8
 800b622:	45a8      	cmp	r8, r5
 800b624:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b628:	d1e5      	bne.n	800b5f6 <ai_dict4_dot_array_f32+0x106>
 800b62a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b62e:	f10c 0c01 	add.w	ip, ip, #1
 800b632:	4461      	add	r1, ip
 800b634:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800b638:	07fc      	lsls	r4, r7, #31
 800b63a:	d509      	bpl.n	800b650 <ai_dict4_dot_array_f32+0x160>
 800b63c:	7809      	ldrb	r1, [r1, #0]
 800b63e:	edd3 7a00 	vldr	s15, [r3]
 800b642:	090b      	lsrs	r3, r1, #4
 800b644:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b648:	edd2 6a00 	vldr	s13, [r2]
 800b64c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b650:	edd0 7a00 	vldr	s15, [r0]
 800b654:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b658:	ed80 7a00 	vstr	s14, [r0]
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	00000000 	.word	0x00000000

0800b664 <forward_dense>:
 800b664:	6942      	ldr	r2, [r0, #20]
 800b666:	8813      	ldrh	r3, [r2, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 81c7 	beq.w	800b9fc <forward_dense+0x398>
 800b66e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b672:	6851      	ldr	r1, [r2, #4]
 800b674:	b091      	sub	sp, #68	@ 0x44
 800b676:	684d      	ldr	r5, [r1, #4]
 800b678:	b105      	cbz	r5, 800b67c <forward_dense+0x18>
 800b67a:	682d      	ldr	r5, [r5, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	f240 81ba 	bls.w	800b9f6 <forward_dense+0x392>
 800b682:	690a      	ldr	r2, [r1, #16]
 800b684:	b102      	cbz	r2, 800b688 <forward_dense+0x24>
 800b686:	6812      	ldr	r2, [r2, #0]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	f000 81b9 	beq.w	800ba00 <forward_dense+0x39c>
 800b68e:	69cb      	ldr	r3, [r1, #28]
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8208 	beq.w	800baa6 <forward_dense+0x442>
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	9008      	str	r0, [sp, #32]
 800b69a:	f111 0018 	adds.w	r0, r1, #24
 800b69e:	f000 81dd 	beq.w	800ba5c <forward_dense+0x3f8>
 800b6a2:	8b09      	ldrh	r1, [r1, #24]
 800b6a4:	2901      	cmp	r1, #1
 800b6a6:	f240 81fb 	bls.w	800baa0 <forward_dense+0x43c>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 81d8 	beq.w	800ba60 <forward_dense+0x3fc>
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	9306      	str	r3, [sp, #24]
 800b6b4:	9b08      	ldr	r3, [sp, #32]
 800b6b6:	68d6      	ldr	r6, [r2, #12]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	e9d6 0402 	ldrd	r0, r4, [r6, #8]
 800b6be:	681f      	ldr	r7, [r3, #0]
 800b6c0:	fb04 f000 	mul.w	r0, r4, r0
 800b6c4:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800b6c8:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800b6cc:	fa4e f10c 	asr.w	r1, lr, ip
 800b6d0:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800b6d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b6d6:	68e9      	ldr	r1, [r5, #12]
 800b6d8:	2f04      	cmp	r7, #4
 800b6da:	9007      	str	r0, [sp, #28]
 800b6dc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800b6e0:	6870      	ldr	r0, [r6, #4]
 800b6e2:	f000 81da 	beq.w	800ba9a <forward_dense+0x436>
 800b6e6:	2f08      	cmp	r7, #8
 800b6e8:	f000 81d7 	beq.w	800ba9a <forward_dense+0x436>
 800b6ec:	f04f 0a00 	mov.w	sl, #0
 800b6f0:	6992      	ldr	r2, [r2, #24]
 800b6f2:	69a9      	ldr	r1, [r5, #24]
 800b6f4:	6894      	ldr	r4, [r2, #8]
 800b6f6:	9a08      	ldr	r2, [sp, #32]
 800b6f8:	0080      	lsls	r0, r0, #2
 800b6fa:	6952      	ldr	r2, [r2, #20]
 800b6fc:	9404      	str	r4, [sp, #16]
 800b6fe:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b702:	9a07      	ldr	r2, [sp, #28]
 800b704:	9009      	str	r0, [sp, #36]	@ 0x24
 800b706:	688f      	ldr	r7, [r1, #8]
 800b708:	1826      	adds	r6, r4, r0
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	f000 81c2 	beq.w	800ba94 <forward_dense+0x430>
 800b710:	2200      	movs	r2, #0
 800b712:	9205      	str	r2, [sp, #20]
 800b714:	f1a8 0210 	sub.w	r2, r8, #16
 800b718:	0912      	lsrs	r2, r2, #4
 800b71a:	3201      	adds	r2, #1
 800b71c:	0192      	lsls	r2, r2, #6
 800b71e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b720:	689d      	ldr	r5, [r3, #8]
 800b722:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b726:	9b06      	ldr	r3, [sp, #24]
 800b728:	920a      	str	r2, [sp, #40]	@ 0x28
 800b72a:	f008 020f 	and.w	r2, r8, #15
 800b72e:	eddf 4ad8 	vldr	s9, [pc, #864]	@ 800ba90 <forward_dense+0x42c>
 800b732:	920d      	str	r2, [sp, #52]	@ 0x34
 800b734:	2b00      	cmp	r3, #0
 800b736:	d042      	beq.n	800b7be <forward_dense+0x15a>
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	689c      	ldr	r4, [r3, #8]
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	f1ba 0f00 	cmp.w	sl, #0
 800b742:	d041      	beq.n	800b7c8 <forward_dense+0x164>
 800b744:	42b3      	cmp	r3, r6
 800b746:	d229      	bcs.n	800b79c <forward_dense+0x138>
 800b748:	469b      	mov	fp, r3
 800b74a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	4633      	mov	r3, r6
 800b750:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b752:	4646      	mov	r6, r8
 800b754:	2a04      	cmp	r2, #4
 800b756:	4698      	mov	r8, r3
 800b758:	f000 8155 	beq.w	800ba06 <forward_dense+0x3a2>
 800b75c:	2c00      	cmp	r4, #0
 800b75e:	f000 8181 	beq.w	800ba64 <forward_dense+0x400>
 800b762:	f8d4 c000 	ldr.w	ip, [r4]
 800b766:	463b      	mov	r3, r7
 800b768:	4629      	mov	r1, r5
 800b76a:	9600      	str	r6, [sp, #0]
 800b76c:	4652      	mov	r2, sl
 800b76e:	9803      	ldr	r0, [sp, #12]
 800b770:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 800b774:	f7ff fdfa 	bl	800b36c <ai_dict8_dot_array_f32>
 800b778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b77a:	3404      	adds	r4, #4
 800b77c:	f84b 3b04 	str.w	r3, [fp], #4
 800b780:	45c3      	cmp	fp, r8
 800b782:	444d      	add	r5, r9
 800b784:	d3ea      	bcc.n	800b75c <forward_dense+0xf8>
 800b786:	4643      	mov	r3, r8
 800b788:	46b0      	mov	r8, r6
 800b78a:	461e      	mov	r6, r3
 800b78c:	9a04      	ldr	r2, [sp, #16]
 800b78e:	43d3      	mvns	r3, r2
 800b790:	4433      	add	r3, r6
 800b792:	f023 0303 	bic.w	r3, r3, #3
 800b796:	3304      	adds	r3, #4
 800b798:	18d3      	adds	r3, r2, r3
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	4417      	add	r7, r2
 800b7a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	4416      	add	r6, r2
 800b7a8:	9a07      	ldr	r2, [sp, #28]
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	f000 8171 	beq.w	800ba94 <forward_dense+0x430>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	689d      	ldr	r5, [r3, #8]
 800b7b8:	9b06      	ldr	r3, [sp, #24]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1bc      	bne.n	800b738 <forward_dense+0xd4>
 800b7be:	461c      	mov	r4, r3
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	f1ba 0f00 	cmp.w	sl, #0
 800b7c6:	d1bd      	bne.n	800b744 <forward_dense+0xe0>
 800b7c8:	42b3      	cmp	r3, r6
 800b7ca:	d2e7      	bcs.n	800b79c <forward_dense+0x138>
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7d0:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800b7d4:	eb07 0c03 	add.w	ip, r7, r3
 800b7d8:	469e      	mov	lr, r3
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	f000 80ff 	beq.w	800b9de <forward_dense+0x37a>
 800b7e0:	f1b8 0f0f 	cmp.w	r8, #15
 800b7e4:	ed94 6a00 	vldr	s12, [r4]
 800b7e8:	f104 0404 	add.w	r4, r4, #4
 800b7ec:	f240 80fd 	bls.w	800b9ea <forward_dense+0x386>
 800b7f0:	4641      	mov	r1, r8
 800b7f2:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800ba90 <forward_dense+0x42c>
 800b7f6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b7fa:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800b7fe:	ed12 7a0f 	vldr	s14, [r2, #-60]	@ 0xffffffc4
 800b802:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800b806:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 800b80a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80e:	ed12 7a10 	vldr	s14, [r2, #-64]	@ 0xffffffc0
 800b812:	ed12 5a0e 	vldr	s10, [r2, #-56]	@ 0xffffffc8
 800b816:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b81a:	ed13 7a0e 	vldr	s14, [r3, #-56]	@ 0xffffffc8
 800b81e:	ed52 5a0d 	vldr	s11, [r2, #-52]	@ 0xffffffcc
 800b822:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b826:	ed13 7a0d 	vldr	s14, [r3, #-52]	@ 0xffffffcc
 800b82a:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800b82e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b832:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
 800b836:	ed53 5a0b 	vldr	s11, [r3, #-44]	@ 0xffffffd4
 800b83a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b83e:	ed12 7a0b 	vldr	s14, [r2, #-44]	@ 0xffffffd4
 800b842:	ed12 5a0a 	vldr	s10, [r2, #-40]	@ 0xffffffd8
 800b846:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b84a:	ed13 7a0a 	vldr	s14, [r3, #-40]	@ 0xffffffd8
 800b84e:	ed52 5a09 	vldr	s11, [r2, #-36]	@ 0xffffffdc
 800b852:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b856:	ed13 7a09 	vldr	s14, [r3, #-36]	@ 0xffffffdc
 800b85a:	ed13 5a08 	vldr	s10, [r3, #-32]	@ 0xffffffe0
 800b85e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b862:	ed12 7a08 	vldr	s14, [r2, #-32]	@ 0xffffffe0
 800b866:	ed53 5a07 	vldr	s11, [r3, #-28]	@ 0xffffffe4
 800b86a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b86e:	ed12 7a07 	vldr	s14, [r2, #-28]	@ 0xffffffe4
 800b872:	ed13 5a06 	vldr	s10, [r3, #-24]	@ 0xffffffe8
 800b876:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b87a:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
 800b87e:	ed52 5a05 	vldr	s11, [r2, #-20]	@ 0xffffffec
 800b882:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b886:	ed13 7a05 	vldr	s14, [r3, #-20]	@ 0xffffffec
 800b88a:	ed13 5a04 	vldr	s10, [r3, #-16]
 800b88e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b892:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b896:	ed52 5a03 	vldr	s11, [r2, #-12]
 800b89a:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b89e:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b8a2:	ed12 5a02 	vldr	s10, [r2, #-8]
 800b8a6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b8aa:	ed13 7a02 	vldr	s14, [r3, #-8]
 800b8ae:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b8b2:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b8b6:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b8ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b8be:	3910      	subs	r1, #16
 800b8c0:	290f      	cmp	r1, #15
 800b8c2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b8c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b8ca:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800b8ce:	d896      	bhi.n	800b7fe <forward_dense+0x19a>
 800b8d0:	465b      	mov	r3, fp
 800b8d2:	4662      	mov	r2, ip
 800b8d4:	eb05 010e 	add.w	r1, r5, lr
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d075      	beq.n	800b9c8 <forward_dense+0x364>
 800b8dc:	ed91 7a00 	vldr	s14, [r1]
 800b8e0:	edd2 7a00 	vldr	s15, [r2]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b8ea:	d06d      	beq.n	800b9c8 <forward_dense+0x364>
 800b8ec:	ed91 7a01 	vldr	s14, [r1, #4]
 800b8f0:	edd2 7a01 	vldr	s15, [r2, #4]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b8fa:	d065      	beq.n	800b9c8 <forward_dense+0x364>
 800b8fc:	ed91 7a02 	vldr	s14, [r1, #8]
 800b900:	edd2 7a02 	vldr	s15, [r2, #8]
 800b904:	2b03      	cmp	r3, #3
 800b906:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b90a:	d05d      	beq.n	800b9c8 <forward_dense+0x364>
 800b90c:	ed91 7a03 	vldr	s14, [r1, #12]
 800b910:	edd2 7a03 	vldr	s15, [r2, #12]
 800b914:	2b04      	cmp	r3, #4
 800b916:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b91a:	d055      	beq.n	800b9c8 <forward_dense+0x364>
 800b91c:	ed91 7a04 	vldr	s14, [r1, #16]
 800b920:	edd2 7a04 	vldr	s15, [r2, #16]
 800b924:	2b05      	cmp	r3, #5
 800b926:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b92a:	d04d      	beq.n	800b9c8 <forward_dense+0x364>
 800b92c:	ed91 7a05 	vldr	s14, [r1, #20]
 800b930:	edd2 7a05 	vldr	s15, [r2, #20]
 800b934:	2b06      	cmp	r3, #6
 800b936:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b93a:	d045      	beq.n	800b9c8 <forward_dense+0x364>
 800b93c:	ed91 7a06 	vldr	s14, [r1, #24]
 800b940:	edd2 7a06 	vldr	s15, [r2, #24]
 800b944:	2b07      	cmp	r3, #7
 800b946:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b94a:	d03d      	beq.n	800b9c8 <forward_dense+0x364>
 800b94c:	ed91 7a07 	vldr	s14, [r1, #28]
 800b950:	edd2 7a07 	vldr	s15, [r2, #28]
 800b954:	2b08      	cmp	r3, #8
 800b956:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b95a:	d035      	beq.n	800b9c8 <forward_dense+0x364>
 800b95c:	ed91 7a08 	vldr	s14, [r1, #32]
 800b960:	edd2 7a08 	vldr	s15, [r2, #32]
 800b964:	2b09      	cmp	r3, #9
 800b966:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b96a:	d02d      	beq.n	800b9c8 <forward_dense+0x364>
 800b96c:	ed91 7a09 	vldr	s14, [r1, #36]	@ 0x24
 800b970:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800b974:	2b0a      	cmp	r3, #10
 800b976:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b97a:	d025      	beq.n	800b9c8 <forward_dense+0x364>
 800b97c:	ed91 7a0a 	vldr	s14, [r1, #40]	@ 0x28
 800b980:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 800b984:	2b0b      	cmp	r3, #11
 800b986:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b98a:	d01d      	beq.n	800b9c8 <forward_dense+0x364>
 800b98c:	ed91 7a0b 	vldr	s14, [r1, #44]	@ 0x2c
 800b990:	edd2 7a0b 	vldr	s15, [r2, #44]	@ 0x2c
 800b994:	2b0c      	cmp	r3, #12
 800b996:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b99a:	d015      	beq.n	800b9c8 <forward_dense+0x364>
 800b99c:	ed91 7a0c 	vldr	s14, [r1, #48]	@ 0x30
 800b9a0:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 800b9a4:	2b0d      	cmp	r3, #13
 800b9a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b9aa:	d00d      	beq.n	800b9c8 <forward_dense+0x364>
 800b9ac:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800b9b0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b9b4:	2b0e      	cmp	r3, #14
 800b9b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b9ba:	d005      	beq.n	800b9c8 <forward_dense+0x364>
 800b9bc:	ed91 7a0e 	vldr	s14, [r1, #56]	@ 0x38
 800b9c0:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800b9c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b9c8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b9cc:	ece0 6a01 	vstmia	r0!, {s13}
 800b9d0:	42b0      	cmp	r0, r6
 800b9d2:	444d      	add	r5, r9
 800b9d4:	f4bf aeda 	bcs.w	800b78c <forward_dense+0x128>
 800b9d8:	2c00      	cmp	r4, #0
 800b9da:	f47f af01 	bne.w	800b7e0 <forward_dense+0x17c>
 800b9de:	f1b8 0f0f 	cmp.w	r8, #15
 800b9e2:	eeb0 6a64 	vmov.f32	s12, s9
 800b9e6:	f63f af03 	bhi.w	800b7f0 <forward_dense+0x18c>
 800b9ea:	4643      	mov	r3, r8
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	463a      	mov	r2, r7
 800b9f0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ba90 <forward_dense+0x42c>
 800b9f4:	e770      	b.n	800b8d8 <forward_dense+0x274>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	deff      	udf	#255	@ 0xff
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	deff      	udf	#255	@ 0xff
 800ba00:	2300      	movs	r3, #0
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	deff      	udf	#255	@ 0xff
 800ba06:	b1a4      	cbz	r4, 800ba32 <forward_dense+0x3ce>
 800ba08:	f8d4 c000 	ldr.w	ip, [r4]
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	4629      	mov	r1, r5
 800ba10:	9600      	str	r6, [sp, #0]
 800ba12:	4652      	mov	r2, sl
 800ba14:	9803      	ldr	r0, [sp, #12]
 800ba16:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 800ba1a:	f7ff fd69 	bl	800b4f0 <ai_dict4_dot_array_f32>
 800ba1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba20:	3404      	adds	r4, #4
 800ba22:	f84b 3b04 	str.w	r3, [fp], #4
 800ba26:	45c3      	cmp	fp, r8
 800ba28:	444d      	add	r5, r9
 800ba2a:	f4bf aeac 	bcs.w	800b786 <forward_dense+0x122>
 800ba2e:	2c00      	cmp	r4, #0
 800ba30:	d1ea      	bne.n	800ba08 <forward_dense+0x3a4>
 800ba32:	4634      	mov	r4, r6
 800ba34:	4646      	mov	r6, r8
 800ba36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ba3a:	463b      	mov	r3, r7
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	9400      	str	r4, [sp, #0]
 800ba40:	4652      	mov	r2, sl
 800ba42:	4640      	mov	r0, r8
 800ba44:	edcd 4a0f 	vstr	s9, [sp, #60]	@ 0x3c
 800ba48:	f7ff fd52 	bl	800b4f0 <ai_dict4_dot_array_f32>
 800ba4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4e:	444d      	add	r5, r9
 800ba50:	f84b 3b04 	str.w	r3, [fp], #4
 800ba54:	45b3      	cmp	fp, r6
 800ba56:	d3f0      	bcc.n	800ba3a <forward_dense+0x3d6>
 800ba58:	46a0      	mov	r8, r4
 800ba5a:	e697      	b.n	800b78c <forward_dense+0x128>
 800ba5c:	9006      	str	r0, [sp, #24]
 800ba5e:	e629      	b.n	800b6b4 <forward_dense+0x50>
 800ba60:	9306      	str	r3, [sp, #24]
 800ba62:	e627      	b.n	800b6b4 <forward_dense+0x50>
 800ba64:	4634      	mov	r4, r6
 800ba66:	4646      	mov	r6, r8
 800ba68:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	4629      	mov	r1, r5
 800ba70:	9400      	str	r4, [sp, #0]
 800ba72:	4652      	mov	r2, sl
 800ba74:	4640      	mov	r0, r8
 800ba76:	edcd 4a0f 	vstr	s9, [sp, #60]	@ 0x3c
 800ba7a:	f7ff fc77 	bl	800b36c <ai_dict8_dot_array_f32>
 800ba7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba80:	444d      	add	r5, r9
 800ba82:	f84b 3b04 	str.w	r3, [fp], #4
 800ba86:	45b3      	cmp	fp, r6
 800ba88:	d3f0      	bcc.n	800ba6c <forward_dense+0x408>
 800ba8a:	46a0      	mov	r8, r4
 800ba8c:	e67e      	b.n	800b78c <forward_dense+0x128>
 800ba8e:	bf00      	nop
 800ba90:	00000000 	.word	0x00000000
 800ba94:	b011      	add	sp, #68	@ 0x44
 800ba96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ba9e:	e627      	b.n	800b6f0 <forward_dense+0x8c>
 800baa0:	2300      	movs	r3, #0
 800baa2:	9306      	str	r3, [sp, #24]
 800baa4:	e606      	b.n	800b6b4 <forward_dense+0x50>
 800baa6:	9308      	str	r3, [sp, #32]
 800baa8:	e5f7      	b.n	800b69a <forward_dense+0x36>
 800baaa:	bf00      	nop

0800baac <nl_func_relu_generic_array_f32>:
 800baac:	b430      	push	{r4, r5}
 800baae:	ed93 7a02 	vldr	s14, [r3, #8]
 800bab2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800bab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baba:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800babe:	f102 32ff 	add.w	r2, r2, #4294967295
 800bac2:	6880      	ldr	r0, [r0, #8]
 800bac4:	688c      	ldr	r4, [r1, #8]
 800bac6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800baca:	4410      	add	r0, r2
 800bacc:	edd3 6a00 	vldr	s13, [r3]
 800bad0:	4422      	add	r2, r4
 800bad2:	ed93 6a01 	vldr	s12, [r3, #4]
 800bad6:	d421      	bmi.n	800bb1c <nl_func_relu_generic_array_f32+0x70>
 800bad8:	42a2      	cmp	r2, r4
 800bada:	d33d      	bcc.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800badc:	1d13      	adds	r3, r2, #4
 800bade:	1d02      	adds	r2, r0, #4
 800bae0:	e010      	b.n	800bb04 <nl_func_relu_generic_array_f32+0x58>
 800bae2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800bae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baea:	dd03      	ble.n	800baf4 <nl_func_relu_generic_array_f32+0x48>
 800baec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800baf0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800baf4:	ed62 7a01 	vstmdb	r2!, {s15}
 800baf8:	6888      	ldr	r0, [r1, #8]
 800bafa:	f1a3 0408 	sub.w	r4, r3, #8
 800bafe:	4284      	cmp	r4, r0
 800bb00:	462b      	mov	r3, r5
 800bb02:	d329      	bcc.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800bb04:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bb08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	f1a3 0504 	sub.w	r5, r3, #4
 800bb14:	dce5      	bgt.n	800bae2 <nl_func_relu_generic_array_f32+0x36>
 800bb16:	eef0 7a47 	vmov.f32	s15, s14
 800bb1a:	e7eb      	b.n	800baf4 <nl_func_relu_generic_array_f32+0x48>
 800bb1c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	d01a      	beq.n	800bb5c <nl_func_relu_generic_array_f32+0xb0>
 800bb26:	42a2      	cmp	r2, r4
 800bb28:	d316      	bcc.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800bb2a:	1d13      	adds	r3, r2, #4
 800bb2c:	1d02      	adds	r2, r0, #4
 800bb2e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bb32:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb3a:	f1a3 0408 	sub.w	r4, r3, #8
 800bb3e:	f1a3 0004 	sub.w	r0, r3, #4
 800bb42:	4623      	mov	r3, r4
 800bb44:	d522      	bpl.n	800bb8c <nl_func_relu_generic_array_f32+0xe0>
 800bb46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bb4e:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb52:	688b      	ldr	r3, [r1, #8]
 800bb54:	42a3      	cmp	r3, r4
 800bb56:	d91e      	bls.n	800bb96 <nl_func_relu_generic_array_f32+0xea>
 800bb58:	bc30      	pop	{r4, r5}
 800bb5a:	4770      	bx	lr
 800bb5c:	42a2      	cmp	r2, r4
 800bb5e:	d3fb      	bcc.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800bb60:	2500      	movs	r5, #0
 800bb62:	1d13      	adds	r3, r2, #4
 800bb64:	1d02      	adds	r2, r0, #4
 800bb66:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bb6a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800bb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb72:	f1a3 0408 	sub.w	r4, r3, #8
 800bb76:	f1a3 0004 	sub.w	r0, r3, #4
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	d80d      	bhi.n	800bb9a <nl_func_relu_generic_array_f32+0xee>
 800bb7e:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb82:	688b      	ldr	r3, [r1, #8]
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	d8e7      	bhi.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	e7ec      	b.n	800bb66 <nl_func_relu_generic_array_f32+0xba>
 800bb8c:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb90:	688c      	ldr	r4, [r1, #8]
 800bb92:	429c      	cmp	r4, r3
 800bb94:	d8e0      	bhi.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800bb96:	4603      	mov	r3, r0
 800bb98:	e7c9      	b.n	800bb2e <nl_func_relu_generic_array_f32+0x82>
 800bb9a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800bb9e:	688c      	ldr	r4, [r1, #8]
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d8d9      	bhi.n	800bb58 <nl_func_relu_generic_array_f32+0xac>
 800bba4:	4603      	mov	r3, r0
 800bba6:	e7de      	b.n	800bb66 <nl_func_relu_generic_array_f32+0xba>

0800bba8 <forward_relu>:
 800bba8:	6942      	ldr	r2, [r0, #20]
 800bbaa:	8813      	ldrh	r3, [r2, #0]
 800bbac:	b333      	cbz	r3, 800bbfc <forward_relu+0x54>
 800bbae:	b470      	push	{r4, r5, r6}
 800bbb0:	6852      	ldr	r2, [r2, #4]
 800bbb2:	6856      	ldr	r6, [r2, #4]
 800bbb4:	b106      	cbz	r6, 800bbb8 <forward_relu+0x10>
 800bbb6:	6836      	ldr	r6, [r6, #0]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d91c      	bls.n	800bbf6 <forward_relu+0x4e>
 800bbbc:	6913      	ldr	r3, [r2, #16]
 800bbbe:	b103      	cbz	r3, 800bbc2 <forward_relu+0x1a>
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6982      	ldr	r2, [r0, #24]
 800bbc4:	68b4      	ldr	r4, [r6, #8]
 800bbc6:	6998      	ldr	r0, [r3, #24]
 800bbc8:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800bbcc:	69b1      	ldr	r1, [r6, #24]
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	d040      	beq.n	800bc54 <forward_relu+0xac>
 800bbd2:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 800bbd6:	2d01      	cmp	r5, #1
 800bbd8:	d012      	beq.n	800bc00 <forward_relu+0x58>
 800bbda:	2201      	movs	r2, #1
 800bbdc:	b144      	cbz	r4, 800bbf0 <forward_relu+0x48>
 800bbde:	68f6      	ldr	r6, [r6, #12]
 800bbe0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800bbe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbe8:	42a6      	cmp	r6, r4
 800bbea:	fb05 f202 	mul.w	r2, r5, r2
 800bbee:	d1f9      	bne.n	800bbe4 <forward_relu+0x3c>
 800bbf0:	bc70      	pop	{r4, r5, r6}
 800bbf2:	f7ff bf5b 	b.w	800baac <nl_func_relu_generic_array_f32>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	deff      	udf	#255	@ 0xff
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	deff      	udf	#255	@ 0xff
 800bc00:	6880      	ldr	r0, [r0, #8]
 800bc02:	688a      	ldr	r2, [r1, #8]
 800bc04:	ed93 7a00 	vldr	s14, [r3]
 800bc08:	b184      	cbz	r4, 800bc2c <forward_relu+0x84>
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	68f6      	ldr	r6, [r6, #12]
 800bc0e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800bc12:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc16:	42a6      	cmp	r6, r4
 800bc18:	fb05 f303 	mul.w	r3, r5, r3
 800bc1c:	d1f9      	bne.n	800bc12 <forward_relu+0x6a>
 800bc1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc22:	3b01      	subs	r3, #1
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	18d2      	adds	r2, r2, r3
 800bc28:	4418      	add	r0, r3
 800bc2a:	d238      	bcs.n	800bc9e <forward_relu+0xf6>
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	1d13      	adds	r3, r2, #4
 800bc30:	1d02      	adds	r2, r0, #4
 800bc32:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bc36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	f1a3 0004 	sub.w	r0, r3, #4
 800bc42:	d82e      	bhi.n	800bca2 <forward_relu+0xfa>
 800bc44:	ed62 7a01 	vstmdb	r2!, {s15}
 800bc48:	688c      	ldr	r4, [r1, #8]
 800bc4a:	3b08      	subs	r3, #8
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d826      	bhi.n	800bc9e <forward_relu+0xf6>
 800bc50:	4603      	mov	r3, r0
 800bc52:	e7ee      	b.n	800bc32 <forward_relu+0x8a>
 800bc54:	6880      	ldr	r0, [r0, #8]
 800bc56:	688b      	ldr	r3, [r1, #8]
 800bc58:	b184      	cbz	r4, 800bc7c <forward_relu+0xd4>
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	68f6      	ldr	r6, [r6, #12]
 800bc5e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800bc62:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc66:	42a6      	cmp	r6, r4
 800bc68:	fb05 f202 	mul.w	r2, r5, r2
 800bc6c:	d1f9      	bne.n	800bc62 <forward_relu+0xba>
 800bc6e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800bc72:	3a01      	subs	r2, #1
 800bc74:	0092      	lsls	r2, r2, #2
 800bc76:	189b      	adds	r3, r3, r2
 800bc78:	4410      	add	r0, r2
 800bc7a:	d210      	bcs.n	800bc9e <forward_relu+0xf6>
 800bc7c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bcb4 <forward_relu+0x10c>
 800bc80:	3304      	adds	r3, #4
 800bc82:	3004      	adds	r0, #4
 800bc84:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bc88:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800bc8c:	ed60 7a01 	vstmdb	r0!, {s15}
 800bc90:	688c      	ldr	r4, [r1, #8]
 800bc92:	f1a3 0208 	sub.w	r2, r3, #8
 800bc96:	4294      	cmp	r4, r2
 800bc98:	f1a3 0304 	sub.w	r3, r3, #4
 800bc9c:	d9f2      	bls.n	800bc84 <forward_relu+0xdc>
 800bc9e:	bc70      	pop	{r4, r5, r6}
 800bca0:	4770      	bx	lr
 800bca2:	f842 5d04 	str.w	r5, [r2, #-4]!
 800bca6:	688c      	ldr	r4, [r1, #8]
 800bca8:	3b08      	subs	r3, #8
 800bcaa:	429c      	cmp	r4, r3
 800bcac:	d8f7      	bhi.n	800bc9e <forward_relu+0xf6>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	e7bf      	b.n	800bc32 <forward_relu+0x8a>
 800bcb2:	bf00      	nop
 800bcb4:	00000000 	.word	0x00000000

0800bcb8 <ai_check_custom_types>:
 800bcb8:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <ai_check_custom_types+0x50>)
 800bcba:	b082      	sub	sp, #8
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	b118      	cbz	r0, 800bcca <ai_check_custom_types+0x12>
 800bcc2:	7803      	ldrb	r3, [r0, #0]
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d002      	beq.n	800bcce <ai_check_custom_types+0x16>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	b002      	add	sp, #8
 800bccc:	4770      	bx	lr
 800bcce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d004      	beq.n	800bce0 <ai_check_custom_types+0x28>
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	f080 0001 	eor.w	r0, r0, #1
 800bcdc:	b002      	add	sp, #8
 800bcde:	4770      	bx	lr
 800bce0:	7842      	ldrb	r2, [r0, #1]
 800bce2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bce6:	3001      	adds	r0, #1
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d1f4      	bne.n	800bcd6 <ai_check_custom_types+0x1e>
 800bcec:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800bcf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d1ee      	bne.n	800bcd6 <ai_check_custom_types+0x1e>
 800bcf8:	7842      	ldrb	r2, [r0, #1]
 800bcfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d1e9      	bne.n	800bcd6 <ai_check_custom_types+0x1e>
 800bd02:	2000      	movs	r0, #0
 800bd04:	e7e8      	b.n	800bcd8 <ai_check_custom_types+0x20>
 800bd06:	bf00      	nop
 800bd08:	0800ec04 	.word	0x0800ec04

0800bd0c <ai_layers_forward_all>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 800bd10:	4604      	mov	r4, r0
 800bd12:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800bd14:	b316      	cbz	r6, 800bd5c <ai_layers_forward_all+0x50>
 800bd16:	b1bd      	cbz	r5, 800bd48 <ai_layers_forward_all+0x3c>
 800bd18:	2700      	movs	r7, #0
 800bd1a:	6545      	str	r5, [r0, #84]	@ 0x54
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800bd20:	2001      	movs	r0, #1
 800bd22:	47b0      	blx	r6
 800bd24:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800bd26:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800bd28:	2002      	movs	r0, #2
 800bd2a:	47b0      	blx	r6
 800bd2c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800bd2e:	692b      	ldr	r3, [r5, #16]
 800bd30:	4628      	mov	r0, r5
 800bd32:	4798      	blx	r3
 800bd34:	68e9      	ldr	r1, [r5, #12]
 800bd36:	428d      	cmp	r5, r1
 800bd38:	d007      	beq.n	800bd4a <ai_layers_forward_all+0x3e>
 800bd3a:	6561      	str	r1, [r4, #84]	@ 0x54
 800bd3c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800bd3e:	2003      	movs	r0, #3
 800bd40:	47b0      	blx	r6
 800bd42:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800bd44:	2900      	cmp	r1, #0
 800bd46:	d1ee      	bne.n	800bd26 <ai_layers_forward_all+0x1a>
 800bd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	6567      	str	r7, [r4, #84]	@ 0x54
 800bd4e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800bd50:	2003      	movs	r0, #3
 800bd52:	47b0      	blx	r6
 800bd54:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800bd56:	2900      	cmp	r1, #0
 800bd58:	d1e5      	bne.n	800bd26 <ai_layers_forward_all+0x1a>
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd5c:	2d00      	cmp	r5, #0
 800bd5e:	d0f3      	beq.n	800bd48 <ai_layers_forward_all+0x3c>
 800bd60:	6545      	str	r5, [r0, #84]	@ 0x54
 800bd62:	692b      	ldr	r3, [r5, #16]
 800bd64:	4628      	mov	r0, r5
 800bd66:	4798      	blx	r3
 800bd68:	68eb      	ldr	r3, [r5, #12]
 800bd6a:	42ab      	cmp	r3, r5
 800bd6c:	d004      	beq.n	800bd78 <ai_layers_forward_all+0x6c>
 800bd6e:	6563      	str	r3, [r4, #84]	@ 0x54
 800bd70:	461d      	mov	r5, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1f5      	bne.n	800bd62 <ai_layers_forward_all+0x56>
 800bd76:	e7e7      	b.n	800bd48 <ai_layers_forward_all+0x3c>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	6563      	str	r3, [r4, #84]	@ 0x54
 800bd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd7e:	bf00      	nop

0800bd80 <ai_array_to_buffer_fmt>:
 800bd80:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d01f      	beq.n	800bdc8 <ai_array_to_buffer_fmt+0x48>
 800bd88:	4a1c      	ldr	r2, [pc, #112]	@ (800bdfc <ai_array_to_buffer_fmt+0x7c>)
 800bd8a:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d00a      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bd92:	dc0d      	bgt.n	800bdb0 <ai_array_to_buffer_fmt+0x30>
 800bd94:	4a1a      	ldr	r2, [pc, #104]	@ (800be00 <ai_array_to_buffer_fmt+0x80>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d006      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bd9a:	dd1d      	ble.n	800bdd8 <ai_array_to_buffer_fmt+0x58>
 800bd9c:	4a19      	ldr	r2, [pc, #100]	@ (800be04 <ai_array_to_buffer_fmt+0x84>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d002      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bda2:	320f      	adds	r2, #15
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d10d      	bne.n	800bdc4 <ai_array_to_buffer_fmt+0x44>
 800bda8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800bdac:	4318      	orrs	r0, r3
 800bdae:	4770      	bx	lr
 800bdb0:	4a15      	ldr	r2, [pc, #84]	@ (800be08 <ai_array_to_buffer_fmt+0x88>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d0f8      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bdb6:	dd18      	ble.n	800bdea <ai_array_to_buffer_fmt+0x6a>
 800bdb8:	4a14      	ldr	r2, [pc, #80]	@ (800be0c <ai_array_to_buffer_fmt+0x8c>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d0f4      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bdbe:	4a14      	ldr	r2, [pc, #80]	@ (800be10 <ai_array_to_buffer_fmt+0x90>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d0f1      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bdc4:	2340      	movs	r3, #64	@ 0x40
 800bdc6:	e7ef      	b.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bdc8:	4b12      	ldr	r3, [pc, #72]	@ (800be14 <ai_array_to_buffer_fmt+0x94>)
 800bdca:	4003      	ands	r3, r0
 800bdcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bdd0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800bdd4:	4318      	orrs	r0, r3
 800bdd6:	4770      	bx	lr
 800bdd8:	f2a2 4207 	subw	r2, r2, #1031	@ 0x407
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d0e3      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bde0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d0df      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bde8:	e7ec      	b.n	800bdc4 <ai_array_to_buffer_fmt+0x44>
 800bdea:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d0da      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bdf2:	3207      	adds	r2, #7
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d0d7      	beq.n	800bda8 <ai_array_to_buffer_fmt+0x28>
 800bdf8:	e7e4      	b.n	800bdc4 <ai_array_to_buffer_fmt+0x44>
 800bdfa:	bf00      	nop
 800bdfc:	00840040 	.word	0x00840040
 800be00:	00040447 	.word	0x00040447
 800be04:	00040840 	.word	0x00040840
 800be08:	00840840 	.word	0x00840840
 800be0c:	0084084f 	.word	0x0084084f
 800be10:	01821040 	.word	0x01821040
 800be14:	00803fff 	.word	0x00803fff

0800be18 <ai_array_get_byte_size>:
 800be18:	b1c1      	cbz	r1, 800be4c <ai_array_get_byte_size+0x34>
 800be1a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800be1e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800be22:	4413      	add	r3, r2
 800be24:	fb01 f103 	mul.w	r1, r1, r3
 800be28:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800be2c:	3107      	adds	r1, #7
 800be2e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800be32:	f021 0107 	bic.w	r1, r1, #7
 800be36:	2804      	cmp	r0, #4
 800be38:	fa21 f102 	lsr.w	r1, r1, r2
 800be3c:	d008      	beq.n	800be50 <ai_array_get_byte_size+0x38>
 800be3e:	2808      	cmp	r0, #8
 800be40:	d101      	bne.n	800be46 <ai_array_get_byte_size+0x2e>
 800be42:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800be46:	3107      	adds	r1, #7
 800be48:	08c8      	lsrs	r0, r1, #3
 800be4a:	4770      	bx	lr
 800be4c:	4608      	mov	r0, r1
 800be4e:	4770      	bx	lr
 800be50:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800be54:	3107      	adds	r1, #7
 800be56:	08c8      	lsrs	r0, r1, #3
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop

0800be5c <malloc>:
 800be5c:	4b02      	ldr	r3, [pc, #8]	@ (800be68 <malloc+0xc>)
 800be5e:	4601      	mov	r1, r0
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	f000 b825 	b.w	800beb0 <_malloc_r>
 800be66:	bf00      	nop
 800be68:	200005f0 	.word	0x200005f0

0800be6c <sbrk_aligned>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	4e0f      	ldr	r6, [pc, #60]	@ (800beac <sbrk_aligned+0x40>)
 800be70:	460c      	mov	r4, r1
 800be72:	4605      	mov	r5, r0
 800be74:	6831      	ldr	r1, [r6, #0]
 800be76:	b911      	cbnz	r1, 800be7e <sbrk_aligned+0x12>
 800be78:	f000 ff28 	bl	800cccc <_sbrk_r>
 800be7c:	6030      	str	r0, [r6, #0]
 800be7e:	4621      	mov	r1, r4
 800be80:	4628      	mov	r0, r5
 800be82:	f000 ff23 	bl	800cccc <_sbrk_r>
 800be86:	1c43      	adds	r3, r0, #1
 800be88:	d103      	bne.n	800be92 <sbrk_aligned+0x26>
 800be8a:	f04f 34ff 	mov.w	r4, #4294967295
 800be8e:	4620      	mov	r0, r4
 800be90:	bd70      	pop	{r4, r5, r6, pc}
 800be92:	1cc4      	adds	r4, r0, #3
 800be94:	f024 0403 	bic.w	r4, r4, #3
 800be98:	42a0      	cmp	r0, r4
 800be9a:	d0f8      	beq.n	800be8e <sbrk_aligned+0x22>
 800be9c:	1a21      	subs	r1, r4, r0
 800be9e:	4628      	mov	r0, r5
 800bea0:	f000 ff14 	bl	800cccc <_sbrk_r>
 800bea4:	3001      	adds	r0, #1
 800bea6:	d1f2      	bne.n	800be8e <sbrk_aligned+0x22>
 800bea8:	e7ef      	b.n	800be8a <sbrk_aligned+0x1e>
 800beaa:	bf00      	nop
 800beac:	200011a0 	.word	0x200011a0

0800beb0 <_malloc_r>:
 800beb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb4:	1ccd      	adds	r5, r1, #3
 800beb6:	4606      	mov	r6, r0
 800beb8:	f025 0503 	bic.w	r5, r5, #3
 800bebc:	3508      	adds	r5, #8
 800bebe:	2d0c      	cmp	r5, #12
 800bec0:	bf38      	it	cc
 800bec2:	250c      	movcc	r5, #12
 800bec4:	2d00      	cmp	r5, #0
 800bec6:	db01      	blt.n	800becc <_malloc_r+0x1c>
 800bec8:	42a9      	cmp	r1, r5
 800beca:	d904      	bls.n	800bed6 <_malloc_r+0x26>
 800becc:	230c      	movs	r3, #12
 800bece:	6033      	str	r3, [r6, #0]
 800bed0:	2000      	movs	r0, #0
 800bed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bfac <_malloc_r+0xfc>
 800beda:	f000 f869 	bl	800bfb0 <__malloc_lock>
 800bede:	f8d8 3000 	ldr.w	r3, [r8]
 800bee2:	461c      	mov	r4, r3
 800bee4:	bb44      	cbnz	r4, 800bf38 <_malloc_r+0x88>
 800bee6:	4629      	mov	r1, r5
 800bee8:	4630      	mov	r0, r6
 800beea:	f7ff ffbf 	bl	800be6c <sbrk_aligned>
 800beee:	1c43      	adds	r3, r0, #1
 800bef0:	4604      	mov	r4, r0
 800bef2:	d158      	bne.n	800bfa6 <_malloc_r+0xf6>
 800bef4:	f8d8 4000 	ldr.w	r4, [r8]
 800bef8:	4627      	mov	r7, r4
 800befa:	2f00      	cmp	r7, #0
 800befc:	d143      	bne.n	800bf86 <_malloc_r+0xd6>
 800befe:	2c00      	cmp	r4, #0
 800bf00:	d04b      	beq.n	800bf9a <_malloc_r+0xea>
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	4639      	mov	r1, r7
 800bf06:	4630      	mov	r0, r6
 800bf08:	eb04 0903 	add.w	r9, r4, r3
 800bf0c:	f000 fede 	bl	800cccc <_sbrk_r>
 800bf10:	4581      	cmp	r9, r0
 800bf12:	d142      	bne.n	800bf9a <_malloc_r+0xea>
 800bf14:	6821      	ldr	r1, [r4, #0]
 800bf16:	4630      	mov	r0, r6
 800bf18:	1a6d      	subs	r5, r5, r1
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7ff ffa6 	bl	800be6c <sbrk_aligned>
 800bf20:	3001      	adds	r0, #1
 800bf22:	d03a      	beq.n	800bf9a <_malloc_r+0xea>
 800bf24:	6823      	ldr	r3, [r4, #0]
 800bf26:	442b      	add	r3, r5
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	bb62      	cbnz	r2, 800bf8c <_malloc_r+0xdc>
 800bf32:	f8c8 7000 	str.w	r7, [r8]
 800bf36:	e00f      	b.n	800bf58 <_malloc_r+0xa8>
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	1b52      	subs	r2, r2, r5
 800bf3c:	d420      	bmi.n	800bf80 <_malloc_r+0xd0>
 800bf3e:	2a0b      	cmp	r2, #11
 800bf40:	d917      	bls.n	800bf72 <_malloc_r+0xc2>
 800bf42:	1961      	adds	r1, r4, r5
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	6025      	str	r5, [r4, #0]
 800bf48:	bf18      	it	ne
 800bf4a:	6059      	strne	r1, [r3, #4]
 800bf4c:	6863      	ldr	r3, [r4, #4]
 800bf4e:	bf08      	it	eq
 800bf50:	f8c8 1000 	streq.w	r1, [r8]
 800bf54:	5162      	str	r2, [r4, r5]
 800bf56:	604b      	str	r3, [r1, #4]
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f000 f82f 	bl	800bfbc <__malloc_unlock>
 800bf5e:	f104 000b 	add.w	r0, r4, #11
 800bf62:	1d23      	adds	r3, r4, #4
 800bf64:	f020 0007 	bic.w	r0, r0, #7
 800bf68:	1ac2      	subs	r2, r0, r3
 800bf6a:	bf1c      	itt	ne
 800bf6c:	1a1b      	subne	r3, r3, r0
 800bf6e:	50a3      	strne	r3, [r4, r2]
 800bf70:	e7af      	b.n	800bed2 <_malloc_r+0x22>
 800bf72:	6862      	ldr	r2, [r4, #4]
 800bf74:	42a3      	cmp	r3, r4
 800bf76:	bf0c      	ite	eq
 800bf78:	f8c8 2000 	streq.w	r2, [r8]
 800bf7c:	605a      	strne	r2, [r3, #4]
 800bf7e:	e7eb      	b.n	800bf58 <_malloc_r+0xa8>
 800bf80:	4623      	mov	r3, r4
 800bf82:	6864      	ldr	r4, [r4, #4]
 800bf84:	e7ae      	b.n	800bee4 <_malloc_r+0x34>
 800bf86:	463c      	mov	r4, r7
 800bf88:	687f      	ldr	r7, [r7, #4]
 800bf8a:	e7b6      	b.n	800befa <_malloc_r+0x4a>
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	d1fb      	bne.n	800bf8c <_malloc_r+0xdc>
 800bf94:	2300      	movs	r3, #0
 800bf96:	6053      	str	r3, [r2, #4]
 800bf98:	e7de      	b.n	800bf58 <_malloc_r+0xa8>
 800bf9a:	230c      	movs	r3, #12
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	6033      	str	r3, [r6, #0]
 800bfa0:	f000 f80c 	bl	800bfbc <__malloc_unlock>
 800bfa4:	e794      	b.n	800bed0 <_malloc_r+0x20>
 800bfa6:	6005      	str	r5, [r0, #0]
 800bfa8:	e7d6      	b.n	800bf58 <_malloc_r+0xa8>
 800bfaa:	bf00      	nop
 800bfac:	200011a4 	.word	0x200011a4

0800bfb0 <__malloc_lock>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	@ (800bfb8 <__malloc_lock+0x8>)
 800bfb2:	f000 bed8 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	200012e8 	.word	0x200012e8

0800bfbc <__malloc_unlock>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	@ (800bfc4 <__malloc_unlock+0x8>)
 800bfbe:	f000 bed3 	b.w	800cd68 <__retarget_lock_release_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	200012e8 	.word	0x200012e8

0800bfc8 <_realloc_r>:
 800bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfcc:	4680      	mov	r8, r0
 800bfce:	4615      	mov	r5, r2
 800bfd0:	460c      	mov	r4, r1
 800bfd2:	b921      	cbnz	r1, 800bfde <_realloc_r+0x16>
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	f7ff bf69 	b.w	800beb0 <_malloc_r>
 800bfde:	b92a      	cbnz	r2, 800bfec <_realloc_r+0x24>
 800bfe0:	f001 fd32 	bl	800da48 <_free_r>
 800bfe4:	2400      	movs	r4, #0
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfec:	f002 f8fe 	bl	800e1ec <_malloc_usable_size_r>
 800bff0:	4285      	cmp	r5, r0
 800bff2:	4606      	mov	r6, r0
 800bff4:	d802      	bhi.n	800bffc <_realloc_r+0x34>
 800bff6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bffa:	d8f4      	bhi.n	800bfe6 <_realloc_r+0x1e>
 800bffc:	4629      	mov	r1, r5
 800bffe:	4640      	mov	r0, r8
 800c000:	f7ff ff56 	bl	800beb0 <_malloc_r>
 800c004:	4607      	mov	r7, r0
 800c006:	2800      	cmp	r0, #0
 800c008:	d0ec      	beq.n	800bfe4 <_realloc_r+0x1c>
 800c00a:	42b5      	cmp	r5, r6
 800c00c:	462a      	mov	r2, r5
 800c00e:	4621      	mov	r1, r4
 800c010:	bf28      	it	cs
 800c012:	4632      	movcs	r2, r6
 800c014:	f000 feb7 	bl	800cd86 <memcpy>
 800c018:	4621      	mov	r1, r4
 800c01a:	4640      	mov	r0, r8
 800c01c:	463c      	mov	r4, r7
 800c01e:	f001 fd13 	bl	800da48 <_free_r>
 800c022:	e7e0      	b.n	800bfe6 <_realloc_r+0x1e>

0800c024 <__cvt>:
 800c024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c028:	ec57 6b10 	vmov	r6, r7, d0
 800c02c:	2f00      	cmp	r7, #0
 800c02e:	460c      	mov	r4, r1
 800c030:	4619      	mov	r1, r3
 800c032:	463b      	mov	r3, r7
 800c034:	bfb4      	ite	lt
 800c036:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c03a:	2300      	movge	r3, #0
 800c03c:	4691      	mov	r9, r2
 800c03e:	bfbf      	itttt	lt
 800c040:	4632      	movlt	r2, r6
 800c042:	461f      	movlt	r7, r3
 800c044:	232d      	movlt	r3, #45	@ 0x2d
 800c046:	4616      	movlt	r6, r2
 800c048:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c04c:	700b      	strb	r3, [r1, #0]
 800c04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c050:	f023 0820 	bic.w	r8, r3, #32
 800c054:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c058:	d005      	beq.n	800c066 <__cvt+0x42>
 800c05a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c05e:	d100      	bne.n	800c062 <__cvt+0x3e>
 800c060:	3401      	adds	r4, #1
 800c062:	2102      	movs	r1, #2
 800c064:	e000      	b.n	800c068 <__cvt+0x44>
 800c066:	2103      	movs	r1, #3
 800c068:	ab03      	add	r3, sp, #12
 800c06a:	4622      	mov	r2, r4
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	ab02      	add	r3, sp, #8
 800c070:	ec47 6b10 	vmov	d0, r6, r7
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	4653      	mov	r3, sl
 800c078:	f000 ff22 	bl	800cec0 <_dtoa_r>
 800c07c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c080:	4605      	mov	r5, r0
 800c082:	d119      	bne.n	800c0b8 <__cvt+0x94>
 800c084:	f019 0f01 	tst.w	r9, #1
 800c088:	d00e      	beq.n	800c0a8 <__cvt+0x84>
 800c08a:	eb00 0904 	add.w	r9, r0, r4
 800c08e:	2200      	movs	r2, #0
 800c090:	2300      	movs	r3, #0
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 fd1b 	bl	8000ad0 <__aeabi_dcmpeq>
 800c09a:	b108      	cbz	r0, 800c0a0 <__cvt+0x7c>
 800c09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0a0:	2230      	movs	r2, #48	@ 0x30
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	454b      	cmp	r3, r9
 800c0a6:	d31e      	bcc.n	800c0e6 <__cvt+0xc2>
 800c0a8:	9b03      	ldr	r3, [sp, #12]
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0ae:	1b5b      	subs	r3, r3, r5
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	b004      	add	sp, #16
 800c0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c0bc:	eb00 0904 	add.w	r9, r0, r4
 800c0c0:	d1e5      	bne.n	800c08e <__cvt+0x6a>
 800c0c2:	7803      	ldrb	r3, [r0, #0]
 800c0c4:	2b30      	cmp	r3, #48	@ 0x30
 800c0c6:	d10a      	bne.n	800c0de <__cvt+0xba>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 fcfe 	bl	8000ad0 <__aeabi_dcmpeq>
 800c0d4:	b918      	cbnz	r0, 800c0de <__cvt+0xba>
 800c0d6:	f1c4 0401 	rsb	r4, r4, #1
 800c0da:	f8ca 4000 	str.w	r4, [sl]
 800c0de:	f8da 3000 	ldr.w	r3, [sl]
 800c0e2:	4499      	add	r9, r3
 800c0e4:	e7d3      	b.n	800c08e <__cvt+0x6a>
 800c0e6:	1c59      	adds	r1, r3, #1
 800c0e8:	9103      	str	r1, [sp, #12]
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	e7d9      	b.n	800c0a2 <__cvt+0x7e>

0800c0ee <__exponent>:
 800c0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0f0:	2900      	cmp	r1, #0
 800c0f2:	7002      	strb	r2, [r0, #0]
 800c0f4:	bfba      	itte	lt
 800c0f6:	4249      	neglt	r1, r1
 800c0f8:	232d      	movlt	r3, #45	@ 0x2d
 800c0fa:	232b      	movge	r3, #43	@ 0x2b
 800c0fc:	2909      	cmp	r1, #9
 800c0fe:	7043      	strb	r3, [r0, #1]
 800c100:	dd28      	ble.n	800c154 <__exponent+0x66>
 800c102:	f10d 0307 	add.w	r3, sp, #7
 800c106:	270a      	movs	r7, #10
 800c108:	461d      	mov	r5, r3
 800c10a:	461a      	mov	r2, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c112:	fb07 1416 	mls	r4, r7, r6, r1
 800c116:	3430      	adds	r4, #48	@ 0x30
 800c118:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c11c:	460c      	mov	r4, r1
 800c11e:	4631      	mov	r1, r6
 800c120:	2c63      	cmp	r4, #99	@ 0x63
 800c122:	dcf2      	bgt.n	800c10a <__exponent+0x1c>
 800c124:	3130      	adds	r1, #48	@ 0x30
 800c126:	1e94      	subs	r4, r2, #2
 800c128:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c12c:	1c41      	adds	r1, r0, #1
 800c12e:	4623      	mov	r3, r4
 800c130:	42ab      	cmp	r3, r5
 800c132:	d30a      	bcc.n	800c14a <__exponent+0x5c>
 800c134:	f10d 0309 	add.w	r3, sp, #9
 800c138:	1a9b      	subs	r3, r3, r2
 800c13a:	42ac      	cmp	r4, r5
 800c13c:	bf88      	it	hi
 800c13e:	2300      	movhi	r3, #0
 800c140:	3302      	adds	r3, #2
 800c142:	4403      	add	r3, r0
 800c144:	1a18      	subs	r0, r3, r0
 800c146:	b003      	add	sp, #12
 800c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c14a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c14e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c152:	e7ed      	b.n	800c130 <__exponent+0x42>
 800c154:	2330      	movs	r3, #48	@ 0x30
 800c156:	3130      	adds	r1, #48	@ 0x30
 800c158:	7083      	strb	r3, [r0, #2]
 800c15a:	1d03      	adds	r3, r0, #4
 800c15c:	70c1      	strb	r1, [r0, #3]
 800c15e:	e7f1      	b.n	800c144 <__exponent+0x56>

0800c160 <_printf_float>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	b08d      	sub	sp, #52	@ 0x34
 800c166:	460c      	mov	r4, r1
 800c168:	4616      	mov	r6, r2
 800c16a:	461f      	mov	r7, r3
 800c16c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c170:	4605      	mov	r5, r0
 800c172:	f000 fd73 	bl	800cc5c <_localeconv_r>
 800c176:	6803      	ldr	r3, [r0, #0]
 800c178:	4618      	mov	r0, r3
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	f7f4 f87c 	bl	8000278 <strlen>
 800c180:	2300      	movs	r3, #0
 800c182:	9005      	str	r0, [sp, #20]
 800c184:	930a      	str	r3, [sp, #40]	@ 0x28
 800c186:	f8d8 3000 	ldr.w	r3, [r8]
 800c18a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c18e:	3307      	adds	r3, #7
 800c190:	f8d4 b000 	ldr.w	fp, [r4]
 800c194:	f023 0307 	bic.w	r3, r3, #7
 800c198:	f103 0208 	add.w	r2, r3, #8
 800c19c:	f8c8 2000 	str.w	r2, [r8]
 800c1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c1ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800c1b0:	9307      	str	r3, [sp, #28]
 800c1b2:	4b9d      	ldr	r3, [pc, #628]	@ (800c428 <_printf_float+0x2c8>)
 800c1b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c1bc:	f7f4 fcba 	bl	8000b34 <__aeabi_dcmpun>
 800c1c0:	bb70      	cbnz	r0, 800c220 <_printf_float+0xc0>
 800c1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c6:	4b98      	ldr	r3, [pc, #608]	@ (800c428 <_printf_float+0x2c8>)
 800c1c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1cc:	f7f4 fc94 	bl	8000af8 <__aeabi_dcmple>
 800c1d0:	bb30      	cbnz	r0, 800c220 <_printf_float+0xc0>
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	4649      	mov	r1, r9
 800c1da:	f7f4 fc83 	bl	8000ae4 <__aeabi_dcmplt>
 800c1de:	b110      	cbz	r0, 800c1e6 <_printf_float+0x86>
 800c1e0:	232d      	movs	r3, #45	@ 0x2d
 800c1e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e6:	4a91      	ldr	r2, [pc, #580]	@ (800c42c <_printf_float+0x2cc>)
 800c1e8:	4b91      	ldr	r3, [pc, #580]	@ (800c430 <_printf_float+0x2d0>)
 800c1ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c1ee:	bf94      	ite	ls
 800c1f0:	4690      	movls	r8, r2
 800c1f2:	4698      	movhi	r8, r3
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	f04f 0900 	mov.w	r9, #0
 800c1fa:	6123      	str	r3, [r4, #16]
 800c1fc:	f02b 0304 	bic.w	r3, fp, #4
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	4633      	mov	r3, r6
 800c204:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c206:	4621      	mov	r1, r4
 800c208:	4628      	mov	r0, r5
 800c20a:	9700      	str	r7, [sp, #0]
 800c20c:	f000 f9d2 	bl	800c5b4 <_printf_common>
 800c210:	3001      	adds	r0, #1
 800c212:	f040 808d 	bne.w	800c330 <_printf_float+0x1d0>
 800c216:	f04f 30ff 	mov.w	r0, #4294967295
 800c21a:	b00d      	add	sp, #52	@ 0x34
 800c21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c220:	4642      	mov	r2, r8
 800c222:	464b      	mov	r3, r9
 800c224:	4640      	mov	r0, r8
 800c226:	4649      	mov	r1, r9
 800c228:	f7f4 fc84 	bl	8000b34 <__aeabi_dcmpun>
 800c22c:	b140      	cbz	r0, 800c240 <_printf_float+0xe0>
 800c22e:	464b      	mov	r3, r9
 800c230:	4a80      	ldr	r2, [pc, #512]	@ (800c434 <_printf_float+0x2d4>)
 800c232:	2b00      	cmp	r3, #0
 800c234:	bfbc      	itt	lt
 800c236:	232d      	movlt	r3, #45	@ 0x2d
 800c238:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c23c:	4b7e      	ldr	r3, [pc, #504]	@ (800c438 <_printf_float+0x2d8>)
 800c23e:	e7d4      	b.n	800c1ea <_printf_float+0x8a>
 800c240:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c244:	6863      	ldr	r3, [r4, #4]
 800c246:	9206      	str	r2, [sp, #24]
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	d13b      	bne.n	800c2c4 <_printf_float+0x164>
 800c24c:	2306      	movs	r3, #6
 800c24e:	6063      	str	r3, [r4, #4]
 800c250:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c254:	2300      	movs	r3, #0
 800c256:	4628      	mov	r0, r5
 800c258:	6022      	str	r2, [r4, #0]
 800c25a:	9303      	str	r3, [sp, #12]
 800c25c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c25e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c262:	ab09      	add	r3, sp, #36	@ 0x24
 800c264:	ec49 8b10 	vmov	d0, r8, r9
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c26e:	6861      	ldr	r1, [r4, #4]
 800c270:	f7ff fed8 	bl	800c024 <__cvt>
 800c274:	9b06      	ldr	r3, [sp, #24]
 800c276:	4680      	mov	r8, r0
 800c278:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c27a:	2b47      	cmp	r3, #71	@ 0x47
 800c27c:	d129      	bne.n	800c2d2 <_printf_float+0x172>
 800c27e:	1cc8      	adds	r0, r1, #3
 800c280:	db02      	blt.n	800c288 <_printf_float+0x128>
 800c282:	6863      	ldr	r3, [r4, #4]
 800c284:	4299      	cmp	r1, r3
 800c286:	dd41      	ble.n	800c30c <_printf_float+0x1ac>
 800c288:	f1aa 0a02 	sub.w	sl, sl, #2
 800c28c:	fa5f fa8a 	uxtb.w	sl, sl
 800c290:	3901      	subs	r1, #1
 800c292:	4652      	mov	r2, sl
 800c294:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c298:	9109      	str	r1, [sp, #36]	@ 0x24
 800c29a:	f7ff ff28 	bl	800c0ee <__exponent>
 800c29e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2a0:	4681      	mov	r9, r0
 800c2a2:	1813      	adds	r3, r2, r0
 800c2a4:	2a01      	cmp	r2, #1
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	dc02      	bgt.n	800c2b0 <_printf_float+0x150>
 800c2aa:	6822      	ldr	r2, [r4, #0]
 800c2ac:	07d2      	lsls	r2, r2, #31
 800c2ae:	d501      	bpl.n	800c2b4 <_printf_float+0x154>
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	6123      	str	r3, [r4, #16]
 800c2b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d0a2      	beq.n	800c202 <_printf_float+0xa2>
 800c2bc:	232d      	movs	r3, #45	@ 0x2d
 800c2be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2c2:	e79e      	b.n	800c202 <_printf_float+0xa2>
 800c2c4:	9a06      	ldr	r2, [sp, #24]
 800c2c6:	2a47      	cmp	r2, #71	@ 0x47
 800c2c8:	d1c2      	bne.n	800c250 <_printf_float+0xf0>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1c0      	bne.n	800c250 <_printf_float+0xf0>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e7bd      	b.n	800c24e <_printf_float+0xee>
 800c2d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c2d6:	d9db      	bls.n	800c290 <_printf_float+0x130>
 800c2d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c2dc:	d118      	bne.n	800c310 <_printf_float+0x1b0>
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	6863      	ldr	r3, [r4, #4]
 800c2e2:	dd0b      	ble.n	800c2fc <_printf_float+0x19c>
 800c2e4:	6121      	str	r1, [r4, #16]
 800c2e6:	b913      	cbnz	r3, 800c2ee <_printf_float+0x18e>
 800c2e8:	6822      	ldr	r2, [r4, #0]
 800c2ea:	07d0      	lsls	r0, r2, #31
 800c2ec:	d502      	bpl.n	800c2f4 <_printf_float+0x194>
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	440b      	add	r3, r1
 800c2f2:	6123      	str	r3, [r4, #16]
 800c2f4:	f04f 0900 	mov.w	r9, #0
 800c2f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c2fa:	e7db      	b.n	800c2b4 <_printf_float+0x154>
 800c2fc:	b913      	cbnz	r3, 800c304 <_printf_float+0x1a4>
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	07d2      	lsls	r2, r2, #31
 800c302:	d501      	bpl.n	800c308 <_printf_float+0x1a8>
 800c304:	3302      	adds	r3, #2
 800c306:	e7f4      	b.n	800c2f2 <_printf_float+0x192>
 800c308:	2301      	movs	r3, #1
 800c30a:	e7f2      	b.n	800c2f2 <_printf_float+0x192>
 800c30c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c312:	4299      	cmp	r1, r3
 800c314:	db05      	blt.n	800c322 <_printf_float+0x1c2>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	6121      	str	r1, [r4, #16]
 800c31a:	07d8      	lsls	r0, r3, #31
 800c31c:	d5ea      	bpl.n	800c2f4 <_printf_float+0x194>
 800c31e:	1c4b      	adds	r3, r1, #1
 800c320:	e7e7      	b.n	800c2f2 <_printf_float+0x192>
 800c322:	2900      	cmp	r1, #0
 800c324:	bfd4      	ite	le
 800c326:	f1c1 0202 	rsble	r2, r1, #2
 800c32a:	2201      	movgt	r2, #1
 800c32c:	4413      	add	r3, r2
 800c32e:	e7e0      	b.n	800c2f2 <_printf_float+0x192>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	055a      	lsls	r2, r3, #21
 800c334:	d407      	bmi.n	800c346 <_printf_float+0x1e6>
 800c336:	6923      	ldr	r3, [r4, #16]
 800c338:	4642      	mov	r2, r8
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b8      	blx	r7
 800c340:	3001      	adds	r0, #1
 800c342:	d12b      	bne.n	800c39c <_printf_float+0x23c>
 800c344:	e767      	b.n	800c216 <_printf_float+0xb6>
 800c346:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c34a:	f240 80dd 	bls.w	800c508 <_printf_float+0x3a8>
 800c34e:	2200      	movs	r2, #0
 800c350:	2300      	movs	r3, #0
 800c352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c356:	f7f4 fbbb 	bl	8000ad0 <__aeabi_dcmpeq>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d033      	beq.n	800c3c6 <_printf_float+0x266>
 800c35e:	2301      	movs	r3, #1
 800c360:	4a36      	ldr	r2, [pc, #216]	@ (800c43c <_printf_float+0x2dc>)
 800c362:	4631      	mov	r1, r6
 800c364:	4628      	mov	r0, r5
 800c366:	47b8      	blx	r7
 800c368:	3001      	adds	r0, #1
 800c36a:	f43f af54 	beq.w	800c216 <_printf_float+0xb6>
 800c36e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c372:	4543      	cmp	r3, r8
 800c374:	db02      	blt.n	800c37c <_printf_float+0x21c>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	07d8      	lsls	r0, r3, #31
 800c37a:	d50f      	bpl.n	800c39c <_printf_float+0x23c>
 800c37c:	4631      	mov	r1, r6
 800c37e:	4628      	mov	r0, r5
 800c380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c384:	47b8      	blx	r7
 800c386:	3001      	adds	r0, #1
 800c388:	f43f af45 	beq.w	800c216 <_printf_float+0xb6>
 800c38c:	f04f 0900 	mov.w	r9, #0
 800c390:	f108 38ff 	add.w	r8, r8, #4294967295
 800c394:	f104 0a1a 	add.w	sl, r4, #26
 800c398:	45c8      	cmp	r8, r9
 800c39a:	dc09      	bgt.n	800c3b0 <_printf_float+0x250>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	079b      	lsls	r3, r3, #30
 800c3a0:	f100 8103 	bmi.w	800c5aa <_printf_float+0x44a>
 800c3a4:	68e0      	ldr	r0, [r4, #12]
 800c3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3a8:	4298      	cmp	r0, r3
 800c3aa:	bfb8      	it	lt
 800c3ac:	4618      	movlt	r0, r3
 800c3ae:	e734      	b.n	800c21a <_printf_float+0xba>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	47b8      	blx	r7
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	f43f af2b 	beq.w	800c216 <_printf_float+0xb6>
 800c3c0:	f109 0901 	add.w	r9, r9, #1
 800c3c4:	e7e8      	b.n	800c398 <_printf_float+0x238>
 800c3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dc39      	bgt.n	800c440 <_printf_float+0x2e0>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	4a1b      	ldr	r2, [pc, #108]	@ (800c43c <_printf_float+0x2dc>)
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	47b8      	blx	r7
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	f43f af1d 	beq.w	800c216 <_printf_float+0xb6>
 800c3dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c3e0:	ea59 0303 	orrs.w	r3, r9, r3
 800c3e4:	d102      	bne.n	800c3ec <_printf_float+0x28c>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	07d9      	lsls	r1, r3, #31
 800c3ea:	d5d7      	bpl.n	800c39c <_printf_float+0x23c>
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3f4:	47b8      	blx	r7
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f43f af0d 	beq.w	800c216 <_printf_float+0xb6>
 800c3fc:	f04f 0a00 	mov.w	sl, #0
 800c400:	f104 0b1a 	add.w	fp, r4, #26
 800c404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c406:	425b      	negs	r3, r3
 800c408:	4553      	cmp	r3, sl
 800c40a:	dc01      	bgt.n	800c410 <_printf_float+0x2b0>
 800c40c:	464b      	mov	r3, r9
 800c40e:	e793      	b.n	800c338 <_printf_float+0x1d8>
 800c410:	2301      	movs	r3, #1
 800c412:	465a      	mov	r2, fp
 800c414:	4631      	mov	r1, r6
 800c416:	4628      	mov	r0, r5
 800c418:	47b8      	blx	r7
 800c41a:	3001      	adds	r0, #1
 800c41c:	f43f aefb 	beq.w	800c216 <_printf_float+0xb6>
 800c420:	f10a 0a01 	add.w	sl, sl, #1
 800c424:	e7ee      	b.n	800c404 <_printf_float+0x2a4>
 800c426:	bf00      	nop
 800c428:	7fefffff 	.word	0x7fefffff
 800c42c:	0800f234 	.word	0x0800f234
 800c430:	0800f238 	.word	0x0800f238
 800c434:	0800f23c 	.word	0x0800f23c
 800c438:	0800f240 	.word	0x0800f240
 800c43c:	0800f244 	.word	0x0800f244
 800c440:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c442:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c446:	4553      	cmp	r3, sl
 800c448:	bfa8      	it	ge
 800c44a:	4653      	movge	r3, sl
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	4699      	mov	r9, r3
 800c450:	dc36      	bgt.n	800c4c0 <_printf_float+0x360>
 800c452:	f04f 0b00 	mov.w	fp, #0
 800c456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c45a:	f104 021a 	add.w	r2, r4, #26
 800c45e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c460:	9306      	str	r3, [sp, #24]
 800c462:	eba3 0309 	sub.w	r3, r3, r9
 800c466:	455b      	cmp	r3, fp
 800c468:	dc31      	bgt.n	800c4ce <_printf_float+0x36e>
 800c46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c46c:	459a      	cmp	sl, r3
 800c46e:	dc3a      	bgt.n	800c4e6 <_printf_float+0x386>
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	07da      	lsls	r2, r3, #31
 800c474:	d437      	bmi.n	800c4e6 <_printf_float+0x386>
 800c476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c478:	ebaa 0903 	sub.w	r9, sl, r3
 800c47c:	9b06      	ldr	r3, [sp, #24]
 800c47e:	ebaa 0303 	sub.w	r3, sl, r3
 800c482:	4599      	cmp	r9, r3
 800c484:	bfa8      	it	ge
 800c486:	4699      	movge	r9, r3
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	dc33      	bgt.n	800c4f6 <_printf_float+0x396>
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c496:	f104 0b1a 	add.w	fp, r4, #26
 800c49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49c:	ebaa 0303 	sub.w	r3, sl, r3
 800c4a0:	eba3 0309 	sub.w	r3, r3, r9
 800c4a4:	4543      	cmp	r3, r8
 800c4a6:	f77f af79 	ble.w	800c39c <_printf_float+0x23c>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	465a      	mov	r2, fp
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b8      	blx	r7
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f43f aeae 	beq.w	800c216 <_printf_float+0xb6>
 800c4ba:	f108 0801 	add.w	r8, r8, #1
 800c4be:	e7ec      	b.n	800c49a <_printf_float+0x33a>
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	47b8      	blx	r7
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	d1c2      	bne.n	800c452 <_printf_float+0x2f2>
 800c4cc:	e6a3      	b.n	800c216 <_printf_float+0xb6>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	9206      	str	r2, [sp, #24]
 800c4d6:	47b8      	blx	r7
 800c4d8:	3001      	adds	r0, #1
 800c4da:	f43f ae9c 	beq.w	800c216 <_printf_float+0xb6>
 800c4de:	f10b 0b01 	add.w	fp, fp, #1
 800c4e2:	9a06      	ldr	r2, [sp, #24]
 800c4e4:	e7bb      	b.n	800c45e <_printf_float+0x2fe>
 800c4e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d1c0      	bne.n	800c476 <_printf_float+0x316>
 800c4f4:	e68f      	b.n	800c216 <_printf_float+0xb6>
 800c4f6:	9a06      	ldr	r2, [sp, #24]
 800c4f8:	464b      	mov	r3, r9
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	4442      	add	r2, r8
 800c500:	47b8      	blx	r7
 800c502:	3001      	adds	r0, #1
 800c504:	d1c3      	bne.n	800c48e <_printf_float+0x32e>
 800c506:	e686      	b.n	800c216 <_printf_float+0xb6>
 800c508:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c50c:	f1ba 0f01 	cmp.w	sl, #1
 800c510:	dc01      	bgt.n	800c516 <_printf_float+0x3b6>
 800c512:	07db      	lsls	r3, r3, #31
 800c514:	d536      	bpl.n	800c584 <_printf_float+0x424>
 800c516:	2301      	movs	r3, #1
 800c518:	4642      	mov	r2, r8
 800c51a:	4631      	mov	r1, r6
 800c51c:	4628      	mov	r0, r5
 800c51e:	47b8      	blx	r7
 800c520:	3001      	adds	r0, #1
 800c522:	f43f ae78 	beq.w	800c216 <_printf_float+0xb6>
 800c526:	4631      	mov	r1, r6
 800c528:	4628      	mov	r0, r5
 800c52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c52e:	47b8      	blx	r7
 800c530:	3001      	adds	r0, #1
 800c532:	f43f ae70 	beq.w	800c216 <_printf_float+0xb6>
 800c536:	2200      	movs	r2, #0
 800c538:	2300      	movs	r3, #0
 800c53a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c53e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c542:	f7f4 fac5 	bl	8000ad0 <__aeabi_dcmpeq>
 800c546:	b9c0      	cbnz	r0, 800c57a <_printf_float+0x41a>
 800c548:	4653      	mov	r3, sl
 800c54a:	f108 0201 	add.w	r2, r8, #1
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	d10c      	bne.n	800c572 <_printf_float+0x412>
 800c558:	e65d      	b.n	800c216 <_printf_float+0xb6>
 800c55a:	2301      	movs	r3, #1
 800c55c:	465a      	mov	r2, fp
 800c55e:	4631      	mov	r1, r6
 800c560:	4628      	mov	r0, r5
 800c562:	47b8      	blx	r7
 800c564:	3001      	adds	r0, #1
 800c566:	f43f ae56 	beq.w	800c216 <_printf_float+0xb6>
 800c56a:	f108 0801 	add.w	r8, r8, #1
 800c56e:	45d0      	cmp	r8, sl
 800c570:	dbf3      	blt.n	800c55a <_printf_float+0x3fa>
 800c572:	464b      	mov	r3, r9
 800c574:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c578:	e6df      	b.n	800c33a <_printf_float+0x1da>
 800c57a:	f04f 0800 	mov.w	r8, #0
 800c57e:	f104 0b1a 	add.w	fp, r4, #26
 800c582:	e7f4      	b.n	800c56e <_printf_float+0x40e>
 800c584:	2301      	movs	r3, #1
 800c586:	4642      	mov	r2, r8
 800c588:	e7e1      	b.n	800c54e <_printf_float+0x3ee>
 800c58a:	2301      	movs	r3, #1
 800c58c:	464a      	mov	r2, r9
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
 800c592:	47b8      	blx	r7
 800c594:	3001      	adds	r0, #1
 800c596:	f43f ae3e 	beq.w	800c216 <_printf_float+0xb6>
 800c59a:	f108 0801 	add.w	r8, r8, #1
 800c59e:	68e3      	ldr	r3, [r4, #12]
 800c5a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5a2:	1a5b      	subs	r3, r3, r1
 800c5a4:	4543      	cmp	r3, r8
 800c5a6:	dcf0      	bgt.n	800c58a <_printf_float+0x42a>
 800c5a8:	e6fc      	b.n	800c3a4 <_printf_float+0x244>
 800c5aa:	f04f 0800 	mov.w	r8, #0
 800c5ae:	f104 0919 	add.w	r9, r4, #25
 800c5b2:	e7f4      	b.n	800c59e <_printf_float+0x43e>

0800c5b4 <_printf_common>:
 800c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	4616      	mov	r6, r2
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	688a      	ldr	r2, [r1, #8]
 800c5be:	4607      	mov	r7, r0
 800c5c0:	690b      	ldr	r3, [r1, #16]
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	bfb8      	it	lt
 800c5cc:	4613      	movlt	r3, r2
 800c5ce:	6033      	str	r3, [r6, #0]
 800c5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c5d4:	b10a      	cbz	r2, 800c5da <_printf_common+0x26>
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	6033      	str	r3, [r6, #0]
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	0699      	lsls	r1, r3, #26
 800c5de:	bf42      	ittt	mi
 800c5e0:	6833      	ldrmi	r3, [r6, #0]
 800c5e2:	3302      	addmi	r3, #2
 800c5e4:	6033      	strmi	r3, [r6, #0]
 800c5e6:	6825      	ldr	r5, [r4, #0]
 800c5e8:	f015 0506 	ands.w	r5, r5, #6
 800c5ec:	d106      	bne.n	800c5fc <_printf_common+0x48>
 800c5ee:	f104 0a19 	add.w	sl, r4, #25
 800c5f2:	68e3      	ldr	r3, [r4, #12]
 800c5f4:	6832      	ldr	r2, [r6, #0]
 800c5f6:	1a9b      	subs	r3, r3, r2
 800c5f8:	42ab      	cmp	r3, r5
 800c5fa:	dc2b      	bgt.n	800c654 <_printf_common+0xa0>
 800c5fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c600:	6822      	ldr	r2, [r4, #0]
 800c602:	3b00      	subs	r3, #0
 800c604:	bf18      	it	ne
 800c606:	2301      	movne	r3, #1
 800c608:	0692      	lsls	r2, r2, #26
 800c60a:	d430      	bmi.n	800c66e <_printf_common+0xba>
 800c60c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c610:	4641      	mov	r1, r8
 800c612:	4638      	mov	r0, r7
 800c614:	47c8      	blx	r9
 800c616:	3001      	adds	r0, #1
 800c618:	d023      	beq.n	800c662 <_printf_common+0xae>
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	341a      	adds	r4, #26
 800c61e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c622:	f003 0306 	and.w	r3, r3, #6
 800c626:	2b04      	cmp	r3, #4
 800c628:	bf0a      	itet	eq
 800c62a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c62e:	2500      	movne	r5, #0
 800c630:	6833      	ldreq	r3, [r6, #0]
 800c632:	f04f 0600 	mov.w	r6, #0
 800c636:	bf08      	it	eq
 800c638:	1aed      	subeq	r5, r5, r3
 800c63a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c63e:	bf08      	it	eq
 800c640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c644:	4293      	cmp	r3, r2
 800c646:	bfc4      	itt	gt
 800c648:	1a9b      	subgt	r3, r3, r2
 800c64a:	18ed      	addgt	r5, r5, r3
 800c64c:	42b5      	cmp	r5, r6
 800c64e:	d11a      	bne.n	800c686 <_printf_common+0xd2>
 800c650:	2000      	movs	r0, #0
 800c652:	e008      	b.n	800c666 <_printf_common+0xb2>
 800c654:	2301      	movs	r3, #1
 800c656:	4652      	mov	r2, sl
 800c658:	4641      	mov	r1, r8
 800c65a:	4638      	mov	r0, r7
 800c65c:	47c8      	blx	r9
 800c65e:	3001      	adds	r0, #1
 800c660:	d103      	bne.n	800c66a <_printf_common+0xb6>
 800c662:	f04f 30ff 	mov.w	r0, #4294967295
 800c666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66a:	3501      	adds	r5, #1
 800c66c:	e7c1      	b.n	800c5f2 <_printf_common+0x3e>
 800c66e:	18e1      	adds	r1, r4, r3
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	2030      	movs	r0, #48	@ 0x30
 800c674:	3302      	adds	r3, #2
 800c676:	4422      	add	r2, r4
 800c678:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c67c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c684:	e7c2      	b.n	800c60c <_printf_common+0x58>
 800c686:	2301      	movs	r3, #1
 800c688:	4622      	mov	r2, r4
 800c68a:	4641      	mov	r1, r8
 800c68c:	4638      	mov	r0, r7
 800c68e:	47c8      	blx	r9
 800c690:	3001      	adds	r0, #1
 800c692:	d0e6      	beq.n	800c662 <_printf_common+0xae>
 800c694:	3601      	adds	r6, #1
 800c696:	e7d9      	b.n	800c64c <_printf_common+0x98>

0800c698 <_printf_i>:
 800c698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	7e0f      	ldrb	r7, [r1, #24]
 800c69e:	4691      	mov	r9, r2
 800c6a0:	4680      	mov	r8, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2f78      	cmp	r7, #120	@ 0x78
 800c6a6:	469a      	mov	sl, r3
 800c6a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c6aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c6ae:	d807      	bhi.n	800c6c0 <_printf_i+0x28>
 800c6b0:	2f62      	cmp	r7, #98	@ 0x62
 800c6b2:	d80a      	bhi.n	800c6ca <_printf_i+0x32>
 800c6b4:	2f00      	cmp	r7, #0
 800c6b6:	f000 80d2 	beq.w	800c85e <_printf_i+0x1c6>
 800c6ba:	2f58      	cmp	r7, #88	@ 0x58
 800c6bc:	f000 80b9 	beq.w	800c832 <_printf_i+0x19a>
 800c6c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6c8:	e03a      	b.n	800c740 <_printf_i+0xa8>
 800c6ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c6ce:	2b15      	cmp	r3, #21
 800c6d0:	d8f6      	bhi.n	800c6c0 <_printf_i+0x28>
 800c6d2:	a101      	add	r1, pc, #4	@ (adr r1, 800c6d8 <_printf_i+0x40>)
 800c6d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6d8:	0800c731 	.word	0x0800c731
 800c6dc:	0800c745 	.word	0x0800c745
 800c6e0:	0800c6c1 	.word	0x0800c6c1
 800c6e4:	0800c6c1 	.word	0x0800c6c1
 800c6e8:	0800c6c1 	.word	0x0800c6c1
 800c6ec:	0800c6c1 	.word	0x0800c6c1
 800c6f0:	0800c745 	.word	0x0800c745
 800c6f4:	0800c6c1 	.word	0x0800c6c1
 800c6f8:	0800c6c1 	.word	0x0800c6c1
 800c6fc:	0800c6c1 	.word	0x0800c6c1
 800c700:	0800c6c1 	.word	0x0800c6c1
 800c704:	0800c845 	.word	0x0800c845
 800c708:	0800c76f 	.word	0x0800c76f
 800c70c:	0800c7ff 	.word	0x0800c7ff
 800c710:	0800c6c1 	.word	0x0800c6c1
 800c714:	0800c6c1 	.word	0x0800c6c1
 800c718:	0800c867 	.word	0x0800c867
 800c71c:	0800c6c1 	.word	0x0800c6c1
 800c720:	0800c76f 	.word	0x0800c76f
 800c724:	0800c6c1 	.word	0x0800c6c1
 800c728:	0800c6c1 	.word	0x0800c6c1
 800c72c:	0800c807 	.word	0x0800c807
 800c730:	6833      	ldr	r3, [r6, #0]
 800c732:	1d1a      	adds	r2, r3, #4
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6032      	str	r2, [r6, #0]
 800c738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c73c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c740:	2301      	movs	r3, #1
 800c742:	e09d      	b.n	800c880 <_printf_i+0x1e8>
 800c744:	6833      	ldr	r3, [r6, #0]
 800c746:	6820      	ldr	r0, [r4, #0]
 800c748:	1d19      	adds	r1, r3, #4
 800c74a:	6031      	str	r1, [r6, #0]
 800c74c:	0606      	lsls	r6, r0, #24
 800c74e:	d501      	bpl.n	800c754 <_printf_i+0xbc>
 800c750:	681d      	ldr	r5, [r3, #0]
 800c752:	e003      	b.n	800c75c <_printf_i+0xc4>
 800c754:	0645      	lsls	r5, r0, #25
 800c756:	d5fb      	bpl.n	800c750 <_printf_i+0xb8>
 800c758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c75c:	2d00      	cmp	r5, #0
 800c75e:	da03      	bge.n	800c768 <_printf_i+0xd0>
 800c760:	232d      	movs	r3, #45	@ 0x2d
 800c762:	426d      	negs	r5, r5
 800c764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c768:	4859      	ldr	r0, [pc, #356]	@ (800c8d0 <_printf_i+0x238>)
 800c76a:	230a      	movs	r3, #10
 800c76c:	e011      	b.n	800c792 <_printf_i+0xfa>
 800c76e:	6821      	ldr	r1, [r4, #0]
 800c770:	6833      	ldr	r3, [r6, #0]
 800c772:	0608      	lsls	r0, r1, #24
 800c774:	f853 5b04 	ldr.w	r5, [r3], #4
 800c778:	d402      	bmi.n	800c780 <_printf_i+0xe8>
 800c77a:	0649      	lsls	r1, r1, #25
 800c77c:	bf48      	it	mi
 800c77e:	b2ad      	uxthmi	r5, r5
 800c780:	2f6f      	cmp	r7, #111	@ 0x6f
 800c782:	6033      	str	r3, [r6, #0]
 800c784:	4852      	ldr	r0, [pc, #328]	@ (800c8d0 <_printf_i+0x238>)
 800c786:	bf14      	ite	ne
 800c788:	230a      	movne	r3, #10
 800c78a:	2308      	moveq	r3, #8
 800c78c:	2100      	movs	r1, #0
 800c78e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c792:	6866      	ldr	r6, [r4, #4]
 800c794:	2e00      	cmp	r6, #0
 800c796:	60a6      	str	r6, [r4, #8]
 800c798:	bfa2      	ittt	ge
 800c79a:	6821      	ldrge	r1, [r4, #0]
 800c79c:	f021 0104 	bicge.w	r1, r1, #4
 800c7a0:	6021      	strge	r1, [r4, #0]
 800c7a2:	b90d      	cbnz	r5, 800c7a8 <_printf_i+0x110>
 800c7a4:	2e00      	cmp	r6, #0
 800c7a6:	d04b      	beq.n	800c840 <_printf_i+0x1a8>
 800c7a8:	4616      	mov	r6, r2
 800c7aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7ae:	fb03 5711 	mls	r7, r3, r1, r5
 800c7b2:	5dc7      	ldrb	r7, [r0, r7]
 800c7b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7b8:	462f      	mov	r7, r5
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	42bb      	cmp	r3, r7
 800c7be:	d9f4      	bls.n	800c7aa <_printf_i+0x112>
 800c7c0:	2b08      	cmp	r3, #8
 800c7c2:	d10b      	bne.n	800c7dc <_printf_i+0x144>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	07df      	lsls	r7, r3, #31
 800c7c8:	d508      	bpl.n	800c7dc <_printf_i+0x144>
 800c7ca:	6923      	ldr	r3, [r4, #16]
 800c7cc:	6861      	ldr	r1, [r4, #4]
 800c7ce:	4299      	cmp	r1, r3
 800c7d0:	bfde      	ittt	le
 800c7d2:	2330      	movle	r3, #48	@ 0x30
 800c7d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7dc:	1b92      	subs	r2, r2, r6
 800c7de:	6122      	str	r2, [r4, #16]
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	aa03      	add	r2, sp, #12
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	f8cd a000 	str.w	sl, [sp]
 800c7ec:	f7ff fee2 	bl	800c5b4 <_printf_common>
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d14a      	bne.n	800c88a <_printf_i+0x1f2>
 800c7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f8:	b004      	add	sp, #16
 800c7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	f043 0320 	orr.w	r3, r3, #32
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	2778      	movs	r7, #120	@ 0x78
 800c808:	4832      	ldr	r0, [pc, #200]	@ (800c8d4 <_printf_i+0x23c>)
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c810:	061f      	lsls	r7, r3, #24
 800c812:	6831      	ldr	r1, [r6, #0]
 800c814:	f851 5b04 	ldr.w	r5, [r1], #4
 800c818:	d402      	bmi.n	800c820 <_printf_i+0x188>
 800c81a:	065f      	lsls	r7, r3, #25
 800c81c:	bf48      	it	mi
 800c81e:	b2ad      	uxthmi	r5, r5
 800c820:	6031      	str	r1, [r6, #0]
 800c822:	07d9      	lsls	r1, r3, #31
 800c824:	bf44      	itt	mi
 800c826:	f043 0320 	orrmi.w	r3, r3, #32
 800c82a:	6023      	strmi	r3, [r4, #0]
 800c82c:	b11d      	cbz	r5, 800c836 <_printf_i+0x19e>
 800c82e:	2310      	movs	r3, #16
 800c830:	e7ac      	b.n	800c78c <_printf_i+0xf4>
 800c832:	4827      	ldr	r0, [pc, #156]	@ (800c8d0 <_printf_i+0x238>)
 800c834:	e7e9      	b.n	800c80a <_printf_i+0x172>
 800c836:	6823      	ldr	r3, [r4, #0]
 800c838:	f023 0320 	bic.w	r3, r3, #32
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	e7f6      	b.n	800c82e <_printf_i+0x196>
 800c840:	4616      	mov	r6, r2
 800c842:	e7bd      	b.n	800c7c0 <_printf_i+0x128>
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	6825      	ldr	r5, [r4, #0]
 800c848:	1d18      	adds	r0, r3, #4
 800c84a:	6961      	ldr	r1, [r4, #20]
 800c84c:	6030      	str	r0, [r6, #0]
 800c84e:	062e      	lsls	r6, r5, #24
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	d501      	bpl.n	800c858 <_printf_i+0x1c0>
 800c854:	6019      	str	r1, [r3, #0]
 800c856:	e002      	b.n	800c85e <_printf_i+0x1c6>
 800c858:	0668      	lsls	r0, r5, #25
 800c85a:	d5fb      	bpl.n	800c854 <_printf_i+0x1bc>
 800c85c:	8019      	strh	r1, [r3, #0]
 800c85e:	2300      	movs	r3, #0
 800c860:	4616      	mov	r6, r2
 800c862:	6123      	str	r3, [r4, #16]
 800c864:	e7bc      	b.n	800c7e0 <_printf_i+0x148>
 800c866:	6833      	ldr	r3, [r6, #0]
 800c868:	2100      	movs	r1, #0
 800c86a:	1d1a      	adds	r2, r3, #4
 800c86c:	6032      	str	r2, [r6, #0]
 800c86e:	681e      	ldr	r6, [r3, #0]
 800c870:	6862      	ldr	r2, [r4, #4]
 800c872:	4630      	mov	r0, r6
 800c874:	f000 fa79 	bl	800cd6a <memchr>
 800c878:	b108      	cbz	r0, 800c87e <_printf_i+0x1e6>
 800c87a:	1b80      	subs	r0, r0, r6
 800c87c:	6060      	str	r0, [r4, #4]
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	2300      	movs	r3, #0
 800c884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c888:	e7aa      	b.n	800c7e0 <_printf_i+0x148>
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	4632      	mov	r2, r6
 800c88e:	4649      	mov	r1, r9
 800c890:	4640      	mov	r0, r8
 800c892:	47d0      	blx	sl
 800c894:	3001      	adds	r0, #1
 800c896:	d0ad      	beq.n	800c7f4 <_printf_i+0x15c>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	079b      	lsls	r3, r3, #30
 800c89c:	d413      	bmi.n	800c8c6 <_printf_i+0x22e>
 800c89e:	68e0      	ldr	r0, [r4, #12]
 800c8a0:	9b03      	ldr	r3, [sp, #12]
 800c8a2:	4298      	cmp	r0, r3
 800c8a4:	bfb8      	it	lt
 800c8a6:	4618      	movlt	r0, r3
 800c8a8:	e7a6      	b.n	800c7f8 <_printf_i+0x160>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	47d0      	blx	sl
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d09d      	beq.n	800c7f4 <_printf_i+0x15c>
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	68e3      	ldr	r3, [r4, #12]
 800c8bc:	9903      	ldr	r1, [sp, #12]
 800c8be:	1a5b      	subs	r3, r3, r1
 800c8c0:	42ab      	cmp	r3, r5
 800c8c2:	dcf2      	bgt.n	800c8aa <_printf_i+0x212>
 800c8c4:	e7eb      	b.n	800c89e <_printf_i+0x206>
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	f104 0619 	add.w	r6, r4, #25
 800c8cc:	e7f5      	b.n	800c8ba <_printf_i+0x222>
 800c8ce:	bf00      	nop
 800c8d0:	0800f246 	.word	0x0800f246
 800c8d4:	0800f257 	.word	0x0800f257

0800c8d8 <std>:
 800c8d8:	2300      	movs	r3, #0
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	4604      	mov	r4, r0
 800c8de:	6083      	str	r3, [r0, #8]
 800c8e0:	8181      	strh	r1, [r0, #12]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6643      	str	r3, [r0, #100]	@ 0x64
 800c8e6:	81c2      	strh	r2, [r0, #14]
 800c8e8:	2208      	movs	r2, #8
 800c8ea:	6183      	str	r3, [r0, #24]
 800c8ec:	e9c0 3300 	strd	r3, r3, [r0]
 800c8f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8f4:	305c      	adds	r0, #92	@ 0x5c
 800c8f6:	f000 f9a9 	bl	800cc4c <memset>
 800c8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c930 <std+0x58>)
 800c8fc:	6224      	str	r4, [r4, #32]
 800c8fe:	6263      	str	r3, [r4, #36]	@ 0x24
 800c900:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <std+0x5c>)
 800c902:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c904:	4b0c      	ldr	r3, [pc, #48]	@ (800c938 <std+0x60>)
 800c906:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c908:	4b0c      	ldr	r3, [pc, #48]	@ (800c93c <std+0x64>)
 800c90a:	6323      	str	r3, [r4, #48]	@ 0x30
 800c90c:	4b0c      	ldr	r3, [pc, #48]	@ (800c940 <std+0x68>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	d006      	beq.n	800c920 <std+0x48>
 800c912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c916:	4294      	cmp	r4, r2
 800c918:	d002      	beq.n	800c920 <std+0x48>
 800c91a:	33d0      	adds	r3, #208	@ 0xd0
 800c91c:	429c      	cmp	r4, r3
 800c91e:	d105      	bne.n	800c92c <std+0x54>
 800c920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c928:	f000 ba1c 	b.w	800cd64 <__retarget_lock_init_recursive>
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	bf00      	nop
 800c930:	0800ca9d 	.word	0x0800ca9d
 800c934:	0800cabf 	.word	0x0800cabf
 800c938:	0800caf7 	.word	0x0800caf7
 800c93c:	0800cb1b 	.word	0x0800cb1b
 800c940:	200011a8 	.word	0x200011a8

0800c944 <stdio_exit_handler>:
 800c944:	4a02      	ldr	r2, [pc, #8]	@ (800c950 <stdio_exit_handler+0xc>)
 800c946:	4903      	ldr	r1, [pc, #12]	@ (800c954 <stdio_exit_handler+0x10>)
 800c948:	4803      	ldr	r0, [pc, #12]	@ (800c958 <stdio_exit_handler+0x14>)
 800c94a:	f000 b869 	b.w	800ca20 <_fwalk_sglue>
 800c94e:	bf00      	nop
 800c950:	200005e4 	.word	0x200005e4
 800c954:	0800e839 	.word	0x0800e839
 800c958:	200005f4 	.word	0x200005f4

0800c95c <cleanup_stdio>:
 800c95c:	6841      	ldr	r1, [r0, #4]
 800c95e:	4b0c      	ldr	r3, [pc, #48]	@ (800c990 <cleanup_stdio+0x34>)
 800c960:	4299      	cmp	r1, r3
 800c962:	b510      	push	{r4, lr}
 800c964:	4604      	mov	r4, r0
 800c966:	d001      	beq.n	800c96c <cleanup_stdio+0x10>
 800c968:	f001 ff66 	bl	800e838 <_fflush_r>
 800c96c:	68a1      	ldr	r1, [r4, #8]
 800c96e:	4b09      	ldr	r3, [pc, #36]	@ (800c994 <cleanup_stdio+0x38>)
 800c970:	4299      	cmp	r1, r3
 800c972:	d002      	beq.n	800c97a <cleanup_stdio+0x1e>
 800c974:	4620      	mov	r0, r4
 800c976:	f001 ff5f 	bl	800e838 <_fflush_r>
 800c97a:	68e1      	ldr	r1, [r4, #12]
 800c97c:	4b06      	ldr	r3, [pc, #24]	@ (800c998 <cleanup_stdio+0x3c>)
 800c97e:	4299      	cmp	r1, r3
 800c980:	d004      	beq.n	800c98c <cleanup_stdio+0x30>
 800c982:	4620      	mov	r0, r4
 800c984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c988:	f001 bf56 	b.w	800e838 <_fflush_r>
 800c98c:	bd10      	pop	{r4, pc}
 800c98e:	bf00      	nop
 800c990:	200011a8 	.word	0x200011a8
 800c994:	20001210 	.word	0x20001210
 800c998:	20001278 	.word	0x20001278

0800c99c <global_stdio_init.part.0>:
 800c99c:	b510      	push	{r4, lr}
 800c99e:	4b0b      	ldr	r3, [pc, #44]	@ (800c9cc <global_stdio_init.part.0+0x30>)
 800c9a0:	2104      	movs	r1, #4
 800c9a2:	4c0b      	ldr	r4, [pc, #44]	@ (800c9d0 <global_stdio_init.part.0+0x34>)
 800c9a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c9d4 <global_stdio_init.part.0+0x38>)
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f7ff ff94 	bl	800c8d8 <std>
 800c9b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	2109      	movs	r1, #9
 800c9b8:	f7ff ff8e 	bl	800c8d8 <std>
 800c9bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	2112      	movs	r1, #18
 800c9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9c8:	f7ff bf86 	b.w	800c8d8 <std>
 800c9cc:	200012e0 	.word	0x200012e0
 800c9d0:	200011a8 	.word	0x200011a8
 800c9d4:	0800c945 	.word	0x0800c945

0800c9d8 <__sfp_lock_acquire>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	@ (800c9e0 <__sfp_lock_acquire+0x8>)
 800c9da:	f000 b9c4 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800c9de:	bf00      	nop
 800c9e0:	200012e9 	.word	0x200012e9

0800c9e4 <__sfp_lock_release>:
 800c9e4:	4801      	ldr	r0, [pc, #4]	@ (800c9ec <__sfp_lock_release+0x8>)
 800c9e6:	f000 b9bf 	b.w	800cd68 <__retarget_lock_release_recursive>
 800c9ea:	bf00      	nop
 800c9ec:	200012e9 	.word	0x200012e9

0800c9f0 <__sinit>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	f7ff fff0 	bl	800c9d8 <__sfp_lock_acquire>
 800c9f8:	6a23      	ldr	r3, [r4, #32]
 800c9fa:	b11b      	cbz	r3, 800ca04 <__sinit+0x14>
 800c9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca00:	f7ff bff0 	b.w	800c9e4 <__sfp_lock_release>
 800ca04:	4b04      	ldr	r3, [pc, #16]	@ (800ca18 <__sinit+0x28>)
 800ca06:	6223      	str	r3, [r4, #32]
 800ca08:	4b04      	ldr	r3, [pc, #16]	@ (800ca1c <__sinit+0x2c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f5      	bne.n	800c9fc <__sinit+0xc>
 800ca10:	f7ff ffc4 	bl	800c99c <global_stdio_init.part.0>
 800ca14:	e7f2      	b.n	800c9fc <__sinit+0xc>
 800ca16:	bf00      	nop
 800ca18:	0800c95d 	.word	0x0800c95d
 800ca1c:	200012e0 	.word	0x200012e0

0800ca20 <_fwalk_sglue>:
 800ca20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca24:	4607      	mov	r7, r0
 800ca26:	4688      	mov	r8, r1
 800ca28:	4614      	mov	r4, r2
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca30:	f1b9 0901 	subs.w	r9, r9, #1
 800ca34:	d505      	bpl.n	800ca42 <_fwalk_sglue+0x22>
 800ca36:	6824      	ldr	r4, [r4, #0]
 800ca38:	2c00      	cmp	r4, #0
 800ca3a:	d1f7      	bne.n	800ca2c <_fwalk_sglue+0xc>
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca42:	89ab      	ldrh	r3, [r5, #12]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d907      	bls.n	800ca58 <_fwalk_sglue+0x38>
 800ca48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	d003      	beq.n	800ca58 <_fwalk_sglue+0x38>
 800ca50:	4629      	mov	r1, r5
 800ca52:	4638      	mov	r0, r7
 800ca54:	47c0      	blx	r8
 800ca56:	4306      	orrs	r6, r0
 800ca58:	3568      	adds	r5, #104	@ 0x68
 800ca5a:	e7e9      	b.n	800ca30 <_fwalk_sglue+0x10>

0800ca5c <siprintf>:
 800ca5c:	b40e      	push	{r1, r2, r3}
 800ca5e:	b500      	push	{lr}
 800ca60:	b09c      	sub	sp, #112	@ 0x70
 800ca62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ca66:	ab1d      	add	r3, sp, #116	@ 0x74
 800ca68:	9002      	str	r0, [sp, #8]
 800ca6a:	9006      	str	r0, [sp, #24]
 800ca6c:	9107      	str	r1, [sp, #28]
 800ca6e:	9104      	str	r1, [sp, #16]
 800ca70:	4808      	ldr	r0, [pc, #32]	@ (800ca94 <siprintf+0x38>)
 800ca72:	4909      	ldr	r1, [pc, #36]	@ (800ca98 <siprintf+0x3c>)
 800ca74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca78:	9105      	str	r1, [sp, #20]
 800ca7a:	a902      	add	r1, sp, #8
 800ca7c:	6800      	ldr	r0, [r0, #0]
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	f001 fc18 	bl	800e2b4 <_svfiprintf_r>
 800ca84:	9b02      	ldr	r3, [sp, #8]
 800ca86:	2200      	movs	r2, #0
 800ca88:	701a      	strb	r2, [r3, #0]
 800ca8a:	b01c      	add	sp, #112	@ 0x70
 800ca8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca90:	b003      	add	sp, #12
 800ca92:	4770      	bx	lr
 800ca94:	200005f0 	.word	0x200005f0
 800ca98:	ffff0208 	.word	0xffff0208

0800ca9c <__sread>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	460c      	mov	r4, r1
 800caa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa4:	f000 f900 	bl	800cca8 <_read_r>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	bfab      	itete	ge
 800caac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800caae:	89a3      	ldrhlt	r3, [r4, #12]
 800cab0:	181b      	addge	r3, r3, r0
 800cab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cab6:	bfac      	ite	ge
 800cab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800caba:	81a3      	strhlt	r3, [r4, #12]
 800cabc:	bd10      	pop	{r4, pc}

0800cabe <__swrite>:
 800cabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac2:	461f      	mov	r7, r3
 800cac4:	898b      	ldrh	r3, [r1, #12]
 800cac6:	4605      	mov	r5, r0
 800cac8:	460c      	mov	r4, r1
 800caca:	05db      	lsls	r3, r3, #23
 800cacc:	4616      	mov	r6, r2
 800cace:	d505      	bpl.n	800cadc <__swrite+0x1e>
 800cad0:	2302      	movs	r3, #2
 800cad2:	2200      	movs	r2, #0
 800cad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad8:	f000 f8d4 	bl	800cc84 <_lseek_r>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	4632      	mov	r2, r6
 800cae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae4:	4628      	mov	r0, r5
 800cae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800caea:	81a3      	strh	r3, [r4, #12]
 800caec:	463b      	mov	r3, r7
 800caee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf2:	f000 b8fb 	b.w	800ccec <_write_r>

0800caf6 <__sseek>:
 800caf6:	b510      	push	{r4, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafe:	f000 f8c1 	bl	800cc84 <_lseek_r>
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	bf15      	itete	ne
 800cb08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb12:	81a3      	strheq	r3, [r4, #12]
 800cb14:	bf18      	it	ne
 800cb16:	81a3      	strhne	r3, [r4, #12]
 800cb18:	bd10      	pop	{r4, pc}

0800cb1a <__sclose>:
 800cb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1e:	f000 b8a1 	b.w	800cc64 <_close_r>

0800cb22 <__swbuf_r>:
 800cb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb24:	460e      	mov	r6, r1
 800cb26:	4614      	mov	r4, r2
 800cb28:	4605      	mov	r5, r0
 800cb2a:	b118      	cbz	r0, 800cb34 <__swbuf_r+0x12>
 800cb2c:	6a03      	ldr	r3, [r0, #32]
 800cb2e:	b90b      	cbnz	r3, 800cb34 <__swbuf_r+0x12>
 800cb30:	f7ff ff5e 	bl	800c9f0 <__sinit>
 800cb34:	69a3      	ldr	r3, [r4, #24]
 800cb36:	60a3      	str	r3, [r4, #8]
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	071a      	lsls	r2, r3, #28
 800cb3c:	d501      	bpl.n	800cb42 <__swbuf_r+0x20>
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	b943      	cbnz	r3, 800cb54 <__swbuf_r+0x32>
 800cb42:	4621      	mov	r1, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	f000 f82b 	bl	800cba0 <__swsetup_r>
 800cb4a:	b118      	cbz	r0, 800cb54 <__swbuf_r+0x32>
 800cb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb50:	4638      	mov	r0, r7
 800cb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	b2f6      	uxtb	r6, r6
 800cb58:	6922      	ldr	r2, [r4, #16]
 800cb5a:	4637      	mov	r7, r6
 800cb5c:	1a98      	subs	r0, r3, r2
 800cb5e:	6963      	ldr	r3, [r4, #20]
 800cb60:	4283      	cmp	r3, r0
 800cb62:	dc05      	bgt.n	800cb70 <__swbuf_r+0x4e>
 800cb64:	4621      	mov	r1, r4
 800cb66:	4628      	mov	r0, r5
 800cb68:	f001 fe66 	bl	800e838 <_fflush_r>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d1ed      	bne.n	800cb4c <__swbuf_r+0x2a>
 800cb70:	68a3      	ldr	r3, [r4, #8]
 800cb72:	3b01      	subs	r3, #1
 800cb74:	60a3      	str	r3, [r4, #8]
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	6022      	str	r2, [r4, #0]
 800cb7c:	701e      	strb	r6, [r3, #0]
 800cb7e:	1c43      	adds	r3, r0, #1
 800cb80:	6962      	ldr	r2, [r4, #20]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d004      	beq.n	800cb90 <__swbuf_r+0x6e>
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	07db      	lsls	r3, r3, #31
 800cb8a:	d5e1      	bpl.n	800cb50 <__swbuf_r+0x2e>
 800cb8c:	2e0a      	cmp	r6, #10
 800cb8e:	d1df      	bne.n	800cb50 <__swbuf_r+0x2e>
 800cb90:	4621      	mov	r1, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	f001 fe50 	bl	800e838 <_fflush_r>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d0d9      	beq.n	800cb50 <__swbuf_r+0x2e>
 800cb9c:	e7d6      	b.n	800cb4c <__swbuf_r+0x2a>
	...

0800cba0 <__swsetup_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4b29      	ldr	r3, [pc, #164]	@ (800cc48 <__swsetup_r+0xa8>)
 800cba4:	4605      	mov	r5, r0
 800cba6:	460c      	mov	r4, r1
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	b118      	cbz	r0, 800cbb4 <__swsetup_r+0x14>
 800cbac:	6a03      	ldr	r3, [r0, #32]
 800cbae:	b90b      	cbnz	r3, 800cbb4 <__swsetup_r+0x14>
 800cbb0:	f7ff ff1e 	bl	800c9f0 <__sinit>
 800cbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb8:	0719      	lsls	r1, r3, #28
 800cbba:	d422      	bmi.n	800cc02 <__swsetup_r+0x62>
 800cbbc:	06da      	lsls	r2, r3, #27
 800cbbe:	d407      	bmi.n	800cbd0 <__swsetup_r+0x30>
 800cbc0:	2209      	movs	r2, #9
 800cbc2:	602a      	str	r2, [r5, #0]
 800cbc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbcc:	81a3      	strh	r3, [r4, #12]
 800cbce:	e033      	b.n	800cc38 <__swsetup_r+0x98>
 800cbd0:	0758      	lsls	r0, r3, #29
 800cbd2:	d512      	bpl.n	800cbfa <__swsetup_r+0x5a>
 800cbd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbd6:	b141      	cbz	r1, 800cbea <__swsetup_r+0x4a>
 800cbd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbdc:	4299      	cmp	r1, r3
 800cbde:	d002      	beq.n	800cbe6 <__swsetup_r+0x46>
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f000 ff31 	bl	800da48 <_free_r>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbf0:	81a3      	strh	r3, [r4, #12]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	6063      	str	r3, [r4, #4]
 800cbf6:	6923      	ldr	r3, [r4, #16]
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	f043 0308 	orr.w	r3, r3, #8
 800cc00:	81a3      	strh	r3, [r4, #12]
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	b94b      	cbnz	r3, 800cc1a <__swsetup_r+0x7a>
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc10:	d003      	beq.n	800cc1a <__swsetup_r+0x7a>
 800cc12:	4621      	mov	r1, r4
 800cc14:	4628      	mov	r0, r5
 800cc16:	f001 fe5c 	bl	800e8d2 <__smakebuf_r>
 800cc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc1e:	f013 0201 	ands.w	r2, r3, #1
 800cc22:	d00a      	beq.n	800cc3a <__swsetup_r+0x9a>
 800cc24:	2200      	movs	r2, #0
 800cc26:	60a2      	str	r2, [r4, #8]
 800cc28:	6962      	ldr	r2, [r4, #20]
 800cc2a:	4252      	negs	r2, r2
 800cc2c:	61a2      	str	r2, [r4, #24]
 800cc2e:	6922      	ldr	r2, [r4, #16]
 800cc30:	b942      	cbnz	r2, 800cc44 <__swsetup_r+0xa4>
 800cc32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc36:	d1c5      	bne.n	800cbc4 <__swsetup_r+0x24>
 800cc38:	bd38      	pop	{r3, r4, r5, pc}
 800cc3a:	0799      	lsls	r1, r3, #30
 800cc3c:	bf58      	it	pl
 800cc3e:	6962      	ldrpl	r2, [r4, #20]
 800cc40:	60a2      	str	r2, [r4, #8]
 800cc42:	e7f4      	b.n	800cc2e <__swsetup_r+0x8e>
 800cc44:	2000      	movs	r0, #0
 800cc46:	e7f7      	b.n	800cc38 <__swsetup_r+0x98>
 800cc48:	200005f0 	.word	0x200005f0

0800cc4c <memset>:
 800cc4c:	4402      	add	r2, r0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d100      	bne.n	800cc56 <memset+0xa>
 800cc54:	4770      	bx	lr
 800cc56:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5a:	e7f9      	b.n	800cc50 <memset+0x4>

0800cc5c <_localeconv_r>:
 800cc5c:	4800      	ldr	r0, [pc, #0]	@ (800cc60 <_localeconv_r+0x4>)
 800cc5e:	4770      	bx	lr
 800cc60:	20000730 	.word	0x20000730

0800cc64 <_close_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	2300      	movs	r3, #0
 800cc68:	4d05      	ldr	r5, [pc, #20]	@ (800cc80 <_close_r+0x1c>)
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	4608      	mov	r0, r1
 800cc6e:	602b      	str	r3, [r5, #0]
 800cc70:	f7f5 fe83 	bl	800297a <_close>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d102      	bne.n	800cc7e <_close_r+0x1a>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	b103      	cbz	r3, 800cc7e <_close_r+0x1a>
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	200012e4 	.word	0x200012e4

0800cc84 <_lseek_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4604      	mov	r4, r0
 800cc88:	4d06      	ldr	r5, [pc, #24]	@ (800cca4 <_lseek_r+0x20>)
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	2200      	movs	r2, #0
 800cc90:	602a      	str	r2, [r5, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	f7f5 fe98 	bl	80029c8 <_lseek>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d102      	bne.n	800cca2 <_lseek_r+0x1e>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	b103      	cbz	r3, 800cca2 <_lseek_r+0x1e>
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	200012e4 	.word	0x200012e4

0800cca8 <_read_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4d06      	ldr	r5, [pc, #24]	@ (800ccc8 <_read_r+0x20>)
 800ccae:	4608      	mov	r0, r1
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	602a      	str	r2, [r5, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f7f5 fe26 	bl	8002908 <_read>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_read_r+0x1e>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_read_r+0x1e>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	200012e4 	.word	0x200012e4

0800cccc <_sbrk_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4d05      	ldr	r5, [pc, #20]	@ (800cce8 <_sbrk_r+0x1c>)
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f5 fe84 	bl	80029e4 <_sbrk>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_sbrk_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_sbrk_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	200012e4 	.word	0x200012e4

0800ccec <_write_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4d06      	ldr	r5, [pc, #24]	@ (800cd0c <_write_r+0x20>)
 800ccf2:	4608      	mov	r0, r1
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	602a      	str	r2, [r5, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f7f5 fe21 	bl	8002942 <_write>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_write_r+0x1e>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_write_r+0x1e>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	200012e4 	.word	0x200012e4

0800cd10 <__errno>:
 800cd10:	4b01      	ldr	r3, [pc, #4]	@ (800cd18 <__errno+0x8>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	200005f0 	.word	0x200005f0

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4d0d      	ldr	r5, [pc, #52]	@ (800cd54 <__libc_init_array+0x38>)
 800cd20:	2600      	movs	r6, #0
 800cd22:	4c0d      	ldr	r4, [pc, #52]	@ (800cd58 <__libc_init_array+0x3c>)
 800cd24:	1b64      	subs	r4, r4, r5
 800cd26:	10a4      	asrs	r4, r4, #2
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	4d0b      	ldr	r5, [pc, #44]	@ (800cd5c <__libc_init_array+0x40>)
 800cd2e:	2600      	movs	r6, #0
 800cd30:	4c0b      	ldr	r4, [pc, #44]	@ (800cd60 <__libc_init_array+0x44>)
 800cd32:	f001 fef7 	bl	800eb24 <_init>
 800cd36:	1b64      	subs	r4, r4, r5
 800cd38:	10a4      	asrs	r4, r4, #2
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	3601      	adds	r6, #1
 800cd46:	4798      	blx	r3
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	3601      	adds	r6, #1
 800cd50:	4798      	blx	r3
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	0800f5b0 	.word	0x0800f5b0
 800cd58:	0800f5b0 	.word	0x0800f5b0
 800cd5c:	0800f5b0 	.word	0x0800f5b0
 800cd60:	0800f5b4 	.word	0x0800f5b4

0800cd64 <__retarget_lock_init_recursive>:
 800cd64:	4770      	bx	lr

0800cd66 <__retarget_lock_acquire_recursive>:
 800cd66:	4770      	bx	lr

0800cd68 <__retarget_lock_release_recursive>:
 800cd68:	4770      	bx	lr

0800cd6a <memchr>:
 800cd6a:	b2c9      	uxtb	r1, r1
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	4402      	add	r2, r0
 800cd70:	b510      	push	{r4, lr}
 800cd72:	4293      	cmp	r3, r2
 800cd74:	4618      	mov	r0, r3
 800cd76:	d101      	bne.n	800cd7c <memchr+0x12>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	e003      	b.n	800cd84 <memchr+0x1a>
 800cd7c:	7804      	ldrb	r4, [r0, #0]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	428c      	cmp	r4, r1
 800cd82:	d1f6      	bne.n	800cd72 <memchr+0x8>
 800cd84:	bd10      	pop	{r4, pc}

0800cd86 <memcpy>:
 800cd86:	440a      	add	r2, r1
 800cd88:	1e43      	subs	r3, r0, #1
 800cd8a:	4291      	cmp	r1, r2
 800cd8c:	d100      	bne.n	800cd90 <memcpy+0xa>
 800cd8e:	4770      	bx	lr
 800cd90:	b510      	push	{r4, lr}
 800cd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd96:	4291      	cmp	r1, r2
 800cd98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd9c:	d1f9      	bne.n	800cd92 <memcpy+0xc>
 800cd9e:	bd10      	pop	{r4, pc}

0800cda0 <quorem>:
 800cda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	6903      	ldr	r3, [r0, #16]
 800cda6:	4607      	mov	r7, r0
 800cda8:	690c      	ldr	r4, [r1, #16]
 800cdaa:	42a3      	cmp	r3, r4
 800cdac:	f2c0 8083 	blt.w	800ceb6 <quorem+0x116>
 800cdb0:	3c01      	subs	r4, #1
 800cdb2:	f100 0514 	add.w	r5, r0, #20
 800cdb6:	f101 0814 	add.w	r8, r1, #20
 800cdba:	00a3      	lsls	r3, r4, #2
 800cdbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdca:	9301      	str	r3, [sp, #4]
 800cdcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdd8:	d331      	bcc.n	800ce3e <quorem+0x9e>
 800cdda:	f04f 0a00 	mov.w	sl, #0
 800cdde:	46c4      	mov	ip, r8
 800cde0:	46ae      	mov	lr, r5
 800cde2:	46d3      	mov	fp, sl
 800cde4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cde8:	b298      	uxth	r0, r3
 800cdea:	45e1      	cmp	r9, ip
 800cdec:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800cdf0:	fb06 a000 	mla	r0, r6, r0, sl
 800cdf4:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800cdf8:	b280      	uxth	r0, r0
 800cdfa:	fb06 2303 	mla	r3, r6, r3, r2
 800cdfe:	f8de 2000 	ldr.w	r2, [lr]
 800ce02:	b292      	uxth	r2, r2
 800ce04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce08:	eba2 0200 	sub.w	r2, r2, r0
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f8de 0000 	ldr.w	r0, [lr]
 800ce12:	445a      	add	r2, fp
 800ce14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ce18:	b292      	uxth	r2, r2
 800ce1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ce1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ce22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ce26:	f84e 2b04 	str.w	r2, [lr], #4
 800ce2a:	d2db      	bcs.n	800cde4 <quorem+0x44>
 800ce2c:	9b00      	ldr	r3, [sp, #0]
 800ce2e:	58eb      	ldr	r3, [r5, r3]
 800ce30:	b92b      	cbnz	r3, 800ce3e <quorem+0x9e>
 800ce32:	9b01      	ldr	r3, [sp, #4]
 800ce34:	3b04      	subs	r3, #4
 800ce36:	429d      	cmp	r5, r3
 800ce38:	461a      	mov	r2, r3
 800ce3a:	d330      	bcc.n	800ce9e <quorem+0xfe>
 800ce3c:	613c      	str	r4, [r7, #16]
 800ce3e:	4638      	mov	r0, r7
 800ce40:	f001 f8c8 	bl	800dfd4 <__mcmp>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	db26      	blt.n	800ce96 <quorem+0xf6>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce50:	f8d1 c000 	ldr.w	ip, [r1]
 800ce54:	fa1f fe82 	uxth.w	lr, r2
 800ce58:	45c1      	cmp	r9, r8
 800ce5a:	fa1f f38c 	uxth.w	r3, ip
 800ce5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ce62:	eba3 030e 	sub.w	r3, r3, lr
 800ce66:	4403      	add	r3, r0
 800ce68:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ce72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce76:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce7a:	f841 3b04 	str.w	r3, [r1], #4
 800ce7e:	d2e5      	bcs.n	800ce4c <quorem+0xac>
 800ce80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce88:	b922      	cbnz	r2, 800ce94 <quorem+0xf4>
 800ce8a:	3b04      	subs	r3, #4
 800ce8c:	429d      	cmp	r5, r3
 800ce8e:	461a      	mov	r2, r3
 800ce90:	d30b      	bcc.n	800ceaa <quorem+0x10a>
 800ce92:	613c      	str	r4, [r7, #16]
 800ce94:	3601      	adds	r6, #1
 800ce96:	4630      	mov	r0, r6
 800ce98:	b003      	add	sp, #12
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9e:	6812      	ldr	r2, [r2, #0]
 800cea0:	3b04      	subs	r3, #4
 800cea2:	2a00      	cmp	r2, #0
 800cea4:	d1ca      	bne.n	800ce3c <quorem+0x9c>
 800cea6:	3c01      	subs	r4, #1
 800cea8:	e7c5      	b.n	800ce36 <quorem+0x96>
 800ceaa:	6812      	ldr	r2, [r2, #0]
 800ceac:	3b04      	subs	r3, #4
 800ceae:	2a00      	cmp	r2, #0
 800ceb0:	d1ef      	bne.n	800ce92 <quorem+0xf2>
 800ceb2:	3c01      	subs	r4, #1
 800ceb4:	e7ea      	b.n	800ce8c <quorem+0xec>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e7ee      	b.n	800ce98 <quorem+0xf8>
 800ceba:	0000      	movs	r0, r0
 800cebc:	0000      	movs	r0, r0
	...

0800cec0 <_dtoa_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	69c7      	ldr	r7, [r0, #28]
 800cec6:	b099      	sub	sp, #100	@ 0x64
 800cec8:	4683      	mov	fp, r0
 800ceca:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cecc:	9109      	str	r1, [sp, #36]	@ 0x24
 800cece:	920e      	str	r2, [sp, #56]	@ 0x38
 800ced0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ced2:	ec55 4b10 	vmov	r4, r5, d0
 800ced6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ceda:	b97f      	cbnz	r7, 800cefc <_dtoa_r+0x3c>
 800cedc:	2010      	movs	r0, #16
 800cede:	f7fe ffbd 	bl	800be5c <malloc>
 800cee2:	4602      	mov	r2, r0
 800cee4:	f8cb 001c 	str.w	r0, [fp, #28]
 800cee8:	b920      	cbnz	r0, 800cef4 <_dtoa_r+0x34>
 800ceea:	4ba7      	ldr	r3, [pc, #668]	@ (800d188 <_dtoa_r+0x2c8>)
 800ceec:	21ef      	movs	r1, #239	@ 0xef
 800ceee:	48a7      	ldr	r0, [pc, #668]	@ (800d18c <_dtoa_r+0x2cc>)
 800cef0:	f001 fd68 	bl	800e9c4 <__assert_func>
 800cef4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cef8:	6007      	str	r7, [r0, #0]
 800cefa:	60c7      	str	r7, [r0, #12]
 800cefc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf00:	6819      	ldr	r1, [r3, #0]
 800cf02:	b159      	cbz	r1, 800cf1c <_dtoa_r+0x5c>
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	2301      	movs	r3, #1
 800cf08:	4658      	mov	r0, fp
 800cf0a:	4093      	lsls	r3, r2
 800cf0c:	604a      	str	r2, [r1, #4]
 800cf0e:	608b      	str	r3, [r1, #8]
 800cf10:	f000 fe24 	bl	800db5c <_Bfree>
 800cf14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	1e2b      	subs	r3, r5, #0
 800cf1e:	bfb7      	itett	lt
 800cf20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cf24:	2300      	movge	r3, #0
 800cf26:	2201      	movlt	r2, #1
 800cf28:	9303      	strlt	r3, [sp, #12]
 800cf2a:	bfa8      	it	ge
 800cf2c:	6033      	strge	r3, [r6, #0]
 800cf2e:	9f03      	ldr	r7, [sp, #12]
 800cf30:	4b97      	ldr	r3, [pc, #604]	@ (800d190 <_dtoa_r+0x2d0>)
 800cf32:	bfb8      	it	lt
 800cf34:	6032      	strlt	r2, [r6, #0]
 800cf36:	43bb      	bics	r3, r7
 800cf38:	d112      	bne.n	800cf60 <_dtoa_r+0xa0>
 800cf3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cf3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf46:	4323      	orrs	r3, r4
 800cf48:	f000 854c 	beq.w	800d9e4 <_dtoa_r+0xb24>
 800cf4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf4e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d1a4 <_dtoa_r+0x2e4>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 854e 	beq.w	800d9f4 <_dtoa_r+0xb34>
 800cf58:	f10a 0303 	add.w	r3, sl, #3
 800cf5c:	f000 bd48 	b.w	800d9f0 <_dtoa_r+0xb30>
 800cf60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf64:	2200      	movs	r2, #0
 800cf66:	2300      	movs	r3, #0
 800cf68:	ec51 0b17 	vmov	r0, r1, d7
 800cf6c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cf70:	f7f3 fdae 	bl	8000ad0 <__aeabi_dcmpeq>
 800cf74:	4680      	mov	r8, r0
 800cf76:	b158      	cbz	r0, 800cf90 <_dtoa_r+0xd0>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf80:	b113      	cbz	r3, 800cf88 <_dtoa_r+0xc8>
 800cf82:	4b84      	ldr	r3, [pc, #528]	@ (800d194 <_dtoa_r+0x2d4>)
 800cf84:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d1a8 <_dtoa_r+0x2e8>
 800cf8c:	f000 bd32 	b.w	800d9f4 <_dtoa_r+0xb34>
 800cf90:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cf94:	aa16      	add	r2, sp, #88	@ 0x58
 800cf96:	a917      	add	r1, sp, #92	@ 0x5c
 800cf98:	4658      	mov	r0, fp
 800cf9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cf9e:	f001 f8cd 	bl	800e13c <__d2b>
 800cfa2:	4681      	mov	r9, r0
 800cfa4:	2e00      	cmp	r6, #0
 800cfa6:	d075      	beq.n	800d094 <_dtoa_r+0x1d4>
 800cfa8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfaa:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cfae:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cfb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfb6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cfba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfbe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4b74      	ldr	r3, [pc, #464]	@ (800d198 <_dtoa_r+0x2d8>)
 800cfc8:	f7f3 f962 	bl	8000290 <__aeabi_dsub>
 800cfcc:	a368      	add	r3, pc, #416	@ (adr r3, 800d170 <_dtoa_r+0x2b0>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f7f3 fb15 	bl	8000600 <__aeabi_dmul>
 800cfd6:	a368      	add	r3, pc, #416	@ (adr r3, 800d178 <_dtoa_r+0x2b8>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f7f3 f95a 	bl	8000294 <__adddf3>
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	460d      	mov	r5, r1
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7f3 faa1 	bl	800052c <__aeabi_i2d>
 800cfea:	a365      	add	r3, pc, #404	@ (adr r3, 800d180 <_dtoa_r+0x2c0>)
 800cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff0:	f7f3 fb06 	bl	8000600 <__aeabi_dmul>
 800cff4:	4602      	mov	r2, r0
 800cff6:	460b      	mov	r3, r1
 800cff8:	4620      	mov	r0, r4
 800cffa:	4629      	mov	r1, r5
 800cffc:	f7f3 f94a 	bl	8000294 <__adddf3>
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	f7f3 fdac 	bl	8000b60 <__aeabi_d2iz>
 800d008:	2200      	movs	r2, #0
 800d00a:	4607      	mov	r7, r0
 800d00c:	2300      	movs	r3, #0
 800d00e:	4620      	mov	r0, r4
 800d010:	4629      	mov	r1, r5
 800d012:	f7f3 fd67 	bl	8000ae4 <__aeabi_dcmplt>
 800d016:	b140      	cbz	r0, 800d02a <_dtoa_r+0x16a>
 800d018:	4638      	mov	r0, r7
 800d01a:	f7f3 fa87 	bl	800052c <__aeabi_i2d>
 800d01e:	4622      	mov	r2, r4
 800d020:	462b      	mov	r3, r5
 800d022:	f7f3 fd55 	bl	8000ad0 <__aeabi_dcmpeq>
 800d026:	b900      	cbnz	r0, 800d02a <_dtoa_r+0x16a>
 800d028:	3f01      	subs	r7, #1
 800d02a:	2f16      	cmp	r7, #22
 800d02c:	d851      	bhi.n	800d0d2 <_dtoa_r+0x212>
 800d02e:	4b5b      	ldr	r3, [pc, #364]	@ (800d19c <_dtoa_r+0x2dc>)
 800d030:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03c:	f7f3 fd52 	bl	8000ae4 <__aeabi_dcmplt>
 800d040:	2800      	cmp	r0, #0
 800d042:	d048      	beq.n	800d0d6 <_dtoa_r+0x216>
 800d044:	3f01      	subs	r7, #1
 800d046:	2300      	movs	r3, #0
 800d048:	9312      	str	r3, [sp, #72]	@ 0x48
 800d04a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d04c:	1b9b      	subs	r3, r3, r6
 800d04e:	1e5a      	subs	r2, r3, #1
 800d050:	bf46      	itte	mi
 800d052:	f1c3 0801 	rsbmi	r8, r3, #1
 800d056:	2300      	movmi	r3, #0
 800d058:	f04f 0800 	movpl.w	r8, #0
 800d05c:	9208      	str	r2, [sp, #32]
 800d05e:	bf48      	it	mi
 800d060:	9308      	strmi	r3, [sp, #32]
 800d062:	2f00      	cmp	r7, #0
 800d064:	db39      	blt.n	800d0da <_dtoa_r+0x21a>
 800d066:	9b08      	ldr	r3, [sp, #32]
 800d068:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d06a:	443b      	add	r3, r7
 800d06c:	9308      	str	r3, [sp, #32]
 800d06e:	2300      	movs	r3, #0
 800d070:	930a      	str	r3, [sp, #40]	@ 0x28
 800d072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d074:	2b09      	cmp	r3, #9
 800d076:	d864      	bhi.n	800d142 <_dtoa_r+0x282>
 800d078:	2b05      	cmp	r3, #5
 800d07a:	bfc5      	ittet	gt
 800d07c:	3b04      	subgt	r3, #4
 800d07e:	2400      	movgt	r4, #0
 800d080:	2401      	movle	r4, #1
 800d082:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d086:	3b02      	subs	r3, #2
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d865      	bhi.n	800d158 <_dtoa_r+0x298>
 800d08c:	e8df f003 	tbb	[pc, r3]
 800d090:	5737392c 	.word	0x5737392c
 800d094:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d098:	441e      	add	r6, r3
 800d09a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d09e:	2b20      	cmp	r3, #32
 800d0a0:	bfc9      	itett	gt
 800d0a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d0a6:	f1c3 0320 	rsble	r3, r3, #32
 800d0aa:	409f      	lslgt	r7, r3
 800d0ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d0b0:	bfd8      	it	le
 800d0b2:	fa04 f003 	lslle.w	r0, r4, r3
 800d0b6:	f106 36ff 	add.w	r6, r6, #4294967295
 800d0ba:	bfc4      	itt	gt
 800d0bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d0c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d0c4:	f7f3 fa22 	bl	800050c <__aeabi_ui2d>
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d0ce:	9214      	str	r2, [sp, #80]	@ 0x50
 800d0d0:	e777      	b.n	800cfc2 <_dtoa_r+0x102>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e7b8      	b.n	800d048 <_dtoa_r+0x188>
 800d0d6:	9012      	str	r0, [sp, #72]	@ 0x48
 800d0d8:	e7b7      	b.n	800d04a <_dtoa_r+0x18a>
 800d0da:	427b      	negs	r3, r7
 800d0dc:	eba8 0807 	sub.w	r8, r8, r7
 800d0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0e6:	e7c4      	b.n	800d072 <_dtoa_r+0x1b2>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dc35      	bgt.n	800d15e <_dtoa_r+0x29e>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	9307      	str	r3, [sp, #28]
 800d0fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0fc:	e00b      	b.n	800d116 <_dtoa_r+0x256>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e7f3      	b.n	800d0ea <_dtoa_r+0x22a>
 800d102:	2300      	movs	r3, #0
 800d104:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d108:	18fb      	adds	r3, r7, r3
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	3301      	adds	r3, #1
 800d10e:	2b01      	cmp	r3, #1
 800d110:	9307      	str	r3, [sp, #28]
 800d112:	bfb8      	it	lt
 800d114:	2301      	movlt	r3, #1
 800d116:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d11a:	2100      	movs	r1, #0
 800d11c:	2204      	movs	r2, #4
 800d11e:	f102 0514 	add.w	r5, r2, #20
 800d122:	429d      	cmp	r5, r3
 800d124:	d91f      	bls.n	800d166 <_dtoa_r+0x2a6>
 800d126:	6041      	str	r1, [r0, #4]
 800d128:	4658      	mov	r0, fp
 800d12a:	f000 fcd7 	bl	800dadc <_Balloc>
 800d12e:	4682      	mov	sl, r0
 800d130:	2800      	cmp	r0, #0
 800d132:	d13b      	bne.n	800d1ac <_dtoa_r+0x2ec>
 800d134:	4b1a      	ldr	r3, [pc, #104]	@ (800d1a0 <_dtoa_r+0x2e0>)
 800d136:	4602      	mov	r2, r0
 800d138:	f240 11af 	movw	r1, #431	@ 0x1af
 800d13c:	e6d7      	b.n	800ceee <_dtoa_r+0x2e>
 800d13e:	2301      	movs	r3, #1
 800d140:	e7e0      	b.n	800d104 <_dtoa_r+0x244>
 800d142:	2401      	movs	r4, #1
 800d144:	2300      	movs	r3, #0
 800d146:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d148:	9309      	str	r3, [sp, #36]	@ 0x24
 800d14a:	f04f 33ff 	mov.w	r3, #4294967295
 800d14e:	2200      	movs	r2, #0
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	9307      	str	r3, [sp, #28]
 800d154:	2312      	movs	r3, #18
 800d156:	e7d0      	b.n	800d0fa <_dtoa_r+0x23a>
 800d158:	2301      	movs	r3, #1
 800d15a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d15c:	e7f5      	b.n	800d14a <_dtoa_r+0x28a>
 800d15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	9307      	str	r3, [sp, #28]
 800d164:	e7d7      	b.n	800d116 <_dtoa_r+0x256>
 800d166:	3101      	adds	r1, #1
 800d168:	0052      	lsls	r2, r2, #1
 800d16a:	e7d8      	b.n	800d11e <_dtoa_r+0x25e>
 800d16c:	f3af 8000 	nop.w
 800d170:	636f4361 	.word	0x636f4361
 800d174:	3fd287a7 	.word	0x3fd287a7
 800d178:	8b60c8b3 	.word	0x8b60c8b3
 800d17c:	3fc68a28 	.word	0x3fc68a28
 800d180:	509f79fb 	.word	0x509f79fb
 800d184:	3fd34413 	.word	0x3fd34413
 800d188:	0800f275 	.word	0x0800f275
 800d18c:	0800f28c 	.word	0x0800f28c
 800d190:	7ff00000 	.word	0x7ff00000
 800d194:	0800f245 	.word	0x0800f245
 800d198:	3ff80000 	.word	0x3ff80000
 800d19c:	0800f388 	.word	0x0800f388
 800d1a0:	0800f2e4 	.word	0x0800f2e4
 800d1a4:	0800f271 	.word	0x0800f271
 800d1a8:	0800f244 	.word	0x0800f244
 800d1ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1b0:	6018      	str	r0, [r3, #0]
 800d1b2:	9b07      	ldr	r3, [sp, #28]
 800d1b4:	2b0e      	cmp	r3, #14
 800d1b6:	f200 80a4 	bhi.w	800d302 <_dtoa_r+0x442>
 800d1ba:	2c00      	cmp	r4, #0
 800d1bc:	f000 80a1 	beq.w	800d302 <_dtoa_r+0x442>
 800d1c0:	2f00      	cmp	r7, #0
 800d1c2:	dd33      	ble.n	800d22c <_dtoa_r+0x36c>
 800d1c4:	f007 020f 	and.w	r2, r7, #15
 800d1c8:	4bac      	ldr	r3, [pc, #688]	@ (800d47c <_dtoa_r+0x5bc>)
 800d1ca:	05f8      	lsls	r0, r7, #23
 800d1cc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d1d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1d4:	ed93 7b00 	vldr	d7, [r3]
 800d1d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d1dc:	d516      	bpl.n	800d20c <_dtoa_r+0x34c>
 800d1de:	4ba8      	ldr	r3, [pc, #672]	@ (800d480 <_dtoa_r+0x5c0>)
 800d1e0:	f004 040f 	and.w	r4, r4, #15
 800d1e4:	2603      	movs	r6, #3
 800d1e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1ee:	f7f3 fb31 	bl	8000854 <__aeabi_ddiv>
 800d1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1f6:	4da2      	ldr	r5, [pc, #648]	@ (800d480 <_dtoa_r+0x5c0>)
 800d1f8:	b954      	cbnz	r4, 800d210 <_dtoa_r+0x350>
 800d1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d202:	f7f3 fb27 	bl	8000854 <__aeabi_ddiv>
 800d206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d20a:	e028      	b.n	800d25e <_dtoa_r+0x39e>
 800d20c:	2602      	movs	r6, #2
 800d20e:	e7f2      	b.n	800d1f6 <_dtoa_r+0x336>
 800d210:	07e1      	lsls	r1, r4, #31
 800d212:	d508      	bpl.n	800d226 <_dtoa_r+0x366>
 800d214:	3601      	adds	r6, #1
 800d216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d21a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d21e:	f7f3 f9ef 	bl	8000600 <__aeabi_dmul>
 800d222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d226:	1064      	asrs	r4, r4, #1
 800d228:	3508      	adds	r5, #8
 800d22a:	e7e5      	b.n	800d1f8 <_dtoa_r+0x338>
 800d22c:	f000 80d2 	beq.w	800d3d4 <_dtoa_r+0x514>
 800d230:	427c      	negs	r4, r7
 800d232:	4b92      	ldr	r3, [pc, #584]	@ (800d47c <_dtoa_r+0x5bc>)
 800d234:	4d92      	ldr	r5, [pc, #584]	@ (800d480 <_dtoa_r+0x5c0>)
 800d236:	2602      	movs	r6, #2
 800d238:	f004 020f 	and.w	r2, r4, #15
 800d23c:	1124      	asrs	r4, r4, #4
 800d23e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	f7f3 f9d9 	bl	8000600 <__aeabi_dmul>
 800d24e:	2300      	movs	r3, #0
 800d250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d254:	2c00      	cmp	r4, #0
 800d256:	f040 80b2 	bne.w	800d3be <_dtoa_r+0x4fe>
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1d3      	bne.n	800d206 <_dtoa_r+0x346>
 800d25e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d260:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	f000 80b7 	beq.w	800d3d8 <_dtoa_r+0x518>
 800d26a:	2200      	movs	r2, #0
 800d26c:	4b85      	ldr	r3, [pc, #532]	@ (800d484 <_dtoa_r+0x5c4>)
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 fc37 	bl	8000ae4 <__aeabi_dcmplt>
 800d276:	2800      	cmp	r0, #0
 800d278:	f000 80ae 	beq.w	800d3d8 <_dtoa_r+0x518>
 800d27c:	9b07      	ldr	r3, [sp, #28]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 80aa 	beq.w	800d3d8 <_dtoa_r+0x518>
 800d284:	9b00      	ldr	r3, [sp, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	dd37      	ble.n	800d2fa <_dtoa_r+0x43a>
 800d28a:	1e7b      	subs	r3, r7, #1
 800d28c:	4620      	mov	r0, r4
 800d28e:	2200      	movs	r2, #0
 800d290:	4629      	mov	r1, r5
 800d292:	9304      	str	r3, [sp, #16]
 800d294:	3601      	adds	r6, #1
 800d296:	4b7c      	ldr	r3, [pc, #496]	@ (800d488 <_dtoa_r+0x5c8>)
 800d298:	f7f3 f9b2 	bl	8000600 <__aeabi_dmul>
 800d29c:	9c00      	ldr	r4, [sp, #0]
 800d29e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f7f3 f942 	bl	800052c <__aeabi_i2d>
 800d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2ac:	f7f3 f9a8 	bl	8000600 <__aeabi_dmul>
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	4b76      	ldr	r3, [pc, #472]	@ (800d48c <_dtoa_r+0x5cc>)
 800d2b4:	f7f2 ffee 	bl	8000294 <__adddf3>
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d2be:	2c00      	cmp	r4, #0
 800d2c0:	f040 808d 	bne.w	800d3de <_dtoa_r+0x51e>
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	4b72      	ldr	r3, [pc, #456]	@ (800d490 <_dtoa_r+0x5d0>)
 800d2c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2cc:	f7f2 ffe0 	bl	8000290 <__aeabi_dsub>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2d8:	462a      	mov	r2, r5
 800d2da:	4633      	mov	r3, r6
 800d2dc:	f7f3 fc20 	bl	8000b20 <__aeabi_dcmpgt>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	f040 828b 	bne.w	800d7fc <_dtoa_r+0x93c>
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2f0:	f7f3 fbf8 	bl	8000ae4 <__aeabi_dcmplt>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f040 8128 	bne.w	800d54a <_dtoa_r+0x68a>
 800d2fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d2fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d304:	2b00      	cmp	r3, #0
 800d306:	f2c0 815a 	blt.w	800d5be <_dtoa_r+0x6fe>
 800d30a:	2f0e      	cmp	r7, #14
 800d30c:	f300 8157 	bgt.w	800d5be <_dtoa_r+0x6fe>
 800d310:	4b5a      	ldr	r3, [pc, #360]	@ (800d47c <_dtoa_r+0x5bc>)
 800d312:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d316:	ed93 7b00 	vldr	d7, [r3]
 800d31a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	ed8d 7b00 	vstr	d7, [sp]
 800d322:	da03      	bge.n	800d32c <_dtoa_r+0x46c>
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f340 8101 	ble.w	800d52e <_dtoa_r+0x66e>
 800d32c:	4656      	mov	r6, sl
 800d32e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d332:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d336:	4620      	mov	r0, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f3 fa8b 	bl	8000854 <__aeabi_ddiv>
 800d33e:	f7f3 fc0f 	bl	8000b60 <__aeabi_d2iz>
 800d342:	4680      	mov	r8, r0
 800d344:	f7f3 f8f2 	bl	800052c <__aeabi_i2d>
 800d348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d34c:	f7f3 f958 	bl	8000600 <__aeabi_dmul>
 800d350:	4602      	mov	r2, r0
 800d352:	4620      	mov	r0, r4
 800d354:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d358:	460b      	mov	r3, r1
 800d35a:	4629      	mov	r1, r5
 800d35c:	f7f2 ff98 	bl	8000290 <__aeabi_dsub>
 800d360:	9d07      	ldr	r5, [sp, #28]
 800d362:	f806 4b01 	strb.w	r4, [r6], #1
 800d366:	eba6 040a 	sub.w	r4, r6, sl
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	42a5      	cmp	r5, r4
 800d370:	f040 8117 	bne.w	800d5a2 <_dtoa_r+0x6e2>
 800d374:	f7f2 ff8e 	bl	8000294 <__adddf3>
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d380:	f7f3 fbce 	bl	8000b20 <__aeabi_dcmpgt>
 800d384:	2800      	cmp	r0, #0
 800d386:	f040 80f9 	bne.w	800d57c <_dtoa_r+0x6bc>
 800d38a:	4620      	mov	r0, r4
 800d38c:	4629      	mov	r1, r5
 800d38e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d392:	f7f3 fb9d 	bl	8000ad0 <__aeabi_dcmpeq>
 800d396:	b118      	cbz	r0, 800d3a0 <_dtoa_r+0x4e0>
 800d398:	f018 0f01 	tst.w	r8, #1
 800d39c:	f040 80ee 	bne.w	800d57c <_dtoa_r+0x6bc>
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	4658      	mov	r0, fp
 800d3a4:	f000 fbda 	bl	800db5c <_Bfree>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	3701      	adds	r7, #1
 800d3ac:	7033      	strb	r3, [r6, #0]
 800d3ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3b0:	601f      	str	r7, [r3, #0]
 800d3b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 831d 	beq.w	800d9f4 <_dtoa_r+0xb34>
 800d3ba:	601e      	str	r6, [r3, #0]
 800d3bc:	e31a      	b.n	800d9f4 <_dtoa_r+0xb34>
 800d3be:	07e2      	lsls	r2, r4, #31
 800d3c0:	d505      	bpl.n	800d3ce <_dtoa_r+0x50e>
 800d3c2:	3601      	adds	r6, #1
 800d3c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3c8:	f7f3 f91a 	bl	8000600 <__aeabi_dmul>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	1064      	asrs	r4, r4, #1
 800d3d0:	3508      	adds	r5, #8
 800d3d2:	e73f      	b.n	800d254 <_dtoa_r+0x394>
 800d3d4:	2602      	movs	r6, #2
 800d3d6:	e742      	b.n	800d25e <_dtoa_r+0x39e>
 800d3d8:	9c07      	ldr	r4, [sp, #28]
 800d3da:	9704      	str	r7, [sp, #16]
 800d3dc:	e761      	b.n	800d2a2 <_dtoa_r+0x3e2>
 800d3de:	4b27      	ldr	r3, [pc, #156]	@ (800d47c <_dtoa_r+0x5bc>)
 800d3e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3e6:	4454      	add	r4, sl
 800d3e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	d053      	beq.n	800d498 <_dtoa_r+0x5d8>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	4928      	ldr	r1, [pc, #160]	@ (800d494 <_dtoa_r+0x5d4>)
 800d3f4:	f7f3 fa2e 	bl	8000854 <__aeabi_ddiv>
 800d3f8:	4633      	mov	r3, r6
 800d3fa:	4656      	mov	r6, sl
 800d3fc:	462a      	mov	r2, r5
 800d3fe:	f7f2 ff47 	bl	8000290 <__aeabi_dsub>
 800d402:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d40a:	f7f3 fba9 	bl	8000b60 <__aeabi_d2iz>
 800d40e:	4605      	mov	r5, r0
 800d410:	f7f3 f88c 	bl	800052c <__aeabi_i2d>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	3530      	adds	r5, #48	@ 0x30
 800d41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d41e:	f7f2 ff37 	bl	8000290 <__aeabi_dsub>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	f806 5b01 	strb.w	r5, [r6], #1
 800d42a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d42e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d432:	f7f3 fb57 	bl	8000ae4 <__aeabi_dcmplt>
 800d436:	2800      	cmp	r0, #0
 800d438:	d171      	bne.n	800d51e <_dtoa_r+0x65e>
 800d43a:	2000      	movs	r0, #0
 800d43c:	4911      	ldr	r1, [pc, #68]	@ (800d484 <_dtoa_r+0x5c4>)
 800d43e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d442:	f7f2 ff25 	bl	8000290 <__aeabi_dsub>
 800d446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d44a:	f7f3 fb4b 	bl	8000ae4 <__aeabi_dcmplt>
 800d44e:	2800      	cmp	r0, #0
 800d450:	f040 8095 	bne.w	800d57e <_dtoa_r+0x6be>
 800d454:	42a6      	cmp	r6, r4
 800d456:	f43f af50 	beq.w	800d2fa <_dtoa_r+0x43a>
 800d45a:	2200      	movs	r2, #0
 800d45c:	4b0a      	ldr	r3, [pc, #40]	@ (800d488 <_dtoa_r+0x5c8>)
 800d45e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d462:	f7f3 f8cd 	bl	8000600 <__aeabi_dmul>
 800d466:	2200      	movs	r2, #0
 800d468:	4b07      	ldr	r3, [pc, #28]	@ (800d488 <_dtoa_r+0x5c8>)
 800d46a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d472:	f7f3 f8c5 	bl	8000600 <__aeabi_dmul>
 800d476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d47a:	e7c4      	b.n	800d406 <_dtoa_r+0x546>
 800d47c:	0800f388 	.word	0x0800f388
 800d480:	0800f360 	.word	0x0800f360
 800d484:	3ff00000 	.word	0x3ff00000
 800d488:	40240000 	.word	0x40240000
 800d48c:	401c0000 	.word	0x401c0000
 800d490:	40140000 	.word	0x40140000
 800d494:	3fe00000 	.word	0x3fe00000
 800d498:	4631      	mov	r1, r6
 800d49a:	4656      	mov	r6, sl
 800d49c:	4628      	mov	r0, r5
 800d49e:	f7f3 f8af 	bl	8000600 <__aeabi_dmul>
 800d4a2:	9415      	str	r4, [sp, #84]	@ 0x54
 800d4a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d4a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ac:	f7f3 fb58 	bl	8000b60 <__aeabi_d2iz>
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	f7f3 f83b 	bl	800052c <__aeabi_i2d>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	3530      	adds	r5, #48	@ 0x30
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4c0:	f7f2 fee6 	bl	8000290 <__aeabi_dsub>
 800d4c4:	f806 5b01 	strb.w	r5, [r6], #1
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	42a6      	cmp	r6, r4
 800d4ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4d2:	f04f 0200 	mov.w	r2, #0
 800d4d6:	d124      	bne.n	800d522 <_dtoa_r+0x662>
 800d4d8:	4bac      	ldr	r3, [pc, #688]	@ (800d78c <_dtoa_r+0x8cc>)
 800d4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d4de:	f7f2 fed9 	bl	8000294 <__adddf3>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ea:	f7f3 fb19 	bl	8000b20 <__aeabi_dcmpgt>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d145      	bne.n	800d57e <_dtoa_r+0x6be>
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	49a5      	ldr	r1, [pc, #660]	@ (800d78c <_dtoa_r+0x8cc>)
 800d4f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d4fa:	f7f2 fec9 	bl	8000290 <__aeabi_dsub>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d506:	f7f3 faed 	bl	8000ae4 <__aeabi_dcmplt>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	f43f aef5 	beq.w	800d2fa <_dtoa_r+0x43a>
 800d510:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d512:	1e73      	subs	r3, r6, #1
 800d514:	9315      	str	r3, [sp, #84]	@ 0x54
 800d516:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d51a:	2b30      	cmp	r3, #48	@ 0x30
 800d51c:	d0f8      	beq.n	800d510 <_dtoa_r+0x650>
 800d51e:	9f04      	ldr	r7, [sp, #16]
 800d520:	e73e      	b.n	800d3a0 <_dtoa_r+0x4e0>
 800d522:	4b9b      	ldr	r3, [pc, #620]	@ (800d790 <_dtoa_r+0x8d0>)
 800d524:	f7f3 f86c 	bl	8000600 <__aeabi_dmul>
 800d528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d52c:	e7bc      	b.n	800d4a8 <_dtoa_r+0x5e8>
 800d52e:	d10c      	bne.n	800d54a <_dtoa_r+0x68a>
 800d530:	2200      	movs	r2, #0
 800d532:	4b98      	ldr	r3, [pc, #608]	@ (800d794 <_dtoa_r+0x8d4>)
 800d534:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d538:	f7f3 f862 	bl	8000600 <__aeabi_dmul>
 800d53c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d540:	f7f3 fae4 	bl	8000b0c <__aeabi_dcmpge>
 800d544:	2800      	cmp	r0, #0
 800d546:	f000 8157 	beq.w	800d7f8 <_dtoa_r+0x938>
 800d54a:	2400      	movs	r4, #0
 800d54c:	4625      	mov	r5, r4
 800d54e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d550:	4656      	mov	r6, sl
 800d552:	43db      	mvns	r3, r3
 800d554:	9304      	str	r3, [sp, #16]
 800d556:	2700      	movs	r7, #0
 800d558:	4621      	mov	r1, r4
 800d55a:	4658      	mov	r0, fp
 800d55c:	f000 fafe 	bl	800db5c <_Bfree>
 800d560:	2d00      	cmp	r5, #0
 800d562:	d0dc      	beq.n	800d51e <_dtoa_r+0x65e>
 800d564:	b12f      	cbz	r7, 800d572 <_dtoa_r+0x6b2>
 800d566:	42af      	cmp	r7, r5
 800d568:	d003      	beq.n	800d572 <_dtoa_r+0x6b2>
 800d56a:	4639      	mov	r1, r7
 800d56c:	4658      	mov	r0, fp
 800d56e:	f000 faf5 	bl	800db5c <_Bfree>
 800d572:	4629      	mov	r1, r5
 800d574:	4658      	mov	r0, fp
 800d576:	f000 faf1 	bl	800db5c <_Bfree>
 800d57a:	e7d0      	b.n	800d51e <_dtoa_r+0x65e>
 800d57c:	9704      	str	r7, [sp, #16]
 800d57e:	4633      	mov	r3, r6
 800d580:	461e      	mov	r6, r3
 800d582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d586:	2a39      	cmp	r2, #57	@ 0x39
 800d588:	d107      	bne.n	800d59a <_dtoa_r+0x6da>
 800d58a:	459a      	cmp	sl, r3
 800d58c:	d1f8      	bne.n	800d580 <_dtoa_r+0x6c0>
 800d58e:	9a04      	ldr	r2, [sp, #16]
 800d590:	3201      	adds	r2, #1
 800d592:	9204      	str	r2, [sp, #16]
 800d594:	2230      	movs	r2, #48	@ 0x30
 800d596:	f88a 2000 	strb.w	r2, [sl]
 800d59a:	781a      	ldrb	r2, [r3, #0]
 800d59c:	3201      	adds	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	e7bd      	b.n	800d51e <_dtoa_r+0x65e>
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	4b7a      	ldr	r3, [pc, #488]	@ (800d790 <_dtoa_r+0x8d0>)
 800d5a6:	f7f3 f82b 	bl	8000600 <__aeabi_dmul>
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	460d      	mov	r5, r1
 800d5b2:	f7f3 fa8d 	bl	8000ad0 <__aeabi_dcmpeq>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	f43f aebb 	beq.w	800d332 <_dtoa_r+0x472>
 800d5bc:	e6f0      	b.n	800d3a0 <_dtoa_r+0x4e0>
 800d5be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d5c0:	2a00      	cmp	r2, #0
 800d5c2:	f000 80db 	beq.w	800d77c <_dtoa_r+0x8bc>
 800d5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5c8:	2a01      	cmp	r2, #1
 800d5ca:	f300 80bf 	bgt.w	800d74c <_dtoa_r+0x88c>
 800d5ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d5d0:	2a00      	cmp	r2, #0
 800d5d2:	f000 80b7 	beq.w	800d744 <_dtoa_r+0x884>
 800d5d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d5da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d5dc:	4646      	mov	r6, r8
 800d5de:	9a08      	ldr	r2, [sp, #32]
 800d5e0:	2101      	movs	r1, #1
 800d5e2:	4658      	mov	r0, fp
 800d5e4:	4498      	add	r8, r3
 800d5e6:	441a      	add	r2, r3
 800d5e8:	9208      	str	r2, [sp, #32]
 800d5ea:	f000 fb6d 	bl	800dcc8 <__i2b>
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	b15e      	cbz	r6, 800d60a <_dtoa_r+0x74a>
 800d5f2:	9b08      	ldr	r3, [sp, #32]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dd08      	ble.n	800d60a <_dtoa_r+0x74a>
 800d5f8:	42b3      	cmp	r3, r6
 800d5fa:	9a08      	ldr	r2, [sp, #32]
 800d5fc:	bfa8      	it	ge
 800d5fe:	4633      	movge	r3, r6
 800d600:	eba8 0803 	sub.w	r8, r8, r3
 800d604:	1af6      	subs	r6, r6, r3
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	9308      	str	r3, [sp, #32]
 800d60a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d60c:	b1f3      	cbz	r3, 800d64c <_dtoa_r+0x78c>
 800d60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 80b7 	beq.w	800d784 <_dtoa_r+0x8c4>
 800d616:	b18c      	cbz	r4, 800d63c <_dtoa_r+0x77c>
 800d618:	4629      	mov	r1, r5
 800d61a:	4622      	mov	r2, r4
 800d61c:	4658      	mov	r0, fp
 800d61e:	f000 fc13 	bl	800de48 <__pow5mult>
 800d622:	464a      	mov	r2, r9
 800d624:	4601      	mov	r1, r0
 800d626:	4605      	mov	r5, r0
 800d628:	4658      	mov	r0, fp
 800d62a:	f000 fb63 	bl	800dcf4 <__multiply>
 800d62e:	4649      	mov	r1, r9
 800d630:	9004      	str	r0, [sp, #16]
 800d632:	4658      	mov	r0, fp
 800d634:	f000 fa92 	bl	800db5c <_Bfree>
 800d638:	9b04      	ldr	r3, [sp, #16]
 800d63a:	4699      	mov	r9, r3
 800d63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d63e:	1b1a      	subs	r2, r3, r4
 800d640:	d004      	beq.n	800d64c <_dtoa_r+0x78c>
 800d642:	4649      	mov	r1, r9
 800d644:	4658      	mov	r0, fp
 800d646:	f000 fbff 	bl	800de48 <__pow5mult>
 800d64a:	4681      	mov	r9, r0
 800d64c:	2101      	movs	r1, #1
 800d64e:	4658      	mov	r0, fp
 800d650:	f000 fb3a 	bl	800dcc8 <__i2b>
 800d654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d656:	4604      	mov	r4, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 81cf 	beq.w	800d9fc <_dtoa_r+0xb3c>
 800d65e:	461a      	mov	r2, r3
 800d660:	4601      	mov	r1, r0
 800d662:	4658      	mov	r0, fp
 800d664:	f000 fbf0 	bl	800de48 <__pow5mult>
 800d668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66a:	4604      	mov	r4, r0
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	f300 8095 	bgt.w	800d79c <_dtoa_r+0x8dc>
 800d672:	9b02      	ldr	r3, [sp, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	f040 8087 	bne.w	800d788 <_dtoa_r+0x8c8>
 800d67a:	9b03      	ldr	r3, [sp, #12]
 800d67c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d680:	2b00      	cmp	r3, #0
 800d682:	f040 8089 	bne.w	800d798 <_dtoa_r+0x8d8>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d68c:	0d1b      	lsrs	r3, r3, #20
 800d68e:	051b      	lsls	r3, r3, #20
 800d690:	b12b      	cbz	r3, 800d69e <_dtoa_r+0x7de>
 800d692:	9b08      	ldr	r3, [sp, #32]
 800d694:	f108 0801 	add.w	r8, r8, #1
 800d698:	3301      	adds	r3, #1
 800d69a:	9308      	str	r3, [sp, #32]
 800d69c:	2301      	movs	r3, #1
 800d69e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f000 81b0 	beq.w	800da08 <_dtoa_r+0xb48>
 800d6a8:	6923      	ldr	r3, [r4, #16]
 800d6aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6ae:	6918      	ldr	r0, [r3, #16]
 800d6b0:	f000 fabe 	bl	800dc30 <__hi0bits>
 800d6b4:	f1c0 0020 	rsb	r0, r0, #32
 800d6b8:	9b08      	ldr	r3, [sp, #32]
 800d6ba:	4418      	add	r0, r3
 800d6bc:	f010 001f 	ands.w	r0, r0, #31
 800d6c0:	d077      	beq.n	800d7b2 <_dtoa_r+0x8f2>
 800d6c2:	f1c0 0320 	rsb	r3, r0, #32
 800d6c6:	2b04      	cmp	r3, #4
 800d6c8:	dd6b      	ble.n	800d7a2 <_dtoa_r+0x8e2>
 800d6ca:	f1c0 001c 	rsb	r0, r0, #28
 800d6ce:	9b08      	ldr	r3, [sp, #32]
 800d6d0:	4480      	add	r8, r0
 800d6d2:	4403      	add	r3, r0
 800d6d4:	4406      	add	r6, r0
 800d6d6:	9308      	str	r3, [sp, #32]
 800d6d8:	f1b8 0f00 	cmp.w	r8, #0
 800d6dc:	dd05      	ble.n	800d6ea <_dtoa_r+0x82a>
 800d6de:	4649      	mov	r1, r9
 800d6e0:	4642      	mov	r2, r8
 800d6e2:	4658      	mov	r0, fp
 800d6e4:	f000 fc0a 	bl	800defc <__lshift>
 800d6e8:	4681      	mov	r9, r0
 800d6ea:	9b08      	ldr	r3, [sp, #32]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dd05      	ble.n	800d6fc <_dtoa_r+0x83c>
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	4658      	mov	r0, fp
 800d6f6:	f000 fc01 	bl	800defc <__lshift>
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d059      	beq.n	800d7b6 <_dtoa_r+0x8f6>
 800d702:	4621      	mov	r1, r4
 800d704:	4648      	mov	r0, r9
 800d706:	f000 fc65 	bl	800dfd4 <__mcmp>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	da53      	bge.n	800d7b6 <_dtoa_r+0x8f6>
 800d70e:	1e7b      	subs	r3, r7, #1
 800d710:	4649      	mov	r1, r9
 800d712:	220a      	movs	r2, #10
 800d714:	4658      	mov	r0, fp
 800d716:	9304      	str	r3, [sp, #16]
 800d718:	2300      	movs	r3, #0
 800d71a:	f000 fa41 	bl	800dba0 <__multadd>
 800d71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d720:	4681      	mov	r9, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	f000 8172 	beq.w	800da0c <_dtoa_r+0xb4c>
 800d728:	2300      	movs	r3, #0
 800d72a:	4629      	mov	r1, r5
 800d72c:	220a      	movs	r2, #10
 800d72e:	4658      	mov	r0, fp
 800d730:	f000 fa36 	bl	800dba0 <__multadd>
 800d734:	9b00      	ldr	r3, [sp, #0]
 800d736:	4605      	mov	r5, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dc67      	bgt.n	800d80c <_dtoa_r+0x94c>
 800d73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d73e:	2b02      	cmp	r3, #2
 800d740:	dc41      	bgt.n	800d7c6 <_dtoa_r+0x906>
 800d742:	e063      	b.n	800d80c <_dtoa_r+0x94c>
 800d744:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d746:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d74a:	e746      	b.n	800d5da <_dtoa_r+0x71a>
 800d74c:	9b07      	ldr	r3, [sp, #28]
 800d74e:	1e5c      	subs	r4, r3, #1
 800d750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d752:	42a3      	cmp	r3, r4
 800d754:	bfb7      	itett	lt
 800d756:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d758:	1b1c      	subge	r4, r3, r4
 800d75a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d75c:	1ae3      	sublt	r3, r4, r3
 800d75e:	bfbe      	ittt	lt
 800d760:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d762:	2400      	movlt	r4, #0
 800d764:	18d2      	addlt	r2, r2, r3
 800d766:	9b07      	ldr	r3, [sp, #28]
 800d768:	bfb8      	it	lt
 800d76a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	bfb5      	itete	lt
 800d770:	eba8 0603 	sublt.w	r6, r8, r3
 800d774:	4646      	movge	r6, r8
 800d776:	2300      	movlt	r3, #0
 800d778:	9b07      	ldrge	r3, [sp, #28]
 800d77a:	e730      	b.n	800d5de <_dtoa_r+0x71e>
 800d77c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d77e:	4646      	mov	r6, r8
 800d780:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d782:	e735      	b.n	800d5f0 <_dtoa_r+0x730>
 800d784:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d786:	e75c      	b.n	800d642 <_dtoa_r+0x782>
 800d788:	2300      	movs	r3, #0
 800d78a:	e788      	b.n	800d69e <_dtoa_r+0x7de>
 800d78c:	3fe00000 	.word	0x3fe00000
 800d790:	40240000 	.word	0x40240000
 800d794:	40140000 	.word	0x40140000
 800d798:	9b02      	ldr	r3, [sp, #8]
 800d79a:	e780      	b.n	800d69e <_dtoa_r+0x7de>
 800d79c:	2300      	movs	r3, #0
 800d79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7a0:	e782      	b.n	800d6a8 <_dtoa_r+0x7e8>
 800d7a2:	d099      	beq.n	800d6d8 <_dtoa_r+0x818>
 800d7a4:	331c      	adds	r3, #28
 800d7a6:	9a08      	ldr	r2, [sp, #32]
 800d7a8:	441a      	add	r2, r3
 800d7aa:	4498      	add	r8, r3
 800d7ac:	441e      	add	r6, r3
 800d7ae:	9208      	str	r2, [sp, #32]
 800d7b0:	e792      	b.n	800d6d8 <_dtoa_r+0x818>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	e7f6      	b.n	800d7a4 <_dtoa_r+0x8e4>
 800d7b6:	9b07      	ldr	r3, [sp, #28]
 800d7b8:	9704      	str	r7, [sp, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dc20      	bgt.n	800d800 <_dtoa_r+0x940>
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	dd1e      	ble.n	800d804 <_dtoa_r+0x944>
 800d7c6:	9b00      	ldr	r3, [sp, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f47f aec0 	bne.w	800d54e <_dtoa_r+0x68e>
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	2205      	movs	r2, #5
 800d7d2:	4658      	mov	r0, fp
 800d7d4:	f000 f9e4 	bl	800dba0 <__multadd>
 800d7d8:	4601      	mov	r1, r0
 800d7da:	4604      	mov	r4, r0
 800d7dc:	4648      	mov	r0, r9
 800d7de:	f000 fbf9 	bl	800dfd4 <__mcmp>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f77f aeb3 	ble.w	800d54e <_dtoa_r+0x68e>
 800d7e8:	2331      	movs	r3, #49	@ 0x31
 800d7ea:	4656      	mov	r6, sl
 800d7ec:	f806 3b01 	strb.w	r3, [r6], #1
 800d7f0:	9b04      	ldr	r3, [sp, #16]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	e6ae      	b.n	800d556 <_dtoa_r+0x696>
 800d7f8:	9c07      	ldr	r4, [sp, #28]
 800d7fa:	9704      	str	r7, [sp, #16]
 800d7fc:	4625      	mov	r5, r4
 800d7fe:	e7f3      	b.n	800d7e8 <_dtoa_r+0x928>
 800d800:	9b07      	ldr	r3, [sp, #28]
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d806:	2b00      	cmp	r3, #0
 800d808:	f000 8104 	beq.w	800da14 <_dtoa_r+0xb54>
 800d80c:	2e00      	cmp	r6, #0
 800d80e:	dd05      	ble.n	800d81c <_dtoa_r+0x95c>
 800d810:	4629      	mov	r1, r5
 800d812:	4632      	mov	r2, r6
 800d814:	4658      	mov	r0, fp
 800d816:	f000 fb71 	bl	800defc <__lshift>
 800d81a:	4605      	mov	r5, r0
 800d81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d05a      	beq.n	800d8d8 <_dtoa_r+0xa18>
 800d822:	6869      	ldr	r1, [r5, #4]
 800d824:	4658      	mov	r0, fp
 800d826:	f000 f959 	bl	800dadc <_Balloc>
 800d82a:	4606      	mov	r6, r0
 800d82c:	b928      	cbnz	r0, 800d83a <_dtoa_r+0x97a>
 800d82e:	4b84      	ldr	r3, [pc, #528]	@ (800da40 <_dtoa_r+0xb80>)
 800d830:	4602      	mov	r2, r0
 800d832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d836:	f7ff bb5a 	b.w	800ceee <_dtoa_r+0x2e>
 800d83a:	692a      	ldr	r2, [r5, #16]
 800d83c:	f105 010c 	add.w	r1, r5, #12
 800d840:	300c      	adds	r0, #12
 800d842:	3202      	adds	r2, #2
 800d844:	0092      	lsls	r2, r2, #2
 800d846:	f7ff fa9e 	bl	800cd86 <memcpy>
 800d84a:	2201      	movs	r2, #1
 800d84c:	4631      	mov	r1, r6
 800d84e:	4658      	mov	r0, fp
 800d850:	f000 fb54 	bl	800defc <__lshift>
 800d854:	f10a 0301 	add.w	r3, sl, #1
 800d858:	462f      	mov	r7, r5
 800d85a:	4605      	mov	r5, r0
 800d85c:	9307      	str	r3, [sp, #28]
 800d85e:	9b00      	ldr	r3, [sp, #0]
 800d860:	4453      	add	r3, sl
 800d862:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d864:	9b02      	ldr	r3, [sp, #8]
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d86c:	9b07      	ldr	r3, [sp, #28]
 800d86e:	4621      	mov	r1, r4
 800d870:	4648      	mov	r0, r9
 800d872:	3b01      	subs	r3, #1
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	f7ff fa93 	bl	800cda0 <quorem>
 800d87a:	4639      	mov	r1, r7
 800d87c:	9002      	str	r0, [sp, #8]
 800d87e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d882:	4648      	mov	r0, r9
 800d884:	f000 fba6 	bl	800dfd4 <__mcmp>
 800d888:	462a      	mov	r2, r5
 800d88a:	9008      	str	r0, [sp, #32]
 800d88c:	4621      	mov	r1, r4
 800d88e:	4658      	mov	r0, fp
 800d890:	f000 fbbc 	bl	800e00c <__mdiff>
 800d894:	68c2      	ldr	r2, [r0, #12]
 800d896:	4606      	mov	r6, r0
 800d898:	bb02      	cbnz	r2, 800d8dc <_dtoa_r+0xa1c>
 800d89a:	4601      	mov	r1, r0
 800d89c:	4648      	mov	r0, r9
 800d89e:	f000 fb99 	bl	800dfd4 <__mcmp>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4658      	mov	r0, fp
 800d8a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8aa:	f000 f957 	bl	800db5c <_Bfree>
 800d8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8b2:	9e07      	ldr	r6, [sp, #28]
 800d8b4:	ea43 0102 	orr.w	r1, r3, r2
 800d8b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ba:	4319      	orrs	r1, r3
 800d8bc:	d110      	bne.n	800d8e0 <_dtoa_r+0xa20>
 800d8be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d8c2:	d029      	beq.n	800d918 <_dtoa_r+0xa58>
 800d8c4:	9b08      	ldr	r3, [sp, #32]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	dd02      	ble.n	800d8d0 <_dtoa_r+0xa10>
 800d8ca:	9b02      	ldr	r3, [sp, #8]
 800d8cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d8d0:	9b00      	ldr	r3, [sp, #0]
 800d8d2:	f883 8000 	strb.w	r8, [r3]
 800d8d6:	e63f      	b.n	800d558 <_dtoa_r+0x698>
 800d8d8:	4628      	mov	r0, r5
 800d8da:	e7bb      	b.n	800d854 <_dtoa_r+0x994>
 800d8dc:	2201      	movs	r2, #1
 800d8de:	e7e1      	b.n	800d8a4 <_dtoa_r+0x9e4>
 800d8e0:	9b08      	ldr	r3, [sp, #32]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	db04      	blt.n	800d8f0 <_dtoa_r+0xa30>
 800d8e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8e8:	430b      	orrs	r3, r1
 800d8ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8ec:	430b      	orrs	r3, r1
 800d8ee:	d120      	bne.n	800d932 <_dtoa_r+0xa72>
 800d8f0:	2a00      	cmp	r2, #0
 800d8f2:	dded      	ble.n	800d8d0 <_dtoa_r+0xa10>
 800d8f4:	4649      	mov	r1, r9
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	4658      	mov	r0, fp
 800d8fa:	f000 faff 	bl	800defc <__lshift>
 800d8fe:	4621      	mov	r1, r4
 800d900:	4681      	mov	r9, r0
 800d902:	f000 fb67 	bl	800dfd4 <__mcmp>
 800d906:	2800      	cmp	r0, #0
 800d908:	dc03      	bgt.n	800d912 <_dtoa_r+0xa52>
 800d90a:	d1e1      	bne.n	800d8d0 <_dtoa_r+0xa10>
 800d90c:	f018 0f01 	tst.w	r8, #1
 800d910:	d0de      	beq.n	800d8d0 <_dtoa_r+0xa10>
 800d912:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d916:	d1d8      	bne.n	800d8ca <_dtoa_r+0xa0a>
 800d918:	2339      	movs	r3, #57	@ 0x39
 800d91a:	9a00      	ldr	r2, [sp, #0]
 800d91c:	7013      	strb	r3, [r2, #0]
 800d91e:	4633      	mov	r3, r6
 800d920:	461e      	mov	r6, r3
 800d922:	3b01      	subs	r3, #1
 800d924:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d928:	2a39      	cmp	r2, #57	@ 0x39
 800d92a:	d052      	beq.n	800d9d2 <_dtoa_r+0xb12>
 800d92c:	3201      	adds	r2, #1
 800d92e:	701a      	strb	r2, [r3, #0]
 800d930:	e612      	b.n	800d558 <_dtoa_r+0x698>
 800d932:	2a00      	cmp	r2, #0
 800d934:	dd07      	ble.n	800d946 <_dtoa_r+0xa86>
 800d936:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d93a:	d0ed      	beq.n	800d918 <_dtoa_r+0xa58>
 800d93c:	f108 0301 	add.w	r3, r8, #1
 800d940:	9a00      	ldr	r2, [sp, #0]
 800d942:	7013      	strb	r3, [r2, #0]
 800d944:	e608      	b.n	800d558 <_dtoa_r+0x698>
 800d946:	9b07      	ldr	r3, [sp, #28]
 800d948:	9a07      	ldr	r2, [sp, #28]
 800d94a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d94e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d950:	4293      	cmp	r3, r2
 800d952:	d028      	beq.n	800d9a6 <_dtoa_r+0xae6>
 800d954:	4649      	mov	r1, r9
 800d956:	2300      	movs	r3, #0
 800d958:	220a      	movs	r2, #10
 800d95a:	4658      	mov	r0, fp
 800d95c:	f000 f920 	bl	800dba0 <__multadd>
 800d960:	42af      	cmp	r7, r5
 800d962:	4681      	mov	r9, r0
 800d964:	f04f 0300 	mov.w	r3, #0
 800d968:	f04f 020a 	mov.w	r2, #10
 800d96c:	4639      	mov	r1, r7
 800d96e:	4658      	mov	r0, fp
 800d970:	d107      	bne.n	800d982 <_dtoa_r+0xac2>
 800d972:	f000 f915 	bl	800dba0 <__multadd>
 800d976:	4607      	mov	r7, r0
 800d978:	4605      	mov	r5, r0
 800d97a:	9b07      	ldr	r3, [sp, #28]
 800d97c:	3301      	adds	r3, #1
 800d97e:	9307      	str	r3, [sp, #28]
 800d980:	e774      	b.n	800d86c <_dtoa_r+0x9ac>
 800d982:	f000 f90d 	bl	800dba0 <__multadd>
 800d986:	4629      	mov	r1, r5
 800d988:	4607      	mov	r7, r0
 800d98a:	2300      	movs	r3, #0
 800d98c:	220a      	movs	r2, #10
 800d98e:	4658      	mov	r0, fp
 800d990:	f000 f906 	bl	800dba0 <__multadd>
 800d994:	4605      	mov	r5, r0
 800d996:	e7f0      	b.n	800d97a <_dtoa_r+0xaba>
 800d998:	9b00      	ldr	r3, [sp, #0]
 800d99a:	2700      	movs	r7, #0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	bfcc      	ite	gt
 800d9a0:	461e      	movgt	r6, r3
 800d9a2:	2601      	movle	r6, #1
 800d9a4:	4456      	add	r6, sl
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	4658      	mov	r0, fp
 800d9ac:	f000 faa6 	bl	800defc <__lshift>
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	4681      	mov	r9, r0
 800d9b4:	f000 fb0e 	bl	800dfd4 <__mcmp>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	dcb0      	bgt.n	800d91e <_dtoa_r+0xa5e>
 800d9bc:	d102      	bne.n	800d9c4 <_dtoa_r+0xb04>
 800d9be:	f018 0f01 	tst.w	r8, #1
 800d9c2:	d1ac      	bne.n	800d91e <_dtoa_r+0xa5e>
 800d9c4:	4633      	mov	r3, r6
 800d9c6:	461e      	mov	r6, r3
 800d9c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9cc:	2a30      	cmp	r2, #48	@ 0x30
 800d9ce:	d0fa      	beq.n	800d9c6 <_dtoa_r+0xb06>
 800d9d0:	e5c2      	b.n	800d558 <_dtoa_r+0x698>
 800d9d2:	459a      	cmp	sl, r3
 800d9d4:	d1a4      	bne.n	800d920 <_dtoa_r+0xa60>
 800d9d6:	9b04      	ldr	r3, [sp, #16]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	9304      	str	r3, [sp, #16]
 800d9dc:	2331      	movs	r3, #49	@ 0x31
 800d9de:	f88a 3000 	strb.w	r3, [sl]
 800d9e2:	e5b9      	b.n	800d558 <_dtoa_r+0x698>
 800d9e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800da44 <_dtoa_r+0xb84>
 800d9ea:	b11b      	cbz	r3, 800d9f4 <_dtoa_r+0xb34>
 800d9ec:	f10a 0308 	add.w	r3, sl, #8
 800d9f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	4650      	mov	r0, sl
 800d9f6:	b019      	add	sp, #100	@ 0x64
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	f77f ae37 	ble.w	800d672 <_dtoa_r+0x7b2>
 800da04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da06:	930a      	str	r3, [sp, #40]	@ 0x28
 800da08:	2001      	movs	r0, #1
 800da0a:	e655      	b.n	800d6b8 <_dtoa_r+0x7f8>
 800da0c:	9b00      	ldr	r3, [sp, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f77f aed6 	ble.w	800d7c0 <_dtoa_r+0x900>
 800da14:	4656      	mov	r6, sl
 800da16:	4621      	mov	r1, r4
 800da18:	4648      	mov	r0, r9
 800da1a:	f7ff f9c1 	bl	800cda0 <quorem>
 800da1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da22:	9b00      	ldr	r3, [sp, #0]
 800da24:	f806 8b01 	strb.w	r8, [r6], #1
 800da28:	eba6 020a 	sub.w	r2, r6, sl
 800da2c:	4293      	cmp	r3, r2
 800da2e:	ddb3      	ble.n	800d998 <_dtoa_r+0xad8>
 800da30:	4649      	mov	r1, r9
 800da32:	2300      	movs	r3, #0
 800da34:	220a      	movs	r2, #10
 800da36:	4658      	mov	r0, fp
 800da38:	f000 f8b2 	bl	800dba0 <__multadd>
 800da3c:	4681      	mov	r9, r0
 800da3e:	e7ea      	b.n	800da16 <_dtoa_r+0xb56>
 800da40:	0800f2e4 	.word	0x0800f2e4
 800da44:	0800f268 	.word	0x0800f268

0800da48 <_free_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4605      	mov	r5, r0
 800da4c:	2900      	cmp	r1, #0
 800da4e:	d041      	beq.n	800dad4 <_free_r+0x8c>
 800da50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da54:	1f0c      	subs	r4, r1, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfb8      	it	lt
 800da5a:	18e4      	addlt	r4, r4, r3
 800da5c:	f7fe faa8 	bl	800bfb0 <__malloc_lock>
 800da60:	4a1d      	ldr	r2, [pc, #116]	@ (800dad8 <_free_r+0x90>)
 800da62:	6813      	ldr	r3, [r2, #0]
 800da64:	b933      	cbnz	r3, 800da74 <_free_r+0x2c>
 800da66:	6063      	str	r3, [r4, #4]
 800da68:	6014      	str	r4, [r2, #0]
 800da6a:	4628      	mov	r0, r5
 800da6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da70:	f7fe baa4 	b.w	800bfbc <__malloc_unlock>
 800da74:	42a3      	cmp	r3, r4
 800da76:	d908      	bls.n	800da8a <_free_r+0x42>
 800da78:	6820      	ldr	r0, [r4, #0]
 800da7a:	1821      	adds	r1, r4, r0
 800da7c:	428b      	cmp	r3, r1
 800da7e:	bf01      	itttt	eq
 800da80:	6819      	ldreq	r1, [r3, #0]
 800da82:	685b      	ldreq	r3, [r3, #4]
 800da84:	1809      	addeq	r1, r1, r0
 800da86:	6021      	streq	r1, [r4, #0]
 800da88:	e7ed      	b.n	800da66 <_free_r+0x1e>
 800da8a:	461a      	mov	r2, r3
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	b10b      	cbz	r3, 800da94 <_free_r+0x4c>
 800da90:	42a3      	cmp	r3, r4
 800da92:	d9fa      	bls.n	800da8a <_free_r+0x42>
 800da94:	6811      	ldr	r1, [r2, #0]
 800da96:	1850      	adds	r0, r2, r1
 800da98:	42a0      	cmp	r0, r4
 800da9a:	d10b      	bne.n	800dab4 <_free_r+0x6c>
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	4401      	add	r1, r0
 800daa0:	1850      	adds	r0, r2, r1
 800daa2:	6011      	str	r1, [r2, #0]
 800daa4:	4283      	cmp	r3, r0
 800daa6:	d1e0      	bne.n	800da6a <_free_r+0x22>
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	4408      	add	r0, r1
 800daae:	6053      	str	r3, [r2, #4]
 800dab0:	6010      	str	r0, [r2, #0]
 800dab2:	e7da      	b.n	800da6a <_free_r+0x22>
 800dab4:	d902      	bls.n	800dabc <_free_r+0x74>
 800dab6:	230c      	movs	r3, #12
 800dab8:	602b      	str	r3, [r5, #0]
 800daba:	e7d6      	b.n	800da6a <_free_r+0x22>
 800dabc:	6820      	ldr	r0, [r4, #0]
 800dabe:	1821      	adds	r1, r4, r0
 800dac0:	428b      	cmp	r3, r1
 800dac2:	bf02      	ittt	eq
 800dac4:	6819      	ldreq	r1, [r3, #0]
 800dac6:	685b      	ldreq	r3, [r3, #4]
 800dac8:	1809      	addeq	r1, r1, r0
 800daca:	6063      	str	r3, [r4, #4]
 800dacc:	bf08      	it	eq
 800dace:	6021      	streq	r1, [r4, #0]
 800dad0:	6054      	str	r4, [r2, #4]
 800dad2:	e7ca      	b.n	800da6a <_free_r+0x22>
 800dad4:	bd38      	pop	{r3, r4, r5, pc}
 800dad6:	bf00      	nop
 800dad8:	200011a4 	.word	0x200011a4

0800dadc <_Balloc>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	69c6      	ldr	r6, [r0, #28]
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	b976      	cbnz	r6, 800db04 <_Balloc+0x28>
 800dae6:	2010      	movs	r0, #16
 800dae8:	f7fe f9b8 	bl	800be5c <malloc>
 800daec:	4602      	mov	r2, r0
 800daee:	61e0      	str	r0, [r4, #28]
 800daf0:	b920      	cbnz	r0, 800dafc <_Balloc+0x20>
 800daf2:	4b18      	ldr	r3, [pc, #96]	@ (800db54 <_Balloc+0x78>)
 800daf4:	216b      	movs	r1, #107	@ 0x6b
 800daf6:	4818      	ldr	r0, [pc, #96]	@ (800db58 <_Balloc+0x7c>)
 800daf8:	f000 ff64 	bl	800e9c4 <__assert_func>
 800dafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db00:	6006      	str	r6, [r0, #0]
 800db02:	60c6      	str	r6, [r0, #12]
 800db04:	69e6      	ldr	r6, [r4, #28]
 800db06:	68f3      	ldr	r3, [r6, #12]
 800db08:	b183      	cbz	r3, 800db2c <_Balloc+0x50>
 800db0a:	69e3      	ldr	r3, [r4, #28]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db12:	b9b8      	cbnz	r0, 800db44 <_Balloc+0x68>
 800db14:	2101      	movs	r1, #1
 800db16:	4620      	mov	r0, r4
 800db18:	fa01 f605 	lsl.w	r6, r1, r5
 800db1c:	1d72      	adds	r2, r6, #5
 800db1e:	0092      	lsls	r2, r2, #2
 800db20:	f000 ff6e 	bl	800ea00 <_calloc_r>
 800db24:	b160      	cbz	r0, 800db40 <_Balloc+0x64>
 800db26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db2a:	e00e      	b.n	800db4a <_Balloc+0x6e>
 800db2c:	2221      	movs	r2, #33	@ 0x21
 800db2e:	2104      	movs	r1, #4
 800db30:	4620      	mov	r0, r4
 800db32:	f000 ff65 	bl	800ea00 <_calloc_r>
 800db36:	69e3      	ldr	r3, [r4, #28]
 800db38:	60f0      	str	r0, [r6, #12]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1e4      	bne.n	800db0a <_Balloc+0x2e>
 800db40:	2000      	movs	r0, #0
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	6802      	ldr	r2, [r0, #0]
 800db46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db4a:	2300      	movs	r3, #0
 800db4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db50:	e7f7      	b.n	800db42 <_Balloc+0x66>
 800db52:	bf00      	nop
 800db54:	0800f275 	.word	0x0800f275
 800db58:	0800f2f5 	.word	0x0800f2f5

0800db5c <_Bfree>:
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	69c6      	ldr	r6, [r0, #28]
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	b976      	cbnz	r6, 800db84 <_Bfree+0x28>
 800db66:	2010      	movs	r0, #16
 800db68:	f7fe f978 	bl	800be5c <malloc>
 800db6c:	4602      	mov	r2, r0
 800db6e:	61e8      	str	r0, [r5, #28]
 800db70:	b920      	cbnz	r0, 800db7c <_Bfree+0x20>
 800db72:	4b09      	ldr	r3, [pc, #36]	@ (800db98 <_Bfree+0x3c>)
 800db74:	218f      	movs	r1, #143	@ 0x8f
 800db76:	4809      	ldr	r0, [pc, #36]	@ (800db9c <_Bfree+0x40>)
 800db78:	f000 ff24 	bl	800e9c4 <__assert_func>
 800db7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db80:	6006      	str	r6, [r0, #0]
 800db82:	60c6      	str	r6, [r0, #12]
 800db84:	b13c      	cbz	r4, 800db96 <_Bfree+0x3a>
 800db86:	69eb      	ldr	r3, [r5, #28]
 800db88:	6862      	ldr	r2, [r4, #4]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db90:	6021      	str	r1, [r4, #0]
 800db92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	0800f275 	.word	0x0800f275
 800db9c:	0800f2f5 	.word	0x0800f2f5

0800dba0 <__multadd>:
 800dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba4:	f101 0c14 	add.w	ip, r1, #20
 800dba8:	4607      	mov	r7, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	461e      	mov	r6, r3
 800dbae:	690d      	ldr	r5, [r1, #16]
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	f8dc 3000 	ldr.w	r3, [ip]
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	b299      	uxth	r1, r3
 800dbba:	4285      	cmp	r5, r0
 800dbbc:	fb02 6101 	mla	r1, r2, r1, r6
 800dbc0:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbc4:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800dbc8:	b289      	uxth	r1, r1
 800dbca:	fb02 3306 	mla	r3, r2, r6, r3
 800dbce:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbd6:	f84c 1b04 	str.w	r1, [ip], #4
 800dbda:	dcea      	bgt.n	800dbb2 <__multadd+0x12>
 800dbdc:	b30e      	cbz	r6, 800dc22 <__multadd+0x82>
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	dc19      	bgt.n	800dc18 <__multadd+0x78>
 800dbe4:	6861      	ldr	r1, [r4, #4]
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	3101      	adds	r1, #1
 800dbea:	f7ff ff77 	bl	800dadc <_Balloc>
 800dbee:	4680      	mov	r8, r0
 800dbf0:	b928      	cbnz	r0, 800dbfe <__multadd+0x5e>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <__multadd+0x88>)
 800dbf6:	21ba      	movs	r1, #186	@ 0xba
 800dbf8:	480c      	ldr	r0, [pc, #48]	@ (800dc2c <__multadd+0x8c>)
 800dbfa:	f000 fee3 	bl	800e9c4 <__assert_func>
 800dbfe:	6922      	ldr	r2, [r4, #16]
 800dc00:	f104 010c 	add.w	r1, r4, #12
 800dc04:	300c      	adds	r0, #12
 800dc06:	3202      	adds	r2, #2
 800dc08:	0092      	lsls	r2, r2, #2
 800dc0a:	f7ff f8bc 	bl	800cd86 <memcpy>
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4644      	mov	r4, r8
 800dc12:	4638      	mov	r0, r7
 800dc14:	f7ff ffa2 	bl	800db5c <_Bfree>
 800dc18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	615e      	str	r6, [r3, #20]
 800dc20:	6125      	str	r5, [r4, #16]
 800dc22:	4620      	mov	r0, r4
 800dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc28:	0800f2e4 	.word	0x0800f2e4
 800dc2c:	0800f2f5 	.word	0x0800f2f5

0800dc30 <__hi0bits>:
 800dc30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc34:	4603      	mov	r3, r0
 800dc36:	bf36      	itet	cc
 800dc38:	0403      	lslcc	r3, r0, #16
 800dc3a:	2000      	movcs	r0, #0
 800dc3c:	2010      	movcc	r0, #16
 800dc3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc42:	bf3c      	itt	cc
 800dc44:	021b      	lslcc	r3, r3, #8
 800dc46:	3008      	addcc	r0, #8
 800dc48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc4c:	bf3c      	itt	cc
 800dc4e:	011b      	lslcc	r3, r3, #4
 800dc50:	3004      	addcc	r0, #4
 800dc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc56:	bf3c      	itt	cc
 800dc58:	009b      	lslcc	r3, r3, #2
 800dc5a:	3002      	addcc	r0, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	db05      	blt.n	800dc6c <__hi0bits+0x3c>
 800dc60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dc64:	f100 0001 	add.w	r0, r0, #1
 800dc68:	bf08      	it	eq
 800dc6a:	2020      	moveq	r0, #32
 800dc6c:	4770      	bx	lr

0800dc6e <__lo0bits>:
 800dc6e:	6803      	ldr	r3, [r0, #0]
 800dc70:	4602      	mov	r2, r0
 800dc72:	f013 0007 	ands.w	r0, r3, #7
 800dc76:	d00b      	beq.n	800dc90 <__lo0bits+0x22>
 800dc78:	07d9      	lsls	r1, r3, #31
 800dc7a:	d421      	bmi.n	800dcc0 <__lo0bits+0x52>
 800dc7c:	0798      	lsls	r0, r3, #30
 800dc7e:	bf47      	ittee	mi
 800dc80:	085b      	lsrmi	r3, r3, #1
 800dc82:	2001      	movmi	r0, #1
 800dc84:	089b      	lsrpl	r3, r3, #2
 800dc86:	2002      	movpl	r0, #2
 800dc88:	bf4c      	ite	mi
 800dc8a:	6013      	strmi	r3, [r2, #0]
 800dc8c:	6013      	strpl	r3, [r2, #0]
 800dc8e:	4770      	bx	lr
 800dc90:	b299      	uxth	r1, r3
 800dc92:	b909      	cbnz	r1, 800dc98 <__lo0bits+0x2a>
 800dc94:	0c1b      	lsrs	r3, r3, #16
 800dc96:	2010      	movs	r0, #16
 800dc98:	b2d9      	uxtb	r1, r3
 800dc9a:	b909      	cbnz	r1, 800dca0 <__lo0bits+0x32>
 800dc9c:	3008      	adds	r0, #8
 800dc9e:	0a1b      	lsrs	r3, r3, #8
 800dca0:	0719      	lsls	r1, r3, #28
 800dca2:	bf04      	itt	eq
 800dca4:	091b      	lsreq	r3, r3, #4
 800dca6:	3004      	addeq	r0, #4
 800dca8:	0799      	lsls	r1, r3, #30
 800dcaa:	bf04      	itt	eq
 800dcac:	089b      	lsreq	r3, r3, #2
 800dcae:	3002      	addeq	r0, #2
 800dcb0:	07d9      	lsls	r1, r3, #31
 800dcb2:	d403      	bmi.n	800dcbc <__lo0bits+0x4e>
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	f100 0001 	add.w	r0, r0, #1
 800dcba:	d003      	beq.n	800dcc4 <__lo0bits+0x56>
 800dcbc:	6013      	str	r3, [r2, #0]
 800dcbe:	4770      	bx	lr
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	4770      	bx	lr
 800dcc4:	2020      	movs	r0, #32
 800dcc6:	4770      	bx	lr

0800dcc8 <__i2b>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	2101      	movs	r1, #1
 800dcce:	f7ff ff05 	bl	800dadc <_Balloc>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	b928      	cbnz	r0, 800dce2 <__i2b+0x1a>
 800dcd6:	4b05      	ldr	r3, [pc, #20]	@ (800dcec <__i2b+0x24>)
 800dcd8:	f240 1145 	movw	r1, #325	@ 0x145
 800dcdc:	4804      	ldr	r0, [pc, #16]	@ (800dcf0 <__i2b+0x28>)
 800dcde:	f000 fe71 	bl	800e9c4 <__assert_func>
 800dce2:	2301      	movs	r3, #1
 800dce4:	6144      	str	r4, [r0, #20]
 800dce6:	6103      	str	r3, [r0, #16]
 800dce8:	bd10      	pop	{r4, pc}
 800dcea:	bf00      	nop
 800dcec:	0800f2e4 	.word	0x0800f2e4
 800dcf0:	0800f2f5 	.word	0x0800f2f5

0800dcf4 <__multiply>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	4614      	mov	r4, r2
 800dcfa:	690a      	ldr	r2, [r1, #16]
 800dcfc:	460f      	mov	r7, r1
 800dcfe:	b085      	sub	sp, #20
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	bfa2      	ittt	ge
 800dd06:	4623      	movge	r3, r4
 800dd08:	460c      	movge	r4, r1
 800dd0a:	461f      	movge	r7, r3
 800dd0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd10:	68a3      	ldr	r3, [r4, #8]
 800dd12:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd16:	6861      	ldr	r1, [r4, #4]
 800dd18:	eb0a 0609 	add.w	r6, sl, r9
 800dd1c:	42b3      	cmp	r3, r6
 800dd1e:	bfb8      	it	lt
 800dd20:	3101      	addlt	r1, #1
 800dd22:	f7ff fedb 	bl	800dadc <_Balloc>
 800dd26:	b930      	cbnz	r0, 800dd36 <__multiply+0x42>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	4b45      	ldr	r3, [pc, #276]	@ (800de40 <__multiply+0x14c>)
 800dd2c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd30:	4844      	ldr	r0, [pc, #272]	@ (800de44 <__multiply+0x150>)
 800dd32:	f000 fe47 	bl	800e9c4 <__assert_func>
 800dd36:	f100 0514 	add.w	r5, r0, #20
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd40:	462b      	mov	r3, r5
 800dd42:	4543      	cmp	r3, r8
 800dd44:	d321      	bcc.n	800dd8a <__multiply+0x96>
 800dd46:	f107 0114 	add.w	r1, r7, #20
 800dd4a:	f104 0214 	add.w	r2, r4, #20
 800dd4e:	f104 0715 	add.w	r7, r4, #21
 800dd52:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd56:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	1b13      	subs	r3, r2, r4
 800dd5e:	3b15      	subs	r3, #21
 800dd60:	f023 0303 	bic.w	r3, r3, #3
 800dd64:	3304      	adds	r3, #4
 800dd66:	42ba      	cmp	r2, r7
 800dd68:	bf38      	it	cc
 800dd6a:	2304      	movcc	r3, #4
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	9b02      	ldr	r3, [sp, #8]
 800dd70:	9103      	str	r1, [sp, #12]
 800dd72:	428b      	cmp	r3, r1
 800dd74:	d80c      	bhi.n	800dd90 <__multiply+0x9c>
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	dd03      	ble.n	800dd82 <__multiply+0x8e>
 800dd7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d05b      	beq.n	800de3a <__multiply+0x146>
 800dd82:	6106      	str	r6, [r0, #16]
 800dd84:	b005      	add	sp, #20
 800dd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd8a:	f843 2b04 	str.w	r2, [r3], #4
 800dd8e:	e7d8      	b.n	800dd42 <__multiply+0x4e>
 800dd90:	f8b1 a000 	ldrh.w	sl, [r1]
 800dd94:	f1ba 0f00 	cmp.w	sl, #0
 800dd98:	d024      	beq.n	800dde4 <__multiply+0xf0>
 800dd9a:	f104 0e14 	add.w	lr, r4, #20
 800dd9e:	46a9      	mov	r9, r5
 800dda0:	f04f 0c00 	mov.w	ip, #0
 800dda4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dda8:	f8d9 3000 	ldr.w	r3, [r9]
 800ddac:	fa1f fb87 	uxth.w	fp, r7
 800ddb0:	4572      	cmp	r2, lr
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ddbc:	f8d9 7000 	ldr.w	r7, [r9]
 800ddc0:	4463      	add	r3, ip
 800ddc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ddc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800ddca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ddd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ddd8:	f849 3b04 	str.w	r3, [r9], #4
 800dddc:	d8e2      	bhi.n	800dda4 <__multiply+0xb0>
 800ddde:	9b01      	ldr	r3, [sp, #4]
 800dde0:	f845 c003 	str.w	ip, [r5, r3]
 800dde4:	9b03      	ldr	r3, [sp, #12]
 800dde6:	3104      	adds	r1, #4
 800dde8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ddec:	f1b9 0f00 	cmp.w	r9, #0
 800ddf0:	d021      	beq.n	800de36 <__multiply+0x142>
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	f104 0c14 	add.w	ip, r4, #20
 800ddf8:	46ae      	mov	lr, r5
 800ddfa:	f04f 0a00 	mov.w	sl, #0
 800ddfe:	f8bc b000 	ldrh.w	fp, [ip]
 800de02:	b29b      	uxth	r3, r3
 800de04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de08:	fb09 770b 	mla	r7, r9, fp, r7
 800de0c:	4457      	add	r7, sl
 800de0e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de12:	f84e 3b04 	str.w	r3, [lr], #4
 800de16:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de1e:	f8be 3000 	ldrh.w	r3, [lr]
 800de22:	4562      	cmp	r2, ip
 800de24:	fb09 330a 	mla	r3, r9, sl, r3
 800de28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de30:	d8e5      	bhi.n	800ddfe <__multiply+0x10a>
 800de32:	9f01      	ldr	r7, [sp, #4]
 800de34:	51eb      	str	r3, [r5, r7]
 800de36:	3504      	adds	r5, #4
 800de38:	e799      	b.n	800dd6e <__multiply+0x7a>
 800de3a:	3e01      	subs	r6, #1
 800de3c:	e79b      	b.n	800dd76 <__multiply+0x82>
 800de3e:	bf00      	nop
 800de40:	0800f2e4 	.word	0x0800f2e4
 800de44:	0800f2f5 	.word	0x0800f2f5

0800de48 <__pow5mult>:
 800de48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de4c:	4615      	mov	r5, r2
 800de4e:	f012 0203 	ands.w	r2, r2, #3
 800de52:	4607      	mov	r7, r0
 800de54:	460e      	mov	r6, r1
 800de56:	d007      	beq.n	800de68 <__pow5mult+0x20>
 800de58:	3a01      	subs	r2, #1
 800de5a:	4c25      	ldr	r4, [pc, #148]	@ (800def0 <__pow5mult+0xa8>)
 800de5c:	2300      	movs	r3, #0
 800de5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de62:	f7ff fe9d 	bl	800dba0 <__multadd>
 800de66:	4606      	mov	r6, r0
 800de68:	10ad      	asrs	r5, r5, #2
 800de6a:	d03d      	beq.n	800dee8 <__pow5mult+0xa0>
 800de6c:	69fc      	ldr	r4, [r7, #28]
 800de6e:	b97c      	cbnz	r4, 800de90 <__pow5mult+0x48>
 800de70:	2010      	movs	r0, #16
 800de72:	f7fd fff3 	bl	800be5c <malloc>
 800de76:	4602      	mov	r2, r0
 800de78:	61f8      	str	r0, [r7, #28]
 800de7a:	b928      	cbnz	r0, 800de88 <__pow5mult+0x40>
 800de7c:	4b1d      	ldr	r3, [pc, #116]	@ (800def4 <__pow5mult+0xac>)
 800de7e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800de82:	481d      	ldr	r0, [pc, #116]	@ (800def8 <__pow5mult+0xb0>)
 800de84:	f000 fd9e 	bl	800e9c4 <__assert_func>
 800de88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de8c:	6004      	str	r4, [r0, #0]
 800de8e:	60c4      	str	r4, [r0, #12]
 800de90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800de94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de98:	b94c      	cbnz	r4, 800deae <__pow5mult+0x66>
 800de9a:	f240 2171 	movw	r1, #625	@ 0x271
 800de9e:	4638      	mov	r0, r7
 800dea0:	f7ff ff12 	bl	800dcc8 <__i2b>
 800dea4:	2300      	movs	r3, #0
 800dea6:	4604      	mov	r4, r0
 800dea8:	f8c8 0008 	str.w	r0, [r8, #8]
 800deac:	6003      	str	r3, [r0, #0]
 800deae:	f04f 0900 	mov.w	r9, #0
 800deb2:	07eb      	lsls	r3, r5, #31
 800deb4:	d50a      	bpl.n	800decc <__pow5mult+0x84>
 800deb6:	4631      	mov	r1, r6
 800deb8:	4622      	mov	r2, r4
 800deba:	4638      	mov	r0, r7
 800debc:	f7ff ff1a 	bl	800dcf4 <__multiply>
 800dec0:	4680      	mov	r8, r0
 800dec2:	4631      	mov	r1, r6
 800dec4:	4638      	mov	r0, r7
 800dec6:	4646      	mov	r6, r8
 800dec8:	f7ff fe48 	bl	800db5c <_Bfree>
 800decc:	106d      	asrs	r5, r5, #1
 800dece:	d00b      	beq.n	800dee8 <__pow5mult+0xa0>
 800ded0:	6820      	ldr	r0, [r4, #0]
 800ded2:	b938      	cbnz	r0, 800dee4 <__pow5mult+0x9c>
 800ded4:	4622      	mov	r2, r4
 800ded6:	4621      	mov	r1, r4
 800ded8:	4638      	mov	r0, r7
 800deda:	f7ff ff0b 	bl	800dcf4 <__multiply>
 800dede:	6020      	str	r0, [r4, #0]
 800dee0:	f8c0 9000 	str.w	r9, [r0]
 800dee4:	4604      	mov	r4, r0
 800dee6:	e7e4      	b.n	800deb2 <__pow5mult+0x6a>
 800dee8:	4630      	mov	r0, r6
 800deea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deee:	bf00      	nop
 800def0:	0800f350 	.word	0x0800f350
 800def4:	0800f275 	.word	0x0800f275
 800def8:	0800f2f5 	.word	0x0800f2f5

0800defc <__lshift>:
 800defc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df00:	460c      	mov	r4, r1
 800df02:	4607      	mov	r7, r0
 800df04:	4691      	mov	r9, r2
 800df06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df0a:	6923      	ldr	r3, [r4, #16]
 800df0c:	6849      	ldr	r1, [r1, #4]
 800df0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df12:	68a3      	ldr	r3, [r4, #8]
 800df14:	f108 0601 	add.w	r6, r8, #1
 800df18:	42b3      	cmp	r3, r6
 800df1a:	db0b      	blt.n	800df34 <__lshift+0x38>
 800df1c:	4638      	mov	r0, r7
 800df1e:	f7ff fddd 	bl	800dadc <_Balloc>
 800df22:	4605      	mov	r5, r0
 800df24:	b948      	cbnz	r0, 800df3a <__lshift+0x3e>
 800df26:	4602      	mov	r2, r0
 800df28:	4b28      	ldr	r3, [pc, #160]	@ (800dfcc <__lshift+0xd0>)
 800df2a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df2e:	4828      	ldr	r0, [pc, #160]	@ (800dfd0 <__lshift+0xd4>)
 800df30:	f000 fd48 	bl	800e9c4 <__assert_func>
 800df34:	3101      	adds	r1, #1
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	e7ee      	b.n	800df18 <__lshift+0x1c>
 800df3a:	2300      	movs	r3, #0
 800df3c:	f100 0114 	add.w	r1, r0, #20
 800df40:	f100 0210 	add.w	r2, r0, #16
 800df44:	4618      	mov	r0, r3
 800df46:	4553      	cmp	r3, sl
 800df48:	db33      	blt.n	800dfb2 <__lshift+0xb6>
 800df4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df4e:	f104 0314 	add.w	r3, r4, #20
 800df52:	6920      	ldr	r0, [r4, #16]
 800df54:	f019 091f 	ands.w	r9, r9, #31
 800df58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df60:	d02b      	beq.n	800dfba <__lshift+0xbe>
 800df62:	f1c9 0e20 	rsb	lr, r9, #32
 800df66:	468a      	mov	sl, r1
 800df68:	2200      	movs	r2, #0
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	fa00 f009 	lsl.w	r0, r0, r9
 800df70:	4310      	orrs	r0, r2
 800df72:	f84a 0b04 	str.w	r0, [sl], #4
 800df76:	f853 2b04 	ldr.w	r2, [r3], #4
 800df7a:	459c      	cmp	ip, r3
 800df7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800df80:	d8f3      	bhi.n	800df6a <__lshift+0x6e>
 800df82:	ebac 0304 	sub.w	r3, ip, r4
 800df86:	f104 0015 	add.w	r0, r4, #21
 800df8a:	3b15      	subs	r3, #21
 800df8c:	f023 0303 	bic.w	r3, r3, #3
 800df90:	3304      	adds	r3, #4
 800df92:	4584      	cmp	ip, r0
 800df94:	bf38      	it	cc
 800df96:	2304      	movcc	r3, #4
 800df98:	50ca      	str	r2, [r1, r3]
 800df9a:	b10a      	cbz	r2, 800dfa0 <__lshift+0xa4>
 800df9c:	f108 0602 	add.w	r6, r8, #2
 800dfa0:	3e01      	subs	r6, #1
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	612e      	str	r6, [r5, #16]
 800dfa8:	f7ff fdd8 	bl	800db5c <_Bfree>
 800dfac:	4628      	mov	r0, r5
 800dfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfb8:	e7c5      	b.n	800df46 <__lshift+0x4a>
 800dfba:	3904      	subs	r1, #4
 800dfbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfc0:	459c      	cmp	ip, r3
 800dfc2:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfc6:	d8f9      	bhi.n	800dfbc <__lshift+0xc0>
 800dfc8:	e7ea      	b.n	800dfa0 <__lshift+0xa4>
 800dfca:	bf00      	nop
 800dfcc:	0800f2e4 	.word	0x0800f2e4
 800dfd0:	0800f2f5 	.word	0x0800f2f5

0800dfd4 <__mcmp>:
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	690a      	ldr	r2, [r1, #16]
 800dfd8:	6900      	ldr	r0, [r0, #16]
 800dfda:	1a80      	subs	r0, r0, r2
 800dfdc:	b530      	push	{r4, r5, lr}
 800dfde:	d10e      	bne.n	800dffe <__mcmp+0x2a>
 800dfe0:	3314      	adds	r3, #20
 800dfe2:	3114      	adds	r1, #20
 800dfe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dfe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dfec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dff4:	4295      	cmp	r5, r2
 800dff6:	d003      	beq.n	800e000 <__mcmp+0x2c>
 800dff8:	d205      	bcs.n	800e006 <__mcmp+0x32>
 800dffa:	f04f 30ff 	mov.w	r0, #4294967295
 800dffe:	bd30      	pop	{r4, r5, pc}
 800e000:	42a3      	cmp	r3, r4
 800e002:	d3f3      	bcc.n	800dfec <__mcmp+0x18>
 800e004:	e7fb      	b.n	800dffe <__mcmp+0x2a>
 800e006:	2001      	movs	r0, #1
 800e008:	e7f9      	b.n	800dffe <__mcmp+0x2a>
	...

0800e00c <__mdiff>:
 800e00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	4689      	mov	r9, r1
 800e012:	4606      	mov	r6, r0
 800e014:	4611      	mov	r1, r2
 800e016:	4614      	mov	r4, r2
 800e018:	4648      	mov	r0, r9
 800e01a:	f7ff ffdb 	bl	800dfd4 <__mcmp>
 800e01e:	1e05      	subs	r5, r0, #0
 800e020:	d112      	bne.n	800e048 <__mdiff+0x3c>
 800e022:	4629      	mov	r1, r5
 800e024:	4630      	mov	r0, r6
 800e026:	f7ff fd59 	bl	800dadc <_Balloc>
 800e02a:	4602      	mov	r2, r0
 800e02c:	b928      	cbnz	r0, 800e03a <__mdiff+0x2e>
 800e02e:	4b41      	ldr	r3, [pc, #260]	@ (800e134 <__mdiff+0x128>)
 800e030:	f240 2137 	movw	r1, #567	@ 0x237
 800e034:	4840      	ldr	r0, [pc, #256]	@ (800e138 <__mdiff+0x12c>)
 800e036:	f000 fcc5 	bl	800e9c4 <__assert_func>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e040:	4610      	mov	r0, r2
 800e042:	b003      	add	sp, #12
 800e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e048:	bfbc      	itt	lt
 800e04a:	464b      	movlt	r3, r9
 800e04c:	46a1      	movlt	r9, r4
 800e04e:	4630      	mov	r0, r6
 800e050:	bfb8      	it	lt
 800e052:	2501      	movlt	r5, #1
 800e054:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e058:	bfb4      	ite	lt
 800e05a:	461c      	movlt	r4, r3
 800e05c:	2500      	movge	r5, #0
 800e05e:	f7ff fd3d 	bl	800dadc <_Balloc>
 800e062:	4602      	mov	r2, r0
 800e064:	b918      	cbnz	r0, 800e06e <__mdiff+0x62>
 800e066:	4b33      	ldr	r3, [pc, #204]	@ (800e134 <__mdiff+0x128>)
 800e068:	f240 2145 	movw	r1, #581	@ 0x245
 800e06c:	e7e2      	b.n	800e034 <__mdiff+0x28>
 800e06e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e072:	f104 0e14 	add.w	lr, r4, #20
 800e076:	6926      	ldr	r6, [r4, #16]
 800e078:	f100 0b14 	add.w	fp, r0, #20
 800e07c:	60c5      	str	r5, [r0, #12]
 800e07e:	f109 0514 	add.w	r5, r9, #20
 800e082:	f109 0310 	add.w	r3, r9, #16
 800e086:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e08a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e08e:	46d9      	mov	r9, fp
 800e090:	f04f 0c00 	mov.w	ip, #0
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	9b01      	ldr	r3, [sp, #4]
 800e098:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e09c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0a0:	4576      	cmp	r6, lr
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	fa1f f38a 	uxth.w	r3, sl
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	b283      	uxth	r3, r0
 800e0ac:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800e0b0:	eba1 0303 	sub.w	r3, r1, r3
 800e0b4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0b8:	4463      	add	r3, ip
 800e0ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e0c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0c8:	f849 3b04 	str.w	r3, [r9], #4
 800e0cc:	d8e3      	bhi.n	800e096 <__mdiff+0x8a>
 800e0ce:	1b33      	subs	r3, r6, r4
 800e0d0:	3415      	adds	r4, #21
 800e0d2:	3b15      	subs	r3, #21
 800e0d4:	f023 0303 	bic.w	r3, r3, #3
 800e0d8:	3304      	adds	r3, #4
 800e0da:	42a6      	cmp	r6, r4
 800e0dc:	bf38      	it	cc
 800e0de:	2304      	movcc	r3, #4
 800e0e0:	441d      	add	r5, r3
 800e0e2:	445b      	add	r3, fp
 800e0e4:	462c      	mov	r4, r5
 800e0e6:	461e      	mov	r6, r3
 800e0e8:	4544      	cmp	r4, r8
 800e0ea:	d30e      	bcc.n	800e10a <__mdiff+0xfe>
 800e0ec:	f108 0103 	add.w	r1, r8, #3
 800e0f0:	1b49      	subs	r1, r1, r5
 800e0f2:	3d03      	subs	r5, #3
 800e0f4:	f021 0103 	bic.w	r1, r1, #3
 800e0f8:	45a8      	cmp	r8, r5
 800e0fa:	bf38      	it	cc
 800e0fc:	2100      	movcc	r1, #0
 800e0fe:	440b      	add	r3, r1
 800e100:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e104:	b199      	cbz	r1, 800e12e <__mdiff+0x122>
 800e106:	6117      	str	r7, [r2, #16]
 800e108:	e79a      	b.n	800e040 <__mdiff+0x34>
 800e10a:	f854 1b04 	ldr.w	r1, [r4], #4
 800e10e:	46e6      	mov	lr, ip
 800e110:	fa1f fc81 	uxth.w	ip, r1
 800e114:	0c08      	lsrs	r0, r1, #16
 800e116:	4471      	add	r1, lr
 800e118:	44f4      	add	ip, lr
 800e11a:	b289      	uxth	r1, r1
 800e11c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e120:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e124:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e128:	f846 1b04 	str.w	r1, [r6], #4
 800e12c:	e7dc      	b.n	800e0e8 <__mdiff+0xdc>
 800e12e:	3f01      	subs	r7, #1
 800e130:	e7e6      	b.n	800e100 <__mdiff+0xf4>
 800e132:	bf00      	nop
 800e134:	0800f2e4 	.word	0x0800f2e4
 800e138:	0800f2f5 	.word	0x0800f2f5

0800e13c <__d2b>:
 800e13c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e140:	460f      	mov	r7, r1
 800e142:	2101      	movs	r1, #1
 800e144:	4616      	mov	r6, r2
 800e146:	ec59 8b10 	vmov	r8, r9, d0
 800e14a:	f7ff fcc7 	bl	800dadc <_Balloc>
 800e14e:	4604      	mov	r4, r0
 800e150:	b930      	cbnz	r0, 800e160 <__d2b+0x24>
 800e152:	4602      	mov	r2, r0
 800e154:	4b23      	ldr	r3, [pc, #140]	@ (800e1e4 <__d2b+0xa8>)
 800e156:	f240 310f 	movw	r1, #783	@ 0x30f
 800e15a:	4823      	ldr	r0, [pc, #140]	@ (800e1e8 <__d2b+0xac>)
 800e15c:	f000 fc32 	bl	800e9c4 <__assert_func>
 800e160:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e168:	b10d      	cbz	r5, 800e16e <__d2b+0x32>
 800e16a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e16e:	9301      	str	r3, [sp, #4]
 800e170:	f1b8 0300 	subs.w	r3, r8, #0
 800e174:	d023      	beq.n	800e1be <__d2b+0x82>
 800e176:	4668      	mov	r0, sp
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	f7ff fd78 	bl	800dc6e <__lo0bits>
 800e17e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e182:	b1d0      	cbz	r0, 800e1ba <__d2b+0x7e>
 800e184:	f1c0 0320 	rsb	r3, r0, #32
 800e188:	fa02 f303 	lsl.w	r3, r2, r3
 800e18c:	40c2      	lsrs	r2, r0
 800e18e:	430b      	orrs	r3, r1
 800e190:	9201      	str	r2, [sp, #4]
 800e192:	6163      	str	r3, [r4, #20]
 800e194:	9b01      	ldr	r3, [sp, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	61a3      	str	r3, [r4, #24]
 800e19a:	bf0c      	ite	eq
 800e19c:	2201      	moveq	r2, #1
 800e19e:	2202      	movne	r2, #2
 800e1a0:	6122      	str	r2, [r4, #16]
 800e1a2:	b1a5      	cbz	r5, 800e1ce <__d2b+0x92>
 800e1a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1a8:	4405      	add	r5, r0
 800e1aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1ae:	603d      	str	r5, [r7, #0]
 800e1b0:	6030      	str	r0, [r6, #0]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	b003      	add	sp, #12
 800e1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ba:	6161      	str	r1, [r4, #20]
 800e1bc:	e7ea      	b.n	800e194 <__d2b+0x58>
 800e1be:	a801      	add	r0, sp, #4
 800e1c0:	f7ff fd55 	bl	800dc6e <__lo0bits>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	3020      	adds	r0, #32
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	6163      	str	r3, [r4, #20]
 800e1cc:	e7e8      	b.n	800e1a0 <__d2b+0x64>
 800e1ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1d6:	6038      	str	r0, [r7, #0]
 800e1d8:	6918      	ldr	r0, [r3, #16]
 800e1da:	f7ff fd29 	bl	800dc30 <__hi0bits>
 800e1de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1e2:	e7e5      	b.n	800e1b0 <__d2b+0x74>
 800e1e4:	0800f2e4 	.word	0x0800f2e4
 800e1e8:	0800f2f5 	.word	0x0800f2f5

0800e1ec <_malloc_usable_size_r>:
 800e1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f0:	1f18      	subs	r0, r3, #4
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	bfbc      	itt	lt
 800e1f6:	580b      	ldrlt	r3, [r1, r0]
 800e1f8:	18c0      	addlt	r0, r0, r3
 800e1fa:	4770      	bx	lr

0800e1fc <__ssputs_r>:
 800e1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e200:	461f      	mov	r7, r3
 800e202:	688e      	ldr	r6, [r1, #8]
 800e204:	4682      	mov	sl, r0
 800e206:	460c      	mov	r4, r1
 800e208:	42be      	cmp	r6, r7
 800e20a:	4690      	mov	r8, r2
 800e20c:	680b      	ldr	r3, [r1, #0]
 800e20e:	d82d      	bhi.n	800e26c <__ssputs_r+0x70>
 800e210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e218:	d026      	beq.n	800e268 <__ssputs_r+0x6c>
 800e21a:	6965      	ldr	r5, [r4, #20]
 800e21c:	6909      	ldr	r1, [r1, #16]
 800e21e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e222:	eba3 0901 	sub.w	r9, r3, r1
 800e226:	1c7b      	adds	r3, r7, #1
 800e228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e22c:	444b      	add	r3, r9
 800e22e:	106d      	asrs	r5, r5, #1
 800e230:	429d      	cmp	r5, r3
 800e232:	bf38      	it	cc
 800e234:	461d      	movcc	r5, r3
 800e236:	0553      	lsls	r3, r2, #21
 800e238:	d527      	bpl.n	800e28a <__ssputs_r+0x8e>
 800e23a:	4629      	mov	r1, r5
 800e23c:	f7fd fe38 	bl	800beb0 <_malloc_r>
 800e240:	4606      	mov	r6, r0
 800e242:	b360      	cbz	r0, 800e29e <__ssputs_r+0xa2>
 800e244:	464a      	mov	r2, r9
 800e246:	6921      	ldr	r1, [r4, #16]
 800e248:	f7fe fd9d 	bl	800cd86 <memcpy>
 800e24c:	89a3      	ldrh	r3, [r4, #12]
 800e24e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e256:	81a3      	strh	r3, [r4, #12]
 800e258:	6126      	str	r6, [r4, #16]
 800e25a:	444e      	add	r6, r9
 800e25c:	6165      	str	r5, [r4, #20]
 800e25e:	eba5 0509 	sub.w	r5, r5, r9
 800e262:	6026      	str	r6, [r4, #0]
 800e264:	463e      	mov	r6, r7
 800e266:	60a5      	str	r5, [r4, #8]
 800e268:	42be      	cmp	r6, r7
 800e26a:	d900      	bls.n	800e26e <__ssputs_r+0x72>
 800e26c:	463e      	mov	r6, r7
 800e26e:	4632      	mov	r2, r6
 800e270:	4641      	mov	r1, r8
 800e272:	6820      	ldr	r0, [r4, #0]
 800e274:	f000 fb69 	bl	800e94a <memmove>
 800e278:	68a3      	ldr	r3, [r4, #8]
 800e27a:	2000      	movs	r0, #0
 800e27c:	1b9b      	subs	r3, r3, r6
 800e27e:	60a3      	str	r3, [r4, #8]
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	4433      	add	r3, r6
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e28a:	462a      	mov	r2, r5
 800e28c:	f7fd fe9c 	bl	800bfc8 <_realloc_r>
 800e290:	4606      	mov	r6, r0
 800e292:	2800      	cmp	r0, #0
 800e294:	d1e0      	bne.n	800e258 <__ssputs_r+0x5c>
 800e296:	6921      	ldr	r1, [r4, #16]
 800e298:	4650      	mov	r0, sl
 800e29a:	f7ff fbd5 	bl	800da48 <_free_r>
 800e29e:	230c      	movs	r3, #12
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	f8ca 3000 	str.w	r3, [sl]
 800e2a8:	89a3      	ldrh	r3, [r4, #12]
 800e2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ae:	81a3      	strh	r3, [r4, #12]
 800e2b0:	e7e9      	b.n	800e286 <__ssputs_r+0x8a>
	...

0800e2b4 <_svfiprintf_r>:
 800e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	4698      	mov	r8, r3
 800e2ba:	898b      	ldrh	r3, [r1, #12]
 800e2bc:	b09d      	sub	sp, #116	@ 0x74
 800e2be:	4607      	mov	r7, r0
 800e2c0:	061b      	lsls	r3, r3, #24
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	4614      	mov	r4, r2
 800e2c6:	d510      	bpl.n	800e2ea <_svfiprintf_r+0x36>
 800e2c8:	690b      	ldr	r3, [r1, #16]
 800e2ca:	b973      	cbnz	r3, 800e2ea <_svfiprintf_r+0x36>
 800e2cc:	2140      	movs	r1, #64	@ 0x40
 800e2ce:	f7fd fdef 	bl	800beb0 <_malloc_r>
 800e2d2:	6028      	str	r0, [r5, #0]
 800e2d4:	6128      	str	r0, [r5, #16]
 800e2d6:	b930      	cbnz	r0, 800e2e6 <_svfiprintf_r+0x32>
 800e2d8:	230c      	movs	r3, #12
 800e2da:	603b      	str	r3, [r7, #0]
 800e2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e0:	b01d      	add	sp, #116	@ 0x74
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	2340      	movs	r3, #64	@ 0x40
 800e2e8:	616b      	str	r3, [r5, #20]
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2f0:	f04f 0901 	mov.w	r9, #1
 800e2f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e498 <_svfiprintf_r+0x1e4>
 800e2f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2fa:	2320      	movs	r3, #32
 800e2fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e300:	2330      	movs	r3, #48	@ 0x30
 800e302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e306:	4623      	mov	r3, r4
 800e308:	469a      	mov	sl, r3
 800e30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e30e:	b10a      	cbz	r2, 800e314 <_svfiprintf_r+0x60>
 800e310:	2a25      	cmp	r2, #37	@ 0x25
 800e312:	d1f9      	bne.n	800e308 <_svfiprintf_r+0x54>
 800e314:	ebba 0b04 	subs.w	fp, sl, r4
 800e318:	d00b      	beq.n	800e332 <_svfiprintf_r+0x7e>
 800e31a:	465b      	mov	r3, fp
 800e31c:	4622      	mov	r2, r4
 800e31e:	4629      	mov	r1, r5
 800e320:	4638      	mov	r0, r7
 800e322:	f7ff ff6b 	bl	800e1fc <__ssputs_r>
 800e326:	3001      	adds	r0, #1
 800e328:	f000 80a7 	beq.w	800e47a <_svfiprintf_r+0x1c6>
 800e32c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e32e:	445a      	add	r2, fp
 800e330:	9209      	str	r2, [sp, #36]	@ 0x24
 800e332:	f89a 3000 	ldrb.w	r3, [sl]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 809f 	beq.w	800e47a <_svfiprintf_r+0x1c6>
 800e33c:	2300      	movs	r3, #0
 800e33e:	f04f 32ff 	mov.w	r2, #4294967295
 800e342:	f10a 0a01 	add.w	sl, sl, #1
 800e346:	9304      	str	r3, [sp, #16]
 800e348:	9307      	str	r3, [sp, #28]
 800e34a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e34e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e354:	4654      	mov	r4, sl
 800e356:	2205      	movs	r2, #5
 800e358:	484f      	ldr	r0, [pc, #316]	@ (800e498 <_svfiprintf_r+0x1e4>)
 800e35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e35e:	f7fe fd04 	bl	800cd6a <memchr>
 800e362:	9a04      	ldr	r2, [sp, #16]
 800e364:	b9d8      	cbnz	r0, 800e39e <_svfiprintf_r+0xea>
 800e366:	06d0      	lsls	r0, r2, #27
 800e368:	bf44      	itt	mi
 800e36a:	2320      	movmi	r3, #32
 800e36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e370:	0711      	lsls	r1, r2, #28
 800e372:	bf44      	itt	mi
 800e374:	232b      	movmi	r3, #43	@ 0x2b
 800e376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e37a:	f89a 3000 	ldrb.w	r3, [sl]
 800e37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e380:	d015      	beq.n	800e3ae <_svfiprintf_r+0xfa>
 800e382:	9a07      	ldr	r2, [sp, #28]
 800e384:	4654      	mov	r4, sl
 800e386:	2000      	movs	r0, #0
 800e388:	f04f 0c0a 	mov.w	ip, #10
 800e38c:	4621      	mov	r1, r4
 800e38e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e392:	3b30      	subs	r3, #48	@ 0x30
 800e394:	2b09      	cmp	r3, #9
 800e396:	d94b      	bls.n	800e430 <_svfiprintf_r+0x17c>
 800e398:	b1b0      	cbz	r0, 800e3c8 <_svfiprintf_r+0x114>
 800e39a:	9207      	str	r2, [sp, #28]
 800e39c:	e014      	b.n	800e3c8 <_svfiprintf_r+0x114>
 800e39e:	eba0 0308 	sub.w	r3, r0, r8
 800e3a2:	46a2      	mov	sl, r4
 800e3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	9304      	str	r3, [sp, #16]
 800e3ac:	e7d2      	b.n	800e354 <_svfiprintf_r+0xa0>
 800e3ae:	9b03      	ldr	r3, [sp, #12]
 800e3b0:	1d19      	adds	r1, r3, #4
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	9103      	str	r1, [sp, #12]
 800e3b8:	bfbb      	ittet	lt
 800e3ba:	425b      	neglt	r3, r3
 800e3bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c0:	9307      	strge	r3, [sp, #28]
 800e3c2:	9307      	strlt	r3, [sp, #28]
 800e3c4:	bfb8      	it	lt
 800e3c6:	9204      	strlt	r2, [sp, #16]
 800e3c8:	7823      	ldrb	r3, [r4, #0]
 800e3ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3cc:	d10a      	bne.n	800e3e4 <_svfiprintf_r+0x130>
 800e3ce:	7863      	ldrb	r3, [r4, #1]
 800e3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3d2:	d132      	bne.n	800e43a <_svfiprintf_r+0x186>
 800e3d4:	9b03      	ldr	r3, [sp, #12]
 800e3d6:	3402      	adds	r4, #2
 800e3d8:	1d1a      	adds	r2, r3, #4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3e0:	9203      	str	r2, [sp, #12]
 800e3e2:	9305      	str	r3, [sp, #20]
 800e3e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e4a8 <_svfiprintf_r+0x1f4>
 800e3e8:	2203      	movs	r2, #3
 800e3ea:	7821      	ldrb	r1, [r4, #0]
 800e3ec:	4650      	mov	r0, sl
 800e3ee:	f7fe fcbc 	bl	800cd6a <memchr>
 800e3f2:	b138      	cbz	r0, 800e404 <_svfiprintf_r+0x150>
 800e3f4:	eba0 000a 	sub.w	r0, r0, sl
 800e3f8:	2240      	movs	r2, #64	@ 0x40
 800e3fa:	9b04      	ldr	r3, [sp, #16]
 800e3fc:	3401      	adds	r4, #1
 800e3fe:	4082      	lsls	r2, r0
 800e400:	4313      	orrs	r3, r2
 800e402:	9304      	str	r3, [sp, #16]
 800e404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e408:	2206      	movs	r2, #6
 800e40a:	4824      	ldr	r0, [pc, #144]	@ (800e49c <_svfiprintf_r+0x1e8>)
 800e40c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e410:	f7fe fcab 	bl	800cd6a <memchr>
 800e414:	2800      	cmp	r0, #0
 800e416:	d036      	beq.n	800e486 <_svfiprintf_r+0x1d2>
 800e418:	4b21      	ldr	r3, [pc, #132]	@ (800e4a0 <_svfiprintf_r+0x1ec>)
 800e41a:	bb1b      	cbnz	r3, 800e464 <_svfiprintf_r+0x1b0>
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	3307      	adds	r3, #7
 800e420:	f023 0307 	bic.w	r3, r3, #7
 800e424:	3308      	adds	r3, #8
 800e426:	9303      	str	r3, [sp, #12]
 800e428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e42a:	4433      	add	r3, r6
 800e42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e42e:	e76a      	b.n	800e306 <_svfiprintf_r+0x52>
 800e430:	fb0c 3202 	mla	r2, ip, r2, r3
 800e434:	460c      	mov	r4, r1
 800e436:	2001      	movs	r0, #1
 800e438:	e7a8      	b.n	800e38c <_svfiprintf_r+0xd8>
 800e43a:	2300      	movs	r3, #0
 800e43c:	3401      	adds	r4, #1
 800e43e:	f04f 0c0a 	mov.w	ip, #10
 800e442:	4619      	mov	r1, r3
 800e444:	9305      	str	r3, [sp, #20]
 800e446:	4620      	mov	r0, r4
 800e448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e44c:	3a30      	subs	r2, #48	@ 0x30
 800e44e:	2a09      	cmp	r2, #9
 800e450:	d903      	bls.n	800e45a <_svfiprintf_r+0x1a6>
 800e452:	2b00      	cmp	r3, #0
 800e454:	d0c6      	beq.n	800e3e4 <_svfiprintf_r+0x130>
 800e456:	9105      	str	r1, [sp, #20]
 800e458:	e7c4      	b.n	800e3e4 <_svfiprintf_r+0x130>
 800e45a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e45e:	4604      	mov	r4, r0
 800e460:	2301      	movs	r3, #1
 800e462:	e7f0      	b.n	800e446 <_svfiprintf_r+0x192>
 800e464:	ab03      	add	r3, sp, #12
 800e466:	462a      	mov	r2, r5
 800e468:	a904      	add	r1, sp, #16
 800e46a:	4638      	mov	r0, r7
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a4 <_svfiprintf_r+0x1f0>)
 800e470:	f7fd fe76 	bl	800c160 <_printf_float>
 800e474:	1c42      	adds	r2, r0, #1
 800e476:	4606      	mov	r6, r0
 800e478:	d1d6      	bne.n	800e428 <_svfiprintf_r+0x174>
 800e47a:	89ab      	ldrh	r3, [r5, #12]
 800e47c:	065b      	lsls	r3, r3, #25
 800e47e:	f53f af2d 	bmi.w	800e2dc <_svfiprintf_r+0x28>
 800e482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e484:	e72c      	b.n	800e2e0 <_svfiprintf_r+0x2c>
 800e486:	ab03      	add	r3, sp, #12
 800e488:	462a      	mov	r2, r5
 800e48a:	a904      	add	r1, sp, #16
 800e48c:	4638      	mov	r0, r7
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	4b04      	ldr	r3, [pc, #16]	@ (800e4a4 <_svfiprintf_r+0x1f0>)
 800e492:	f7fe f901 	bl	800c698 <_printf_i>
 800e496:	e7ed      	b.n	800e474 <_svfiprintf_r+0x1c0>
 800e498:	0800f450 	.word	0x0800f450
 800e49c:	0800f45a 	.word	0x0800f45a
 800e4a0:	0800c161 	.word	0x0800c161
 800e4a4:	0800e1fd 	.word	0x0800e1fd
 800e4a8:	0800f456 	.word	0x0800f456

0800e4ac <__sfputc_r>:
 800e4ac:	6893      	ldr	r3, [r2, #8]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	6093      	str	r3, [r2, #8]
 800e4b4:	b410      	push	{r4}
 800e4b6:	da08      	bge.n	800e4ca <__sfputc_r+0x1e>
 800e4b8:	6994      	ldr	r4, [r2, #24]
 800e4ba:	42a3      	cmp	r3, r4
 800e4bc:	db01      	blt.n	800e4c2 <__sfputc_r+0x16>
 800e4be:	290a      	cmp	r1, #10
 800e4c0:	d103      	bne.n	800e4ca <__sfputc_r+0x1e>
 800e4c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c6:	f7fe bb2c 	b.w	800cb22 <__swbuf_r>
 800e4ca:	6813      	ldr	r3, [r2, #0]
 800e4cc:	1c58      	adds	r0, r3, #1
 800e4ce:	6010      	str	r0, [r2, #0]
 800e4d0:	4608      	mov	r0, r1
 800e4d2:	7019      	strb	r1, [r3, #0]
 800e4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <__sfputs_r>:
 800e4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4dc:	4606      	mov	r6, r0
 800e4de:	460f      	mov	r7, r1
 800e4e0:	4614      	mov	r4, r2
 800e4e2:	18d5      	adds	r5, r2, r3
 800e4e4:	42ac      	cmp	r4, r5
 800e4e6:	d101      	bne.n	800e4ec <__sfputs_r+0x12>
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	e007      	b.n	800e4fc <__sfputs_r+0x22>
 800e4ec:	463a      	mov	r2, r7
 800e4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f7ff ffda 	bl	800e4ac <__sfputc_r>
 800e4f8:	1c43      	adds	r3, r0, #1
 800e4fa:	d1f3      	bne.n	800e4e4 <__sfputs_r+0xa>
 800e4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e500 <_vfiprintf_r>:
 800e500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	460d      	mov	r5, r1
 800e506:	b09d      	sub	sp, #116	@ 0x74
 800e508:	4614      	mov	r4, r2
 800e50a:	4698      	mov	r8, r3
 800e50c:	4606      	mov	r6, r0
 800e50e:	b118      	cbz	r0, 800e518 <_vfiprintf_r+0x18>
 800e510:	6a03      	ldr	r3, [r0, #32]
 800e512:	b90b      	cbnz	r3, 800e518 <_vfiprintf_r+0x18>
 800e514:	f7fe fa6c 	bl	800c9f0 <__sinit>
 800e518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e51a:	07d9      	lsls	r1, r3, #31
 800e51c:	d405      	bmi.n	800e52a <_vfiprintf_r+0x2a>
 800e51e:	89ab      	ldrh	r3, [r5, #12]
 800e520:	059a      	lsls	r2, r3, #22
 800e522:	d402      	bmi.n	800e52a <_vfiprintf_r+0x2a>
 800e524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e526:	f7fe fc1e 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800e52a:	89ab      	ldrh	r3, [r5, #12]
 800e52c:	071b      	lsls	r3, r3, #28
 800e52e:	d501      	bpl.n	800e534 <_vfiprintf_r+0x34>
 800e530:	692b      	ldr	r3, [r5, #16]
 800e532:	b99b      	cbnz	r3, 800e55c <_vfiprintf_r+0x5c>
 800e534:	4629      	mov	r1, r5
 800e536:	4630      	mov	r0, r6
 800e538:	f7fe fb32 	bl	800cba0 <__swsetup_r>
 800e53c:	b170      	cbz	r0, 800e55c <_vfiprintf_r+0x5c>
 800e53e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e540:	07dc      	lsls	r4, r3, #31
 800e542:	d504      	bpl.n	800e54e <_vfiprintf_r+0x4e>
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	b01d      	add	sp, #116	@ 0x74
 800e54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	0598      	lsls	r0, r3, #22
 800e552:	d4f7      	bmi.n	800e544 <_vfiprintf_r+0x44>
 800e554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e556:	f7fe fc07 	bl	800cd68 <__retarget_lock_release_recursive>
 800e55a:	e7f3      	b.n	800e544 <_vfiprintf_r+0x44>
 800e55c:	2300      	movs	r3, #0
 800e55e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e562:	f04f 0901 	mov.w	r9, #1
 800e566:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e71c <_vfiprintf_r+0x21c>
 800e56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e56c:	2320      	movs	r3, #32
 800e56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e572:	2330      	movs	r3, #48	@ 0x30
 800e574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e578:	4623      	mov	r3, r4
 800e57a:	469a      	mov	sl, r3
 800e57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e580:	b10a      	cbz	r2, 800e586 <_vfiprintf_r+0x86>
 800e582:	2a25      	cmp	r2, #37	@ 0x25
 800e584:	d1f9      	bne.n	800e57a <_vfiprintf_r+0x7a>
 800e586:	ebba 0b04 	subs.w	fp, sl, r4
 800e58a:	d00b      	beq.n	800e5a4 <_vfiprintf_r+0xa4>
 800e58c:	465b      	mov	r3, fp
 800e58e:	4622      	mov	r2, r4
 800e590:	4629      	mov	r1, r5
 800e592:	4630      	mov	r0, r6
 800e594:	f7ff ffa1 	bl	800e4da <__sfputs_r>
 800e598:	3001      	adds	r0, #1
 800e59a:	f000 80a7 	beq.w	800e6ec <_vfiprintf_r+0x1ec>
 800e59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5a0:	445a      	add	r2, fp
 800e5a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 809f 	beq.w	800e6ec <_vfiprintf_r+0x1ec>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b4:	f10a 0a01 	add.w	sl, sl, #1
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	9307      	str	r3, [sp, #28]
 800e5bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5c6:	4654      	mov	r4, sl
 800e5c8:	2205      	movs	r2, #5
 800e5ca:	4854      	ldr	r0, [pc, #336]	@ (800e71c <_vfiprintf_r+0x21c>)
 800e5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5d0:	f7fe fbcb 	bl	800cd6a <memchr>
 800e5d4:	9a04      	ldr	r2, [sp, #16]
 800e5d6:	b9d8      	cbnz	r0, 800e610 <_vfiprintf_r+0x110>
 800e5d8:	06d1      	lsls	r1, r2, #27
 800e5da:	bf44      	itt	mi
 800e5dc:	2320      	movmi	r3, #32
 800e5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5e2:	0713      	lsls	r3, r2, #28
 800e5e4:	bf44      	itt	mi
 800e5e6:	232b      	movmi	r3, #43	@ 0x2b
 800e5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e5f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5f2:	d015      	beq.n	800e620 <_vfiprintf_r+0x120>
 800e5f4:	9a07      	ldr	r2, [sp, #28]
 800e5f6:	4654      	mov	r4, sl
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	f04f 0c0a 	mov.w	ip, #10
 800e5fe:	4621      	mov	r1, r4
 800e600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e604:	3b30      	subs	r3, #48	@ 0x30
 800e606:	2b09      	cmp	r3, #9
 800e608:	d94b      	bls.n	800e6a2 <_vfiprintf_r+0x1a2>
 800e60a:	b1b0      	cbz	r0, 800e63a <_vfiprintf_r+0x13a>
 800e60c:	9207      	str	r2, [sp, #28]
 800e60e:	e014      	b.n	800e63a <_vfiprintf_r+0x13a>
 800e610:	eba0 0308 	sub.w	r3, r0, r8
 800e614:	46a2      	mov	sl, r4
 800e616:	fa09 f303 	lsl.w	r3, r9, r3
 800e61a:	4313      	orrs	r3, r2
 800e61c:	9304      	str	r3, [sp, #16]
 800e61e:	e7d2      	b.n	800e5c6 <_vfiprintf_r+0xc6>
 800e620:	9b03      	ldr	r3, [sp, #12]
 800e622:	1d19      	adds	r1, r3, #4
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	9103      	str	r1, [sp, #12]
 800e62a:	bfbb      	ittet	lt
 800e62c:	425b      	neglt	r3, r3
 800e62e:	f042 0202 	orrlt.w	r2, r2, #2
 800e632:	9307      	strge	r3, [sp, #28]
 800e634:	9307      	strlt	r3, [sp, #28]
 800e636:	bfb8      	it	lt
 800e638:	9204      	strlt	r2, [sp, #16]
 800e63a:	7823      	ldrb	r3, [r4, #0]
 800e63c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e63e:	d10a      	bne.n	800e656 <_vfiprintf_r+0x156>
 800e640:	7863      	ldrb	r3, [r4, #1]
 800e642:	2b2a      	cmp	r3, #42	@ 0x2a
 800e644:	d132      	bne.n	800e6ac <_vfiprintf_r+0x1ac>
 800e646:	9b03      	ldr	r3, [sp, #12]
 800e648:	3402      	adds	r4, #2
 800e64a:	1d1a      	adds	r2, r3, #4
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e652:	9203      	str	r2, [sp, #12]
 800e654:	9305      	str	r3, [sp, #20]
 800e656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e72c <_vfiprintf_r+0x22c>
 800e65a:	2203      	movs	r2, #3
 800e65c:	7821      	ldrb	r1, [r4, #0]
 800e65e:	4650      	mov	r0, sl
 800e660:	f7fe fb83 	bl	800cd6a <memchr>
 800e664:	b138      	cbz	r0, 800e676 <_vfiprintf_r+0x176>
 800e666:	eba0 000a 	sub.w	r0, r0, sl
 800e66a:	2240      	movs	r2, #64	@ 0x40
 800e66c:	9b04      	ldr	r3, [sp, #16]
 800e66e:	3401      	adds	r4, #1
 800e670:	4082      	lsls	r2, r0
 800e672:	4313      	orrs	r3, r2
 800e674:	9304      	str	r3, [sp, #16]
 800e676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67a:	2206      	movs	r2, #6
 800e67c:	4828      	ldr	r0, [pc, #160]	@ (800e720 <_vfiprintf_r+0x220>)
 800e67e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e682:	f7fe fb72 	bl	800cd6a <memchr>
 800e686:	2800      	cmp	r0, #0
 800e688:	d03f      	beq.n	800e70a <_vfiprintf_r+0x20a>
 800e68a:	4b26      	ldr	r3, [pc, #152]	@ (800e724 <_vfiprintf_r+0x224>)
 800e68c:	bb1b      	cbnz	r3, 800e6d6 <_vfiprintf_r+0x1d6>
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	3307      	adds	r3, #7
 800e692:	f023 0307 	bic.w	r3, r3, #7
 800e696:	3308      	adds	r3, #8
 800e698:	9303      	str	r3, [sp, #12]
 800e69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e69c:	443b      	add	r3, r7
 800e69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6a0:	e76a      	b.n	800e578 <_vfiprintf_r+0x78>
 800e6a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	e7a8      	b.n	800e5fe <_vfiprintf_r+0xfe>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	3401      	adds	r4, #1
 800e6b0:	f04f 0c0a 	mov.w	ip, #10
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	9305      	str	r3, [sp, #20]
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6be:	3a30      	subs	r2, #48	@ 0x30
 800e6c0:	2a09      	cmp	r2, #9
 800e6c2:	d903      	bls.n	800e6cc <_vfiprintf_r+0x1cc>
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d0c6      	beq.n	800e656 <_vfiprintf_r+0x156>
 800e6c8:	9105      	str	r1, [sp, #20]
 800e6ca:	e7c4      	b.n	800e656 <_vfiprintf_r+0x156>
 800e6cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e7f0      	b.n	800e6b8 <_vfiprintf_r+0x1b8>
 800e6d6:	ab03      	add	r3, sp, #12
 800e6d8:	462a      	mov	r2, r5
 800e6da:	a904      	add	r1, sp, #16
 800e6dc:	4630      	mov	r0, r6
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	4b11      	ldr	r3, [pc, #68]	@ (800e728 <_vfiprintf_r+0x228>)
 800e6e2:	f7fd fd3d 	bl	800c160 <_printf_float>
 800e6e6:	4607      	mov	r7, r0
 800e6e8:	1c78      	adds	r0, r7, #1
 800e6ea:	d1d6      	bne.n	800e69a <_vfiprintf_r+0x19a>
 800e6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6ee:	07d9      	lsls	r1, r3, #31
 800e6f0:	d405      	bmi.n	800e6fe <_vfiprintf_r+0x1fe>
 800e6f2:	89ab      	ldrh	r3, [r5, #12]
 800e6f4:	059a      	lsls	r2, r3, #22
 800e6f6:	d402      	bmi.n	800e6fe <_vfiprintf_r+0x1fe>
 800e6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6fa:	f7fe fb35 	bl	800cd68 <__retarget_lock_release_recursive>
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	065b      	lsls	r3, r3, #25
 800e702:	f53f af1f 	bmi.w	800e544 <_vfiprintf_r+0x44>
 800e706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e708:	e71e      	b.n	800e548 <_vfiprintf_r+0x48>
 800e70a:	ab03      	add	r3, sp, #12
 800e70c:	462a      	mov	r2, r5
 800e70e:	a904      	add	r1, sp, #16
 800e710:	4630      	mov	r0, r6
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	4b04      	ldr	r3, [pc, #16]	@ (800e728 <_vfiprintf_r+0x228>)
 800e716:	f7fd ffbf 	bl	800c698 <_printf_i>
 800e71a:	e7e4      	b.n	800e6e6 <_vfiprintf_r+0x1e6>
 800e71c:	0800f450 	.word	0x0800f450
 800e720:	0800f45a 	.word	0x0800f45a
 800e724:	0800c161 	.word	0x0800c161
 800e728:	0800e4db 	.word	0x0800e4db
 800e72c:	0800f456 	.word	0x0800f456

0800e730 <__sflush_r>:
 800e730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e738:	0716      	lsls	r6, r2, #28
 800e73a:	4605      	mov	r5, r0
 800e73c:	460c      	mov	r4, r1
 800e73e:	d454      	bmi.n	800e7ea <__sflush_r+0xba>
 800e740:	684b      	ldr	r3, [r1, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	dc02      	bgt.n	800e74c <__sflush_r+0x1c>
 800e746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e748:	2b00      	cmp	r3, #0
 800e74a:	dd48      	ble.n	800e7de <__sflush_r+0xae>
 800e74c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e74e:	2e00      	cmp	r6, #0
 800e750:	d045      	beq.n	800e7de <__sflush_r+0xae>
 800e752:	2300      	movs	r3, #0
 800e754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e758:	682f      	ldr	r7, [r5, #0]
 800e75a:	6a21      	ldr	r1, [r4, #32]
 800e75c:	602b      	str	r3, [r5, #0]
 800e75e:	d030      	beq.n	800e7c2 <__sflush_r+0x92>
 800e760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	0759      	lsls	r1, r3, #29
 800e766:	d505      	bpl.n	800e774 <__sflush_r+0x44>
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	1ad2      	subs	r2, r2, r3
 800e76c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e76e:	b10b      	cbz	r3, 800e774 <__sflush_r+0x44>
 800e770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e772:	1ad2      	subs	r2, r2, r3
 800e774:	2300      	movs	r3, #0
 800e776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e778:	6a21      	ldr	r1, [r4, #32]
 800e77a:	4628      	mov	r0, r5
 800e77c:	47b0      	blx	r6
 800e77e:	1c43      	adds	r3, r0, #1
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	d106      	bne.n	800e792 <__sflush_r+0x62>
 800e784:	6829      	ldr	r1, [r5, #0]
 800e786:	291d      	cmp	r1, #29
 800e788:	d82b      	bhi.n	800e7e2 <__sflush_r+0xb2>
 800e78a:	4a2a      	ldr	r2, [pc, #168]	@ (800e834 <__sflush_r+0x104>)
 800e78c:	410a      	asrs	r2, r1
 800e78e:	07d6      	lsls	r6, r2, #31
 800e790:	d427      	bmi.n	800e7e2 <__sflush_r+0xb2>
 800e792:	2200      	movs	r2, #0
 800e794:	04d9      	lsls	r1, r3, #19
 800e796:	6062      	str	r2, [r4, #4]
 800e798:	6922      	ldr	r2, [r4, #16]
 800e79a:	6022      	str	r2, [r4, #0]
 800e79c:	d504      	bpl.n	800e7a8 <__sflush_r+0x78>
 800e79e:	1c42      	adds	r2, r0, #1
 800e7a0:	d101      	bne.n	800e7a6 <__sflush_r+0x76>
 800e7a2:	682b      	ldr	r3, [r5, #0]
 800e7a4:	b903      	cbnz	r3, 800e7a8 <__sflush_r+0x78>
 800e7a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e7a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7aa:	602f      	str	r7, [r5, #0]
 800e7ac:	b1b9      	cbz	r1, 800e7de <__sflush_r+0xae>
 800e7ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7b2:	4299      	cmp	r1, r3
 800e7b4:	d002      	beq.n	800e7bc <__sflush_r+0x8c>
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7ff f946 	bl	800da48 <_free_r>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7c0:	e00d      	b.n	800e7de <__sflush_r+0xae>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	47b0      	blx	r6
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	1c50      	adds	r0, r2, #1
 800e7cc:	d1c9      	bne.n	800e762 <__sflush_r+0x32>
 800e7ce:	682b      	ldr	r3, [r5, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d0c6      	beq.n	800e762 <__sflush_r+0x32>
 800e7d4:	2b1d      	cmp	r3, #29
 800e7d6:	d001      	beq.n	800e7dc <__sflush_r+0xac>
 800e7d8:	2b16      	cmp	r3, #22
 800e7da:	d11d      	bne.n	800e818 <__sflush_r+0xe8>
 800e7dc:	602f      	str	r7, [r5, #0]
 800e7de:	2000      	movs	r0, #0
 800e7e0:	e021      	b.n	800e826 <__sflush_r+0xf6>
 800e7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7e6:	b21b      	sxth	r3, r3
 800e7e8:	e01a      	b.n	800e820 <__sflush_r+0xf0>
 800e7ea:	690f      	ldr	r7, [r1, #16]
 800e7ec:	2f00      	cmp	r7, #0
 800e7ee:	d0f6      	beq.n	800e7de <__sflush_r+0xae>
 800e7f0:	0793      	lsls	r3, r2, #30
 800e7f2:	680e      	ldr	r6, [r1, #0]
 800e7f4:	600f      	str	r7, [r1, #0]
 800e7f6:	bf0c      	ite	eq
 800e7f8:	694b      	ldreq	r3, [r1, #20]
 800e7fa:	2300      	movne	r3, #0
 800e7fc:	eba6 0807 	sub.w	r8, r6, r7
 800e800:	608b      	str	r3, [r1, #8]
 800e802:	f1b8 0f00 	cmp.w	r8, #0
 800e806:	ddea      	ble.n	800e7de <__sflush_r+0xae>
 800e808:	4643      	mov	r3, r8
 800e80a:	463a      	mov	r2, r7
 800e80c:	6a21      	ldr	r1, [r4, #32]
 800e80e:	4628      	mov	r0, r5
 800e810:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e812:	47b0      	blx	r6
 800e814:	2800      	cmp	r0, #0
 800e816:	dc08      	bgt.n	800e82a <__sflush_r+0xfa>
 800e818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e820:	f04f 30ff 	mov.w	r0, #4294967295
 800e824:	81a3      	strh	r3, [r4, #12]
 800e826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e82a:	4407      	add	r7, r0
 800e82c:	eba8 0800 	sub.w	r8, r8, r0
 800e830:	e7e7      	b.n	800e802 <__sflush_r+0xd2>
 800e832:	bf00      	nop
 800e834:	dfbffffe 	.word	0xdfbffffe

0800e838 <_fflush_r>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	690b      	ldr	r3, [r1, #16]
 800e83c:	4605      	mov	r5, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	b913      	cbnz	r3, 800e848 <_fflush_r+0x10>
 800e842:	2500      	movs	r5, #0
 800e844:	4628      	mov	r0, r5
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	b118      	cbz	r0, 800e852 <_fflush_r+0x1a>
 800e84a:	6a03      	ldr	r3, [r0, #32]
 800e84c:	b90b      	cbnz	r3, 800e852 <_fflush_r+0x1a>
 800e84e:	f7fe f8cf 	bl	800c9f0 <__sinit>
 800e852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0f3      	beq.n	800e842 <_fflush_r+0xa>
 800e85a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e85c:	07d0      	lsls	r0, r2, #31
 800e85e:	d404      	bmi.n	800e86a <_fflush_r+0x32>
 800e860:	0599      	lsls	r1, r3, #22
 800e862:	d402      	bmi.n	800e86a <_fflush_r+0x32>
 800e864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e866:	f7fe fa7e 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800e86a:	4628      	mov	r0, r5
 800e86c:	4621      	mov	r1, r4
 800e86e:	f7ff ff5f 	bl	800e730 <__sflush_r>
 800e872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e874:	4605      	mov	r5, r0
 800e876:	07da      	lsls	r2, r3, #31
 800e878:	d4e4      	bmi.n	800e844 <_fflush_r+0xc>
 800e87a:	89a3      	ldrh	r3, [r4, #12]
 800e87c:	059b      	lsls	r3, r3, #22
 800e87e:	d4e1      	bmi.n	800e844 <_fflush_r+0xc>
 800e880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e882:	f7fe fa71 	bl	800cd68 <__retarget_lock_release_recursive>
 800e886:	e7dd      	b.n	800e844 <_fflush_r+0xc>

0800e888 <__swhatbuf_r>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	460c      	mov	r4, r1
 800e88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e890:	b096      	sub	sp, #88	@ 0x58
 800e892:	4615      	mov	r5, r2
 800e894:	2900      	cmp	r1, #0
 800e896:	461e      	mov	r6, r3
 800e898:	da0c      	bge.n	800e8b4 <__swhatbuf_r+0x2c>
 800e89a:	89a3      	ldrh	r3, [r4, #12]
 800e89c:	2100      	movs	r1, #0
 800e89e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8a2:	bf14      	ite	ne
 800e8a4:	2340      	movne	r3, #64	@ 0x40
 800e8a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	6031      	str	r1, [r6, #0]
 800e8ae:	602b      	str	r3, [r5, #0]
 800e8b0:	b016      	add	sp, #88	@ 0x58
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	466a      	mov	r2, sp
 800e8b6:	f000 f863 	bl	800e980 <_fstat_r>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	dbed      	blt.n	800e89a <__swhatbuf_r+0x12>
 800e8be:	9901      	ldr	r1, [sp, #4]
 800e8c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8c8:	4259      	negs	r1, r3
 800e8ca:	4159      	adcs	r1, r3
 800e8cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8d0:	e7eb      	b.n	800e8aa <__swhatbuf_r+0x22>

0800e8d2 <__smakebuf_r>:
 800e8d2:	898b      	ldrh	r3, [r1, #12]
 800e8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8d6:	079d      	lsls	r5, r3, #30
 800e8d8:	4606      	mov	r6, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	d507      	bpl.n	800e8ee <__smakebuf_r+0x1c>
 800e8de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8e2:	6023      	str	r3, [r4, #0]
 800e8e4:	6123      	str	r3, [r4, #16]
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	6163      	str	r3, [r4, #20]
 800e8ea:	b003      	add	sp, #12
 800e8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ee:	ab01      	add	r3, sp, #4
 800e8f0:	466a      	mov	r2, sp
 800e8f2:	f7ff ffc9 	bl	800e888 <__swhatbuf_r>
 800e8f6:	9f00      	ldr	r7, [sp, #0]
 800e8f8:	4605      	mov	r5, r0
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	f7fd fad7 	bl	800beb0 <_malloc_r>
 800e902:	b948      	cbnz	r0, 800e918 <__smakebuf_r+0x46>
 800e904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e908:	059a      	lsls	r2, r3, #22
 800e90a:	d4ee      	bmi.n	800e8ea <__smakebuf_r+0x18>
 800e90c:	f023 0303 	bic.w	r3, r3, #3
 800e910:	f043 0302 	orr.w	r3, r3, #2
 800e914:	81a3      	strh	r3, [r4, #12]
 800e916:	e7e2      	b.n	800e8de <__smakebuf_r+0xc>
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	6020      	str	r0, [r4, #0]
 800e91c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e920:	81a3      	strh	r3, [r4, #12]
 800e922:	9b01      	ldr	r3, [sp, #4]
 800e924:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e928:	b15b      	cbz	r3, 800e942 <__smakebuf_r+0x70>
 800e92a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e92e:	4630      	mov	r0, r6
 800e930:	f000 f838 	bl	800e9a4 <_isatty_r>
 800e934:	b128      	cbz	r0, 800e942 <__smakebuf_r+0x70>
 800e936:	89a3      	ldrh	r3, [r4, #12]
 800e938:	f023 0303 	bic.w	r3, r3, #3
 800e93c:	f043 0301 	orr.w	r3, r3, #1
 800e940:	81a3      	strh	r3, [r4, #12]
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	431d      	orrs	r5, r3
 800e946:	81a5      	strh	r5, [r4, #12]
 800e948:	e7cf      	b.n	800e8ea <__smakebuf_r+0x18>

0800e94a <memmove>:
 800e94a:	4288      	cmp	r0, r1
 800e94c:	b510      	push	{r4, lr}
 800e94e:	eb01 0402 	add.w	r4, r1, r2
 800e952:	d902      	bls.n	800e95a <memmove+0x10>
 800e954:	4284      	cmp	r4, r0
 800e956:	4623      	mov	r3, r4
 800e958:	d807      	bhi.n	800e96a <memmove+0x20>
 800e95a:	1e43      	subs	r3, r0, #1
 800e95c:	42a1      	cmp	r1, r4
 800e95e:	d008      	beq.n	800e972 <memmove+0x28>
 800e960:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e964:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e968:	e7f8      	b.n	800e95c <memmove+0x12>
 800e96a:	4402      	add	r2, r0
 800e96c:	4601      	mov	r1, r0
 800e96e:	428a      	cmp	r2, r1
 800e970:	d100      	bne.n	800e974 <memmove+0x2a>
 800e972:	bd10      	pop	{r4, pc}
 800e974:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e978:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e97c:	e7f7      	b.n	800e96e <memmove+0x24>
	...

0800e980 <_fstat_r>:
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	2300      	movs	r3, #0
 800e984:	4d06      	ldr	r5, [pc, #24]	@ (800e9a0 <_fstat_r+0x20>)
 800e986:	4604      	mov	r4, r0
 800e988:	4608      	mov	r0, r1
 800e98a:	4611      	mov	r1, r2
 800e98c:	602b      	str	r3, [r5, #0]
 800e98e:	f7f4 f800 	bl	8002992 <_fstat>
 800e992:	1c43      	adds	r3, r0, #1
 800e994:	d102      	bne.n	800e99c <_fstat_r+0x1c>
 800e996:	682b      	ldr	r3, [r5, #0]
 800e998:	b103      	cbz	r3, 800e99c <_fstat_r+0x1c>
 800e99a:	6023      	str	r3, [r4, #0]
 800e99c:	bd38      	pop	{r3, r4, r5, pc}
 800e99e:	bf00      	nop
 800e9a0:	200012e4 	.word	0x200012e4

0800e9a4 <_isatty_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	4d05      	ldr	r5, [pc, #20]	@ (800e9c0 <_isatty_r+0x1c>)
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	602b      	str	r3, [r5, #0]
 800e9b0:	f7f3 ffff 	bl	80029b2 <_isatty>
 800e9b4:	1c43      	adds	r3, r0, #1
 800e9b6:	d102      	bne.n	800e9be <_isatty_r+0x1a>
 800e9b8:	682b      	ldr	r3, [r5, #0]
 800e9ba:	b103      	cbz	r3, 800e9be <_isatty_r+0x1a>
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	bd38      	pop	{r3, r4, r5, pc}
 800e9c0:	200012e4 	.word	0x200012e4

0800e9c4 <__assert_func>:
 800e9c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9c6:	4614      	mov	r4, r2
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4b09      	ldr	r3, [pc, #36]	@ (800e9f0 <__assert_func+0x2c>)
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68d8      	ldr	r0, [r3, #12]
 800e9d2:	b954      	cbnz	r4, 800e9ea <__assert_func+0x26>
 800e9d4:	4b07      	ldr	r3, [pc, #28]	@ (800e9f4 <__assert_func+0x30>)
 800e9d6:	461c      	mov	r4, r3
 800e9d8:	9100      	str	r1, [sp, #0]
 800e9da:	4907      	ldr	r1, [pc, #28]	@ (800e9f8 <__assert_func+0x34>)
 800e9dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9e0:	462b      	mov	r3, r5
 800e9e2:	f000 f841 	bl	800ea68 <fiprintf>
 800e9e6:	f000 f851 	bl	800ea8c <abort>
 800e9ea:	4b04      	ldr	r3, [pc, #16]	@ (800e9fc <__assert_func+0x38>)
 800e9ec:	e7f4      	b.n	800e9d8 <__assert_func+0x14>
 800e9ee:	bf00      	nop
 800e9f0:	200005f0 	.word	0x200005f0
 800e9f4:	0800f4a6 	.word	0x0800f4a6
 800e9f8:	0800f478 	.word	0x0800f478
 800e9fc:	0800f46b 	.word	0x0800f46b

0800ea00 <_calloc_r>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	fba1 5402 	umull	r5, r4, r1, r2
 800ea06:	b93c      	cbnz	r4, 800ea18 <_calloc_r+0x18>
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7fd fa51 	bl	800beb0 <_malloc_r>
 800ea0e:	4606      	mov	r6, r0
 800ea10:	b928      	cbnz	r0, 800ea1e <_calloc_r+0x1e>
 800ea12:	2600      	movs	r6, #0
 800ea14:	4630      	mov	r0, r6
 800ea16:	bd70      	pop	{r4, r5, r6, pc}
 800ea18:	220c      	movs	r2, #12
 800ea1a:	6002      	str	r2, [r0, #0]
 800ea1c:	e7f9      	b.n	800ea12 <_calloc_r+0x12>
 800ea1e:	462a      	mov	r2, r5
 800ea20:	4621      	mov	r1, r4
 800ea22:	f7fe f913 	bl	800cc4c <memset>
 800ea26:	e7f5      	b.n	800ea14 <_calloc_r+0x14>

0800ea28 <__ascii_mbtowc>:
 800ea28:	b082      	sub	sp, #8
 800ea2a:	b901      	cbnz	r1, 800ea2e <__ascii_mbtowc+0x6>
 800ea2c:	a901      	add	r1, sp, #4
 800ea2e:	b142      	cbz	r2, 800ea42 <__ascii_mbtowc+0x1a>
 800ea30:	b14b      	cbz	r3, 800ea46 <__ascii_mbtowc+0x1e>
 800ea32:	7813      	ldrb	r3, [r2, #0]
 800ea34:	600b      	str	r3, [r1, #0]
 800ea36:	7812      	ldrb	r2, [r2, #0]
 800ea38:	1e10      	subs	r0, r2, #0
 800ea3a:	bf18      	it	ne
 800ea3c:	2001      	movne	r0, #1
 800ea3e:	b002      	add	sp, #8
 800ea40:	4770      	bx	lr
 800ea42:	4610      	mov	r0, r2
 800ea44:	e7fb      	b.n	800ea3e <__ascii_mbtowc+0x16>
 800ea46:	f06f 0001 	mvn.w	r0, #1
 800ea4a:	e7f8      	b.n	800ea3e <__ascii_mbtowc+0x16>

0800ea4c <__ascii_wctomb>:
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	4608      	mov	r0, r1
 800ea50:	b141      	cbz	r1, 800ea64 <__ascii_wctomb+0x18>
 800ea52:	2aff      	cmp	r2, #255	@ 0xff
 800ea54:	d904      	bls.n	800ea60 <__ascii_wctomb+0x14>
 800ea56:	228a      	movs	r2, #138	@ 0x8a
 800ea58:	f04f 30ff 	mov.w	r0, #4294967295
 800ea5c:	601a      	str	r2, [r3, #0]
 800ea5e:	4770      	bx	lr
 800ea60:	2001      	movs	r0, #1
 800ea62:	700a      	strb	r2, [r1, #0]
 800ea64:	4770      	bx	lr
	...

0800ea68 <fiprintf>:
 800ea68:	b40e      	push	{r1, r2, r3}
 800ea6a:	b503      	push	{r0, r1, lr}
 800ea6c:	ab03      	add	r3, sp, #12
 800ea6e:	4601      	mov	r1, r0
 800ea70:	4805      	ldr	r0, [pc, #20]	@ (800ea88 <fiprintf+0x20>)
 800ea72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea76:	6800      	ldr	r0, [r0, #0]
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	f7ff fd41 	bl	800e500 <_vfiprintf_r>
 800ea7e:	b002      	add	sp, #8
 800ea80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea84:	b003      	add	sp, #12
 800ea86:	4770      	bx	lr
 800ea88:	200005f0 	.word	0x200005f0

0800ea8c <abort>:
 800ea8c:	2006      	movs	r0, #6
 800ea8e:	b508      	push	{r3, lr}
 800ea90:	f000 f82c 	bl	800eaec <raise>
 800ea94:	2001      	movs	r0, #1
 800ea96:	f7f3 ff2c 	bl	80028f2 <_exit>

0800ea9a <_raise_r>:
 800ea9a:	291f      	cmp	r1, #31
 800ea9c:	b538      	push	{r3, r4, r5, lr}
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	d904      	bls.n	800eaae <_raise_r+0x14>
 800eaa4:	2316      	movs	r3, #22
 800eaa6:	6003      	str	r3, [r0, #0]
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eab0:	b112      	cbz	r2, 800eab8 <_raise_r+0x1e>
 800eab2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eab6:	b94b      	cbnz	r3, 800eacc <_raise_r+0x32>
 800eab8:	4628      	mov	r0, r5
 800eaba:	f000 f831 	bl	800eb20 <_getpid_r>
 800eabe:	4622      	mov	r2, r4
 800eac0:	4601      	mov	r1, r0
 800eac2:	4628      	mov	r0, r5
 800eac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eac8:	f000 b818 	b.w	800eafc <_kill_r>
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d00a      	beq.n	800eae6 <_raise_r+0x4c>
 800ead0:	1c59      	adds	r1, r3, #1
 800ead2:	d103      	bne.n	800eadc <_raise_r+0x42>
 800ead4:	2316      	movs	r3, #22
 800ead6:	6003      	str	r3, [r0, #0]
 800ead8:	2001      	movs	r0, #1
 800eada:	e7e7      	b.n	800eaac <_raise_r+0x12>
 800eadc:	2100      	movs	r1, #0
 800eade:	4620      	mov	r0, r4
 800eae0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eae4:	4798      	blx	r3
 800eae6:	2000      	movs	r0, #0
 800eae8:	e7e0      	b.n	800eaac <_raise_r+0x12>
	...

0800eaec <raise>:
 800eaec:	4b02      	ldr	r3, [pc, #8]	@ (800eaf8 <raise+0xc>)
 800eaee:	4601      	mov	r1, r0
 800eaf0:	6818      	ldr	r0, [r3, #0]
 800eaf2:	f7ff bfd2 	b.w	800ea9a <_raise_r>
 800eaf6:	bf00      	nop
 800eaf8:	200005f0 	.word	0x200005f0

0800eafc <_kill_r>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	2300      	movs	r3, #0
 800eb00:	4d06      	ldr	r5, [pc, #24]	@ (800eb1c <_kill_r+0x20>)
 800eb02:	4604      	mov	r4, r0
 800eb04:	4608      	mov	r0, r1
 800eb06:	4611      	mov	r1, r2
 800eb08:	602b      	str	r3, [r5, #0]
 800eb0a:	f7f3 fee2 	bl	80028d2 <_kill>
 800eb0e:	1c43      	adds	r3, r0, #1
 800eb10:	d102      	bne.n	800eb18 <_kill_r+0x1c>
 800eb12:	682b      	ldr	r3, [r5, #0]
 800eb14:	b103      	cbz	r3, 800eb18 <_kill_r+0x1c>
 800eb16:	6023      	str	r3, [r4, #0]
 800eb18:	bd38      	pop	{r3, r4, r5, pc}
 800eb1a:	bf00      	nop
 800eb1c:	200012e4 	.word	0x200012e4

0800eb20 <_getpid_r>:
 800eb20:	f7f3 becf 	b.w	80028c2 <_getpid>

0800eb24 <_init>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	bf00      	nop
 800eb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2a:	bc08      	pop	{r3}
 800eb2c:	469e      	mov	lr, r3
 800eb2e:	4770      	bx	lr

0800eb30 <_fini>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr
