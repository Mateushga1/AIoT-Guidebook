
sine-model-performance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c934  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a1  0800cb6c  0800cb6c  0000db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e210  0800e210  0000f210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e218  0800e218  0000f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e21c  0800e21c  0000f21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000650  20000000  0800e220  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000456  20000650  0800e870  00010650  2**3
                  ALLOC
  8 ._user_heap_stack 00000a02  20000aa6  0800e870  00010aa6  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001683d  00000000  00000000  00010686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003565  00000000  00000000  00026ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001000  00000000  00000000  0002a428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c25  00000000  00000000  0002b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000364bb  00000000  00000000  0002c04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000173f2  00000000  00000000  00062508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149c6c  00000000  00000000  000798fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000be  00000000  00000000  001c3566  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c18  00000000  00000000  001c3624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001c823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000650 	.word	0x20000650
 8000254:	00000000 	.word	0x00000000
 8000258:	0800cb54 	.word	0x0800cb54

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000654 	.word	0x20000654
 8000274:	0800cb54 	.word	0x0800cb54

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_frsub>:
 8000600:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000604:	e002      	b.n	800060c <__addsf3>
 8000606:	bf00      	nop

08000608 <__aeabi_fsub>:
 8000608:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800060c <__addsf3>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	bf1f      	itttt	ne
 8000610:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000614:	ea92 0f03 	teqne	r2, r3
 8000618:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800061c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000620:	d06a      	beq.n	80006f8 <__addsf3+0xec>
 8000622:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000626:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800062a:	bfc1      	itttt	gt
 800062c:	18d2      	addgt	r2, r2, r3
 800062e:	4041      	eorgt	r1, r0
 8000630:	4048      	eorgt	r0, r1
 8000632:	4041      	eorgt	r1, r0
 8000634:	bfb8      	it	lt
 8000636:	425b      	neglt	r3, r3
 8000638:	2b19      	cmp	r3, #25
 800063a:	bf88      	it	hi
 800063c:	4770      	bxhi	lr
 800063e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000642:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000646:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800064a:	bf18      	it	ne
 800064c:	4240      	negne	r0, r0
 800064e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000652:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000656:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800065a:	bf18      	it	ne
 800065c:	4249      	negne	r1, r1
 800065e:	ea92 0f03 	teq	r2, r3
 8000662:	d03f      	beq.n	80006e4 <__addsf3+0xd8>
 8000664:	f1a2 0201 	sub.w	r2, r2, #1
 8000668:	fa41 fc03 	asr.w	ip, r1, r3
 800066c:	eb10 000c 	adds.w	r0, r0, ip
 8000670:	f1c3 0320 	rsb	r3, r3, #32
 8000674:	fa01 f103 	lsl.w	r1, r1, r3
 8000678:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800067c:	d502      	bpl.n	8000684 <__addsf3+0x78>
 800067e:	4249      	negs	r1, r1
 8000680:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000684:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000688:	d313      	bcc.n	80006b2 <__addsf3+0xa6>
 800068a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800068e:	d306      	bcc.n	800069e <__addsf3+0x92>
 8000690:	0840      	lsrs	r0, r0, #1
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	f102 0201 	add.w	r2, r2, #1
 800069a:	2afe      	cmp	r2, #254	@ 0xfe
 800069c:	d251      	bcs.n	8000742 <__addsf3+0x136>
 800069e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006a6:	bf08      	it	eq
 80006a8:	f020 0001 	biceq.w	r0, r0, #1
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	4770      	bx	lr
 80006b2:	0049      	lsls	r1, r1, #1
 80006b4:	eb40 0000 	adc.w	r0, r0, r0
 80006b8:	3a01      	subs	r2, #1
 80006ba:	bf28      	it	cs
 80006bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006c0:	d2ed      	bcs.n	800069e <__addsf3+0x92>
 80006c2:	fab0 fc80 	clz	ip, r0
 80006c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006ca:	ebb2 020c 	subs.w	r2, r2, ip
 80006ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80006d2:	bfaa      	itet	ge
 80006d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d8:	4252      	neglt	r2, r2
 80006da:	4318      	orrge	r0, r3
 80006dc:	bfbc      	itt	lt
 80006de:	40d0      	lsrlt	r0, r2
 80006e0:	4318      	orrlt	r0, r3
 80006e2:	4770      	bx	lr
 80006e4:	f092 0f00 	teq	r2, #0
 80006e8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006ec:	bf06      	itte	eq
 80006ee:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006f2:	3201      	addeq	r2, #1
 80006f4:	3b01      	subne	r3, #1
 80006f6:	e7b5      	b.n	8000664 <__addsf3+0x58>
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	bf18      	it	ne
 8000702:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000706:	d021      	beq.n	800074c <__addsf3+0x140>
 8000708:	ea92 0f03 	teq	r2, r3
 800070c:	d004      	beq.n	8000718 <__addsf3+0x10c>
 800070e:	f092 0f00 	teq	r2, #0
 8000712:	bf08      	it	eq
 8000714:	4608      	moveq	r0, r1
 8000716:	4770      	bx	lr
 8000718:	ea90 0f01 	teq	r0, r1
 800071c:	bf1c      	itt	ne
 800071e:	2000      	movne	r0, #0
 8000720:	4770      	bxne	lr
 8000722:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000726:	d104      	bne.n	8000732 <__addsf3+0x126>
 8000728:	0040      	lsls	r0, r0, #1
 800072a:	bf28      	it	cs
 800072c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000730:	4770      	bx	lr
 8000732:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000736:	bf3c      	itt	cc
 8000738:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800073c:	4770      	bxcc	lr
 800073e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000742:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000746:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074a:	4770      	bx	lr
 800074c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000750:	bf16      	itet	ne
 8000752:	4608      	movne	r0, r1
 8000754:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000758:	4601      	movne	r1, r0
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	bf06      	itte	eq
 800075e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000762:	ea90 0f01 	teqeq	r0, r1
 8000766:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800076a:	4770      	bx	lr

0800076c <__aeabi_ui2f>:
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e004      	b.n	800077c <__aeabi_i2f+0x8>
 8000772:	bf00      	nop

08000774 <__aeabi_i2f>:
 8000774:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000778:	bf48      	it	mi
 800077a:	4240      	negmi	r0, r0
 800077c:	ea5f 0c00 	movs.w	ip, r0
 8000780:	bf08      	it	eq
 8000782:	4770      	bxeq	lr
 8000784:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000788:	4601      	mov	r1, r0
 800078a:	f04f 0000 	mov.w	r0, #0
 800078e:	e01c      	b.n	80007ca <__aeabi_l2f+0x2a>

08000790 <__aeabi_ul2f>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e00a      	b.n	80007b4 <__aeabi_l2f+0x14>
 800079e:	bf00      	nop

080007a0 <__aeabi_l2f>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007ac:	d502      	bpl.n	80007b4 <__aeabi_l2f+0x14>
 80007ae:	4240      	negs	r0, r0
 80007b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b4:	ea5f 0c01 	movs.w	ip, r1
 80007b8:	bf02      	ittt	eq
 80007ba:	4684      	moveq	ip, r0
 80007bc:	4601      	moveq	r1, r0
 80007be:	2000      	moveq	r0, #0
 80007c0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80007c4:	bf08      	it	eq
 80007c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007ce:	fabc f28c 	clz	r2, ip
 80007d2:	3a08      	subs	r2, #8
 80007d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d8:	db10      	blt.n	80007fc <__aeabi_l2f+0x5c>
 80007da:	fa01 fc02 	lsl.w	ip, r1, r2
 80007de:	4463      	add	r3, ip
 80007e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007e4:	f1c2 0220 	rsb	r2, r2, #32
 80007e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007ec:	fa20 f202 	lsr.w	r2, r0, r2
 80007f0:	eb43 0002 	adc.w	r0, r3, r2
 80007f4:	bf08      	it	eq
 80007f6:	f020 0001 	biceq.w	r0, r0, #1
 80007fa:	4770      	bx	lr
 80007fc:	f102 0220 	add.w	r2, r2, #32
 8000800:	fa01 fc02 	lsl.w	ip, r1, r2
 8000804:	f1c2 0220 	rsb	r2, r2, #32
 8000808:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800080c:	fa21 f202 	lsr.w	r2, r1, r2
 8000810:	eb43 0002 	adc.w	r0, r3, r2
 8000814:	bf08      	it	eq
 8000816:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800081a:	4770      	bx	lr

0800081c <__aeabi_uldivmod>:
 800081c:	b953      	cbnz	r3, 8000834 <__aeabi_uldivmod+0x18>
 800081e:	b94a      	cbnz	r2, 8000834 <__aeabi_uldivmod+0x18>
 8000820:	2900      	cmp	r1, #0
 8000822:	bf08      	it	eq
 8000824:	2800      	cmpeq	r0, #0
 8000826:	bf1c      	itt	ne
 8000828:	f04f 31ff 	movne.w	r1, #4294967295
 800082c:	f04f 30ff 	movne.w	r0, #4294967295
 8000830:	f000 b97e 	b.w	8000b30 <__aeabi_idiv0>
 8000834:	f1ad 0c08 	sub.w	ip, sp, #8
 8000838:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800083c:	f000 f806 	bl	800084c <__udivmoddi4>
 8000840:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr

0800084c <__udivmoddi4>:
 800084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000850:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000852:	460c      	mov	r4, r1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d14d      	bne.n	80008f4 <__udivmoddi4+0xa8>
 8000858:	428a      	cmp	r2, r1
 800085a:	460f      	mov	r7, r1
 800085c:	4684      	mov	ip, r0
 800085e:	4696      	mov	lr, r2
 8000860:	fab2 f382 	clz	r3, r2
 8000864:	d960      	bls.n	8000928 <__udivmoddi4+0xdc>
 8000866:	b14b      	cbz	r3, 800087c <__udivmoddi4+0x30>
 8000868:	fa02 fe03 	lsl.w	lr, r2, r3
 800086c:	f1c3 0220 	rsb	r2, r3, #32
 8000870:	409f      	lsls	r7, r3
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f202 	lsr.w	r2, r0, r2
 800087a:	4317      	orrs	r7, r2
 800087c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000880:	fa1f f48e 	uxth.w	r4, lr
 8000884:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000888:	fbb7 f1f6 	udiv	r1, r7, r6
 800088c:	fb06 7711 	mls	r7, r6, r1, r7
 8000890:	fb01 f004 	mul.w	r0, r1, r4
 8000894:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000898:	4290      	cmp	r0, r2
 800089a:	d908      	bls.n	80008ae <__udivmoddi4+0x62>
 800089c:	eb1e 0202 	adds.w	r2, lr, r2
 80008a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80008a4:	d202      	bcs.n	80008ac <__udivmoddi4+0x60>
 80008a6:	4290      	cmp	r0, r2
 80008a8:	f200 812d 	bhi.w	8000b06 <__udivmoddi4+0x2ba>
 80008ac:	4639      	mov	r1, r7
 80008ae:	1a12      	subs	r2, r2, r0
 80008b0:	fa1f fc8c 	uxth.w	ip, ip
 80008b4:	fbb2 f0f6 	udiv	r0, r2, r6
 80008b8:	fb06 2210 	mls	r2, r6, r0, r2
 80008bc:	fb00 f404 	mul.w	r4, r0, r4
 80008c0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80008c4:	4564      	cmp	r4, ip
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x8e>
 80008c8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80008cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80008d0:	d202      	bcs.n	80008d8 <__udivmoddi4+0x8c>
 80008d2:	4564      	cmp	r4, ip
 80008d4:	f200 811a 	bhi.w	8000b0c <__udivmoddi4+0x2c0>
 80008d8:	4610      	mov	r0, r2
 80008da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008de:	ebac 0c04 	sub.w	ip, ip, r4
 80008e2:	2100      	movs	r1, #0
 80008e4:	b125      	cbz	r5, 80008f0 <__udivmoddi4+0xa4>
 80008e6:	fa2c f303 	lsr.w	r3, ip, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	e9c5 3200 	strd	r3, r2, [r5]
 80008f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d905      	bls.n	8000904 <__udivmoddi4+0xb8>
 80008f8:	b10d      	cbz	r5, 80008fe <__udivmoddi4+0xb2>
 80008fa:	e9c5 0100 	strd	r0, r1, [r5]
 80008fe:	2100      	movs	r1, #0
 8000900:	4608      	mov	r0, r1
 8000902:	e7f5      	b.n	80008f0 <__udivmoddi4+0xa4>
 8000904:	fab3 f183 	clz	r1, r3
 8000908:	2900      	cmp	r1, #0
 800090a:	d14d      	bne.n	80009a8 <__udivmoddi4+0x15c>
 800090c:	42a3      	cmp	r3, r4
 800090e:	f0c0 80f2 	bcc.w	8000af6 <__udivmoddi4+0x2aa>
 8000912:	4290      	cmp	r0, r2
 8000914:	f080 80ef 	bcs.w	8000af6 <__udivmoddi4+0x2aa>
 8000918:	4606      	mov	r6, r0
 800091a:	4623      	mov	r3, r4
 800091c:	4608      	mov	r0, r1
 800091e:	2d00      	cmp	r5, #0
 8000920:	d0e6      	beq.n	80008f0 <__udivmoddi4+0xa4>
 8000922:	e9c5 6300 	strd	r6, r3, [r5]
 8000926:	e7e3      	b.n	80008f0 <__udivmoddi4+0xa4>
 8000928:	2b00      	cmp	r3, #0
 800092a:	f040 80a2 	bne.w	8000a72 <__udivmoddi4+0x226>
 800092e:	1a8a      	subs	r2, r1, r2
 8000930:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000934:	fa1f f68e 	uxth.w	r6, lr
 8000938:	2101      	movs	r1, #1
 800093a:	fbb2 f4f7 	udiv	r4, r2, r7
 800093e:	fb07 2014 	mls	r0, r7, r4, r2
 8000942:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000946:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800094a:	fb06 f004 	mul.w	r0, r6, r4
 800094e:	4290      	cmp	r0, r2
 8000950:	d90f      	bls.n	8000972 <__udivmoddi4+0x126>
 8000952:	eb1e 0202 	adds.w	r2, lr, r2
 8000956:	f104 38ff 	add.w	r8, r4, #4294967295
 800095a:	bf2c      	ite	cs
 800095c:	f04f 0901 	movcs.w	r9, #1
 8000960:	f04f 0900 	movcc.w	r9, #0
 8000964:	4290      	cmp	r0, r2
 8000966:	d903      	bls.n	8000970 <__udivmoddi4+0x124>
 8000968:	f1b9 0f00 	cmp.w	r9, #0
 800096c:	f000 80c8 	beq.w	8000b00 <__udivmoddi4+0x2b4>
 8000970:	4644      	mov	r4, r8
 8000972:	1a12      	subs	r2, r2, r0
 8000974:	fa1f fc8c 	uxth.w	ip, ip
 8000978:	fbb2 f0f7 	udiv	r0, r2, r7
 800097c:	fb07 2210 	mls	r2, r7, r0, r2
 8000980:	fb00 f606 	mul.w	r6, r0, r6
 8000984:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000988:	4566      	cmp	r6, ip
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x152>
 800098c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000990:	f100 32ff 	add.w	r2, r0, #4294967295
 8000994:	d202      	bcs.n	800099c <__udivmoddi4+0x150>
 8000996:	4566      	cmp	r6, ip
 8000998:	f200 80bb 	bhi.w	8000b12 <__udivmoddi4+0x2c6>
 800099c:	4610      	mov	r0, r2
 800099e:	ebac 0c06 	sub.w	ip, ip, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	e79d      	b.n	80008e4 <__udivmoddi4+0x98>
 80009a8:	f1c1 0620 	rsb	r6, r1, #32
 80009ac:	408b      	lsls	r3, r1
 80009ae:	fa04 fe01 	lsl.w	lr, r4, r1
 80009b2:	fa22 f706 	lsr.w	r7, r2, r6
 80009b6:	fa20 fc06 	lsr.w	ip, r0, r6
 80009ba:	40f4      	lsrs	r4, r6
 80009bc:	408a      	lsls	r2, r1
 80009be:	431f      	orrs	r7, r3
 80009c0:	ea4e 030c 	orr.w	r3, lr, ip
 80009c4:	fa00 fe01 	lsl.w	lr, r0, r1
 80009c8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009d0:	fa1f fc87 	uxth.w	ip, r7
 80009d4:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d8:	fb08 4410 	mls	r4, r8, r0, r4
 80009dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e0:	fb00 f90c 	mul.w	r9, r0, ip
 80009e4:	45a1      	cmp	r9, r4
 80009e6:	d90e      	bls.n	8000a06 <__udivmoddi4+0x1ba>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f100 3aff 	add.w	sl, r0, #4294967295
 80009ee:	bf2c      	ite	cs
 80009f0:	f04f 0b01 	movcs.w	fp, #1
 80009f4:	f04f 0b00 	movcc.w	fp, #0
 80009f8:	45a1      	cmp	r9, r4
 80009fa:	d903      	bls.n	8000a04 <__udivmoddi4+0x1b8>
 80009fc:	f1bb 0f00 	cmp.w	fp, #0
 8000a00:	f000 8093 	beq.w	8000b2a <__udivmoddi4+0x2de>
 8000a04:	4650      	mov	r0, sl
 8000a06:	eba4 0409 	sub.w	r4, r4, r9
 8000a0a:	fa1f f983 	uxth.w	r9, r3
 8000a0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000a12:	fb08 4413 	mls	r4, r8, r3, r4
 8000a16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a1e:	45a4      	cmp	ip, r4
 8000a20:	d906      	bls.n	8000a30 <__udivmoddi4+0x1e4>
 8000a22:	193c      	adds	r4, r7, r4
 8000a24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a28:	d201      	bcs.n	8000a2e <__udivmoddi4+0x1e2>
 8000a2a:	45a4      	cmp	ip, r4
 8000a2c:	d87a      	bhi.n	8000b24 <__udivmoddi4+0x2d8>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a34:	eba4 040c 	sub.w	r4, r4, ip
 8000a38:	fba0 9802 	umull	r9, r8, r0, r2
 8000a3c:	4544      	cmp	r4, r8
 8000a3e:	46cc      	mov	ip, r9
 8000a40:	4643      	mov	r3, r8
 8000a42:	d302      	bcc.n	8000a4a <__udivmoddi4+0x1fe>
 8000a44:	d106      	bne.n	8000a54 <__udivmoddi4+0x208>
 8000a46:	45ce      	cmp	lr, r9
 8000a48:	d204      	bcs.n	8000a54 <__udivmoddi4+0x208>
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000a50:	eb68 0307 	sbc.w	r3, r8, r7
 8000a54:	b15d      	cbz	r5, 8000a6e <__udivmoddi4+0x222>
 8000a56:	ebbe 020c 	subs.w	r2, lr, ip
 8000a5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000a5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a62:	fa22 f301 	lsr.w	r3, r2, r1
 8000a66:	40cc      	lsrs	r4, r1
 8000a68:	431e      	orrs	r6, r3
 8000a6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e73e      	b.n	80008f0 <__udivmoddi4+0xa4>
 8000a72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000a76:	f1c3 0120 	rsb	r1, r3, #32
 8000a7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000a7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a82:	40cc      	lsrs	r4, r1
 8000a84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000a88:	fa20 f101 	lsr.w	r1, r0, r1
 8000a8c:	fa1f f68e 	uxth.w	r6, lr
 8000a90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000a94:	430a      	orrs	r2, r1
 8000a96:	fb07 4410 	mls	r4, r7, r0, r4
 8000a9a:	0c11      	lsrs	r1, r2, #16
 8000a9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000aa0:	fb00 f406 	mul.w	r4, r0, r6
 8000aa4:	428c      	cmp	r4, r1
 8000aa6:	d90e      	bls.n	8000ac6 <__udivmoddi4+0x27a>
 8000aa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000aac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab0:	bf2c      	ite	cs
 8000ab2:	f04f 0901 	movcs.w	r9, #1
 8000ab6:	f04f 0900 	movcc.w	r9, #0
 8000aba:	428c      	cmp	r4, r1
 8000abc:	d902      	bls.n	8000ac4 <__udivmoddi4+0x278>
 8000abe:	f1b9 0f00 	cmp.w	r9, #0
 8000ac2:	d02c      	beq.n	8000b1e <__udivmoddi4+0x2d2>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	1b09      	subs	r1, r1, r4
 8000ac8:	b292      	uxth	r2, r2
 8000aca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ace:	fb07 1114 	mls	r1, r7, r4, r1
 8000ad2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ad6:	fb04 f106 	mul.w	r1, r4, r6
 8000ada:	4291      	cmp	r1, r2
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x2a2>
 8000ade:	eb1e 0202 	adds.w	r2, lr, r2
 8000ae2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ae6:	d201      	bcs.n	8000aec <__udivmoddi4+0x2a0>
 8000ae8:	4291      	cmp	r1, r2
 8000aea:	d815      	bhi.n	8000b18 <__udivmoddi4+0x2cc>
 8000aec:	4644      	mov	r4, r8
 8000aee:	1a52      	subs	r2, r2, r1
 8000af0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000af4:	e721      	b.n	800093a <__udivmoddi4+0xee>
 8000af6:	1a86      	subs	r6, r0, r2
 8000af8:	eb64 0303 	sbc.w	r3, r4, r3
 8000afc:	2001      	movs	r0, #1
 8000afe:	e70e      	b.n	800091e <__udivmoddi4+0xd2>
 8000b00:	3c02      	subs	r4, #2
 8000b02:	4472      	add	r2, lr
 8000b04:	e735      	b.n	8000972 <__udivmoddi4+0x126>
 8000b06:	3902      	subs	r1, #2
 8000b08:	4472      	add	r2, lr
 8000b0a:	e6d0      	b.n	80008ae <__udivmoddi4+0x62>
 8000b0c:	44f4      	add	ip, lr
 8000b0e:	3802      	subs	r0, #2
 8000b10:	e6e3      	b.n	80008da <__udivmoddi4+0x8e>
 8000b12:	44f4      	add	ip, lr
 8000b14:	3802      	subs	r0, #2
 8000b16:	e742      	b.n	800099e <__udivmoddi4+0x152>
 8000b18:	3c02      	subs	r4, #2
 8000b1a:	4472      	add	r2, lr
 8000b1c:	e7e7      	b.n	8000aee <__udivmoddi4+0x2a2>
 8000b1e:	3802      	subs	r0, #2
 8000b20:	4471      	add	r1, lr
 8000b22:	e7d0      	b.n	8000ac6 <__udivmoddi4+0x27a>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	e782      	b.n	8000a30 <__udivmoddi4+0x1e4>
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	443c      	add	r4, r7
 8000b2e:	e76a      	b.n	8000a06 <__udivmoddi4+0x1ba>

08000b30 <__aeabi_idiv0>:
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <MX_GPIO_Disable>:
  * @brief Disable the clock of all GPIOs
  * @param None
  * @retval None
  */
void MX_GPIO_Disable(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOE_CLK_DISABLE();
 8000b38:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b3e:	4a25      	ldr	r2, [pc, #148]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b40:	f023 0310 	bic.w	r3, r3, #16
 8000b44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOI_CLK_DISABLE();
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b4e:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOG_CLK_DISABLE();
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6e:	4a19      	ldr	r2, [pc, #100]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b70:	f023 0304 	bic.w	r3, r3, #4
 8000b74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7e:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8e:	4a11      	ldr	r2, [pc, #68]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000ba0:	f023 0302 	bic.w	r3, r3, #2
 8000ba4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bae:	4a09      	ldr	r2, [pc, #36]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000bb0:	f023 0308 	bic.w	r3, r3, #8
 8000bb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	__HAL_RCC_GPIOF_CLK_DISABLE();
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <MX_GPIO_Disable+0xa0>)
 8000bc0:	f023 0320 	bic.w	r3, r3, #32
 8000bc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

  /* STM32H7A3 / STM32H7B3 AXI clock gating */
  /* uncomment the following line only on  STM32H7A3 / STM32H7B3 */
  /* RCC->CKGAENR= 0xFFFFFFFF; */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	46020c00 	.word	0x46020c00

08000bd8 <MX_UARTx_DeInit>:
  * @brief Disable the VCOM UART
  * @param None
  * @retval None
  */
void MX_UARTx_DeInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
  HAL_UART_DeInit(&huart1);
 8000bde:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <MX_UARTx_DeInit+0x3c>)
 8000be0:	f005 fb5a 	bl	8006298 <HAL_UART_DeInit>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /*Configure GPIO pins : PG7, PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bf2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_UARTx_DeInit+0x40>)
 8000c06:	f000 ffa9 	bl	8001b5c <HAL_GPIO_Init>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000690 	.word	0x20000690
 8000c18:	42021800 	.word	0x42021800

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fc32 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f80d 	bl	8000c42 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000c28:	f000 f865 	bl	8000cf6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2c:	f000 f8f2 	bl	8000e14 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000c30:	f000 f890 	bl	8000d54 <MX_ICACHE_Init>
  MX_CRC_Init();
 8000c34:	f000 f86c 	bl	8000d10 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000c38:	f008 fc7a 	bl	8009530 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000c3c:	f008 fc80 	bl	8009540 <MX_X_CUBE_AI_Process>
 8000c40:	e7fc      	b.n	8000c3c <main+0x20>

08000c42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b09e      	sub	sp, #120	@ 0x78
 8000c46:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	2260      	movs	r2, #96	@ 0x60
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00b fa75 	bl	800c140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c66:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000c6a:	f001 fa5d 	bl	8002128 <HAL_PWREx_ControlVoltageScaling>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000c74:	f000 f9ec 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c82:	2310      	movs	r3, #16
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c96:	230a      	movs	r3, #10
 8000c98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fb14 	bl	80022e0 <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cbe:	f000 f9c7 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	231f      	movs	r3, #31
 8000cc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2104      	movs	r1, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 f9da 	bl	8003098 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cea:	f000 f9b1 	bl	8001050 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3778      	adds	r7, #120	@ 0x78
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f001 faa0 	bl	8002240 <HAL_PWREx_ConfigSupply>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000d06:	f000 f9a3 	bl	8001050 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <MX_CRC_Init+0x40>)
 8000d18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d3a:	f000 fe1d 	bl	8001978 <HAL_CRC_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d44:	f000 f984 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000066c 	.word	0x2000066c
 8000d50:	40023000 	.word	0x40023000

08000d54 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f001 f9b5 	bl	80020c8 <HAL_ICACHE_ConfigAssociativityMode>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d64:	f000 f974 	bl	8001050 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d68:	f001 f9ce 	bl	8002108 <HAL_ICACHE_Enable>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d72:	f000 f96d 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <MX_USART1_UART_Init+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc4:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dc6:	f005 fa17 	bl	80061f8 <HAL_UART_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dd0:	f000 f93e 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dd8:	f006 f80c 	bl	8006df4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000de2:	f000 f935 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4808      	ldr	r0, [pc, #32]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dea:	f006 f841 	bl	8006e70 <HAL_UARTEx_SetRxFifoThreshold>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000df4:	f000 f92c 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dfa:	f005 ffc2 	bl	8006d82 <HAL_UARTEx_DisableFifoMode>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f000 f924 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000690 	.word	0x20000690
 8000e10:	40013800 	.word	0x40013800

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	@ 0x38
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e30:	4a7d      	ldr	r2, [pc, #500]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	623b      	str	r3, [r7, #32]
 8000e46:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e48:	4b77      	ldr	r3, [pc, #476]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e4e:	4a76      	ldr	r2, [pc, #472]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e58:	4b73      	ldr	r3, [pc, #460]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b70      	ldr	r3, [pc, #448]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e76:	4b6c      	ldr	r3, [pc, #432]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	4b68      	ldr	r3, [pc, #416]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e8a:	4a67      	ldr	r2, [pc, #412]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e94:	4b64      	ldr	r3, [pc, #400]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b61      	ldr	r3, [pc, #388]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec0:	4b59      	ldr	r3, [pc, #356]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec6:	4a58      	ldr	r2, [pc, #352]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ecc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ed0:	4b55      	ldr	r3, [pc, #340]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b52      	ldr	r3, [pc, #328]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee4:	4a50      	ldr	r2, [pc, #320]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eee:	4b4e      	ldr	r3, [pc, #312]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f02:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f0c:	4b46      	ldr	r3, [pc, #280]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1a:	4b43      	ldr	r3, [pc, #268]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f20:	4a41      	ldr	r2, [pc, #260]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001028 <MX_GPIO_Init+0x214>)
 8000f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f30:	f003 0320 	and.w	r3, r3, #32
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE2 PE4 PE1 PE5
                           PE3 PE0 PE6 PE10
                           PE9 PE8 PE14 PE7
                           PE13 PE11 PE15 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_5
 8000f38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_10
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4837      	ldr	r0, [pc, #220]	@ (800102c <MX_GPIO_Init+0x218>)
 8000f4e:	f000 fe05 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI6 PI1 PI5 PI4
                           PI0 PI7 PI3 PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4
 8000f52:	23ff      	movs	r3, #255	@ 0xff
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4832      	ldr	r0, [pc, #200]	@ (8001030 <MX_GPIO_Init+0x21c>)
 8000f66:	f000 fdf9 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG9 PG10 PG12
                           PG7 PG1 PG8 PG6
                           PG4 PG0 PG3 PG5
                           PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
 8000f6a:	f249 73ff 	movw	r3, #38911	@ 0x97ff
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_6
                          |GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	482d      	ldr	r0, [pc, #180]	@ (8001034 <MX_GPIO_Init+0x220>)
 8000f80:	f000 fdec 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC13 PC12 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 8000f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4827      	ldr	r0, [pc, #156]	@ (8001038 <MX_GPIO_Init+0x224>)
 8000f9a:	f000 fddf 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA14 PA13 PA12
                           PA8 PA11 PA7 PA0
                           PA5 PA1 PA2 PA4
                           PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000f9e:	f64f 13ff 	movw	r3, #63999	@ 0xf9ff
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_7|GPIO_PIN_0
                          |GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_3|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4822      	ldr	r0, [pc, #136]	@ (800103c <MX_GPIO_Init+0x228>)
 8000fb4:	f000 fdd2 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH12 PH3 PH14
                           PH13 PH10 PH11 PH8
                           PH9 PH4 PH6 PH7
                           PH5 PH2 PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_14
 8000fb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_5|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481c      	ldr	r0, [pc, #112]	@ (8001040 <MX_GPIO_Init+0x22c>)
 8000fce:	f000 fdc5 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB4 PB5 PB9
                           PB3 PB8 PB7 PB0
                           PB10 PB2 PB11 PB12
                           PB15 PB14 PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9
 8000fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_1|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4817      	ldr	r0, [pc, #92]	@ (8001044 <MX_GPIO_Init+0x230>)
 8000fe8:	f000 fdb8 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD0 PD4 PD7
                           PD3 PD5 PD1 PD2
                           PD14 PD15 PD12 PD10
                           PD13 PD8 PD9 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_7
 8000fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_10
                          |GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4811      	ldr	r0, [pc, #68]	@ (8001048 <MX_GPIO_Init+0x234>)
 8001002:	f000 fdab 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF8 PF1 PF2
                           PF7 PF9 PF5 PF3
                           PF4 PF10 PF6 PF12
                           PF14 PF11 PF13 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8001006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_12
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100c:	2303      	movs	r3, #3
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_GPIO_Init+0x238>)
 800101c:	f000 fd9e 	bl	8001b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	@ 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	46020c00 	.word	0x46020c00
 800102c:	42021000 	.word	0x42021000
 8001030:	42022000 	.word	0x42022000
 8001034:	42021800 	.word	0x42021800
 8001038:	42020800 	.word	0x42020800
 800103c:	42020000 	.word	0x42020000
 8001040:	42021c00 	.word	0x42021c00
 8001044:	42020400 	.word	0x42020400
 8001048:	42020c00 	.word	0x42020c00
 800104c:	42021400 	.word	0x42021400

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_MspInit+0x30>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001068:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x30>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x30>)
 8001074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	46020c00 	.word	0x46020c00

08001090 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_CRC_MspInit+0x3c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10e      	bne.n	80010c0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <HAL_CRC_MspInit+0x40>)
 80010a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a8:	4a09      	ldr	r2, [pc, #36]	@ (80010d0 <HAL_CRC_MspInit+0x40>)
 80010aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80010b2:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <HAL_CRC_MspInit+0x40>)
 80010b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40023000 	.word	0x40023000
 80010d0:	46020c00 	.word	0x46020c00

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0bc      	sub	sp, #240	@ 0xf0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	22c8      	movs	r2, #200	@ 0xc8
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00b f823 	bl	800c140 <memset>
  if(huart->Instance==USART1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a31      	ldr	r2, [pc, #196]	@ (80011c4 <HAL_UART_MspInit+0xf0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d15b      	bne.n	80011bc <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001104:	f04f 0201 	mov.w	r2, #1
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001110:	2300      	movs	r3, #0
 8001112:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fb8d 	bl	8003838 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001124:	f7ff ff94 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <HAL_UART_MspInit+0xf4>)
 800112a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800112e:	4a26      	ldr	r2, [pc, #152]	@ (80011c8 <HAL_UART_MspInit+0xf4>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <HAL_UART_MspInit+0xf4>)
 800113a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_UART_MspInit+0xf4>)
 8001148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800114c:	4a1e      	ldr	r2, [pc, #120]	@ (80011c8 <HAL_UART_MspInit+0xf4>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <HAL_UART_MspInit+0xf4>)
 8001158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin;
 8001164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001168:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800117e:	2307      	movs	r3, #7
 8001180:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(T_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001188:	4619      	mov	r1, r3
 800118a:	4810      	ldr	r0, [pc, #64]	@ (80011cc <HAL_UART_MspInit+0xf8>)
 800118c:	f000 fce6 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = T_VCP_TX_Pin;
 8001190:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001194:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011aa:	2307      	movs	r3, #7
 80011ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(T_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011b4:	4619      	mov	r1, r3
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <HAL_UART_MspInit+0xf8>)
 80011b8:	f000 fcd0 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	37f0      	adds	r7, #240	@ 0xf0
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40013800 	.word	0x40013800
 80011c8:	46020c00 	.word	0x46020c00
 80011cc:	42020000 	.word	0x42020000

080011d0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <HAL_UART_MspDeInit+0x34>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10c      	bne.n	80011fc <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_UART_MspDeInit+0x38>)
 80011e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80011e8:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_UART_MspDeInit+0x38>)
 80011ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, T_VCP_RX_Pin|T_VCP_TX_Pin);
 80011f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_UART_MspDeInit+0x3c>)
 80011f8:	f000 fe88 	bl	8001f0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013800 	.word	0x40013800
 8001208:	46020c00 	.word	0x46020c00
 800120c:	42020000 	.word	0x42020000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 f9b5 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <_kill>:

int _kill(int pid, int sig)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001288:	f00a ffca 	bl	800c220 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	2216      	movs	r2, #22
 8001290:	601a      	str	r2, [r3, #0]
  return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_exit>:

void _exit (int status)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012a6:	f04f 31ff 	mov.w	r1, #4294967295
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffe7 	bl	800127e <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <_exit+0x12>

080012b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
  }

  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001316:	605a      	str	r2, [r3, #4]
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_isatty>:

int _isatty(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f00a ff4a 	bl	800c220 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200c0000 	.word	0x200c0000
 80013b8:	00000800 	.word	0x00000800
 80013bc:	20000724 	.word	0x20000724
 80013c0:	20000aa8 	.word	0x20000aa8

080013c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <SystemInit+0x68>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <SystemInit+0x68>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <SystemInit+0x6c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <SystemInit+0x6c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <SystemInit+0x6c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <SystemInit+0x6c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <SystemInit+0x6c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001430 <SystemInit+0x6c>)
 80013f6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80013fa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80013fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <SystemInit+0x6c>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <SystemInit+0x6c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <SystemInit+0x6c>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001410:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <SystemInit+0x6c>)
 8001414:	2200      	movs	r2, #0
 8001416:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <SystemInit+0x68>)
 800141a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800141e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	46020c00 	.word	0x46020c00

08001434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800146c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff ffc4 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800143c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001448:	480a      	ldr	r0, [pc, #40]	@ (8001474 <LoopForever+0xa>)
	ldr	r3, =_edata
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <LoopForever+0xe>)
	adds	r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800144e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
	ldr	r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001456:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <LoopForever+0x16>)
	cmp	r2, r3
 800145e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f00a fee3 	bl	800c22c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001466:	f7ff fbd9 	bl	8000c1c <main>

0800146a <LoopForever>:

LoopForever:
    b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800146c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001470:	0800e220 	.word	0x0800e220
	ldr	r0, =_sdata
 8001474:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001478:	20000650 	.word	0x20000650
	ldr	r2, =_sbss
 800147c:	20000650 	.word	0x20000650
	ldr	r3, = _ebss
 8001480:	20000aa6 	.word	0x20000aa6

08001484 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_IRQHandler>
	...

08001488 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_Init+0x50>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_Init+0x50>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f994 	bl	80017c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800149e:	f001 ffed 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_Init+0x54>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <HAL_Init+0x58>)
 80014ae:	5ccb      	ldrb	r3, [r1, r3]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <HAL_Init+0x5c>)
 80014b6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014b8:	2004      	movs	r0, #4
 80014ba:	f000 f9cb 	bl	8001854 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f812 	bl	80014e8 <HAL_InitTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e002      	b.n	80014d4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ce:	f7ff fdc5 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40022000 	.word	0x40022000
 80014dc:	46020c00 	.word	0x46020c00
 80014e0:	0800d9a4 	.word	0x0800d9a4
 80014e4:	20000000 	.word	0x20000000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80014f4:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <HAL_InitTick+0xdc>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e05c      	b.n	80015ba <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001500:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <HAL_InitTick+0xe0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b04      	cmp	r3, #4
 800150a:	d10c      	bne.n	8001526 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_InitTick+0xe4>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b2c      	ldr	r3, [pc, #176]	@ (80015c4 <HAL_InitTick+0xdc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e037      	b.n	8001596 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001526:	f000 f9ed 	bl	8001904 <HAL_SYSTICK_GetCLKSourceConfig>
 800152a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d023      	beq.n	800157a <HAL_InitTick+0x92>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d82d      	bhi.n	8001594 <HAL_InitTick+0xac>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_InitTick+0x5e>
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d00d      	beq.n	8001560 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001544:	e026      	b.n	8001594 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <HAL_InitTick+0xe4>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <HAL_InitTick+0xdc>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001554:	fbb3 f3f1 	udiv	r3, r3, r1
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	60fb      	str	r3, [r7, #12]
        break;
 800155e:	e01a      	b.n	8001596 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_InitTick+0xdc>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156a:	fbb3 f3f2 	udiv	r3, r3, r2
 800156e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]
        break;
 8001578:	e00d      	b.n	8001596 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_InitTick+0xdc>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001584:	fbb3 f3f2 	udiv	r3, r3, r2
 8001588:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800158c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001590:	60fb      	str	r3, [r7, #12]
        break;
 8001592:	e000      	b.n	8001596 <HAL_InitTick+0xae>
        break;
 8001594:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f93a 	bl	8001810 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e009      	b.n	80015ba <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a6:	2200      	movs	r2, #0
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	f04f 30ff 	mov.w	r0, #4294967295
 80015ae:	f000 f915 	bl	80017dc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80015b2:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_InitTick+0xe8>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	e000e010 	.word	0xe000e010
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000728 	.word	0x20000728

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000728 	.word	0x20000728

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return __STM32U5xx_HAL_VERSION;
 8001660:	4b02      	ldr	r3, [pc, #8]	@ (800166c <HAL_GetHalVersion+0x10>)
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	01050000 	.word	0x01050000

08001670 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <HAL_GetREVID+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	b29b      	uxth	r3, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e0044000 	.word	0xe0044000

0800168c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return (DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <HAL_GetDEVID+0x18>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e0044000 	.word	0xe0044000

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	@ 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff6a 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ea:	f7ff ff81 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 80017ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7ff ffb3 	bl	8001760 <NVIC_EncodePriority>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff82 	bl	800170c <__NVIC_SetPriority>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001822:	2301      	movs	r3, #1
 8001824:	e00d      	b.n	8001842 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_SYSTICK_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_SYSTICK_Config+0x40>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_SYSTICK_Config+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <HAL_SYSTICK_Config+0x40>)
 800183a:	f043 0303 	orr.w	r3, r3, #3
 800183e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d844      	bhi.n	80018ec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001862:	a201      	add	r2, pc, #4	@ (adr r2, 8001868 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	0800188b 	.word	0x0800188b
 800186c:	080018a9 	.word	0x080018a9
 8001870:	080018cb 	.word	0x080018cb
 8001874:	080018ed 	.word	0x080018ed
 8001878:	0800187d 	.word	0x0800187d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1e      	ldr	r2, [pc, #120]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6013      	str	r3, [r2, #0]
      break;
 8001888:	e031      	b.n	80018ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189c:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800189e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80018a6:	e022      	b.n	80018ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a13      	ldr	r2, [pc, #76]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80018c8:	e011      	b.n	80018ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018dc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80018e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80018ea:	e000      	b.n	80018ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80018ec:	bf00      	nop
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010
 8001900:	46020c00 	.word	0x46020c00

08001904 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001916:	2304      	movs	r3, #4
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	e021      	b.n	8001960 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001922:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001926:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800192e:	d011      	beq.n	8001954 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001936:	d810      	bhi.n	800195a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001944:	d003      	beq.n	800194e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001946:	e008      	b.n	800195a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
        break;
 800194c:	e008      	b.n	8001960 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800194e:	2301      	movs	r3, #1
 8001950:	607b      	str	r3, [r7, #4]
        break;
 8001952:	e005      	b.n	8001960 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001954:	2302      	movs	r3, #2
 8001956:	607b      	str	r3, [r7, #4]
        break;
 8001958:	e002      	b.n	8001960 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
        break;
 800195e:	bf00      	nop
    }
  }
  return systick_source;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010
 8001974:	46020c00 	.word	0x46020c00

08001978 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e054      	b.n	8001a34 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7f5b      	ldrb	r3, [r3, #29]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fb78 	bl	8001090 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	791b      	ldrb	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a22      	ldr	r2, [pc, #136]	@ (8001a3c <HAL_CRC_Init+0xc4>)
 80019b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0218 	bic.w	r2, r2, #24
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e00c      	b.n	80019e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	461a      	mov	r2, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f834 	bl	8001a40 <HAL_CRCEx_Polynomial_Set>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e028      	b.n	8001a34 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	795b      	ldrb	r3, [r3, #5]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	e004      	b.n	8001a00 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6912      	ldr	r2, [r2, #16]
 80019fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	04c11db7 	.word	0x04c11db7

08001a40 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a50:	231f      	movs	r3, #31
 8001a52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
 8001a62:	e063      	b.n	8001b2c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a64:	bf00      	nop
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	613a      	str	r2, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <HAL_CRCEx_Polynomial_Set+0x44>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b18      	cmp	r3, #24
 8001a88:	d846      	bhi.n	8001b18 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b19 	.word	0x08001b19
 8001a98:	08001b19 	.word	0x08001b19
 8001a9c:	08001b19 	.word	0x08001b19
 8001aa0:	08001b19 	.word	0x08001b19
 8001aa4:	08001b19 	.word	0x08001b19
 8001aa8:	08001b19 	.word	0x08001b19
 8001aac:	08001b19 	.word	0x08001b19
 8001ab0:	08001b0d 	.word	0x08001b0d
 8001ab4:	08001b19 	.word	0x08001b19
 8001ab8:	08001b19 	.word	0x08001b19
 8001abc:	08001b19 	.word	0x08001b19
 8001ac0:	08001b19 	.word	0x08001b19
 8001ac4:	08001b19 	.word	0x08001b19
 8001ac8:	08001b19 	.word	0x08001b19
 8001acc:	08001b19 	.word	0x08001b19
 8001ad0:	08001b01 	.word	0x08001b01
 8001ad4:	08001b19 	.word	0x08001b19
 8001ad8:	08001b19 	.word	0x08001b19
 8001adc:	08001b19 	.word	0x08001b19
 8001ae0:	08001b19 	.word	0x08001b19
 8001ae4:	08001b19 	.word	0x08001b19
 8001ae8:	08001b19 	.word	0x08001b19
 8001aec:	08001b19 	.word	0x08001b19
 8001af0:	08001af5 	.word	0x08001af5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d913      	bls.n	8001b22 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001afe:	e010      	b.n	8001b22 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b07      	cmp	r3, #7
 8001b04:	d90f      	bls.n	8001b26 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b0a:	e00c      	b.n	8001b26 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	d90b      	bls.n	8001b2a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b16:	e008      	b.n	8001b2a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	75fb      	strb	r3, [r7, #23]
        break;
 8001b1c:	e006      	b.n	8001b2c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b1e:	bf00      	nop
 8001b20:	e004      	b.n	8001b2c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b22:	bf00      	nop
 8001b24:	e002      	b.n	8001b2c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b26:	bf00      	nop
 8001b28:	e000      	b.n	8001b2c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b2a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 0118 	bic.w	r1, r3, #24
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b6e:	e1ba      	b.n	8001ee6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 81aa 	beq.w	8001ee0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a55      	ldr	r2, [pc, #340]	@ (8001ce4 <HAL_GPIO_Init+0x188>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d15d      	bne.n	8001c50 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001bc4:	4a48      	ldr	r2, [pc, #288]	@ (8001ce8 <HAL_GPIO_Init+0x18c>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bcc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001bce:	4a46      	ldr	r2, [pc, #280]	@ (8001ce8 <HAL_GPIO_Init+0x18c>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220b      	movs	r2, #11
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	69f9      	ldr	r1, [r7, #28]
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e067      	b.n	8001d20 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x104>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d145      	bne.n	8001cec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	69f9      	ldr	r1, [r7, #28]
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e01e      	b.n	8001d20 <HAL_GPIO_Init+0x1c4>
 8001ce2:	bf00      	nop
 8001ce4:	46020000 	.word	0x46020000
 8001ce8:	0800d9fc 	.word	0x0800d9fc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d00b      	beq.n	8001d40 <HAL_GPIO_Init+0x1e4>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d34:	2b11      	cmp	r3, #17
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b12      	cmp	r3, #18
 8001d3e:	d130      	bne.n	8001da2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001d76:	2201      	movs	r2, #1
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	f003 0201 	and.w	r2, r3, #1
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d07c      	beq.n	8001ee0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001de6:	4a47      	ldr	r2, [pc, #284]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3318      	adds	r3, #24
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0a9a      	lsrs	r2, r3, #10
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f08 <HAL_GPIO_Init+0x3ac>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	00d2      	lsls	r2, r2, #3
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e22:	4938      	ldr	r1, [pc, #224]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3318      	adds	r3, #24
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e30:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001e54:	4a2b      	ldr	r2, [pc, #172]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001e7e:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e84:	4b1f      	ldr	r3, [pc, #124]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <HAL_GPIO_Init+0x3a8>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f47f ae3d 	bne.w	8001b70 <HAL_GPIO_Init+0x14>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3724      	adds	r7, #36	@ 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	46022000 	.word	0x46022000
 8001f08:	002f7f7f 	.word	0x002f7f7f

08001f0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8001f1e:	e0bc      	b.n	800209a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8001f20:	2201      	movs	r2, #1
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80ad 	beq.w	8002094 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80020b8 <HAL_GPIO_DeInit+0x1ac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d115      	bne.n	8001f6e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8001f42:	4a5e      	ldr	r2, [pc, #376]	@ (80020bc <HAL_GPIO_DeInit+0x1b0>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f4a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001f4c:	4a5b      	ldr	r2, [pc, #364]	@ (80020bc <HAL_GPIO_DeInit+0x1b0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8001f58:	4b57      	ldr	r3, [pc, #348]	@ (80020b8 <HAL_GPIO_DeInit+0x1ac>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4954      	ldr	r1, [pc, #336]	@ (80020b8 <HAL_GPIO_DeInit+0x1ac>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e053      	b.n	8002016 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8001f6e:	4a54      	ldr	r2, [pc, #336]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3318      	adds	r3, #24
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0a9a      	lsrs	r2, r3, #10
 8001f94:	4b4b      	ldr	r3, [pc, #300]	@ (80020c4 <HAL_GPIO_DeInit+0x1b8>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f002 0203 	and.w	r2, r2, #3
 8001f9e:	00d2      	lsls	r2, r2, #3
 8001fa0:	4093      	lsls	r3, r2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d136      	bne.n	8002016 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8001fa8:	4b45      	ldr	r3, [pc, #276]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001faa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4943      	ldr	r1, [pc, #268]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fbc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	493e      	ldr	r1, [pc, #248]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	493a      	ldr	r1, [pc, #232]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8001fda:	4b39      	ldr	r3, [pc, #228]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8001ff8:	4a31      	ldr	r2, [pc, #196]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3318      	adds	r3, #24
 8002000:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43da      	mvns	r2, r3
 8002008:	482d      	ldr	r0, [pc, #180]	@ (80020c0 <HAL_GPIO_DeInit+0x1b4>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	400a      	ands	r2, r1
 8002010:	3318      	adds	r3, #24
 8002012:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2103      	movs	r1, #3
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3208      	adds	r2, #8
 8002032:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	08d2      	lsrs	r2, r2, #3
 800204a:	4019      	ands	r1, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3208      	adds	r2, #8
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2103      	movs	r1, #3
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	401a      	ands	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	2101      	movs	r1, #1
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	401a      	ands	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2103      	movs	r1, #3
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	3301      	adds	r3, #1
 8002098:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f af3c 	bne.w	8001f20 <HAL_GPIO_DeInit+0x14>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3724      	adds	r7, #36	@ 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	46020000 	.word	0x46020000
 80020bc:	0800d9fc 	.word	0x0800d9fc
 80020c0:	46022000 	.word	0x46022000
 80020c4:	002f7f7f 	.word	0x002f7f7f

080020c8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e007      	b.n	80020f6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0204 	bic.w	r2, r3, #4
 80020ee:	4905      	ldr	r1, [pc, #20]	@ (8002104 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40030400 	.word	0x40030400

08002108 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_ICACHE_Enable+0x1c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_ICACHE_Enable+0x1c>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40030400 	.word	0x40030400

08002128 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002130:	4b39      	ldr	r3, [pc, #228]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002138:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d10b      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002148:	d905      	bls.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800214a:	4b33      	ldr	r3, [pc, #204]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4a32      	ldr	r2, [pc, #200]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002154:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e057      	b.n	800220a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002160:	d90a      	bls.n	8002178 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002162:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	4a2a      	ldr	r2, [pc, #168]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	60d3      	str	r3, [r2, #12]
 8002176:	e007      	b.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002180:	4925      	ldr	r1, [pc, #148]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002188:	4b24      	ldr	r3, [pc, #144]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a24      	ldr	r2, [pc, #144]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	2232      	movs	r2, #50	@ 0x32
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80021a6:	e002      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f3      	bne.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01b      	beq.n	80021fe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	2232      	movs	r2, #50	@ 0x32
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80021e4:	e002      	b.n	80021ec <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0xd6>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f3      	bne.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e000      	b.n	800220a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	46020800 	.word	0x46020800
 800221c:	20000000 	.word	0x20000000
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <HAL_PWREx_GetVoltageRange+0x18>)
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	46020800 	.word	0x46020800

08002240 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002248:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <HAL_PWREx_ConfigSupply+0x94>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <HAL_PWREx_ConfigSupply+0x98>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	2232      	movs	r2, #50	@ 0x32
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <HAL_PWREx_ConfigSupply+0x98>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	3301      	adds	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d113      	bne.n	8002294 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_PWREx_ConfigSupply+0x9c>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a1a      	ldr	r2, [pc, #104]	@ (80022dc <HAL_PWREx_ConfigSupply+0x9c>)
 8002272:	f023 0302 	bic.w	r3, r3, #2
 8002276:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002278:	e002      	b.n	8002280 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3b01      	subs	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <HAL_PWREx_ConfigSupply+0x9c>)
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b02      	cmp	r3, #2
 800228a:	d116      	bne.n	80022ba <HAL_PWREx_ConfigSupply+0x7a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f3      	bne.n	800227a <HAL_PWREx_ConfigSupply+0x3a>
 8002292:	e012      	b.n	80022ba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_PWREx_ConfigSupply+0x9c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_PWREx_ConfigSupply+0x9c>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80022a0:	e002      	b.n	80022a8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_PWREx_ConfigSupply+0x9c>)
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_PWREx_ConfigSupply+0x7a>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f3      	bne.n	80022a2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e000      	b.n	80022c6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000
 80022d8:	10624dd3 	.word	0x10624dd3
 80022dc:	46020800 	.word	0x46020800

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08e      	sub	sp, #56	@ 0x38
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f000 bec8 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fa:	4b99      	ldr	r3, [pc, #612]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002304:	4b96      	ldr	r3, [pc, #600]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 816c 	beq.w	80025f4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800231c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_RCC_OscConfig+0x52>
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	2b0c      	cmp	r3, #12
 8002326:	f040 80de 	bne.w	80024e6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 80da 	bne.w	80024e6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f000 bea5 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002344:	4b86      	ldr	r3, [pc, #536]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_RCC_OscConfig+0x7a>
 8002350:	4b83      	ldr	r3, [pc, #524]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002358:	e005      	b.n	8002366 <HAL_RCC_OscConfig+0x86>
 800235a:	4b81      	ldr	r3, [pc, #516]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800235c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002366:	4293      	cmp	r3, r2
 8002368:	d255      	bcs.n	8002416 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	4618      	mov	r0, r3
 8002376:	f001 f9d9 	bl	800372c <RCC_SetFlashLatencyFromMSIRange>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	f000 be82 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002386:	4b76      	ldr	r3, [pc, #472]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4a75      	ldr	r2, [pc, #468]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800238c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002390:	6093      	str	r3, [r2, #8]
 8002392:	4b73      	ldr	r3, [pc, #460]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	4970      	ldr	r1, [pc, #448]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023ac:	d309      	bcc.n	80023c2 <HAL_RCC_OscConfig+0xe2>
 80023ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f023 021f 	bic.w	r2, r3, #31
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4969      	ldr	r1, [pc, #420]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	60cb      	str	r3, [r1, #12]
 80023c0:	e07e      	b.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da0a      	bge.n	80023e0 <HAL_RCC_OscConfig+0x100>
 80023ca:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	4961      	ldr	r1, [pc, #388]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]
 80023de:	e06f      	b.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d30a      	bcc.n	8002400 <HAL_RCC_OscConfig+0x120>
 80023ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4959      	ldr	r1, [pc, #356]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]
 80023fe:	e05f      	b.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
 8002400:	4b57      	ldr	r3, [pc, #348]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	03db      	lsls	r3, r3, #15
 800240e:	4954      	ldr	r1, [pc, #336]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
 8002414:	e054      	b.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002416:	4b52      	ldr	r3, [pc, #328]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a51      	ldr	r2, [pc, #324]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800241c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002420:	6093      	str	r3, [r2, #8]
 8002422:	4b4f      	ldr	r3, [pc, #316]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	494c      	ldr	r1, [pc, #304]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800243c:	d309      	bcc.n	8002452 <HAL_RCC_OscConfig+0x172>
 800243e:	4b48      	ldr	r3, [pc, #288]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 021f 	bic.w	r2, r3, #31
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4945      	ldr	r1, [pc, #276]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800244c:	4313      	orrs	r3, r2
 800244e:	60cb      	str	r3, [r1, #12]
 8002450:	e028      	b.n	80024a4 <HAL_RCC_OscConfig+0x1c4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0a      	bge.n	8002470 <HAL_RCC_OscConfig+0x190>
 800245a:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	493d      	ldr	r1, [pc, #244]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
 800246e:	e019      	b.n	80024a4 <HAL_RCC_OscConfig+0x1c4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002478:	d30a      	bcc.n	8002490 <HAL_RCC_OscConfig+0x1b0>
 800247a:	4b39      	ldr	r3, [pc, #228]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	4935      	ldr	r1, [pc, #212]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
 800248e:	e009      	b.n	80024a4 <HAL_RCC_OscConfig+0x1c4>
 8002490:	4b33      	ldr	r3, [pc, #204]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	03db      	lsls	r3, r3, #15
 800249e:	4930      	ldr	r1, [pc, #192]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 f93c 	bl	800372c <RCC_SetFlashLatencyFromMSIRange>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 bde5 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80024c0:	f001 f8de 	bl	8003680 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024c4:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <HAL_RCC_OscConfig+0x284>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f80d 	bl	80014e8 <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80024d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808a 	beq.w	80025f2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80024de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024e2:	f000 bdd2 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d066      	beq.n	80025bc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024fa:	f7ff f87f 	bl	80015fc <HAL_GetTick>
 80024fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002500:	e009      	b.n	8002516 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002502:	f7ff f87b 	bl	80015fc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d902      	bls.n	8002516 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	f000 bdba 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ef      	beq.n	8002502 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002522:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002528:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800252c:	6093      	str	r3, [r2, #8]
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	4909      	ldr	r1, [pc, #36]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002548:	d30e      	bcc.n	8002568 <HAL_RCC_OscConfig+0x288>
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 021f 	bic.w	r2, r3, #31
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4902      	ldr	r1, [pc, #8]	@ (8002560 <HAL_RCC_OscConfig+0x280>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e04a      	b.n	80025f4 <HAL_RCC_OscConfig+0x314>
 800255e:	bf00      	nop
 8002560:	46020c00 	.word	0x46020c00
 8002564:	20000004 	.word	0x20000004
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	da0a      	bge.n	8002586 <HAL_RCC_OscConfig+0x2a6>
 8002570:	4b98      	ldr	r3, [pc, #608]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	015b      	lsls	r3, r3, #5
 800257e:	4995      	ldr	r1, [pc, #596]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
 8002584:	e036      	b.n	80025f4 <HAL_RCC_OscConfig+0x314>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800258e:	d30a      	bcc.n	80025a6 <HAL_RCC_OscConfig+0x2c6>
 8002590:	4b90      	ldr	r3, [pc, #576]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	029b      	lsls	r3, r3, #10
 800259e:	498d      	ldr	r1, [pc, #564]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e026      	b.n	80025f4 <HAL_RCC_OscConfig+0x314>
 80025a6:	4b8b      	ldr	r3, [pc, #556]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	03db      	lsls	r3, r3, #15
 80025b4:	4987      	ldr	r1, [pc, #540]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60cb      	str	r3, [r1, #12]
 80025ba:	e01b      	b.n	80025f4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80025bc:	4b85      	ldr	r3, [pc, #532]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a84      	ldr	r2, [pc, #528]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025c8:	f7ff f818 	bl	80015fc <HAL_GetTick>
 80025cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d0:	f7ff f814 	bl	80015fc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	f000 bd53 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025e4:	4b7b      	ldr	r3, [pc, #492]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ef      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 808b 	beq.w	8002718 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	2b08      	cmp	r3, #8
 8002606:	d005      	beq.n	8002614 <HAL_RCC_OscConfig+0x334>
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d109      	bne.n	8002622 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800260e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002610:	2b03      	cmp	r3, #3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d17d      	bne.n	8002718 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f000 bd34 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x35a>
 800262c:	4b69      	ldr	r3, [pc, #420]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a68      	ldr	r2, [pc, #416]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e041      	b.n	80026be <HAL_RCC_OscConfig+0x3de>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0x38a>
 8002644:	4b63      	ldr	r3, [pc, #396]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a62      	ldr	r2, [pc, #392]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b60      	ldr	r3, [pc, #384]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5f      	ldr	r2, [pc, #380]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b5d      	ldr	r3, [pc, #372]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5c      	ldr	r2, [pc, #368]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e029      	b.n	80026be <HAL_RCC_OscConfig+0x3de>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002672:	d112      	bne.n	800269a <HAL_RCC_OscConfig+0x3ba>
 8002674:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b54      	ldr	r3, [pc, #336]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a53      	ldr	r2, [pc, #332]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b51      	ldr	r3, [pc, #324]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a50      	ldr	r2, [pc, #320]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e011      	b.n	80026be <HAL_RCC_OscConfig+0x3de>
 800269a:	4b4e      	ldr	r3, [pc, #312]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4d      	ldr	r2, [pc, #308]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a4a      	ldr	r2, [pc, #296]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b48      	ldr	r3, [pc, #288]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a47      	ldr	r2, [pc, #284]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d014      	beq.n	80026f0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80026c6:	f7fe ff99 	bl	80015fc <HAL_GetTick>
 80026ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026cc:	e009      	b.n	80026e2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ce:	f7fe ff95 	bl	80015fc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d902      	bls.n	80026e2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	f000 bcd4 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ef      	beq.n	80026ce <HAL_RCC_OscConfig+0x3ee>
 80026ee:	e013      	b.n	8002718 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80026f0:	f7fe ff84 	bl	80015fc <HAL_GetTick>
 80026f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	e009      	b.n	800270c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe ff80 	bl	80015fc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d902      	bls.n	800270c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	f000 bcbf 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270c:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ef      	bne.n	80026f8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d05f      	beq.n	80027e4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	2b04      	cmp	r3, #4
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x456>
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d114      	bne.n	800275a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002732:	2b02      	cmp	r3, #2
 8002734:	d111      	bne.n	800275a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f000 bca3 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	4920      	ldr	r1, [pc, #128]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002758:	e044      	b.n	80027e4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d024      	beq.n	80027ac <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002762:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1b      	ldr	r2, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800276e:	f7fe ff45 	bl	80015fc <HAL_GetTick>
 8002772:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002774:	e009      	b.n	800278a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe ff41 	bl	80015fc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d902      	bls.n	800278a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	f000 bc80 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278a:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ef      	beq.n	8002776 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	490b      	ldr	r1, [pc, #44]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	610b      	str	r3, [r1, #16]
 80027aa:	e01b      	b.n	80027e4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a08      	ldr	r2, [pc, #32]	@ (80027d4 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027b8:	f7fe ff20 	bl	80015fc <HAL_GetTick>
 80027bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7fe ff1c 	bl	80015fc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d904      	bls.n	80027d8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f000 bc5b 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
 80027d4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d8:	4baf      	ldr	r3, [pc, #700]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ed      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80c8 	beq.w	8002982 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4ba4      	ldr	r3, [pc, #656]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280c:	4aa2      	ldr	r2, [pc, #648]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002816:	4ba0      	ldr	r3, [pc, #640]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800282a:	4b9c      	ldr	r3, [pc, #624]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 800282c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002836:	4b99      	ldr	r3, [pc, #612]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	4a98      	ldr	r2, [pc, #608]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002842:	f7fe fedb 	bl	80015fc <HAL_GetTick>
 8002846:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002848:	e009      	b.n	800285e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7fe fed7 	bl	80015fc <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d902      	bls.n	800285e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	f000 bc16 	b.w	800308a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800285e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0ef      	beq.n	800284a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d05f      	beq.n	8002932 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002872:	4b89      	ldr	r3, [pc, #548]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002878:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002884:	429a      	cmp	r2, r3
 8002886:	d037      	beq.n	80028f8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e3f4      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80028aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	4a79      	ldr	r2, [pc, #484]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80028b2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80028ba:	f7fe fe9f 	bl	80015fc <HAL_GetTick>
 80028be:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fe9b 	bl	80015fc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e3da      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028d4:	4b70      	ldr	r3, [pc, #448]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80028d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1ef      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80028e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80028e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4969      	ldr	r1, [pc, #420]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80028f8:	4b67      	ldr	r3, [pc, #412]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80028fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028fe:	4a66      	ldr	r2, [pc, #408]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002900:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002904:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002908:	f7fe fe78 	bl	80015fc <HAL_GetTick>
 800290c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe fe74 	bl	80015fc <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e3b3      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002922:	4b5d      	ldr	r3, [pc, #372]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCC_OscConfig+0x630>
 8002930:	e01b      	b.n	800296a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002938:	4a57      	ldr	r2, [pc, #348]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 800293a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800293e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002942:	f7fe fe5b 	bl	80015fc <HAL_GetTick>
 8002946:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294a:	f7fe fe57 	bl	80015fc <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b05      	cmp	r3, #5
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e396      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800295c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 800295e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ef      	bne.n	800294a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800296a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b49      	ldr	r3, [pc, #292]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002978:	4a47      	ldr	r2, [pc, #284]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8111 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b40      	ldr	r3, [pc, #256]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029b4:	4b38      	ldr	r3, [pc, #224]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029c8:	4b34      	ldr	r3, [pc, #208]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d118      	bne.n	8002a06 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029d4:	4b31      	ldr	r3, [pc, #196]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	4a30      	ldr	r2, [pc, #192]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fe0c 	bl	80015fc <HAL_GetTick>
 80029e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe fe08 	bl	80015fc <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e347      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029fa:	4b28      	ldr	r3, [pc, #160]	@ (8002a9c <HAL_RCC_OscConfig+0x7bc>)
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01f      	beq.n	8002a52 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a24:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a34:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a3e:	e018      	b.n	8002a72 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a40:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a46:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a50:	e00f      	b.n	8002a72 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a58:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a68:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <HAL_RCC_OscConfig+0x7b8>)
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d057      	beq.n	8002b2a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fdbf 	bl	80015fc <HAL_GetTick>
 8002a7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a80:	e00e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fdbb 	bl	80015fc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d905      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e2f8      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
 8002a98:	46020c00 	.word	0x46020c00
 8002a9c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0e9      	beq.n	8002a82 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002aba:	4b96      	ldr	r3, [pc, #600]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac0:	4a94      	ldr	r2, [pc, #592]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe fd96 	bl	80015fc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e2d3      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ed      	beq.n	8002acc <HAL_RCC_OscConfig+0x7ec>
 8002af0:	e053      	b.n	8002b9a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af8:	4a86      	ldr	r2, [pc, #536]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002afe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fd7a 	bl	80015fc <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e2b7      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b1a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ed      	bne.n	8002b04 <HAL_RCC_OscConfig+0x824>
 8002b28:	e037      	b.n	8002b9a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fd67 	bl	80015fc <HAL_GetTick>
 8002b2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fd63 	bl	80015fc <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e2a0      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	4b72      	ldr	r3, [pc, #456]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ed      	bne.n	8002b32 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002b56:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01a      	beq.n	8002b9a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b64:	4b6b      	ldr	r3, [pc, #428]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b6a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002b6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe fd41 	bl	80015fc <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e27e      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ed      	bne.n	8002b76 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b9a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d036      	beq.n	8002c2c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002bc6:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002bcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bd0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002bd2:	f7fe fd13 	bl	80015fc <HAL_GetTick>
 8002bd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bda:	f7fe fd0f 	bl	80015fc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e24e      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bec:	4b49      	ldr	r3, [pc, #292]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x8fa>
 8002bf8:	e018      	b.n	8002c2c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002bfa:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a45      	ldr	r2, [pc, #276]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c06:	f7fe fcf9 	bl	80015fc <HAL_GetTick>
 8002c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c0e:	f7fe fcf5 	bl	80015fc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e234      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c20:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d036      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d019      	beq.n	8002c74 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002c40:	4b34      	ldr	r3, [pc, #208]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a33      	ldr	r2, [pc, #204]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c4c:	f7fe fcd6 	bl	80015fc <HAL_GetTick>
 8002c50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c54:	f7fe fcd2 	bl	80015fc <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e211      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c66:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x974>
 8002c72:	e018      	b.n	8002ca6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002c74:	4b27      	ldr	r3, [pc, #156]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a26      	ldr	r2, [pc, #152]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c80:	f7fe fcbc 	bl	80015fc <HAL_GetTick>
 8002c84:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c88:	f7fe fcb8 	bl	80015fc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1f7      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d07f      	beq.n	8002db2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d062      	beq.n	8002d80 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002cba:	4b16      	ldr	r3, [pc, #88]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002cc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cc4:	6093      	str	r3, [r2, #8]
 8002cc6:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	4910      	ldr	r1, [pc, #64]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002ce0:	d309      	bcc.n	8002cf6 <HAL_RCC_OscConfig+0xa16>
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 021f 	bic.w	r2, r3, #31
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4909      	ldr	r1, [pc, #36]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60cb      	str	r3, [r1, #12]
 8002cf4:	e02a      	b.n	8002d4c <HAL_RCC_OscConfig+0xa6c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da0c      	bge.n	8002d18 <HAL_RCC_OscConfig+0xa38>
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	015b      	lsls	r3, r3, #5
 8002d0c:	4901      	ldr	r1, [pc, #4]	@ (8002d14 <HAL_RCC_OscConfig+0xa34>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60cb      	str	r3, [r1, #12]
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0xa6c>
 8002d14:	46020c00 	.word	0x46020c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d20:	d30a      	bcc.n	8002d38 <HAL_RCC_OscConfig+0xa58>
 8002d22:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	499d      	ldr	r1, [pc, #628]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60cb      	str	r3, [r1, #12]
 8002d36:	e009      	b.n	8002d4c <HAL_RCC_OscConfig+0xa6c>
 8002d38:	4b9b      	ldr	r3, [pc, #620]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	03db      	lsls	r3, r3, #15
 8002d46:	4998      	ldr	r1, [pc, #608]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002d4c:	4b96      	ldr	r3, [pc, #600]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a95      	ldr	r2, [pc, #596]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d52:	f043 0310 	orr.w	r3, r3, #16
 8002d56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d58:	f7fe fc50 	bl	80015fc <HAL_GetTick>
 8002d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d60:	f7fe fc4c 	bl	80015fc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e18b      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d72:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xa80>
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002d80:	4b89      	ldr	r3, [pc, #548]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a88      	ldr	r2, [pc, #544]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002d86:	f023 0310 	bic.w	r3, r3, #16
 8002d8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d8c:	f7fe fc36 	bl	80015fc <HAL_GetTick>
 8002d90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d94:	f7fe fc32 	bl	80015fc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e171      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002da6:	4b80      	ldr	r3, [pc, #512]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8166 	beq.w	8003088 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc2:	4b79      	ldr	r3, [pc, #484]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	f000 80f2 	beq.w	8002fb4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	f040 80c5 	bne.w	8002f64 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b73      	ldr	r3, [pc, #460]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a72      	ldr	r2, [pc, #456]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002de0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002de6:	f7fe fc09 	bl	80015fc <HAL_GetTick>
 8002dea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fc05 	bl	80015fc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e144      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e00:	4b69      	ldr	r3, [pc, #420]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b66      	ldr	r3, [pc, #408]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d111      	bne.n	8002e3e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b63      	ldr	r3, [pc, #396]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e20:	4a61      	ldr	r2, [pc, #388]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fac <HAL_RCC_OscConfig+0xccc>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e52:	4b56      	ldr	r3, [pc, #344]	@ (8002fac <HAL_RCC_OscConfig+0xccc>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4a55      	ldr	r2, [pc, #340]	@ (8002fac <HAL_RCC_OscConfig+0xccc>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002e5e:	4b52      	ldr	r3, [pc, #328]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0212      	lsls	r2, r2, #8
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	494a      	ldr	r1, [pc, #296]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e84:	4b48      	ldr	r3, [pc, #288]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e88:	4b49      	ldr	r3, [pc, #292]	@ (8002fb0 <HAL_RCC_OscConfig+0xcd0>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e90:	3a01      	subs	r2, #1
 8002e92:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0252      	lsls	r2, r2, #9
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0612      	lsls	r2, r2, #24
 8002eb8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	493a      	ldr	r1, [pc, #232]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002ec4:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	4a37      	ldr	r2, [pc, #220]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	4a34      	ldr	r2, [pc, #208]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002eda:	4b33      	ldr	r3, [pc, #204]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	4a32      	ldr	r2, [pc, #200]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	f023 020c 	bic.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	492d      	ldr	r1, [pc, #180]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f00:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <HAL_RCC_OscConfig+0xccc>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a29      	ldr	r2, [pc, #164]	@ (8002fac <HAL_RCC_OscConfig+0xccc>)
 8002f06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f0a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002f0c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1a:	4a23      	ldr	r2, [pc, #140]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f2e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f30:	f7fe fb64 	bl	80015fc <HAL_GetTick>
 8002f34:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe fb60 	bl	80015fc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e09f      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f4a:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f56:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	4a13      	ldr	r2, [pc, #76]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f60:	6293      	str	r3, [r2, #40]	@ 0x28
 8002f62:	e091      	b.n	8003088 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0f      	ldr	r2, [pc, #60]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f70:	f7fe fb44 	bl	80015fc <HAL_GetTick>
 8002f74:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fb40 	bl	80015fc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e07f      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f8a:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	4a03      	ldr	r2, [pc, #12]	@ (8002fa8 <HAL_RCC_OscConfig+0xcc8>)
 8002f9c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002fa0:	f023 0303 	bic.w	r3, r3, #3
 8002fa4:	6293      	str	r3, [r2, #40]	@ 0x28
 8002fa6:	e06f      	b.n	8003088 <HAL_RCC_OscConfig+0xda8>
 8002fa8:	46020c00 	.word	0x46020c00
 8002fac:	46020800 	.word	0x46020800
 8002fb0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002fb4:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fba:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d039      	beq.n	800303c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d132      	bne.n	800303c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d129      	bne.n	800303c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d122      	bne.n	800303c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003000:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11a      	bne.n	800303c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	0a5b      	lsrs	r3, r3, #9
 800300a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d111      	bne.n	800303c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	0c1b      	lsrs	r3, r3, #16
 800301c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d108      	bne.n	800303c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	0e1b      	lsrs	r3, r3, #24
 800302e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e024      	b.n	800308a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003040:	4b14      	ldr	r3, [pc, #80]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800304e:	429a      	cmp	r2, r3
 8003050:	d01a      	beq.n	8003088 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	4a0f      	ldr	r2, [pc, #60]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8003058:	f023 0310 	bic.w	r3, r3, #16
 800305c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe facd 	bl	80015fc <HAL_GetTick>
 8003062:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003064:	bf00      	nop
 8003066:	f7fe fac9 	bl	80015fc <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	4293      	cmp	r3, r2
 8003070:	d0f9      	beq.n	8003066 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	4a07      	ldr	r2, [pc, #28]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <HAL_RCC_OscConfig+0xdb4>)
 8003082:	f043 0310 	orr.w	r3, r3, #16
 8003086:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3738      	adds	r7, #56	@ 0x38
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	46020c00 	.word	0x46020c00

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e1d9      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b9b      	ldr	r3, [pc, #620]	@ (800331c <HAL_RCC_ClockConfig+0x284>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b98      	ldr	r3, [pc, #608]	@ (800331c <HAL_RCC_ClockConfig+0x284>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 020f 	bic.w	r2, r3, #15
 80030c2:	4996      	ldr	r1, [pc, #600]	@ (800331c <HAL_RCC_ClockConfig+0x284>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b94      	ldr	r3, [pc, #592]	@ (800331c <HAL_RCC_ClockConfig+0x284>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e1c1      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d908      	bls.n	800310a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80030f8:	4b89      	ldr	r3, [pc, #548]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	4986      	ldr	r1, [pc, #536]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003106:	4313      	orrs	r3, r2
 8003108:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	4b81      	ldr	r3, [pc, #516]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003124:	429a      	cmp	r2, r3
 8003126:	d909      	bls.n	800313c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003128:	4b7d      	ldr	r3, [pc, #500]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	497a      	ldr	r1, [pc, #488]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003138:	4313      	orrs	r3, r2
 800313a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	4b74      	ldr	r3, [pc, #464]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003154:	429a      	cmp	r2, r3
 8003156:	d908      	bls.n	800316a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b71      	ldr	r3, [pc, #452]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	496e      	ldr	r1, [pc, #440]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003166:	4313      	orrs	r3, r2
 8003168:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	4b69      	ldr	r3, [pc, #420]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	429a      	cmp	r2, r3
 8003184:	d908      	bls.n	8003198 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003186:	4b66      	ldr	r3, [pc, #408]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 020f 	bic.w	r2, r3, #15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4963      	ldr	r1, [pc, #396]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003194:	4313      	orrs	r3, r2
 8003196:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80d2 	beq.w	800334a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d143      	bne.n	800323a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d110      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031c0:	4b57      	ldr	r3, [pc, #348]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c6:	4a56      	ldr	r2, [pc, #344]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031d0:	4b53      	ldr	r3, [pc, #332]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80031e2:	f7fe fa0b 	bl	80015fc <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80031e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003324 <HAL_RCC_ClockConfig+0x28c>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00f      	beq.n	8003214 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80031f6:	f7fe fa01 	bl	80015fc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e12b      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003208:	4b46      	ldr	r3, [pc, #280]	@ (8003324 <HAL_RCC_ClockConfig+0x28c>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b41      	ldr	r3, [pc, #260]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003220:	4a3f      	ldr	r2, [pc, #252]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800322a:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d121      	bne.n	800327a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e112      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	4b37      	ldr	r3, [pc, #220]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e106      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800325a:	4b31      	ldr	r3, [pc, #196]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0fa      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326a:	4b2d      	ldr	r3, [pc, #180]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0f2      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b29      	ldr	r3, [pc, #164]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4926      	ldr	r1, [pc, #152]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003288:	4313      	orrs	r3, r2
 800328a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800328c:	f7fe f9b6 	bl	80015fc <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe f9ae 	bl	80015fc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0d6      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_ClockConfig+0x204>
 80032be:	e044      	b.n	800334a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d112      	bne.n	80032ee <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fe f997 	bl	80015fc <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0bf      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_ClockConfig+0x232>
 80032ec:	e02d      	b.n	800334a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d123      	bne.n	800333e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fe f980 	bl	80015fc <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e0a8      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800330e:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <HAL_RCC_ClockConfig+0x288>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ee      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x260>
 800331a:	e016      	b.n	800334a <HAL_RCC_ClockConfig+0x2b2>
 800331c:	40022000 	.word	0x40022000
 8003320:	46020c00 	.word	0x46020c00
 8003324:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fe f968 	bl	80015fc <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e090      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	4b4a      	ldr	r3, [pc, #296]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	4b43      	ldr	r3, [pc, #268]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	429a      	cmp	r2, r3
 8003364:	d208      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003366:	4b40      	ldr	r3, [pc, #256]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	493d      	ldr	r1, [pc, #244]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 8003374:	4313      	orrs	r3, r2
 8003376:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b3c      	ldr	r3, [pc, #240]	@ (800346c <HAL_RCC_ClockConfig+0x3d4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d210      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCC_ClockConfig+0x3d4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 020f 	bic.w	r2, r3, #15
 800338e:	4937      	ldr	r1, [pc, #220]	@ (800346c <HAL_RCC_ClockConfig+0x3d4>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b35      	ldr	r3, [pc, #212]	@ (800346c <HAL_RCC_ClockConfig+0x3d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e05b      	b.n	8003460 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d208      	bcs.n	80033d6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b28      	ldr	r3, [pc, #160]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4925      	ldr	r1, [pc, #148]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d209      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80033f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	4919      	ldr	r1, [pc, #100]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003420:	429a      	cmp	r2, r3
 8003422:	d208      	bcs.n	8003436 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003424:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	490d      	ldr	r1, [pc, #52]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003436:	f000 f821 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_RCC_ClockConfig+0x3d0>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	490a      	ldr	r1, [pc, #40]	@ (8003470 <HAL_RCC_ClockConfig+0x3d8>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <HAL_RCC_ClockConfig+0x3dc>)
 800344e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003450:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x3e0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe f847 	bl	80014e8 <HAL_InitTick>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]

  return status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	46020c00 	.word	0x46020c00
 800346c:	40022000 	.word	0x40022000
 8003470:	0800d9a4 	.word	0x0800d9a4
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b08b      	sub	sp, #44	@ 0x2c
 8003480:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348a:	4b78      	ldr	r3, [pc, #480]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003494:	4b75      	ldr	r3, [pc, #468]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x34>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d11e      	bne.n	80034ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80034b0:	4b6e      	ldr	r3, [pc, #440]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80034bc:	4b6b      	ldr	r3, [pc, #428]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034c2:	0b1b      	lsrs	r3, r3, #12
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80034cc:	4b67      	ldr	r3, [pc, #412]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	0f1b      	lsrs	r3, r3, #28
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034d8:	4a65      	ldr	r2, [pc, #404]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d110      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ec:	e00d      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ee:	4b5f      	ldr	r3, [pc, #380]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d102      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	e004      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d101      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003506:	4b5b      	ldr	r3, [pc, #364]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003508:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	f040 80a5 	bne.w	800365c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003512:	4b56      	ldr	r3, [pc, #344]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3301      	adds	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800352a:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003536:	4b4d      	ldr	r3, [pc, #308]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d003      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0xe4>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d022      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x128>
 800355e:	e043      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003678 <HAL_RCC_GetSysClockFreq+0x1fc>
 800356e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003572:	4b3e      	ldr	r3, [pc, #248]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003582:	ed97 6a01 	vldr	s12, [r7, #4]
 8003586:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800367c <HAL_RCC_GetSysClockFreq+0x200>
 800358a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800358e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003596:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800359a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035a2:	e046      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ae:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003678 <HAL_RCC_GetSysClockFreq+0x1fc>
 80035b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b6:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80035ca:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800367c <HAL_RCC_GetSysClockFreq+0x200>
 80035ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e6:	e024      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003600:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003610:	ed97 6a01 	vldr	s12, [r7, #4]
 8003614:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800367c <HAL_RCC_GetSysClockFreq+0x200>
 8003618:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800361c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003624:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003630:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003632:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003636:	0e1b      	lsrs	r3, r3, #24
 8003638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800363c:	3301      	adds	r3, #1
 800363e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800364a:	edd7 6a07 	vldr	s13, [r7, #28]
 800364e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003656:	ee17 3a90 	vmov	r3, s15
 800365a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800365c:	6a3b      	ldr	r3, [r7, #32]
}
 800365e:	4618      	mov	r0, r3
 8003660:	372c      	adds	r7, #44	@ 0x2c
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	46020c00 	.word	0x46020c00
 8003670:	0800d9bc 	.word	0x0800d9bc
 8003674:	00f42400 	.word	0x00f42400
 8003678:	4b742400 	.word	0x4b742400
 800367c:	46000000 	.word	0x46000000

08003680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003684:	f7ff fefa 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <HAL_RCC_GetHCLKFreq+0x28>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	4906      	ldr	r1, [pc, #24]	@ (80036ac <HAL_RCC_GetHCLKFreq+0x2c>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a05      	ldr	r2, [pc, #20]	@ (80036b0 <HAL_RCC_GetHCLKFreq+0x30>)
 800369c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800369e:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <HAL_RCC_GetHCLKFreq+0x30>)
 80036a0:	681b      	ldr	r3, [r3, #0]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	46020c00 	.word	0x46020c00
 80036ac:	0800d9a4 	.word	0x0800d9a4
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80036b8:	f7ff ffe2 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	@ (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	46020c00 	.word	0x46020c00
 80036d8:	0800d9b4 	.word	0x0800d9b4

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80036e0:	f7ff ffce 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	@ (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	46020c00 	.word	0x46020c00
 8003700:	0800d9b4 	.word	0x0800d9b4

08003704 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003708:	f7ff ffba 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	@ (8003728 <HAL_RCC_GetPCLK3Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	46020c00 	.word	0x46020c00
 8003728:	0800d9b4 	.word	0x0800d9b4

0800372c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003734:	4b3e      	ldr	r3, [pc, #248]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003742:	f7fe fd6f 	bl	8002224 <HAL_PWREx_GetVoltageRange>
 8003746:	6178      	str	r0, [r7, #20]
 8003748:	e019      	b.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b39      	ldr	r3, [pc, #228]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800374c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003750:	4a37      	ldr	r2, [pc, #220]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800375a:	4b35      	ldr	r3, [pc, #212]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003768:	f7fe fd5c 	bl	8002224 <HAL_PWREx_GetVoltageRange>
 800376c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	4b30      	ldr	r3, [pc, #192]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003774:	4a2e      	ldr	r2, [pc, #184]	@ (8003830 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003784:	d003      	beq.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800378c:	d109      	bne.n	80037a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003794:	d202      	bcs.n	800379c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003796:	2301      	movs	r3, #1
 8003798:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800379a:	e033      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80037a0:	e030      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a8:	d208      	bcs.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d102      	bne.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80037b2:	2303      	movs	r3, #3
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	e025      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e035      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037c2:	d90f      	bls.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037d0:	d902      	bls.n	80037d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	e015      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80037d8:	2301      	movs	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e012      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e00f      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ea:	d109      	bne.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f2:	d102      	bne.n	80037fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80037f4:	2301      	movs	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	e004      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80037fa:	2302      	movs	r3, #2
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e001      	b.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003800:	2301      	movs	r3, #1
 8003802:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 020f 	bic.w	r2, r3, #15
 800380c:	4909      	ldr	r1, [pc, #36]	@ (8003834 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003814:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	d001      	beq.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	46020c00 	.word	0x46020c00
 8003834:	40022000 	.word	0x40022000

08003838 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b0ba      	sub	sp, #232	@ 0xe8
 800383e:	af00      	add	r7, sp, #0
 8003840:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003844:	2300      	movs	r3, #0
 8003846:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800384a:	2300      	movs	r3, #0
 800384c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f002 0401 	and.w	r4, r2, #1
 800385c:	2500      	movs	r5, #0
 800385e:	ea54 0305 	orrs.w	r3, r4, r5
 8003862:	d00b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003864:	4bcb      	ldr	r3, [pc, #812]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800386a:	f023 0103 	bic.w	r1, r3, #3
 800386e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	4ac7      	ldr	r2, [pc, #796]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003876:	430b      	orrs	r3, r1
 8003878:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800387c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f002 0802 	and.w	r8, r2, #2
 8003888:	f04f 0900 	mov.w	r9, #0
 800388c:	ea58 0309 	orrs.w	r3, r8, r9
 8003890:	d00b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003892:	4bc0      	ldr	r3, [pc, #768]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003898:	f023 010c 	bic.w	r1, r3, #12
 800389c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	4abc      	ldr	r2, [pc, #752]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f002 0a04 	and.w	sl, r2, #4
 80038b6:	f04f 0b00 	mov.w	fp, #0
 80038ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80038be:	d00b      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80038c0:	4bb4      	ldr	r3, [pc, #720]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038c6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	4ab0      	ldr	r2, [pc, #704]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f002 0308 	and.w	r3, r2, #8
 80038e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d00b      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80038f8:	4ba6      	ldr	r3, [pc, #664]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003908:	4aa2      	ldr	r2, [pc, #648]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800390a:	430b      	orrs	r3, r1
 800390c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f002 0310 	and.w	r3, r2, #16
 800391c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003926:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003930:	4b98      	ldr	r3, [pc, #608]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003936:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800393a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800393e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003940:	4a94      	ldr	r2, [pc, #592]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003942:	430b      	orrs	r3, r1
 8003944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f002 0320 	and.w	r3, r2, #32
 8003954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800395e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003962:	460b      	mov	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	d00b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003968:	4b8a      	ldr	r3, [pc, #552]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800396e:	f023 0107 	bic.w	r1, r3, #7
 8003972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003978:	4a86      	ldr	r2, [pc, #536]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397a:	430b      	orrs	r3, r1
 800397c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800398c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003996:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d00b      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80039a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039a6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80039aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b0:	4a78      	ldr	r2, [pc, #480]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80039c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80039d8:	4b6e      	ldr	r3, [pc, #440]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80039fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a06:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003a10:	4b60      	ldr	r3, [pc, #384]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	4a5c      	ldr	r2, [pc, #368]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a22:	430b      	orrs	r3, r1
 8003a24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003a48:	4b52      	ldr	r3, [pc, #328]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a4e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a58:	4a4e      	ldr	r2, [pc, #312]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003a6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003a80:	4b44      	ldr	r3, [pc, #272]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a86:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a90:	4a40      	ldr	r2, [pc, #256]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a92:	430b      	orrs	r3, r1
 8003a94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003aae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003ab8:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003abe:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac8:	4a32      	ldr	r2, [pc, #200]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ae6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d00c      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003af6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b02:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b18:	2300      	movs	r3, #0
 8003b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b20:	460b      	mov	r3, r1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d04f      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	2b80      	cmp	r3, #128	@ 0x80
 8003b30:	d02d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d827      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b36:	2b60      	cmp	r3, #96	@ 0x60
 8003b38:	d02e      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b3a:	2b60      	cmp	r3, #96	@ 0x60
 8003b3c:	d823      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d006      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d81f      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d011      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003b4e:	e01a      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	4a0f      	ldr	r2, [pc, #60]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b5c:	e01d      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b62:	3308      	adds	r3, #8
 8003b64:	4618      	mov	r0, r3
 8003b66:	f002 fa17 	bl	8005f98 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b70:	e013      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b76:	332c      	adds	r3, #44	@ 0x2c
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 faa5 	bl	80060c8 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b84:	e009      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b8c:	e005      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003b92:	bf00      	nop
 8003b94:	46020c00 	.word	0x46020c00
        break;
 8003b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10d      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003ba2:	4bb6      	ldr	r3, [pc, #728]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ba8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	4ab1      	ldr	r2, [pc, #708]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bbc:	e003      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bc2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4313      	orrs	r3, r2
 8003be0:	d053      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bee:	d033      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf4:	d82c      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bfa:	d02f      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c00:	d826      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0c:	d820      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c16:	d011      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c18:	e01a      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c1a:	4b98      	ldr	r3, [pc, #608]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	4a97      	ldr	r2, [pc, #604]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c24:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c26:	e01a      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 f9b2 	bl	8005f98 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c3a:	e010      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c40:	332c      	adds	r3, #44	@ 0x2c
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 fa40 	bl	80060c8 <RCCEx_PLL3_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c4e:	e006      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003c66:	4b85      	ldr	r3, [pc, #532]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c6c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c78:	4a80      	ldr	r2, [pc, #512]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c86:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c98:	2300      	movs	r3, #0
 8003c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c9c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d046      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cb2:	d028      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003cb4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cb8:	d821      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cbe:	d022      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cc4:	d81b      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003cc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cca:	d01c      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003ccc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cd0:	d815      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cdc:	d80f      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce6:	d00e      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003ce8:	e009      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cee:	3308      	adds	r3, #8
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 f951 	bl	8005f98 <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8003d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003d10:	4b5a      	ldr	r3, [pc, #360]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d16:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d22:	4a56      	ldr	r2, [pc, #344]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d42:	2300      	movs	r3, #0
 8003d44:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d03f      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d81e      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003da3 	.word	0x08003da3
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d87 	.word	0x08003d87
 8003d70:	08003da3 	.word	0x08003da3
 8003d74:	08003da3 	.word	0x08003da3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d78:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d82:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003d84:	e00e      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d8a:	332c      	adds	r3, #44	@ 0x2c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 f99b 	bl	80060c8 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d98:	e004      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8003da2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003da4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10d      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003dac:	4b33      	ldr	r3, [pc, #204]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003dae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003db2:	f023 0107 	bic.w	r1, r3, #7
 8003db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dcc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dde:	2300      	movs	r3, #0
 8003de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003de6:	460b      	mov	r3, r1
 8003de8:	4313      	orrs	r3, r2
 8003dea:	d04d      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003df8:	d028      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003dfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dfe:	d821      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003e00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e04:	d024      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003e06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e0a:	d81b      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003e0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e10:	d00e      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e16:	d815      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d110      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e22:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	4a15      	ldr	r2, [pc, #84]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e2e:	e012      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e34:	332c      	adds	r3, #44	@ 0x2c
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 f946 	bl	80060c8 <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003e54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d110      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e70:	4a02      	ldr	r2, [pc, #8]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003e7a:	bf00      	nop
 8003e7c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e96:	2300      	movs	r3, #0
 8003e98:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f000 80b5 	beq.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eac:	4b9d      	ldr	r3, [pc, #628]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d113      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b9a      	ldr	r3, [pc, #616]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec0:	4a98      	ldr	r2, [pc, #608]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003eca:	4b96      	ldr	r3, [pc, #600]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ee2:	4b91      	ldr	r3, [pc, #580]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	4a90      	ldr	r2, [pc, #576]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eee:	f7fd fb85 	bl	80015fc <HAL_GetTick>
 8003ef2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef8:	f7fd fb80 	bl	80015fc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d903      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f0e:	e005      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f10:	4b85      	ldr	r3, [pc, #532]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ed      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003f1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d165      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f24:	4b7f      	ldr	r3, [pc, #508]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d023      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01b      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f4a:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f58:	4b72      	ldr	r3, [pc, #456]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5e:	4a71      	ldr	r2, [pc, #452]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f68:	4b6e      	ldr	r3, [pc, #440]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f78:	4a6a      	ldr	r2, [pc, #424]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fb35 	bl	80015fc <HAL_GetTick>
 8003f92:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	e00d      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fd fb30 	bl	80015fc <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d903      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003fb2:	e006      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0ea      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8003fc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003fca:	4b56      	ldr	r3, [pc, #344]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003fdc:	4a51      	ldr	r2, [pc, #324]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fe6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fea:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ff4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ff8:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b48      	ldr	r3, [pc, #288]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004006:	4a47      	ldr	r2, [pc, #284]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800401c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401e:	2300      	movs	r3, #0
 8004020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004022:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004026:	460b      	mov	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	d042      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800402c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004030:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004034:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004038:	d022      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800403a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800403e:	d81b      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004044:	d011      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8004046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800404a:	d815      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d019      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004054:	d110      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800405a:	3308      	adds	r3, #8
 800405c:	4618      	mov	r0, r3
 800405e:	f001 ff9b 	bl	8005f98 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004068:	e00d      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406a:	4b2e      	ldr	r3, [pc, #184]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004074:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004076:	e006      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800407e:	e002      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004080:	bf00      	nop
 8004082:	e000      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004084:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004086:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800408e:	4b25      	ldr	r3, [pc, #148]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004094:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800409c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040a0:	4a20      	ldr	r2, [pc, #128]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040a2:	430b      	orrs	r3, r1
 80040a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040a8:	e003      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040ae:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040be:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c0:	2300      	movs	r3, #0
 80040c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d032      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80040ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040da:	d00b      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e0:	d804      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	d007      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80040f4:	bf00      	nop
 80040f6:	e002      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80040fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80040fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d112      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004108:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800410c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004118:	4a02      	ldr	r2, [pc, #8]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800411a:	430b      	orrs	r3, r1
 800411c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004122:	bf00      	nop
 8004124:	46020c00 	.word	0x46020c00
 8004128:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004130:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004142:	2300      	movs	r3, #0
 8004144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004146:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d00c      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004150:	4b98      	ldr	r3, [pc, #608]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004156:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800415a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800415e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004162:	4a94      	ldr	r2, [pc, #592]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004164:	430b      	orrs	r3, r1
 8004166:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800416a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004176:	633b      	str	r3, [r7, #48]	@ 0x30
 8004178:	2300      	movs	r3, #0
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
 800417c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d019      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004194:	4b87      	ldr	r3, [pc, #540]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	4a86      	ldr	r2, [pc, #536]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80041a0:	4b84      	ldr	r3, [pc, #528]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041a6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80041aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041b2:	4a80      	ldr	r2, [pc, #512]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80041ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c8:	2300      	movs	r3, #0
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80041d0:	460b      	mov	r3, r1
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80041d6:	4b77      	ldr	r3, [pc, #476]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041e8:	4972      	ldr	r1, [pc, #456]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80041f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
 8004202:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d00c      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800420c:	4b69      	ldr	r3, [pc, #420]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800420e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004212:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800421a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800421e:	4965      	ldr	r1, [pc, #404]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d00c      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004242:	4b5c      	ldr	r3, [pc, #368]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004248:	f023 0218 	bic.w	r2, r3, #24
 800424c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004250:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004254:	4957      	ldr	r1, [pc, #348]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800425c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d032      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800427c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004284:	d105      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004286:	4b4b      	ldr	r3, [pc, #300]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	4a4a      	ldr	r2, [pc, #296]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800428c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004290:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800429a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800429e:	d108      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042a4:	3308      	adds	r3, #8
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fe76 	bl	8005f98 <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80042b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10d      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80042ba:	4b3e      	ldr	r3, [pc, #248]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80042bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042cc:	4939      	ldr	r1, [pc, #228]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042da:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80042de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d03a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004306:	d00e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800430c:	d815      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004316:	d110      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4b26      	ldr	r3, [pc, #152]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	4a25      	ldr	r2, [pc, #148]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004322:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800432a:	3308      	adds	r3, #8
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fe33 	bl	8005f98 <RCCEx_PLL2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004342:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004344:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800434e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004352:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435e:	4915      	ldr	r1, [pc, #84]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004366:	e003      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800436c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d00c      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800438c:	4b09      	ldr	r3, [pc, #36]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800438e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004392:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800439a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800439e:	4905      	ldr	r1, [pc, #20]	@ (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80043a6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	37e8      	adds	r7, #232	@ 0xe8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b4:	46020c00 	.word	0x46020c00

080043b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b089      	sub	sp, #36	@ 0x24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80043c0:	4ba6      	ldr	r3, [pc, #664]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80043ca:	4ba4      	ldr	r3, [pc, #656]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80043d4:	4ba1      	ldr	r3, [pc, #644]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	3301      	adds	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80043e2:	4b9e      	ldr	r3, [pc, #632]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80043ee:	4b9b      	ldr	r3, [pc, #620]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	08db      	lsrs	r3, r3, #3
 80043f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d062      	beq.n	80044d6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b03      	cmp	r3, #3
 8004414:	f200 8081 	bhi.w	800451a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d024      	beq.n	8004468 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d17a      	bne.n	800451a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004660 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004436:	4b89      	ldr	r3, [pc, #548]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004446:	ed97 6a02 	vldr	s12, [r7, #8]
 800444a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004664 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800444e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004452:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800445a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004466:	e08f      	b.n	8004588 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004468:	4b7c      	ldr	r3, [pc, #496]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004474:	4b79      	ldr	r3, [pc, #484]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	0f1b      	lsrs	r3, r3, #28
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	e006      	b.n	800448e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004480:	4b76      	ldr	r3, [pc, #472]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	0f1b      	lsrs	r3, r3, #28
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a76      	ldr	r2, [pc, #472]	@ (8004668 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004664 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80044bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80044cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d4:	e058      	b.n	8004588 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004660 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80044e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e8:	4b5c      	ldr	r3, [pc, #368]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80044fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004664 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004500:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004504:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800450c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004514:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004518:	e036      	b.n	8004588 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800451a:	4b50      	ldr	r3, [pc, #320]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004526:	4b4d      	ldr	r3, [pc, #308]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0f1b      	lsrs	r3, r3, #28
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004532:	4b4a      	ldr	r3, [pc, #296]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	0f1b      	lsrs	r3, r3, #28
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	4a49      	ldr	r2, [pc, #292]	@ (8004668 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	ee07 3a90 	vmov	s15, r3
 8004554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004566:	ed97 6a02 	vldr	s12, [r7, #8]
 800456a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004664 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800456e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004586:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004588:	4b34      	ldr	r3, [pc, #208]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d017      	beq.n	80045c4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004594:	4b31      	ldr	r3, [pc, #196]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004598:	0a5b      	lsrs	r3, r3, #9
 800459a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80045a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80045ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ba:	ee17 2a90 	vmov	r2, s15
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e002      	b.n	80045ca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80045ca:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80045e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80045f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e002      	b.n	800460c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800460c:	4b13      	ldr	r3, [pc, #76]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d017      	beq.n	8004648 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004618:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800461a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461c:	0e1b      	lsrs	r3, r3, #24
 800461e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800462a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004632:	edd7 6a07 	vldr	s13, [r7, #28]
 8004636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463e:	ee17 2a90 	vmov	r2, s15
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004646:	e002      	b.n	800464e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
}
 800464e:	bf00      	nop
 8004650:	3724      	adds	r7, #36	@ 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	46020c00 	.word	0x46020c00
 8004660:	4b742400 	.word	0x4b742400
 8004664:	46000000 	.word	0x46000000
 8004668:	0800d9bc 	.word	0x0800d9bc

0800466c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	@ 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004674:	4ba6      	ldr	r3, [pc, #664]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800467e:	4ba4      	ldr	r3, [pc, #656]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004688:	4ba1      	ldr	r3, [pc, #644]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	3301      	adds	r3, #1
 8004694:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004696:	4b9e      	ldr	r3, [pc, #632]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80046a2:	4b9b      	ldr	r3, [pc, #620]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d062      	beq.n	800478a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	f200 8081 	bhi.w	80047ce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d024      	beq.n	800471c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d17a      	bne.n	80047ce <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b89      	ldr	r3, [pc, #548]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80046fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800470a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471a:	e08f      	b.n	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800471c:	4b7c      	ldr	r3, [pc, #496]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004728:	4b79      	ldr	r3, [pc, #484]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	0f1b      	lsrs	r3, r3, #28
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	e006      	b.n	8004742 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004734:	4b76      	ldr	r3, [pc, #472]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	0f1b      	lsrs	r3, r3, #28
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	4a76      	ldr	r2, [pc, #472]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004768:	ed97 6a02 	vldr	s12, [r7, #8]
 800476c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004788:	e058      	b.n	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004794:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800479c:	4b5c      	ldr	r3, [pc, #368]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80047b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047cc:	e036      	b.n	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80047ce:	4b50      	ldr	r3, [pc, #320]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80047da:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0f1b      	lsrs	r3, r3, #28
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	e006      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80047e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	0f1b      	lsrs	r3, r3, #28
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	4a49      	ldr	r2, [pc, #292]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80047f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a02 	vldr	s12, [r7, #8]
 800481e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800483a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800483c:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004848:	4b31      	ldr	r3, [pc, #196]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800485a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800485e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004862:	edd7 6a07 	vldr	s13, [r7, #28]
 8004866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486e:	ee17 2a90 	vmov	r2, s15
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e002      	b.n	800487e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d017      	beq.n	80048ba <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800488a:	4b21      	ldr	r3, [pc, #132]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800489c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80048a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b0:	ee17 2a90 	vmov	r2, s15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	e002      	b.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80048c0:	4b13      	ldr	r3, [pc, #76]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80048cc:	4b10      	ldr	r3, [pc, #64]	@ (8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80048de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80048e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
}
 8004902:	bf00      	nop
 8004904:	3724      	adds	r7, #36	@ 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	46020c00 	.word	0x46020c00
 8004914:	4b742400 	.word	0x4b742400
 8004918:	46000000 	.word	0x46000000
 800491c:	0800d9bc 	.word	0x0800d9bc

08004920 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004928:	4ba6      	ldr	r3, [pc, #664]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004932:	4ba4      	ldr	r3, [pc, #656]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800493c:	4ba1      	ldr	r3, [pc, #644]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3301      	adds	r3, #1
 8004948:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800494a:	4b9e      	ldr	r3, [pc, #632]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004956:	4b9b      	ldr	r3, [pc, #620]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495a:	08db      	lsrs	r3, r3, #3
 800495c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d062      	beq.n	8004a3e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b03      	cmp	r3, #3
 800497c:	f200 8081 	bhi.w	8004a82 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d024      	beq.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d17a      	bne.n	8004a82 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b89      	ldr	r3, [pc, #548]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80049ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80049b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80049be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80049ce:	e08f      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80049d0:	4b7c      	ldr	r3, [pc, #496]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80049dc:	4b79      	ldr	r3, [pc, #484]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	0f1b      	lsrs	r3, r3, #28
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	e006      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80049e8:	4b76      	ldr	r3, [pc, #472]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	0f1b      	lsrs	r3, r3, #28
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	4a76      	ldr	r2, [pc, #472]	@ (8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80049f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a20:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a3c:	e058      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a48:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a50:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a60:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a64:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a80:	e036      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004a82:	4b50      	ldr	r3, [pc, #320]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	0f1b      	lsrs	r3, r3, #28
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	4a49      	ldr	r2, [pc, #292]	@ (8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004af0:	4b34      	ldr	r3, [pc, #208]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d017      	beq.n	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004afc:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b00:	0a5b      	lsrs	r3, r3, #9
 8004b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b12:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b22:	ee17 2a90 	vmov	r2, s15
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004b32:	4b24      	ldr	r3, [pc, #144]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d017      	beq.n	8004b6e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b3e:	4b21      	ldr	r3, [pc, #132]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b54:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b64:	ee17 2a90 	vmov	r2, s15
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	e002      	b.n	8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004b74:	4b13      	ldr	r3, [pc, #76]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d017      	beq.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b84:	0e1b      	lsrs	r3, r3, #24
 8004b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b96:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba6:	ee17 2a90 	vmov	r2, s15
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bae:	e002      	b.n	8004bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	bf00      	nop
 8004bb8:	3724      	adds	r7, #36	@ 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	46020c00 	.word	0x46020c00
 8004bc8:	4b742400 	.word	0x4b742400
 8004bcc:	46000000 	.word	0x46000000
 8004bd0:	0800d9bc 	.word	0x0800d9bc

08004bd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	@ 0x38
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004be6:	430b      	orrs	r3, r1
 8004be8:	d145      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004bea:	4ba7      	ldr	r3, [pc, #668]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004bf6:	4ba4      	ldr	r3, [pc, #656]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d108      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0a:	d104      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c12:	f001 b9b3 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004c16:	4b9c      	ldr	r3, [pc, #624]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c24:	d114      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c2c:	d110      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c2e:	4b96      	ldr	r3, [pc, #600]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c3c:	d103      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004c3e:	23fa      	movs	r3, #250	@ 0xfa
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c42:	f001 b99b 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004c46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c4c:	f001 b996 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004c50:	4b8d      	ldr	r3, [pc, #564]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c64:	d103      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004c66:	4b89      	ldr	r3, [pc, #548]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6a:	f001 b987 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c72:	f001 b983 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	d151      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004c82:	4b81      	ldr	r3, [pc, #516]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c88:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	2b80      	cmp	r3, #128	@ 0x80
 8004c92:	d035      	beq.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	2b80      	cmp	r3, #128	@ 0x80
 8004c98:	d841      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	2b60      	cmp	r3, #96	@ 0x60
 8004c9e:	d02a      	beq.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca2:	2b60      	cmp	r3, #96	@ 0x60
 8004ca4:	d83b      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b40      	cmp	r3, #64	@ 0x40
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d835      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d012      	beq.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004cbe:	e02e      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fb77 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cce:	f001 b955 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd2:	f107 0318 	add.w	r3, r7, #24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fcc8 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ce0:	f001 b94c 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fe19 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cf2:	f001 b943 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004cf6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cfc:	f001 b93e 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d00:	4b61      	ldr	r3, [pc, #388]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0c:	d103      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004d0e:	4b60      	ldr	r3, [pc, #384]	@ (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004d10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d12:	f001 b933 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d1a:	f001 b92f 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d22:	f001 b92b 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	d158      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004d32:	4b55      	ldr	r3, [pc, #340]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d44:	d03b      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4c:	d846      	bhi.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d54:	d02e      	beq.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5c:	d83e      	bhi.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d64:	d00b      	beq.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6c:	d836      	bhi.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7a:	d012      	beq.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004d7c:	e02e      	b.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fb18 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d8c:	f001 b8f6 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d90:	f107 0318 	add.w	r3, r7, #24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fc69 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d9e:	f001 b8ed 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004da2:	f107 030c 	add.w	r3, r7, #12
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fdba 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004db0:	f001 b8e4 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004db4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dba:	f001 b8df 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dbe:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dca:	d103      	bne.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004dcc:	4b30      	ldr	r3, [pc, #192]	@ (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dd0:	f001 b8d4 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dd8:	f001 b8d0 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004de0:	f001 b8cc 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004dec:	430b      	orrs	r3, r1
 8004dee:	d126      	bne.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004df0:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004df2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004dfc:	4b22      	ldr	r3, [pc, #136]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004e10:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e14:	f001 b8b2 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004e18:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e24:	d107      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e2c:	d103      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004e2e:	4b19      	ldr	r3, [pc, #100]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e32:	f001 b8a3 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3a:	f001 b89f 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e42:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004e46:	430b      	orrs	r3, r1
 8004e48:	d16e      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e50:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004e54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e5c:	d03d      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e64:	d85c      	bhi.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6c:	d014      	beq.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e74:	d854      	bhi.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01f      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e82:	d012      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004e84:	e04c      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004e86:	bf00      	nop
 8004e88:	46020c00 	.word	0x46020c00
 8004e8c:	0007a120 	.word	0x0007a120
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fa8b 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ea6:	f001 b869 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eaa:	f107 0318 	add.w	r3, r7, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fbdc 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004eb8:	f001 b860 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004ebc:	4ba7      	ldr	r3, [pc, #668]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d103      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004eca:	4ba5      	ldr	r3, [pc, #660]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ecc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ece:	f001 b855 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ed6:	f001 b851 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004eda:	4ba0      	ldr	r3, [pc, #640]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d118      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ee6:	4b9d      	ldr	r3, [pc, #628]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004ef2:	4b9a      	ldr	r3, [pc, #616]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	0e1b      	lsrs	r3, r3, #24
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	e006      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004efe:	4b97      	ldr	r3, [pc, #604]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	0e1b      	lsrs	r3, r3, #24
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	4a95      	ldr	r2, [pc, #596]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f14:	f001 b832 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f1c:	f001 b82e 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f24:	f001 b82a 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f2c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004f30:	430b      	orrs	r3, r1
 8004f32:	d17f      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004f34:	4b89      	ldr	r3, [pc, #548]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d165      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004f46:	4b85      	ldr	r3, [pc, #532]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f4c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004f58:	d034      	beq.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004f60:	d853      	bhi.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f70:	d84b      	bhi.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d016      	beq.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004f80:	e043      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fa16 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004f90:	f000 bff4 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f94:	f107 0318 	add.w	r3, r7, #24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fb67 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004fa2:	f000 bfeb 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fb2:	d103      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fb6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004fb8:	f000 bfe0 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004fc0:	f000 bfdc 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fc4:	4b65      	ldr	r3, [pc, #404]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d118      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fd0:	4b62      	ldr	r3, [pc, #392]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	e006      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	0e1b      	lsrs	r3, r3, #24
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004ffe:	f000 bfbd 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005006:	f000 bfb9 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800500e:	f000 bfb5 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005018:	d108      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800501a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f9ca 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	f000 bfa8 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005030:	f000 bfa4 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005038:	1e51      	subs	r1, r2, #1
 800503a:	430b      	orrs	r3, r1
 800503c:	d136      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800503e:	4b47      	ldr	r3, [pc, #284]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005050:	f7fe fb44 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8005054:	6378      	str	r0, [r7, #52]	@ 0x34
 8005056:	f000 bf91 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	2b01      	cmp	r3, #1
 800505e:	d104      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005060:	f7fe fa0c 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005064:	6378      	str	r0, [r7, #52]	@ 0x34
 8005066:	f000 bf89 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800506a:	4b3c      	ldr	r3, [pc, #240]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005076:	d106      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	2b02      	cmp	r3, #2
 800507c:	d103      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800507e:	4b3a      	ldr	r3, [pc, #232]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
 8005082:	f000 bf7b 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005086:	4b35      	ldr	r3, [pc, #212]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d107      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	2b03      	cmp	r3, #3
 8005098:	d104      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800509e:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a0:	f000 bf6c 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a8:	f000 bf68 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80050ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b0:	1e91      	subs	r1, r2, #2
 80050b2:	430b      	orrs	r3, r1
 80050b4:	d136      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80050b6:	4b29      	ldr	r3, [pc, #164]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe faf4 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80050cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80050ce:	f000 bf55 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d104      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050d8:	f7fe f9d0 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80050dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80050de:	f000 bf4d 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80050e2:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ee:	d106      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d103      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80050f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fa:	f000 bf3f 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80050fe:	4b17      	ldr	r3, [pc, #92]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b02      	cmp	r3, #2
 800510a:	d107      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d104      	bne.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005116:	637b      	str	r3, [r7, #52]	@ 0x34
 8005118:	f000 bf30 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005120:	f000 bf2c 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005128:	1f11      	subs	r1, r2, #4
 800512a:	430b      	orrs	r3, r1
 800512c:	d13f      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800512e:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005134:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005140:	f7fe fab8 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8005144:	6378      	str	r0, [r7, #52]	@ 0x34
 8005146:	f000 bf19 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	2b10      	cmp	r3, #16
 800514e:	d10d      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005150:	f7fe f994 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005154:	6378      	str	r0, [r7, #52]	@ 0x34
 8005156:	f000 bf11 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800515a:	bf00      	nop
 800515c:	46020c00 	.word	0x46020c00
 8005160:	02dc6c00 	.word	0x02dc6c00
 8005164:	0800d9bc 	.word	0x0800d9bc
 8005168:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800516c:	4ba6      	ldr	r3, [pc, #664]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005178:	d106      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	2b20      	cmp	r3, #32
 800517e:	d103      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8005180:	4ba2      	ldr	r3, [pc, #648]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005182:	637b      	str	r3, [r7, #52]	@ 0x34
 8005184:	f000 befa 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005188:	4b9f      	ldr	r3, [pc, #636]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800518a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d107      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	2b30      	cmp	r3, #48	@ 0x30
 800519a:	d104      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800519c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a2:	f000 beeb 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051aa:	f000 bee7 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80051ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b2:	f1a2 0108 	sub.w	r1, r2, #8
 80051b6:	430b      	orrs	r3, r1
 80051b8:	d136      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80051ba:	4b93      	ldr	r3, [pc, #588]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe fa72 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80051d2:	f000 bed3 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2b40      	cmp	r3, #64	@ 0x40
 80051da:	d104      	bne.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051dc:	f7fe f94e 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80051e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80051e2:	f000 becb 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80051e6:	4b88      	ldr	r3, [pc, #544]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f2:	d106      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	2b80      	cmp	r3, #128	@ 0x80
 80051f8:	d103      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80051fa:	4b84      	ldr	r3, [pc, #528]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fe:	f000 bebd 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005202:	4b81      	ldr	r3, [pc, #516]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b02      	cmp	r3, #2
 800520e:	d107      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	2bc0      	cmp	r3, #192	@ 0xc0
 8005214:	d104      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8005216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
 800521c:	f000 beae 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
 8005224:	f000 beaa 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522c:	f1a2 0110 	sub.w	r1, r2, #16
 8005230:	430b      	orrs	r3, r1
 8005232:	d139      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005234:	4b74      	ldr	r3, [pc, #464]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fe fa35 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 800524a:	6378      	str	r0, [r7, #52]	@ 0x34
 800524c:	f000 be96 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005256:	d104      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005258:	f7fe f910 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800525c:	6378      	str	r0, [r7, #52]	@ 0x34
 800525e:	f000 be8d 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005262:	4b69      	ldr	r3, [pc, #420]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d107      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005276:	d103      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8005278:	4b64      	ldr	r3, [pc, #400]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
 800527c:	f000 be7e 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005280:	4b61      	ldr	r3, [pc, #388]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d108      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005294:	d104      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8005296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800529a:	637b      	str	r3, [r7, #52]	@ 0x34
 800529c:	f000 be6e 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a4:	f000 be6a 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80052a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ac:	f1a2 0120 	sub.w	r1, r2, #32
 80052b0:	430b      	orrs	r3, r1
 80052b2:	d158      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80052b4:	4b54      	ldr	r3, [pc, #336]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80052c6:	f7fe fa1d 	bl	8003704 <HAL_RCC_GetPCLK3Freq>
 80052ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80052cc:	f000 be56 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d104      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe f8d1 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80052da:	6378      	str	r0, [r7, #52]	@ 0x34
 80052dc:	f000 be4e 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80052e0:	4b49      	ldr	r3, [pc, #292]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ec:	d106      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d103      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80052f4:	4b45      	ldr	r3, [pc, #276]	@ (800540c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80052f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f8:	f000 be40 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80052fc:	4b42      	ldr	r3, [pc, #264]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d107      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2b03      	cmp	r3, #3
 800530e:	d104      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8005310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
 8005316:	f000 be31 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800531a:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d11b      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	2b04      	cmp	r3, #4
 800532a:	d118      	bne.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800532c:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005338:	4b33      	ldr	r3, [pc, #204]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	0e1b      	lsrs	r3, r3, #24
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	e006      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8005344:	4b30      	ldr	r3, [pc, #192]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	0e1b      	lsrs	r3, r3, #24
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	4a2f      	ldr	r2, [pc, #188]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
 800535a:	f000 be0f 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	637b      	str	r3, [r7, #52]	@ 0x34
 8005362:	f000 be0b 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800536a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800536e:	430b      	orrs	r3, r1
 8005370:	d172      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005372:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005378:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800537c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005384:	d104      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005386:	f7fe f879 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800538a:	6378      	str	r0, [r7, #52]	@ 0x34
 800538c:	f000 bdf6 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005396:	d108      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005398:	f107 0318 	add.w	r3, r7, #24
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff f965 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a6:	f000 bde9 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80053b0:	f7fe f966 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80053b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80053b6:	f000 bde1 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80053c0:	d128      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053c2:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d118      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	0e1b      	lsrs	r3, r3, #24
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	e006      	b.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80053e6:	4b08      	ldr	r3, [pc, #32]	@ (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80053e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	0e1b      	lsrs	r3, r3, #24
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	4a06      	ldr	r2, [pc, #24]	@ (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fc:	f000 bdbe 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	637b      	str	r3, [r7, #52]	@ 0x34
 8005404:	f000 bdba 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005408:	46020c00 	.word	0x46020c00
 800540c:	00f42400 	.word	0x00f42400
 8005410:	0800d9bc 	.word	0x0800d9bc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005414:	4baf      	ldr	r3, [pc, #700]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005420:	d107      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005428:	d103      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800542a:	4bab      	ldr	r3, [pc, #684]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
 800542e:	f000 bda5 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005432:	4ba8      	ldr	r3, [pc, #672]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543e:	d107      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005446:	d103      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8005448:	4ba3      	ldr	r3, [pc, #652]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
 800544c:	f000 bd96 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
 8005454:	f000 bd92 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005460:	430b      	orrs	r3, r1
 8005462:	d158      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005464:	4b9b      	ldr	r3, [pc, #620]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	2b04      	cmp	r3, #4
 8005474:	d84b      	bhi.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8005476:	a201      	add	r2, pc, #4	@ (adr r2, 800547c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	080054b5 	.word	0x080054b5
 8005480:	08005491 	.word	0x08005491
 8005484:	080054a3 	.word	0x080054a3
 8005488:	080054bf 	.word	0x080054bf
 800548c:	080054c9 	.word	0x080054c9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe ff8f 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800549e:	f000 bd6d 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fa3a 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054b0:	f000 bd64 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80054b4:	f7fe f8e4 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80054b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054ba:	f000 bd5f 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054c4:	f000 bd5a 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054c8:	4b82      	ldr	r3, [pc, #520]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d118      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054d4:	4b7f      	ldr	r3, [pc, #508]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80054e0:	4b7c      	ldr	r3, [pc, #496]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	0e1b      	lsrs	r3, r3, #24
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	e006      	b.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80054ec:	4b79      	ldr	r3, [pc, #484]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80054ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a78      	ldr	r2, [pc, #480]	@ (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005502:	f000 bd3b 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800550a:	f000 bd37 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005512:	f000 bd33 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800551e:	430b      	orrs	r3, r1
 8005520:	d167      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005522:	4b6c      	ldr	r3, [pc, #432]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005528:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005534:	d036      	beq.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800553c:	d855      	bhi.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005544:	d029      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800554c:	d84d      	bhi.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005554:	d013      	beq.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800555c:	d845      	bhi.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556a:	d13e      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800556c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe ff21 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800557a:	f000 bcff 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800557e:	f107 030c 	add.w	r3, r7, #12
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff f9cc 	bl	8004920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800558c:	f000 bcf6 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005590:	f7fe f876 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8005594:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005596:	f000 bcf1 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800559a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800559e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055a0:	f000 bcec 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055a4:	4b4b      	ldr	r3, [pc, #300]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d118      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055b0:	4b48      	ldr	r3, [pc, #288]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80055bc:	4b45      	ldr	r3, [pc, #276]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	0e1b      	lsrs	r3, r3, #24
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	e006      	b.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80055c8:	4b42      	ldr	r3, [pc, #264]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80055ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	0e1b      	lsrs	r3, r3, #24
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	4a41      	ldr	r2, [pc, #260]	@ (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80055d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055de:	f000 bccd 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055e6:	f000 bcc9 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055ee:	f000 bcc5 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80055f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80055fa:	430b      	orrs	r3, r1
 80055fc:	d14c      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80055fe:	4b35      	ldr	r3, [pc, #212]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005604:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005608:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fe f850 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8005614:	6378      	str	r0, [r7, #52]	@ 0x34
 8005616:	f000 bcb1 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005620:	d104      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005622:	f7fd ff2b 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005626:	6378      	str	r0, [r7, #52]	@ 0x34
 8005628:	f000 bca8 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800562c:	4b29      	ldr	r3, [pc, #164]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005638:	d107      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005640:	d103      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8005642:	4b25      	ldr	r3, [pc, #148]	@ (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
 8005646:	f000 bc99 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800564a:	4b22      	ldr	r3, [pc, #136]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d11c      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800565c:	d118      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800565e:	4b1d      	ldr	r3, [pc, #116]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800566a:	4b1a      	ldr	r3, [pc, #104]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0e1b      	lsrs	r3, r3, #24
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8005676:	4b17      	ldr	r3, [pc, #92]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	4a15      	ldr	r2, [pc, #84]	@ (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
 800568c:	f000 bc76 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
 8005694:	f000 bc72 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80056a0:	430b      	orrs	r3, r1
 80056a2:	d153      	bne.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80056a4:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80056a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056b6:	f7fd fffd 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80056ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80056bc:	f000 bc5e 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80056c8:	f7fd fed8 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80056cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80056ce:	f000 bc55 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80056d2:	bf00      	nop
 80056d4:	46020c00 	.word	0x46020c00
 80056d8:	00f42400 	.word	0x00f42400
 80056dc:	0800d9bc 	.word	0x0800d9bc
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80056e0:	4ba1      	ldr	r3, [pc, #644]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ec:	d107      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f4:	d103      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80056f6:	4b9d      	ldr	r3, [pc, #628]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80056f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fa:	f000 bc3f 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80056fe:	4b9a      	ldr	r3, [pc, #616]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b20      	cmp	r3, #32
 8005708:	d11c      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005710:	d118      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005712:	4b95      	ldr	r3, [pc, #596]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800571e:	4b92      	ldr	r3, [pc, #584]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0e1b      	lsrs	r3, r3, #24
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800572a:	4b8f      	ldr	r3, [pc, #572]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800572c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	0e1b      	lsrs	r3, r3, #24
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	4a8d      	ldr	r2, [pc, #564]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800573a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005740:	f000 bc1c 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
 8005748:	f000 bc18 	b.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800574c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005750:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005754:	430b      	orrs	r3, r1
 8005756:	d151      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005758:	4b83      	ldr	r3, [pc, #524]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800575a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800575e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005762:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	2bc0      	cmp	r3, #192	@ 0xc0
 8005768:	d024      	beq.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	2bc0      	cmp	r3, #192	@ 0xc0
 800576e:	d842      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005772:	2b80      	cmp	r3, #128	@ 0x80
 8005774:	d00d      	beq.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	2b80      	cmp	r3, #128	@ 0x80
 800577a:	d83c      	bhi.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800577c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	2b40      	cmp	r3, #64	@ 0x40
 8005786:	d011      	beq.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8005788:	e035      	b.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800578a:	f7fd ffbb 	bl	8003704 <HAL_RCC_GetPCLK3Freq>
 800578e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005790:	e3f4      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005792:	4b75      	ldr	r3, [pc, #468]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800579a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579e:	d102      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80057a0:	4b72      	ldr	r3, [pc, #456]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057a4:	e3ea      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057aa:	e3e7      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80057ac:	f7fd fe66 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80057b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80057b2:	e3e3      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80057b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d117      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057c0:	4b69      	ldr	r3, [pc, #420]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80057cc:	4b66      	ldr	r3, [pc, #408]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	0e1b      	lsrs	r3, r3, #24
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80057d8:	4b63      	ldr	r3, [pc, #396]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	4a62      	ldr	r2, [pc, #392]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057ee:	e3c5      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057f4:	e3c2      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057fa:	e3bf      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80057fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005800:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005804:	430b      	orrs	r3, r1
 8005806:	d147      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005808:	4b57      	ldr	r3, [pc, #348]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800580a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800580e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005812:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800581a:	f7fd ff4b 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 800581e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005820:	e3ac      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005828:	d103      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800582a:	f7fd fe27 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800582e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005830:	e3a4      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005832:	4b4d      	ldr	r3, [pc, #308]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005846:	d102      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8005848:	4b48      	ldr	r3, [pc, #288]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
 800584c:	e396      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800584e:	4b46      	ldr	r3, [pc, #280]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	d11b      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005860:	d117      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005862:	4b41      	ldr	r3, [pc, #260]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800586e:	4b3e      	ldr	r3, [pc, #248]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	0e1b      	lsrs	r3, r3, #24
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	e006      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800587a:	4b3b      	ldr	r3, [pc, #236]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800587c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	0e1b      	lsrs	r3, r3, #24
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	4a39      	ldr	r2, [pc, #228]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005890:	e374      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
 8005896:	e371      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80058a0:	430b      	orrs	r3, r1
 80058a2:	d16a      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80058a4:	4b30      	ldr	r3, [pc, #192]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80058a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d120      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d117      	bne.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058c2:	4b29      	ldr	r3, [pc, #164]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80058ce:	4b26      	ldr	r3, [pc, #152]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	0e1b      	lsrs	r3, r3, #24
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80058da:	4b23      	ldr	r3, [pc, #140]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80058dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	0e1b      	lsrs	r3, r3, #24
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	4a21      	ldr	r2, [pc, #132]	@ (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80058ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f0:	e344      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f6:	e341      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80058f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80058fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005906:	d112      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590e:	d10e      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005910:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800591e:	d102      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8005920:	23fa      	movs	r3, #250	@ 0xfa
 8005922:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005924:	e32a      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005926:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800592c:	e326      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800592e:	4b0e      	ldr	r3, [pc, #56]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800593a:	d106      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005942:	d102      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8005944:	4b09      	ldr	r3, [pc, #36]	@ (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8005946:	637b      	str	r3, [r7, #52]	@ 0x34
 8005948:	e318      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800594a:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800594c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d10d      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595e:	d109      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8005960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005964:	637b      	str	r3, [r7, #52]	@ 0x34
 8005966:	e309      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005968:	46020c00 	.word	0x46020c00
 800596c:	00f42400 	.word	0x00f42400
 8005970:	0800d9bc 	.word	0x0800d9bc
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34
 8005978:	e300      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800597a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800597e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005982:	430b      	orrs	r3, r1
 8005984:	d164      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005986:	4ba2      	ldr	r3, [pc, #648]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800598c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005990:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d120      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005998:	4b9d      	ldr	r3, [pc, #628]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d117      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059a4:	4b9a      	ldr	r3, [pc, #616]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80059b0:	4b97      	ldr	r3, [pc, #604]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	0e1b      	lsrs	r3, r3, #24
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	e006      	b.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80059bc:	4b94      	ldr	r3, [pc, #592]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	0e1b      	lsrs	r3, r3, #24
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	4a92      	ldr	r2, [pc, #584]	@ (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80059cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d2:	e2d3      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d8:	e2d0      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80059da:	4b8d      	ldr	r3, [pc, #564]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e8:	d112      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059f0:	d10e      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059f2:	4b87      	ldr	r3, [pc, #540]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a00:	d102      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8005a02:	23fa      	movs	r3, #250	@ 0xfa
 8005a04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a06:	e2b9      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a0e:	e2b5      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005a10:	4b7f      	ldr	r3, [pc, #508]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a24:	d102      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8005a26:	4b7c      	ldr	r3, [pc, #496]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2a:	e2a7      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005a2c:	4b78      	ldr	r3, [pc, #480]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d107      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a40:	d103      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8005a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a48:	e298      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a4e:	e295      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a54:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	d147      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a62:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005a66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005a6e:	f7fd fe21 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8005a72:	6378      	str	r0, [r7, #52]	@ 0x34
 8005a74:	e282      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005a76:	4b66      	ldr	r3, [pc, #408]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a84:	d112      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a8c:	d10e      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a8e:	4b60      	ldr	r3, [pc, #384]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a9c:	d102      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8005a9e:	23fa      	movs	r3, #250	@ 0xfa
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aa2:	e26b      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005aa4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005aaa:	e267      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005aac:	4b58      	ldr	r3, [pc, #352]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ab8:	d106      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ac0:	d102      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8005ac2:	4b55      	ldr	r3, [pc, #340]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac6:	e259      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005ac8:	4b51      	ldr	r3, [pc, #324]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005adc:	d103      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8005ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ae4:	e24a      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aea:	e247      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005af4:	430b      	orrs	r3, r1
 8005af6:	d12d      	bne.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005af8:	4b45      	ldr	r3, [pc, #276]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005afe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005b02:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005b04:	4b42      	ldr	r3, [pc, #264]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b10:	d105      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8005b18:	4b3f      	ldr	r3, [pc, #252]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b1c:	e22e      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b24:	d107      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fc44 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b34:	e222      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3e:	f107 0318 	add.w	r3, r7, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fd92 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4c:	e216      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b52:	e213      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b58:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	d15d      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005b60:	4b2b      	ldr	r3, [pc, #172]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b66:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b72:	d028      	beq.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b7a:	d845      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b82:	d013      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b8a:	d83d      	bhi.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b98:	d004      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8005b9a:	e035      	b.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fd fd9e 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8005ba0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005ba2:	e1eb      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7fd fc6a 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005ba8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005baa:	e1e7      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bac:	4b18      	ldr	r3, [pc, #96]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8005bba:	4b17      	ldr	r3, [pc, #92]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005bbc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bbe:	e1dd      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bc4:	e1da      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005bc6:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d117      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8005bde:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0e1b      	lsrs	r3, r3, #24
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	e006      	b.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8005bea:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	0e1b      	lsrs	r3, r3, #24
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	4a06      	ldr	r2, [pc, #24]	@ (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c00:	e1bc      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c06:	e1b9      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c0c:	e1b6      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005c0e:	bf00      	nop
 8005c10:	46020c00 	.word	0x46020c00
 8005c14:	0800d9bc 	.word	0x0800d9bc
 8005c18:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c20:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005c24:	430b      	orrs	r3, r1
 8005c26:	d156      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005c28:	4ba5      	ldr	r3, [pc, #660]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c32:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c3a:	d028      	beq.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c42:	d845      	bhi.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c4a:	d013      	beq.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c52:	d83d      	bhi.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c60:	d004      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8005c62:	e035      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005c64:	f7fd fd26 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8005c68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005c6a:	e187      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c6c:	f7fd fc06 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005c70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005c72:	e183      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c74:	4b92      	ldr	r3, [pc, #584]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c80:	d102      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8005c82:	4b90      	ldr	r3, [pc, #576]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8005c84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c86:	e179      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c8c:	e176      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c8e:	4b8c      	ldr	r3, [pc, #560]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d117      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c9a:	4b89      	ldr	r3, [pc, #548]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8005ca6:	4b86      	ldr	r3, [pc, #536]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0e1b      	lsrs	r3, r3, #24
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8005cb2:	4b83      	ldr	r3, [pc, #524]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	0e1b      	lsrs	r3, r3, #24
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	4a81      	ldr	r2, [pc, #516]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cc8:	e158      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cce:	e155      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cd4:	e152      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cda:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	d177      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005ce2:	4b77      	ldr	r3, [pc, #476]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ce8:	f003 0318 	and.w	r3, r3, #24
 8005cec:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	2b18      	cmp	r3, #24
 8005cf2:	d86b      	bhi.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8005cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d61 	.word	0x08005d61
 8005d00:	08005dcd 	.word	0x08005dcd
 8005d04:	08005dcd 	.word	0x08005dcd
 8005d08:	08005dcd 	.word	0x08005dcd
 8005d0c:	08005dcd 	.word	0x08005dcd
 8005d10:	08005dcd 	.word	0x08005dcd
 8005d14:	08005dcd 	.word	0x08005dcd
 8005d18:	08005dcd 	.word	0x08005dcd
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005dcd 	.word	0x08005dcd
 8005d24:	08005dcd 	.word	0x08005dcd
 8005d28:	08005dcd 	.word	0x08005dcd
 8005d2c:	08005dcd 	.word	0x08005dcd
 8005d30:	08005dcd 	.word	0x08005dcd
 8005d34:	08005dcd 	.word	0x08005dcd
 8005d38:	08005dcd 	.word	0x08005dcd
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005dcd 	.word	0x08005dcd
 8005d44:	08005dcd 	.word	0x08005dcd
 8005d48:	08005dcd 	.word	0x08005dcd
 8005d4c:	08005dcd 	.word	0x08005dcd
 8005d50:	08005dcd 	.word	0x08005dcd
 8005d54:	08005dcd 	.word	0x08005dcd
 8005d58:	08005dcd 	.word	0x08005dcd
 8005d5c:	08005d8b 	.word	0x08005d8b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005d60:	f7fd fcd0 	bl	8003704 <HAL_RCC_GetPCLK3Freq>
 8005d64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005d66:	e109      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d68:	f7fd fb88 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005d6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005d6e:	e105      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d70:	4b53      	ldr	r3, [pc, #332]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d7c:	d102      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8005d7e:	4b51      	ldr	r3, [pc, #324]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d82:	e0fb      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d88:	e0f8      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d117      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d96:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8005da2:	4b47      	ldr	r3, [pc, #284]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8005dae:	4b44      	ldr	r3, [pc, #272]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	0e1b      	lsrs	r3, r3, #24
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	4a42      	ldr	r2, [pc, #264]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dc4:	e0da      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dca:	e0d7      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dd0:	e0d4      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	d155      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005dde:	4b38      	ldr	r3, [pc, #224]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005de4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005de8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df0:	d013      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df8:	d844      	bhi.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e00:	d013      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e08:	d83c      	bhi.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d014      	beq.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e16:	d014      	beq.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005e18:	e034      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1a:	f107 0318 	add.w	r3, r7, #24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fc24 	bl	800466c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e28:	e0a8      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fac2 	bl	80043b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e38:	e0a0      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fd fb1f 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005e3e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005e40:	e09c      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e42:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d117      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8005e5a:	4b19      	ldr	r3, [pc, #100]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0e1b      	lsrs	r3, r3, #24
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005e66:	4b16      	ldr	r3, [pc, #88]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	4a14      	ldr	r2, [pc, #80]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e7c:	e07e      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e82:	e07b      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e88:	e078      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005e92:	430b      	orrs	r3, r1
 8005e94:	d138      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ea0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005ea2:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8005eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ebc:	e05e      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005ebe:	bf00      	nop
 8005ec0:	46020c00 	.word	0x46020c00
 8005ec4:	00f42400 	.word	0x00f42400
 8005ec8:	0800d9bc 	.word	0x0800d9bc
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ed2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eda:	d112      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee2:	d10e      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ee4:	4b28      	ldr	r3, [pc, #160]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ef2:	d102      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8005ef4:	23fa      	movs	r3, #250	@ 0xfa
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ef8:	e040      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005efa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005efe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f00:	e03c      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f06:	e039      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005f10:	430b      	orrs	r3, r1
 8005f12:	d131      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f14:	4b1c      	ldr	r3, [pc, #112]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005f16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f1e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f20:	4b19      	ldr	r3, [pc, #100]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f2c:	d105      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8005f34:	4b15      	ldr	r3, [pc, #84]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f38:	e020      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005f3a:	4b13      	ldr	r3, [pc, #76]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f46:	d106      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4e:	d102      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005f50:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8005f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f54:	e012      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005f56:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f62:	d106      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6a:	d102      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8005f6c:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f70:	e004      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f76:	e001      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3738      	adds	r7, #56	@ 0x38
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	46020c00 	.word	0x46020c00
 8005f8c:	02dc6c00 	.word	0x02dc6c00
 8005f90:	016e3600 	.word	0x016e3600
 8005f94:	00f42400 	.word	0x00f42400

08005f98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005fa0:	4b47      	ldr	r3, [pc, #284]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8005fa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005faa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fac:	f7fb fb26 	bl	80015fc <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fb2:	e008      	b.n	8005fc6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fb4:	f7fb fb22 	bl	80015fc <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e077      	b.n	80060b6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6811      	ldr	r1, [r2, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6852      	ldr	r2, [r2, #4]
 8005fe6:	3a01      	subs	r2, #1
 8005fe8:	0212      	lsls	r2, r2, #8
 8005fea:	430a      	orrs	r2, r1
 8005fec:	4934      	ldr	r1, [pc, #208]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005ff2:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8005ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ff6:	4b33      	ldr	r3, [pc, #204]	@ (80060c4 <RCCEx_PLL2_Config+0x12c>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6892      	ldr	r2, [r2, #8]
 8005ffe:	3a01      	subs	r2, #1
 8006000:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68d2      	ldr	r2, [r2, #12]
 8006008:	3a01      	subs	r2, #1
 800600a:	0252      	lsls	r2, r2, #9
 800600c:	b292      	uxth	r2, r2
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6912      	ldr	r2, [r2, #16]
 8006014:	3a01      	subs	r2, #1
 8006016:	0412      	lsls	r2, r2, #16
 8006018:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800601c:	4311      	orrs	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6952      	ldr	r2, [r2, #20]
 8006022:	3a01      	subs	r2, #1
 8006024:	0612      	lsls	r2, r2, #24
 8006026:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800602a:	430a      	orrs	r2, r1
 800602c:	4924      	ldr	r1, [pc, #144]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 800602e:	4313      	orrs	r3, r2
 8006030:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006032:	4b23      	ldr	r3, [pc, #140]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006036:	f023 020c 	bic.w	r2, r3, #12
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	4920      	ldr	r1, [pc, #128]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006040:	4313      	orrs	r3, r2
 8006042:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006044:	4b1e      	ldr	r3, [pc, #120]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	491c      	ldr	r1, [pc, #112]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 800604e:	4313      	orrs	r3, r2
 8006050:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	4a1a      	ldr	r2, [pc, #104]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800605e:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006066:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	69d2      	ldr	r2, [r2, #28]
 800606e:	00d2      	lsls	r2, r2, #3
 8006070:	4913      	ldr	r1, [pc, #76]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006072:	4313      	orrs	r3, r2
 8006074:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006076:	4b12      	ldr	r3, [pc, #72]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	4a11      	ldr	r2, [pc, #68]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 800607c:	f043 0310 	orr.w	r3, r3, #16
 8006080:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006082:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0e      	ldr	r2, [pc, #56]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 8006088:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800608c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800608e:	f7fb fab5 	bl	80015fc <HAL_GetTick>
 8006092:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006094:	e008      	b.n	80060a8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006096:	f7fb fab1 	bl	80015fc <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060a8:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <RCCEx_PLL2_Config+0x128>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0

}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	46020c00 	.word	0x46020c00
 80060c4:	80800000 	.word	0x80800000

080060c8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80060d0:	4b47      	ldr	r3, [pc, #284]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a46      	ldr	r2, [pc, #280]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80060d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060dc:	f7fb fa8e 	bl	80015fc <HAL_GetTick>
 80060e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060e2:	e008      	b.n	80060f6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060e4:	f7fb fa8a 	bl	80015fc <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e077      	b.n	80061e6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060f6:	4b3e      	ldr	r3, [pc, #248]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006102:	4b3b      	ldr	r3, [pc, #236]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006106:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6811      	ldr	r1, [r2, #0]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6852      	ldr	r2, [r2, #4]
 8006116:	3a01      	subs	r2, #1
 8006118:	0212      	lsls	r2, r2, #8
 800611a:	430a      	orrs	r2, r1
 800611c:	4934      	ldr	r1, [pc, #208]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 800611e:	4313      	orrs	r3, r2
 8006120:	630b      	str	r3, [r1, #48]	@ 0x30
 8006122:	4b33      	ldr	r3, [pc, #204]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006126:	4b33      	ldr	r3, [pc, #204]	@ (80061f4 <RCCEx_PLL3_Config+0x12c>)
 8006128:	4013      	ands	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6892      	ldr	r2, [r2, #8]
 800612e:	3a01      	subs	r2, #1
 8006130:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68d2      	ldr	r2, [r2, #12]
 8006138:	3a01      	subs	r2, #1
 800613a:	0252      	lsls	r2, r2, #9
 800613c:	b292      	uxth	r2, r2
 800613e:	4311      	orrs	r1, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6912      	ldr	r2, [r2, #16]
 8006144:	3a01      	subs	r2, #1
 8006146:	0412      	lsls	r2, r2, #16
 8006148:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800614c:	4311      	orrs	r1, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6952      	ldr	r2, [r2, #20]
 8006152:	3a01      	subs	r2, #1
 8006154:	0612      	lsls	r2, r2, #24
 8006156:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800615a:	430a      	orrs	r2, r1
 800615c:	4924      	ldr	r1, [pc, #144]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 800615e:	4313      	orrs	r3, r2
 8006160:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006162:	4b23      	ldr	r3, [pc, #140]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	f023 020c 	bic.w	r2, r3, #12
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	4920      	ldr	r1, [pc, #128]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006170:	4313      	orrs	r3, r2
 8006172:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006174:	4b1e      	ldr	r3, [pc, #120]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	491c      	ldr	r1, [pc, #112]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 800617e:	4313      	orrs	r3, r2
 8006180:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006182:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006186:	4a1a      	ldr	r2, [pc, #104]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006188:	f023 0310 	bic.w	r3, r3, #16
 800618c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800618e:	4b18      	ldr	r3, [pc, #96]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 8006190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006196:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	69d2      	ldr	r2, [r2, #28]
 800619e:	00d2      	lsls	r2, r2, #3
 80061a0:	4913      	ldr	r1, [pc, #76]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80061a6:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80061a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061aa:	4a11      	ldr	r2, [pc, #68]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80061ac:	f043 0310 	orr.w	r3, r3, #16
 80061b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80061b2:	4b0f      	ldr	r3, [pc, #60]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a0e      	ldr	r2, [pc, #56]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80061b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061be:	f7fb fa1d 	bl	80015fc <HAL_GetTick>
 80061c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061c4:	e008      	b.n	80061d8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061c6:	f7fb fa19 	bl	80015fc <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e006      	b.n	80061e6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <RCCEx_PLL3_Config+0x128>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f0      	beq.n	80061c6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	46020c00 	.word	0x46020c00
 80061f4:	80800000 	.word	0x80800000

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e042      	b.n	8006290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fa ff59 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	@ 0x24
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fb7e 	bl	8006944 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9d9 	bl	8006600 <UART_SetConfig>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e01b      	b.n	8006290 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fbfd 	bl	8006a88 <UART_CheckIdleState>
 800628e:	4603      	mov	r3, r0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e031      	b.n	800630e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2224      	movs	r2, #36	@ 0x24
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2200      	movs	r2, #0
 80062d8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fa ff78 	bl	80011d0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b08a      	sub	sp, #40	@ 0x28
 800631a:	af02      	add	r7, sp, #8
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800632c:	2b20      	cmp	r3, #32
 800632e:	f040 808b 	bne.w	8006448 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_UART_Transmit+0x28>
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e083      	b.n	800644a <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634c:	2b80      	cmp	r3, #128	@ 0x80
 800634e:	d107      	bne.n	8006360 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800635e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2221      	movs	r2, #33	@ 0x21
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006370:	f7fb f944 	bl	80015fc <HAL_GetTick>
 8006374:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638e:	d108      	bne.n	80063a2 <HAL_UART_Transmit+0x8c>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	e003      	b.n	80063aa <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063aa:	e030      	b.n	800640e <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2200      	movs	r2, #0
 80063b4:	2180      	movs	r1, #128	@ 0x80
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fc10 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e03d      	b.n	800644a <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	3302      	adds	r3, #2
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	e007      	b.n	80063fc <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	3301      	adds	r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1c8      	bne.n	80063ac <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	2140      	movs	r1, #64	@ 0x40
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fbd9 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e006      	b.n	800644a <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006448:	2302      	movs	r3, #2
  }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b08a      	sub	sp, #40	@ 0x28
 8006456:	af02      	add	r7, sp, #8
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006468:	2b20      	cmp	r3, #32
 800646a:	f040 80c4 	bne.w	80065f6 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_UART_Receive+0x28>
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e0bc      	b.n	80065f8 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006488:	2b40      	cmp	r3, #64	@ 0x40
 800648a:	d107      	bne.n	800649c <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800649a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2222      	movs	r2, #34	@ 0x22
 80064a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b2:	f7fb f8a3 	bl	80015fc <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d0:	d10e      	bne.n	80064f0 <HAL_UART_Receive+0x9e>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <HAL_UART_Receive+0x94>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80064e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064e4:	e02d      	b.n	8006542 <HAL_UART_Receive+0xf0>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	22ff      	movs	r2, #255	@ 0xff
 80064ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064ee:	e028      	b.n	8006542 <HAL_UART_Receive+0xf0>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10d      	bne.n	8006514 <HAL_UART_Receive+0xc2>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <HAL_UART_Receive+0xb8>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	22ff      	movs	r2, #255	@ 0xff
 8006504:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006508:	e01b      	b.n	8006542 <HAL_UART_Receive+0xf0>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	227f      	movs	r2, #127	@ 0x7f
 800650e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006512:	e016      	b.n	8006542 <HAL_UART_Receive+0xf0>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651c:	d10d      	bne.n	800653a <HAL_UART_Receive+0xe8>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <HAL_UART_Receive+0xde>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	227f      	movs	r2, #127	@ 0x7f
 800652a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800652e:	e008      	b.n	8006542 <HAL_UART_Receive+0xf0>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	223f      	movs	r2, #63	@ 0x3f
 8006534:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006538:	e003      	b.n	8006542 <HAL_UART_Receive+0xf0>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006548:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006552:	d108      	bne.n	8006566 <HAL_UART_Receive+0x114>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e003      	b.n	800656e <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800656e:	e036      	b.n	80065de <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	2120      	movs	r1, #32
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fb2e 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e032      	b.n	80065f8 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10c      	bne.n	80065b2 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659e:	b29a      	uxth	r2, r3
 80065a0:	8a7b      	ldrh	r3, [r7, #18]
 80065a2:	4013      	ands	r3, r2
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3302      	adds	r3, #2
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e00c      	b.n	80065cc <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	8a7b      	ldrh	r3, [r7, #18]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	4013      	ands	r3, r2
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	3301      	adds	r3, #1
 80065ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1c2      	bne.n	8006570 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e000      	b.n	80065f8 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006604:	b094      	sub	sp, #80	@ 0x50
 8006606:	af00      	add	r7, sp, #0
 8006608:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b7e      	ldr	r3, [pc, #504]	@ (8006810 <UART_SetConfig+0x210>)
 8006616:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	431a      	orrs	r2, r3
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	431a      	orrs	r2, r3
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	4313      	orrs	r3, r2
 800662e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4977      	ldr	r1, [pc, #476]	@ (8006814 <UART_SetConfig+0x214>)
 8006638:	4019      	ands	r1, r3
 800663a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006640:	430b      	orrs	r3, r1
 8006642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	68d9      	ldr	r1, [r3, #12]
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	ea40 0301 	orr.w	r3, r0, r1
 800665a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800665c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b6a      	ldr	r3, [pc, #424]	@ (8006810 <UART_SetConfig+0x210>)
 8006668:	429a      	cmp	r2, r3
 800666a:	d009      	beq.n	8006680 <UART_SetConfig+0x80>
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b69      	ldr	r3, [pc, #420]	@ (8006818 <UART_SetConfig+0x218>)
 8006672:	429a      	cmp	r2, r3
 8006674:	d004      	beq.n	8006680 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006678:	6a1a      	ldr	r2, [r3, #32]
 800667a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800667c:	4313      	orrs	r3, r2
 800667e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800668a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006694:	430b      	orrs	r3, r1
 8006696:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	f023 000f 	bic.w	r0, r3, #15
 80066a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	ea40 0301 	orr.w	r3, r0, r1
 80066ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b59      	ldr	r3, [pc, #356]	@ (800681c <UART_SetConfig+0x21c>)
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d102      	bne.n	80066c0 <UART_SetConfig+0xc0>
 80066ba:	2301      	movs	r3, #1
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066be:	e029      	b.n	8006714 <UART_SetConfig+0x114>
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b56      	ldr	r3, [pc, #344]	@ (8006820 <UART_SetConfig+0x220>)
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d102      	bne.n	80066d0 <UART_SetConfig+0xd0>
 80066ca:	2302      	movs	r3, #2
 80066cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ce:	e021      	b.n	8006714 <UART_SetConfig+0x114>
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b53      	ldr	r3, [pc, #332]	@ (8006824 <UART_SetConfig+0x224>)
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d102      	bne.n	80066e0 <UART_SetConfig+0xe0>
 80066da:	2304      	movs	r3, #4
 80066dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066de:	e019      	b.n	8006714 <UART_SetConfig+0x114>
 80066e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b50      	ldr	r3, [pc, #320]	@ (8006828 <UART_SetConfig+0x228>)
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d102      	bne.n	80066f0 <UART_SetConfig+0xf0>
 80066ea:	2308      	movs	r3, #8
 80066ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ee:	e011      	b.n	8006714 <UART_SetConfig+0x114>
 80066f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4b4d      	ldr	r3, [pc, #308]	@ (800682c <UART_SetConfig+0x22c>)
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d102      	bne.n	8006700 <UART_SetConfig+0x100>
 80066fa:	2310      	movs	r3, #16
 80066fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066fe:	e009      	b.n	8006714 <UART_SetConfig+0x114>
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b42      	ldr	r3, [pc, #264]	@ (8006810 <UART_SetConfig+0x210>)
 8006706:	429a      	cmp	r2, r3
 8006708:	d102      	bne.n	8006710 <UART_SetConfig+0x110>
 800670a:	2320      	movs	r3, #32
 800670c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800670e:	e001      	b.n	8006714 <UART_SetConfig+0x114>
 8006710:	2300      	movs	r3, #0
 8006712:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4b3d      	ldr	r3, [pc, #244]	@ (8006810 <UART_SetConfig+0x210>)
 800671a:	429a      	cmp	r2, r3
 800671c:	d005      	beq.n	800672a <UART_SetConfig+0x12a>
 800671e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b3d      	ldr	r3, [pc, #244]	@ (8006818 <UART_SetConfig+0x218>)
 8006724:	429a      	cmp	r2, r3
 8006726:	f040 8085 	bne.w	8006834 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800672a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800672c:	2200      	movs	r2, #0
 800672e:	623b      	str	r3, [r7, #32]
 8006730:	627a      	str	r2, [r7, #36]	@ 0x24
 8006732:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006736:	f7fe fa4d 	bl	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800673a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800673c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80e8 	beq.w	8006914 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	4a39      	ldr	r2, [pc, #228]	@ (8006830 <UART_SetConfig+0x230>)
 800674a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674e:	461a      	mov	r2, r3
 8006750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006752:	fbb3 f3f2 	udiv	r3, r3, r2
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	4413      	add	r3, r2
 8006762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006764:	429a      	cmp	r2, r3
 8006766:	d305      	bcc.n	8006774 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800676e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800677a:	e048      	b.n	800680e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800677e:	2200      	movs	r2, #0
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	61fa      	str	r2, [r7, #28]
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006788:	4a29      	ldr	r2, [pc, #164]	@ (8006830 <UART_SetConfig+0x230>)
 800678a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678e:	b29b      	uxth	r3, r3
 8006790:	2200      	movs	r2, #0
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	617a      	str	r2, [r7, #20]
 8006796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800679a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800679e:	f7fa f83d 	bl	800081c <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	020b      	lsls	r3, r1, #8
 80067b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067b8:	0202      	lsls	r2, r0, #8
 80067ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067bc:	6849      	ldr	r1, [r1, #4]
 80067be:	0849      	lsrs	r1, r1, #1
 80067c0:	2000      	movs	r0, #0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4605      	mov	r5, r0
 80067c6:	eb12 0804 	adds.w	r8, r2, r4
 80067ca:	eb43 0905 	adc.w	r9, r3, r5
 80067ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	60fa      	str	r2, [r7, #12]
 80067d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7fa f81c 	bl	800081c <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067f2:	d308      	bcc.n	8006806 <UART_SetConfig+0x206>
 80067f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067fa:	d204      	bcs.n	8006806 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e003      	b.n	800680e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800680c:	e082      	b.n	8006914 <UART_SetConfig+0x314>
 800680e:	e081      	b.n	8006914 <UART_SetConfig+0x314>
 8006810:	46002400 	.word	0x46002400
 8006814:	cfff69f3 	.word	0xcfff69f3
 8006818:	56002400 	.word	0x56002400
 800681c:	40013800 	.word	0x40013800
 8006820:	40004400 	.word	0x40004400
 8006824:	40004800 	.word	0x40004800
 8006828:	40004c00 	.word	0x40004c00
 800682c:	40005000 	.word	0x40005000
 8006830:	0800da7c 	.word	0x0800da7c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800683c:	d13c      	bne.n	80068b8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800683e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006840:	2200      	movs	r2, #0
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	607a      	str	r2, [r7, #4]
 8006846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684a:	f7fe f9c3 	bl	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 800684e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d05e      	beq.n	8006914 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	4a39      	ldr	r2, [pc, #228]	@ (8006940 <UART_SetConfig+0x340>)
 800685c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006860:	461a      	mov	r2, r3
 8006862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006864:	fbb3 f3f2 	udiv	r3, r3, r2
 8006868:	005a      	lsls	r2, r3, #1
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	441a      	add	r2, r3
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d916      	bls.n	80068b0 <UART_SetConfig+0x2b0>
 8006882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006888:	d212      	bcs.n	80068b0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688c:	b29b      	uxth	r3, r3
 800688e:	f023 030f 	bic.w	r3, r3, #15
 8006892:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	b29a      	uxth	r2, r3
 80068a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80068a2:	4313      	orrs	r3, r2
 80068a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80068a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80068ac:	60da      	str	r2, [r3, #12]
 80068ae:	e031      	b.n	8006914 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80068b6:	e02d      	b.n	8006914 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ba:	2200      	movs	r2, #0
 80068bc:	469a      	mov	sl, r3
 80068be:	4693      	mov	fp, r2
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7fe f986 	bl	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 80068c8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80068ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d021      	beq.n	8006914 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006940 <UART_SetConfig+0x340>)
 80068d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068da:	461a      	mov	r2, r3
 80068dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068de:	fbb3 f2f2 	udiv	r2, r3, r2
 80068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	441a      	add	r2, r3
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d909      	bls.n	800690e <UART_SetConfig+0x30e>
 80068fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006900:	d205      	bcs.n	800690e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006904:	b29a      	uxth	r2, r3
 8006906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60da      	str	r2, [r3, #12]
 800690c:	e002      	b.n	8006914 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	2201      	movs	r2, #1
 8006918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800691c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691e:	2201      	movs	r2, #1
 8006920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	2200      	movs	r2, #0
 8006928:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692c:	2200      	movs	r2, #0
 800692e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006930:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006934:	4618      	mov	r0, r3
 8006936:	3750      	adds	r7, #80	@ 0x50
 8006938:	46bd      	mov	sp, r7
 800693a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800693e:	bf00      	nop
 8006940:	0800da7c 	.word	0x0800da7c

08006944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01a      	beq.n	8006a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a42:	d10a      	bne.n	8006a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b098      	sub	sp, #96	@ 0x60
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a98:	f7fa fdb0 	bl	80015fc <HAL_GetTick>
 8006a9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d12f      	bne.n	8006b0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f88e 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d022      	beq.n	8006b0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e063      	b.n	8006bd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d149      	bne.n	8006bae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b22:	2200      	movs	r2, #0
 8006b24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f857 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d03c      	beq.n	8006bae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	623b      	str	r3, [r7, #32]
   return(result);
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e6      	bne.n	8006b34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b86:	61fa      	str	r2, [r7, #28]
 8006b88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	69b9      	ldr	r1, [r7, #24]
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	617b      	str	r3, [r7, #20]
   return(result);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e012      	b.n	8006bd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3758      	adds	r7, #88	@ 0x58
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bec:	e04f      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d04b      	beq.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fa fd01 	bl	80015fc <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e04e      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d037      	beq.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b80      	cmp	r3, #128	@ 0x80
 8006c22:	d034      	beq.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d031      	beq.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d110      	bne.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f838 	bl	8006cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e029      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c68:	d111      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f81e 	bl	8006cb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e00f      	b.n	8006cae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4013      	ands	r3, r2
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d0a0      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b095      	sub	sp, #84	@ 0x54
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3308      	adds	r3, #8
 8006d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e3      	bne.n	8006cf0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d118      	bne.n	8006d62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f023 0310 	bic.w	r3, r3, #16
 8006d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6979      	ldr	r1, [r7, #20]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e6      	bne.n	8006d30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d76:	bf00      	nop
 8006d78:	3754      	adds	r7, #84	@ 0x54
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e027      	b.n	8006de8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2224      	movs	r2, #36	@ 0x24
 8006da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006dc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e02d      	b.n	8006e68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2224      	movs	r2, #36	@ 0x24
 8006e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f84f 	bl	8006eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e02d      	b.n	8006ee4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	@ 0x24
 8006e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f811 	bl	8006eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d108      	bne.n	8006f0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f0c:	e031      	b.n	8006f72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f0e:	2308      	movs	r3, #8
 8006f10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f12:	2308      	movs	r3, #8
 8006f14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	0e5b      	lsrs	r3, r3, #25
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	0f5b      	lsrs	r3, r3, #29
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	7b3a      	ldrb	r2, [r7, #12]
 8006f3a:	4911      	ldr	r1, [pc, #68]	@ (8006f80 <UARTEx_SetNbDataToProcess+0x94>)
 8006f3c:	5c8a      	ldrb	r2, [r1, r2]
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f42:	7b3a      	ldrb	r2, [r7, #12]
 8006f44:	490f      	ldr	r1, [pc, #60]	@ (8006f84 <UARTEx_SetNbDataToProcess+0x98>)
 8006f46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	7b7a      	ldrb	r2, [r7, #13]
 8006f58:	4909      	ldr	r1, [pc, #36]	@ (8006f80 <UARTEx_SetNbDataToProcess+0x94>)
 8006f5a:	5c8a      	ldrb	r2, [r1, r2]
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f60:	7b7a      	ldrb	r2, [r7, #13]
 8006f62:	4908      	ldr	r1, [pc, #32]	@ (8006f84 <UARTEx_SetNbDataToProcess+0x98>)
 8006f64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f66:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	0800da94 	.word	0x0800da94
 8006f84:	0800da9c 	.word	0x0800da9c

08006f88 <dwtReset>:
  int us;
};

void dwtIpInit(void);

__STATIC_INLINE void dwtReset(void) {
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006f8c:	4b03      	ldr	r3, [pc, #12]	@ (8006f9c <dwtReset+0x14>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	605a      	str	r2, [r3, #4]
}
 8006f92:	bf00      	nop
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	e0001000 	.word	0xe0001000

08006fa0 <dwtGetCycles>:

__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	@ (8006fb4 <dwtGetCycles+0x14>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	e0001000 	.word	0xe0001000

08006fb8 <cyclesCounterInit>:
};

extern struct cyclesCount cyclesCount;

__STATIC_INLINE void cyclesCounterInit(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
  struct dwtTime t;
  dwtCyclesToTime(UINT32_MAX, &t);
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	f04f 0100 	mov.w	r1, #0
 8006fca:	f001 fefc 	bl	8008dc6 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fd4:	fb03 f202 	mul.w	r2, r3, r2
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4413      	add	r3, r2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b04      	ldr	r3, [pc, #16]	@ (8006ff0 <cyclesCounterInit+0x38>)
 8006fe0:	601a      	str	r2, [r3, #0]
  dwtIpInit();
 8006fe2:	f001 fecd 	bl	8008d80 <dwtIpInit>
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000894 	.word	0x20000894

08006ff4 <cyclesCounterStart>:

__STATIC_INLINE void cyclesCounterStart(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  cyclesCount.tick_start = HAL_GetTick();
 8006ff8:	f7fa fb00 	bl	80015fc <HAL_GetTick>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4a05      	ldr	r2, [pc, #20]	@ (8007014 <cyclesCounterStart+0x20>)
 8007000:	6093      	str	r3, [r2, #8]
  dwtReset();
 8007002:	f7ff ffc1 	bl	8006f88 <dwtReset>
  cyclesCount.dwt_start = dwtGetCycles();
 8007006:	f7ff ffcb 	bl	8006fa0 <dwtGetCycles>
 800700a:	4603      	mov	r3, r0
 800700c:	4a01      	ldr	r2, [pc, #4]	@ (8007014 <cyclesCounterStart+0x20>)
 800700e:	6053      	str	r3, [r2, #4]
}
 8007010:	bf00      	nop
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000894 	.word	0x20000894

08007018 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8007018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800701c:	b092      	sub	sp, #72	@ 0x48
 800701e:	af00      	add	r7, sp, #0
#if _APP_FIX_CLK_OVERFLOW == 1
    struct dwtTime t;
uint64_t dwt_e;
uint64_t tick_e;
dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8007020:	f7ff ffbe 	bl	8006fa0 <dwtGetCycles>
 8007024:	4602      	mov	r2, r0
 8007026:	4b34      	ldr	r3, [pc, #208]	@ (80070f8 <cyclesCounterEnd+0xe0>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2200      	movs	r2, #0
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	61fa      	str	r2, [r7, #28]
 8007032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007036:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
tick_e = HAL_GetTick() - cyclesCount.tick_start;
 800703a:	f7fa fadf 	bl	80015fc <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	4b2d      	ldr	r3, [pc, #180]	@ (80070f8 <cyclesCounterEnd+0xe0>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2200      	movs	r2, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	617a      	str	r2, [r7, #20]
 800704c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007050:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
dwtCyclesToTime(dwt_e, &t);
 8007054:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007058:	461a      	mov	r2, r3
 800705a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800705e:	f001 feb2 	bl	8008dc6 <dwtCyclesToTime>
if (tick_e > cyclesCount.dwt_max) {
 8007062:	4b25      	ldr	r3, [pc, #148]	@ (80070f8 <cyclesCounterEnd+0xe0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2200      	movs	r2, #0
 8007068:	461c      	mov	r4, r3
 800706a:	4615      	mov	r5, r2
 800706c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007070:	4294      	cmp	r4, r2
 8007072:	eb75 0303 	sbcs.w	r3, r5, r3
 8007076:	d236      	bcs.n	80070e6 <cyclesCounterEnd+0xce>
  /* overflow detected */
  dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8007078:	4b1f      	ldr	r3, [pc, #124]	@ (80070f8 <cyclesCounterEnd+0xe0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2200      	movs	r2, #0
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	627a      	str	r2, [r7, #36]	@ 0x24
 8007082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007086:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800708a:	f7f9 fbc7 	bl	800081c <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4610      	mov	r0, r2
 8007094:	4619      	mov	r1, r3
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	f04f 0400 	mov.w	r4, #0
 800709e:	f04f 0500 	mov.w	r5, #0
 80070a2:	07dd      	lsls	r5, r3, #31
 80070a4:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 80070a8:	07d4      	lsls	r4, r2, #31
 80070aa:	4622      	mov	r2, r4
 80070ac:	462b      	mov	r3, r5
 80070ae:	ebb2 0800 	subs.w	r8, r2, r0
 80070b2:	eb63 0901 	sbc.w	r9, r3, r1
 80070b6:	eb18 0308 	adds.w	r3, r8, r8
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	eb49 0309 	adc.w	r3, r9, r9
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80070c6:	eb18 0a00 	adds.w	sl, r8, r0
 80070ca:	eb49 0b01 	adc.w	fp, r9, r1
 80070ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070d2:	eb12 010a 	adds.w	r1, r2, sl
 80070d6:	6039      	str	r1, [r7, #0]
 80070d8:	eb43 030b 	adc.w	r3, r3, fp
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80070e2:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
}
return dwt_e;
 80070e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
#else
return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#endif
}
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	3748      	adds	r7, #72	@ 0x48
 80070f0:	46bd      	mov	sp, r7
 80070f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070f6:	bf00      	nop
 80070f8:	20000894 	.word	0x20000894

080070fc <disableInts>:
 * System services
 * -----------------------------------------------------------------------------
 */

__STATIC_INLINE uint32_t disableInts(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007102:	f3ef 8310 	mrs	r3, PRIMASK
 8007106:	603b      	str	r3, [r7, #0]
  return(result);
 8007108:	683b      	ldr	r3, [r7, #0]
  uint32_t state;

  state = __get_PRIMASK();
 800710a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800710c:	b672      	cpsid	i
}
 800710e:	bf00      	nop
  __disable_irq();

  return state;
 8007110:	687b      	ldr	r3, [r7, #4]
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <aiBootstrap>:
AI_ALIGNED(4)
static ai_u8 activations[AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE];
#endif

static int aiBootstrap(struct ai_network_exec_ctx *ctx, const char *nn_name)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b092      	sub	sp, #72	@ 0x48
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  ai_error err;
  ai_u32 ext_addr;
  ai_u32 sz;

  /* Creating the instance of the  network ------------------------- */
  printf("Creating the network \"%s\"..\r\n", nn_name);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	484c      	ldr	r0, [pc, #304]	@ (8007260 <aiBootstrap+0x140>)
 800712e:	f004 feb7 	bl	800bea0 <iprintf>

  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	4619      	mov	r1, r3
 8007138:	6838      	ldr	r0, [r7, #0]
 800713a:	f002 facd 	bl	80096d8 <ai_mnetwork_create>
 800713e:	4603      	mov	r3, r0
 8007140:	647b      	str	r3, [r7, #68]	@ 0x44
  if (err.type) {
 8007142:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <aiBootstrap+0x38>
    aiLogErr(err, "ai_mnetwork_create");
 800714a:	4946      	ldr	r1, [pc, #280]	@ (8007264 <aiBootstrap+0x144>)
 800714c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800714e:	f001 fa35 	bl	80085bc <aiLogErr>
    return -1;
 8007152:	f04f 33ff 	mov.w	r3, #4294967295
 8007156:	e07e      	b.n	8007256 <aiBootstrap+0x136>
  }

  /* Initialize the instance --------------------------------------- */
  printf("Initializing the network\r\n");
 8007158:	4843      	ldr	r0, [pc, #268]	@ (8007268 <aiBootstrap+0x148>)
 800715a:	f004 ff11 	bl	800bf80 <puts>
   *   located in the external memory (network dependent feature). For the last case,
   *   the address (hard-coded @) is defined by the X-CUBE-AI plug-in and stored in the
   *   multiple network structure (see app_x-cube-ai.c file, ai_network_entry_t definition).
   *   0xFFFFFFFF indicates that the local buffer should be used.
   */
  ai_network_params params = {
 800715e:	f107 030c 	add.w	r3, r7, #12
 8007162:	2230      	movs	r2, #48	@ 0x30
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f004 ffea 	bl	800c140 <memset>
 800716c:	4b3f      	ldr	r3, [pc, #252]	@ (800726c <aiBootstrap+0x14c>)
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	4b3e      	ldr	r3, [pc, #248]	@ (800726c <aiBootstrap+0x14c>)
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
      AI_BUFFER_NULL(NULL),
      AI_BUFFER_NULL(NULL)
  };

  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800717c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8007180:	4618      	mov	r0, r3
 8007182:	f002 fc29 	bl	80099d8 <ai_mnetwork_get_ext_data_activations>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d119      	bne.n	80071c0 <aiBootstrap+0xa0>
    if (ext_addr == 0xFFFFFFFF) {
 800718c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d113      	bne.n	80071bc <aiBootstrap+0x9c>
#if AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE != 0
      params.activations.data = (ai_handle)activations;
 8007194:	4b36      	ldr	r3, [pc, #216]	@ (8007270 <aiBootstrap+0x150>)
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
      if (sz > AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE) {
 8007198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719a:	2b80      	cmp	r3, #128	@ 0x80
 800719c:	d910      	bls.n	80071c0 <aiBootstrap+0xa0>
        printf("E: APP error (aiBootstrap for %s) - size of the local activations buffer is not enough\r\n",
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	4834      	ldr	r0, [pc, #208]	@ (8007274 <aiBootstrap+0x154>)
 80071a2:	f004 fe7d 	bl	800bea0 <iprintf>
            nn_name);
        ai_mnetwork_destroy(ctx->handle);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f002 fb00 	bl	80097b0 <ai_mnetwork_destroy>
        ctx->handle = AI_HANDLE_NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
        return -5;
 80071b6:	f06f 0304 	mvn.w	r3, #4
 80071ba:	e04c      	b.n	8007256 <aiBootstrap+0x136>
      ctx->handle = AI_HANDLE_NULL;
      return -5;
#endif
    }
    else {
      params.activations.data = (ai_handle)ext_addr;
 80071bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
    }
  }

  if (!ai_mnetwork_init(ctx->handle, &params)) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f107 020c 	add.w	r2, r7, #12
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 fb4d 	bl	800986a <ai_mnetwork_init>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f083 0301 	eor.w	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <aiBootstrap+0xe8>
    err = ai_mnetwork_get_error(ctx->handle);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f002 fb22 	bl	800982a <ai_mnetwork_get_error>
 80071e6:	4603      	mov	r3, r0
 80071e8:	647b      	str	r3, [r7, #68]	@ 0x44
    aiLogErr(err, "ai_mnetwork_init");
 80071ea:	4923      	ldr	r1, [pc, #140]	@ (8007278 <aiBootstrap+0x158>)
 80071ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80071ee:	f001 f9e5 	bl	80085bc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f002 fada 	bl	80097b0 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
    return -4;
 8007202:	f06f 0303 	mvn.w	r3, #3
 8007206:	e026      	b.n	8007256 <aiBootstrap+0x136>
  }

  /* Display the network info -------------------------------------- */
  if (ai_mnetwork_get_info(ctx->handle,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f002 faee 	bl	80097f4 <ai_mnetwork_get_info>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d006      	beq.n	800722c <aiBootstrap+0x10c>
      &ctx->report)) {
    aiPrintNetworkInfo(&ctx->report);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3304      	adds	r3, #4
 8007222:	4618      	mov	r0, r3
 8007224:	f001 fbe0 	bl	80089e8 <aiPrintNetworkInfo>
    ai_mnetwork_destroy(ctx->handle);
    ctx->handle = AI_HANDLE_NULL;
    return -2;
  }

  return 0;
 8007228:	2300      	movs	r3, #0
 800722a:	e014      	b.n	8007256 <aiBootstrap+0x136>
    err = ai_mnetwork_get_error(ctx->handle);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f002 fafa 	bl	800982a <ai_mnetwork_get_error>
 8007236:	4603      	mov	r3, r0
 8007238:	647b      	str	r3, [r7, #68]	@ 0x44
    aiLogErr(err, "ai_mnetwork_get_info");
 800723a:	4910      	ldr	r1, [pc, #64]	@ (800727c <aiBootstrap+0x15c>)
 800723c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800723e:	f001 f9bd 	bl	80085bc <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f002 fab2 	bl	80097b0 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
    return -2;
 8007252:	f06f 0301 	mvn.w	r3, #1
}
 8007256:	4618      	mov	r0, r3
 8007258:	3748      	adds	r7, #72	@ 0x48
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	0800cb6c 	.word	0x0800cb6c
 8007264:	0800cb8c 	.word	0x0800cb8c
 8007268:	0800cba0 	.word	0x0800cba0
 800726c:	40000040 	.word	0x40000040
 8007270:	200007b0 	.word	0x200007b0
 8007274:	0800cbbc 	.word	0x0800cbbc
 8007278:	0800cc18 	.word	0x0800cc18
 800727c:	0800cc2c 	.word	0x0800cc2c

08007280 <aiInit>:

static int aiInit(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
  int res = -1;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	60fb      	str	r3, [r7, #12]
  const char *nn_name;
  int idx;

  aiPlatformVersion();
 800728c:	f001 f982 	bl	8008594 <aiPlatformVersion>

  /* Reset the contexts -------------------------------------------- */
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8007290:	2300      	movs	r3, #0
 8007292:	607b      	str	r3, [r7, #4]
 8007294:	e00b      	b.n	80072ae <aiInit+0x2e>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8007296:	491e      	ldr	r1, [pc, #120]	@ (8007310 <aiInit+0x90>)
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	440b      	add	r3, r1
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3301      	adds	r3, #1
 80072ac:	607b      	str	r3, [r7, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	ddf0      	ble.n	8007296 <aiInit+0x16>
  }

  /* Discover and initialize the network(s) ------------------------ */
  printf("Discovering the network(s)...\r\n");
 80072b4:	4817      	ldr	r0, [pc, #92]	@ (8007314 <aiInit+0x94>)
 80072b6:	f004 fe63 	bl	800bf80 <puts>

  idx = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	607b      	str	r3, [r7, #4]
  do {
    nn_name = ai_mnetwork_find(NULL, idx);
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	2000      	movs	r0, #0
 80072c2:	f002 f9d9 	bl	8009678 <ai_mnetwork_find>
 80072c6:	60b8      	str	r0, [r7, #8]
    if (nn_name) {
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d014      	beq.n	80072f8 <aiInit+0x78>
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4811      	ldr	r0, [pc, #68]	@ (8007318 <aiInit+0x98>)
 80072d2:	f004 fde5 	bl	800bea0 <iprintf>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	1a9b      	subs	r3, r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007310 <aiInit+0x90>)
 80072e2:	4413      	add	r3, r2
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ff1a 	bl	8007120 <aiBootstrap>
 80072ec:	60f8      	str	r0, [r7, #12]
      if (res)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <aiInit+0x78>
        nn_name = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
    }
    idx++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3301      	adds	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
  } while (nn_name);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1dc      	bne.n	80072be <aiInit+0x3e>

  return res;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000738 	.word	0x20000738
 8007314:	0800cc44 	.word	0x0800cc44
 8007318:	0800cc64 	.word	0x0800cc64

0800731c <aiDeInit>:

static void aiDeInit(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
  ai_error err;
  int idx;

  /* Releasing the instance(s) ------------------------------------- */
  printf("Releasing the instance(s)...\r\n");
 8007322:	4821      	ldr	r0, [pc, #132]	@ (80073a8 <aiDeInit+0x8c>)
 8007324:	f004 fe2c 	bl	800bf80 <puts>

  for (idx=0; idx<AI_MNETWORK_NUMBER; idx++) {
 8007328:	2300      	movs	r3, #0
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	e034      	b.n	8007398 <aiDeInit+0x7c>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 800732e:	491f      	ldr	r1, [pc, #124]	@ (80073ac <aiDeInit+0x90>)
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	440b      	add	r3, r1
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d027      	beq.n	8007392 <aiDeInit+0x76>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 8007342:	491a      	ldr	r1, [pc, #104]	@ (80073ac <aiDeInit+0x90>)
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	440b      	add	r3, r1
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f002 fa2c 	bl	80097b0 <ai_mnetwork_destroy>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d010      	beq.n	8007380 <aiDeInit+0x64>
          != AI_HANDLE_NULL) {
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 800735e:	4913      	ldr	r1, [pc, #76]	@ (80073ac <aiDeInit+0x90>)
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	1a9b      	subs	r3, r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	440b      	add	r3, r1
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f002 fa5b 	bl	800982a <ai_mnetwork_get_error>
 8007374:	4603      	mov	r3, r0
 8007376:	603b      	str	r3, [r7, #0]
        aiLogErr(err, "ai_mnetwork_destroy");
 8007378:	490d      	ldr	r1, [pc, #52]	@ (80073b0 <aiDeInit+0x94>)
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	f001 f91e 	bl	80085bc <aiLogErr>
      }
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8007380:	490a      	ldr	r1, [pc, #40]	@ (80073ac <aiDeInit+0x90>)
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	440b      	add	r3, r1
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
  for (idx=0; idx<AI_MNETWORK_NUMBER; idx++) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3301      	adds	r3, #1
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	ddc7      	ble.n	800732e <aiDeInit+0x12>
    }
  }
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	0800cc7c 	.word	0x0800cc7c
 80073ac:	20000738 	.word	0x20000738
 80073b0:	0800cc9c 	.word	0x0800cc9c

080073b4 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 80073b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073b8:	b094      	sub	sp, #80	@ 0x50
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80073be:	6339      	str	r1, [r7, #48]	@ 0x30
 80073c0:	62fa      	str	r2, [r7, #44]	@ 0x2c

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = dwtGetCycles(); /* time stamp entry */
 80073c2:	f7ff fded 	bl	8006fa0 <dwtGetCycles>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2200      	movs	r2, #0
 80073ca:	623b      	str	r3, [r7, #32]
 80073cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  u_obs = (struct u_observer_ctx *)cookie;
 80073d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u_obs->n_cb += 1;
 80073da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	1c54      	adds	r4, r2, #1
 80073e2:	f143 0500 	adc.w	r5, r3, #0
 80073e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e8:	e9c3 4500 	strd	r4, r5, [r3]

  if (flags & AI_OBSERVER_POST_EVT) {
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d041      	beq.n	800747a <user_observer_cb+0xc6>
    const uint64_t end_t = ts - u_obs->start_t;
 80073f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80073fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007400:	ebb0 0a02 	subs.w	sl, r0, r2
 8007404:	eb61 0b03 	sbc.w	fp, r1, r3
 8007408:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
    u_obs->k_dur_t += end_t;
 800740c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800740e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007416:	1884      	adds	r4, r0, r2
 8007418:	61bc      	str	r4, [r7, #24]
 800741a:	eb41 0303 	adc.w	r3, r1, r3
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007422:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007426:	e9c3 1206 	strd	r1, r2, [r3, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 800742a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800742c:	6a1a      	ldr	r2, [r3, #32]
 800742e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	4413      	add	r3, r2
 8007436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800743a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	18d4      	adds	r4, r2, r3
 8007446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800744a:	1885      	adds	r5, r0, r2
 800744c:	613d      	str	r5, [r7, #16]
 800744e:	eb41 0303 	adc.w	r3, r1, r3
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007458:	e9c4 2300 	strd	r2, r3, [r4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 800745c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	4413      	add	r3, r2
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800746c:	6a19      	ldr	r1, [r3, #32]
 800746e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	440b      	add	r3, r1
 8007476:	3201      	adds	r2, #1
 8007478:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = dwtGetCycles(); /* time stamp exit */
 800747a:	f7ff fd91 	bl	8006fa0 <dwtGetCycles>
 800747e:	4603      	mov	r3, r0
 8007480:	2200      	movs	r2, #0
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	60fa      	str	r2, [r7, #12]
 8007486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007488:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800748c:	e9c3 1202 	strd	r1, r2, [r3, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8007490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007492:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007496:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800749a:	ebb0 0802 	subs.w	r8, r0, r2
 800749e:	eb61 0903 	sbc.w	r9, r1, r3
 80074a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80074a8:	eb18 0102 	adds.w	r1, r8, r2
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	eb49 0303 	adc.w	r3, r9, r3
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074ba:	e9c3 1204 	strd	r1, r2, [r3, #16]
  return 0;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3750      	adds	r7, #80	@ 0x50
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080074cc <aiObserverInit>:


void aiObserverInit(struct ai_network_exec_ctx *net_ctx)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b092      	sub	sp, #72	@ 0x48
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  ai_handle  net_hdl;
  ai_network_params net_params;
  ai_bool res;
  int sz;

  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d04d      	beq.n	8007576 <aiObserverInit+0xaa>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d049      	beq.n	8007576 <aiObserverInit+0xaa>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d045      	beq.n	8007576 <aiObserverInit+0xaa>
    return;


  /* retrieve real handle */
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f107 020c 	add.w	r2, r7, #12
 80074f2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80074f6:	4618      	mov	r0, r3
 80074f8:	f002 fa42 	bl	8009980 <ai_mnetwork_get_private_handle>

  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 80074fc:	2228      	movs	r2, #40	@ 0x28
 80074fe:	2100      	movs	r1, #0
 8007500:	481f      	ldr	r0, [pc, #124]	@ (8007580 <aiObserverInit+0xb4>)
 8007502:	f004 fe1d 	bl	800c140 <memset>

  /* allocate resources to store the state of the nodes */
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	647b      	str	r3, [r7, #68]	@ 0x44
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 800750e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007510:	4618      	mov	r0, r3
 8007512:	f004 fa19 	bl	800b948 <malloc>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	4b19      	ldr	r3, [pc, #100]	@ (8007580 <aiObserverInit+0xb4>)
 800751c:	621a      	str	r2, [r3, #32]
  if (!u_observer_ctx.nodes) {
 800751e:	4b18      	ldr	r3, [pc, #96]	@ (8007580 <aiObserverInit+0xb4>)
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <aiObserverInit+0x64>
    printf("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8007526:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007528:	4816      	ldr	r0, [pc, #88]	@ (8007584 <aiObserverInit+0xb8>)
 800752a:	f004 fcb9 	bl	800bea0 <iprintf>
    return;
 800752e:	e023      	b.n	8007578 <aiObserverInit+0xac>
  }

  memset(u_observer_ctx.nodes, 0, sz);
 8007530:	4b13      	ldr	r3, [pc, #76]	@ (8007580 <aiObserverInit+0xb4>)
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f004 fe01 	bl	800c140 <memset>

  /* register the callback */
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 800753e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007540:	2306      	movs	r3, #6
 8007542:	4a0f      	ldr	r2, [pc, #60]	@ (8007580 <aiObserverInit+0xb4>)
 8007544:	4910      	ldr	r1, [pc, #64]	@ (8007588 <aiObserverInit+0xbc>)
 8007546:	f003 faef 	bl	800ab28 <ai_platform_observer_register>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
      (ai_handle)&u_observer_ctx, AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT);
  if (!res) {
 8007550:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007554:	f083 0301 	eor.w	r3, r3, #1
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <aiObserverInit+0xac>
    printf("W: unable to register the user CB\r\n");
 800755e:	480b      	ldr	r0, [pc, #44]	@ (800758c <aiObserverInit+0xc0>)
 8007560:	f004 fd0e 	bl	800bf80 <puts>
    free(u_observer_ctx.nodes);
 8007564:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <aiObserverInit+0xb4>)
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	4618      	mov	r0, r3
 800756a:	f004 f9f5 	bl	800b958 <free>
    u_observer_ctx.nodes = NULL;
 800756e:	4b04      	ldr	r3, [pc, #16]	@ (8007580 <aiObserverInit+0xb4>)
 8007570:	2200      	movs	r2, #0
 8007572:	621a      	str	r2, [r3, #32]
    return;
 8007574:	e000      	b.n	8007578 <aiObserverInit+0xac>
    return;
 8007576:	bf00      	nop
  }
}
 8007578:	3748      	adds	r7, #72	@ 0x48
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000830 	.word	0x20000830
 8007584:	0800ccb0 	.word	0x0800ccb0
 8007588:	080073b5 	.word	0x080073b5
 800758c:	0800cce4 	.word	0x0800cce4

08007590 <aiObserverDone>:

extern const char* ai_layer_type_name(const int type);

void aiObserverDone(struct ai_network_exec_ctx *net_ctx)
{
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	ed2d 8b02 	vpush	{d8}
 8007598:	b0a7      	sub	sp, #156	@ 0x9c
 800759a:	af06      	add	r7, sp, #24
 800759c:	6178      	str	r0, [r7, #20]
  ai_network_params net_params;
  struct dwtTime t;
  uint64_t cumul;
  ai_observer_node node_info;

  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8128 	beq.w	80077f6 <aiObserverDone+0x266>
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8123 	beq.w	80077f6 <aiObserverDone+0x266>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 811e 	beq.w	80077f6 <aiObserverDone+0x266>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 80075ba:	4b92      	ldr	r3, [pc, #584]	@ (8007804 <aiObserverDone+0x274>)
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8119 	beq.w	80077f6 <aiObserverDone+0x266>
    return;

  /* retrieve real handle */
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80075cc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80075d0:	4618      	mov	r0, r3
 80075d2:	f002 f9d5 	bl	8009980 <ai_mnetwork_get_private_handle>

  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 80075d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075d8:	4a8a      	ldr	r2, [pc, #552]	@ (8007804 <aiObserverDone+0x274>)
 80075da:	498b      	ldr	r1, [pc, #556]	@ (8007808 <aiObserverDone+0x278>)
 80075dc:	4618      	mov	r0, r3
 80075de:	f003 fb11 	bl	800ac04 <ai_platform_observer_unregister>
      (ai_handle)&u_observer_ctx);

  printf("\r\n Inference time by c-node\r\n");
 80075e2:	488a      	ldr	r0, [pc, #552]	@ (800780c <aiObserverDone+0x27c>)
 80075e4:	f004 fccc 	bl	800bf80 <puts>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 80075e8:	4b86      	ldr	r3, [pc, #536]	@ (8007804 <aiObserverDone+0x274>)
 80075ea:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80075ee:	4b85      	ldr	r3, [pc, #532]	@ (8007804 <aiObserverDone+0x274>)
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2200      	movs	r2, #0
 80075f6:	461c      	mov	r4, r3
 80075f8:	4615      	mov	r5, r2
 80075fa:	4622      	mov	r2, r4
 80075fc:	462b      	mov	r3, r5
 80075fe:	f7f9 f90d 	bl	800081c <__aeabi_uldivmod>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4610      	mov	r0, r2
 8007608:	4619      	mov	r1, r3
 800760a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800760e:	461a      	mov	r2, r3
 8007610:	f001 fbd9 	bl	8008dc6 <dwtCyclesToTime>
  printf("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\n", t.s * 1000 + t.ms, t.us);
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800761a:	fb03 f202 	mul.w	r2, r3, r2
 800761e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007620:	4413      	add	r3, r2
 8007622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007624:	4619      	mov	r1, r3
 8007626:	487a      	ldr	r0, [pc, #488]	@ (8007810 <aiObserverDone+0x280>)
 8007628:	f004 fc3a 	bl	800bea0 <iprintf>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 800762c:	4b75      	ldr	r3, [pc, #468]	@ (8007804 <aiObserverDone+0x274>)
 800762e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007632:	4b74      	ldr	r3, [pc, #464]	@ (8007804 <aiObserverDone+0x274>)
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	469a      	mov	sl, r3
 800763c:	4693      	mov	fp, r2
 800763e:	4652      	mov	r2, sl
 8007640:	465b      	mov	r3, fp
 8007642:	f7f9 f8eb 	bl	800081c <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007652:	461a      	mov	r2, r3
 8007654:	f001 fbb7 	bl	8008dc6 <dwtCyclesToTime>
  printf("  user    : %d.%03dms (time passed in the user cb)\n", t.s * 1000 + t.ms, t.us);
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800765e:	fb03 f202 	mul.w	r2, r3, r2
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	4413      	add	r3, r2
 8007666:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007668:	4619      	mov	r1, r3
 800766a:	486a      	ldr	r0, [pc, #424]	@ (8007814 <aiObserverDone+0x284>)
 800766c:	f004 fc18 	bl	800bea0 <iprintf>
#if APP_DEBUG == 1
  printf("  cb #    : %d\n", (int)u_observer_ctx.n_cb);
#endif

  printf("\r\n %-6s%-20s%-7s %s\r\n", "c_id", "type", "id", "time (ms)");
 8007670:	4b69      	ldr	r3, [pc, #420]	@ (8007818 <aiObserverDone+0x288>)
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4b69      	ldr	r3, [pc, #420]	@ (800781c <aiObserverDone+0x28c>)
 8007676:	4a6a      	ldr	r2, [pc, #424]	@ (8007820 <aiObserverDone+0x290>)
 8007678:	496a      	ldr	r1, [pc, #424]	@ (8007824 <aiObserverDone+0x294>)
 800767a:	486b      	ldr	r0, [pc, #428]	@ (8007828 <aiObserverDone+0x298>)
 800767c:	f004 fc10 	bl	800bea0 <iprintf>
  printf(" -------------------------------------------------\r\n");
 8007680:	486a      	ldr	r0, [pc, #424]	@ (800782c <aiObserverDone+0x29c>)
 8007682:	f004 fc7d 	bl	800bf80 <puts>

  cumul = 0;
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  node_info.c_idx = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	83bb      	strh	r3, [r7, #28]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8007696:	e073      	b.n	8007780 <aiObserverDone+0x1f0>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8007698:	4b5a      	ldr	r3, [pc, #360]	@ (8007804 <aiObserverDone+0x274>)
 800769a:	6a1a      	ldr	r2, [r3, #32]
 800769c:	8bbb      	ldrh	r3, [r7, #28]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	4413      	add	r3, r2
 80076a2:	673b      	str	r3, [r7, #112]	@ 0x70
    const char *fmt;
    cumul +=  sn->dur;
 80076a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80076ae:	eb10 0802 	adds.w	r8, r0, r2
 80076b2:	eb41 0903 	adc.w	r9, r1, r3
 80076b6:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 80076ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	60bb      	str	r3, [r7, #8]
 80076c8:	60fa      	str	r2, [r7, #12]
 80076ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ce:	f7f9 f8a5 	bl	800081c <__aeabi_uldivmod>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4610      	mov	r0, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80076de:	461a      	mov	r2, r3
 80076e0:	f001 fb71 	bl	8008dc6 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 80076e4:	8bfb      	ldrh	r3, [r7, #30]
 80076e6:	b21b      	sxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da02      	bge.n	80076f2 <aiObserverDone+0x162>
      fmt = " %-6dTD-%-17s%-5d %4d.%03d %6.02f %c\r\n";
 80076ec:	4b50      	ldr	r3, [pc, #320]	@ (8007830 <aiObserverDone+0x2a0>)
 80076ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80076f0:	e001      	b.n	80076f6 <aiObserverDone+0x166>
    else
      fmt = " %-6d%-20s%-5d %4d.%03d %6.02f %c\r\n";
 80076f2:	4b50      	ldr	r3, [pc, #320]	@ (8007834 <aiObserverDone+0x2a4>)
 80076f4:	677b      	str	r3, [r7, #116]	@ 0x74

    printf(fmt, node_info.c_idx,
 80076f6:	8bbb      	ldrh	r3, [r7, #28]
 80076f8:	469a      	mov	sl, r3
        ai_layer_type_name(node_info.type  & (ai_u16)0x7FFF),
 80076fa:	8bfb      	ldrh	r3, [r7, #30]
    printf(fmt, node_info.c_idx,
 80076fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007700:	4618      	mov	r0, r3
 8007702:	f003 ffb5 	bl	800b670 <ai_layer_type_name>
 8007706:	4606      	mov	r6, r0
        (int)node_info.id,
 8007708:	8c3b      	ldrh	r3, [r7, #32]
    printf(fmt, node_info.c_idx,
 800770a:	469b      	mov	fp, r3
        t.s * 1000 + t.ms, t.us,
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007712:	fb03 f202 	mul.w	r2, r3, r2
 8007716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    printf(fmt, node_info.c_idx,
 8007718:	18d4      	adds	r4, r2, r3
 800771a:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
        ((float)u_observer_ctx.nodes[node_info.c_idx].dur * 100.0f) / (float)u_observer_ctx.k_dur_t,
 800771c:	4b39      	ldr	r3, [pc, #228]	@ (8007804 <aiObserverDone+0x274>)
 800771e:	6a1a      	ldr	r2, [r3, #32]
 8007720:	8bbb      	ldrh	r3, [r7, #28]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	4413      	add	r3, r2
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	4610      	mov	r0, r2
 800772c:	4619      	mov	r1, r3
 800772e:	f7f9 f82f 	bl	8000790 <__aeabi_ul2f>
 8007732:	ee07 0a10 	vmov	s14, r0
 8007736:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8007838 <aiObserverDone+0x2a8>
 800773a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800773e:	4b31      	ldr	r3, [pc, #196]	@ (8007804 <aiObserverDone+0x274>)
 8007740:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	f7f9 f822 	bl	8000790 <__aeabi_ul2f>
 800774c:	ee07 0a10 	vmov	s14, r0
 8007750:	eec8 7a07 	vdiv.f32	s15, s16, s14
    printf(fmt, node_info.c_idx,
 8007754:	ee17 0a90 	vmov	r0, s15
 8007758:	f7f8 fefa 	bl	8000550 <__aeabi_f2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	2125      	movs	r1, #37	@ 0x25
 8007762:	9104      	str	r1, [sp, #16]
 8007764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007768:	9501      	str	r5, [sp, #4]
 800776a:	9400      	str	r4, [sp, #0]
 800776c:	465b      	mov	r3, fp
 800776e:	4632      	mov	r2, r6
 8007770:	4651      	mov	r1, sl
 8007772:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007774:	f004 fb94 	bl	800bea0 <iprintf>
        '%');
    node_info.c_idx++;
 8007778:	8bbb      	ldrh	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	b29b      	uxth	r3, r3
 800777e:	83bb      	strh	r3, [r7, #28]
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8007780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007782:	f107 021c 	add.w	r2, r7, #28
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f003 f959 	bl	800aa40 <ai_platform_observer_node_info>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d181      	bne.n	8007698 <aiObserverDone+0x108>
  }

  printf(" -------------------------------------------------\r\n");
 8007794:	4825      	ldr	r0, [pc, #148]	@ (800782c <aiObserverDone+0x29c>)
 8007796:	f004 fbf3 	bl	800bf80 <puts>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 800779a:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <aiObserverDone+0x274>)
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80077ae:	f7f9 f835 	bl	800081c <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  dwtCyclesToTime(cumul, &t);
 80077ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80077be:	461a      	mov	r2, r3
 80077c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80077c4:	f001 faff 	bl	8008dc6 <dwtCyclesToTime>
  printf(" %31s %4d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80077ce:	fb03 f202 	mul.w	r2, r3, r2
 80077d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d4:	441a      	add	r2, r3
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	4918      	ldr	r1, [pc, #96]	@ (800783c <aiObserverDone+0x2ac>)
 80077da:	4819      	ldr	r0, [pc, #100]	@ (8007840 <aiObserverDone+0x2b0>)
 80077dc:	f004 fb60 	bl	800bea0 <iprintf>

  free(u_observer_ctx.nodes);
 80077e0:	4b08      	ldr	r3, [pc, #32]	@ (8007804 <aiObserverDone+0x274>)
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f004 f8b7 	bl	800b958 <free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 80077ea:	2228      	movs	r2, #40	@ 0x28
 80077ec:	2100      	movs	r1, #0
 80077ee:	4805      	ldr	r0, [pc, #20]	@ (8007804 <aiObserverDone+0x274>)
 80077f0:	f004 fca6 	bl	800c140 <memset>

  return;
 80077f4:	e000      	b.n	80077f8 <aiObserverDone+0x268>
    return;
 80077f6:	bf00      	nop
}
 80077f8:	3784      	adds	r7, #132	@ 0x84
 80077fa:	46bd      	mov	sp, r7
 80077fc:	ecbd 8b02 	vpop	{d8}
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	20000830 	.word	0x20000830
 8007808:	080073b5 	.word	0x080073b5
 800780c:	0800cd08 	.word	0x0800cd08
 8007810:	0800cd28 	.word	0x0800cd28
 8007814:	0800cd64 	.word	0x0800cd64
 8007818:	0800cdc4 	.word	0x0800cdc4
 800781c:	0800cd98 	.word	0x0800cd98
 8007820:	0800cd9c 	.word	0x0800cd9c
 8007824:	0800cda4 	.word	0x0800cda4
 8007828:	0800cdac 	.word	0x0800cdac
 800782c:	0800cdd0 	.word	0x0800cdd0
 8007830:	0800ce04 	.word	0x0800ce04
 8007834:	0800ce2c 	.word	0x0800ce2c
 8007838:	42c80000 	.word	0x42c80000
 800783c:	0800ce50 	.word	0x0800ce50
 8007840:	0800ce54 	.word	0x0800ce54

08007844 <aiTestPerformance>:
 * Specific APP/test functions
 * -----------------------------------------------------------------------------
 */

static int aiTestPerformance(int idx)
{
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	b0d3      	sub	sp, #332	@ 0x14c
 800784a:	af04      	add	r7, sp, #16
 800784c:	67f8      	str	r0, [r7, #124]	@ 0x7c
  uint64_t tmin;
  uint64_t tmax;
  uint32_t cmacc;

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
  int observer_heap_sz = 0UL;
 800784e:	2300      	movs	r3, #0
 8007850:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
#endif

  ai_buffer ai_input[AI_MNETWORK_IN_NUM];
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8007854:	49cb      	ldr	r1, [pc, #812]	@ (8007b84 <aiTestPerformance+0x340>)
 8007856:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007858:	4613      	mov	r3, r2
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	440b      	add	r3, r1
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <aiTestPerformance+0x32>
    printf("E: network handle is NULL\r\n");
 8007868:	48c7      	ldr	r0, [pc, #796]	@ (8007b88 <aiTestPerformance+0x344>)
 800786a:	f004 fb89 	bl	800bf80 <puts>
    return -1;
 800786e:	f04f 33ff 	mov.w	r3, #4294967295
 8007872:	f000 bd32 	b.w	80082da <aiTestPerformance+0xa96>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8007876:	f3ef 8314 	mrs	r3, CONTROL
 800787a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return(result);
 800787e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8007882:	f3ef 8308 	mrs	r3, MSP
 8007886:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  return(result);
 800788a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
  }

  MON_STACK_INIT();
 800788e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007892:	4619      	mov	r1, r3
 8007894:	f001 f9fa 	bl	8008c8c <stackMonInit>

  if (profiling_mode)
 8007898:	4bbc      	ldr	r3, [pc, #752]	@ (8007b8c <aiTestPerformance+0x348>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d009      	beq.n	80078b4 <aiTestPerformance+0x70>
    niter = _APP_ITER_ * profiling_factor;
 80078a0:	4bbb      	ldr	r3, [pc, #748]	@ (8007b90 <aiTestPerformance+0x34c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	441a      	add	r2, r3
 80078aa:	0093      	lsls	r3, r2, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80078b2:	e002      	b.n	80078ba <aiTestPerformance+0x76>
  else
    niter = _APP_ITER_;
 80078b4:	2319      	movs	r3, #25
 80078b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

  printf("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 80078ba:	49b2      	ldr	r1, [pc, #712]	@ (8007b84 <aiTestPerformance+0x340>)
 80078bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80078be:	4613      	mov	r3, r2
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	440b      	add	r3, r1
 80078c8:	3304      	adds	r3, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80078d0:	4619      	mov	r1, r3
 80078d2:	48b0      	ldr	r0, [pc, #704]	@ (8007b94 <aiTestPerformance+0x350>)
 80078d4:	f004 fae4 	bl	800bea0 <iprintf>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80078d8:	f3ef 8308 	mrs	r3, MSP
 80078dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  return(result);
 80078e0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8

#if _APP_FIX_CLK_OVERFLOW == 0
  irqs = disableInts();
#endif

  MON_STACK_CHECK0();
 80078e4:	4bac      	ldr	r3, [pc, #688]	@ (8007b98 <aiTestPerformance+0x354>)
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d00b      	beq.n	8007904 <aiTestPerformance+0xc0>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80078ec:	f3ef 8308 	mrs	r3, MSP
 80078f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  return(result);
 80078f4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80078f8:	4ba7      	ldr	r3, [pc, #668]	@ (8007b98 <aiTestPerformance+0x354>)
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	461a      	mov	r2, r3
 80078fe:	48a7      	ldr	r0, [pc, #668]	@ (8007b9c <aiTestPerformance+0x358>)
 8007900:	f004 face 	bl	800bea0 <iprintf>

  /* reset/init cpu clock counters */
  tcumul = 0ULL;
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
  tmin = UINT64_MAX;
 8007910:	f04f 32ff 	mov.w	r2, #4294967295
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  tmax = 0UL;
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

  MON_STACK_MARK();
 8007928:	4b9b      	ldr	r3, [pc, #620]	@ (8007b98 <aiTestPerformance+0x354>)
 800792a:	791b      	ldrb	r3, [r3, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d017      	beq.n	8007960 <aiTestPerformance+0x11c>
 8007930:	4b99      	ldr	r3, [pc, #612]	@ (8007b98 <aiTestPerformance+0x354>)
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	3303      	adds	r3, #3
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800793e:	e009      	b.n	8007954 <aiTestPerformance+0x110>
 8007940:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007944:	f04f 33de 	mov.w	r3, #3739147998	@ 0xdededede
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800794e:	3304      	adds	r3, #4
 8007950:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007954:	4b90      	ldr	r3, [pc, #576]	@ (8007b98 <aiTestPerformance+0x354>)
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800795c:	429a      	cmp	r2, r3
 800795e:	d8ef      	bhi.n	8007940 <aiTestPerformance+0xfc>

  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8007960:	4988      	ldr	r1, [pc, #544]	@ (8007b84 <aiTestPerformance+0x340>)
 8007962:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007964:	4613      	mov	r3, r2
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3334      	adds	r3, #52	@ 0x34
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d80a      	bhi.n	800798c <aiTestPerformance+0x148>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8007976:	4983      	ldr	r1, [pc, #524]	@ (8007b84 <aiTestPerformance+0x340>)
 8007978:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800797a:	4613      	mov	r3, r2
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	440b      	add	r3, r1
 8007984:	3336      	adds	r3, #54	@ 0x36
 8007986:	881b      	ldrh	r3, [r3, #0]
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8007988:	2b01      	cmp	r3, #1
 800798a:	d909      	bls.n	80079a0 <aiTestPerformance+0x15c>
  {
    printf("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 800798c:	4884      	ldr	r0, [pc, #528]	@ (8007ba0 <aiTestPerformance+0x35c>)
 800798e:	f004 faf7 	bl	800bf80 <puts>
    HAL_Delay(100);
 8007992:	2064      	movs	r0, #100	@ 0x64
 8007994:	f7f9 fe3e 	bl	8001614 <HAL_Delay>
    return -1;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	f000 bc9d 	b.w	80082da <aiTestPerformance+0xa96>
  }

  /* Fill the input tensor descriptors */
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80079a6:	e077      	b.n	8007a98 <aiTestPerformance+0x254>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 80079a8:	4976      	ldr	r1, [pc, #472]	@ (8007b84 <aiTestPerformance+0x340>)
 80079aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079ac:	4613      	mov	r3, r2
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	440b      	add	r3, r1
 80079b6:	3338      	adds	r3, #56	@ 0x38
 80079b8:	6819      	ldr	r1, [r3, #0]
 80079ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80079be:	4613      	mov	r3, r2
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	4413      	add	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4419      	add	r1, r3
 80079c8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80079cc:	4613      	mov	r3, r2
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4413      	add	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	33c0      	adds	r3, #192	@ 0xc0
 80079d6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80079da:	4413      	add	r3, r2
 80079dc:	3b9c      	subs	r3, #156	@ 0x9c
 80079de:	461d      	mov	r5, r3
 80079e0:	460c      	mov	r4, r1
 80079e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079ea:	e885 0003 	stmia.w	r5, {r0, r1}
    ai_input[i].n_batches  = 1;
 80079ee:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80079f2:	4613      	mov	r3, r2
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4413      	add	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	33c0      	adds	r3, #192	@ 0xc0
 80079fc:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007a00:	4413      	add	r3, r2
 8007a02:	f1a3 0298 	sub.w	r2, r3, #152	@ 0x98
 8007a06:	2301      	movs	r3, #1
 8007a08:	8013      	strh	r3, [r2, #0]
    if (net_exec_ctx[idx].report.inputs[i].data)
 8007a0a:	495e      	ldr	r1, [pc, #376]	@ (8007b84 <aiTestPerformance+0x340>)
 8007a0c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a0e:	4613      	mov	r3, r2
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	440b      	add	r3, r1
 8007a18:	3338      	adds	r3, #56	@ 0x38
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8007a20:	4613      	mov	r3, r2
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	440b      	add	r3, r1
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01d      	beq.n	8007a6c <aiTestPerformance+0x228>
      ai_input[i].data = AI_HANDLE_PTR(net_exec_ctx[idx].report.inputs[i].data);
 8007a30:	4954      	ldr	r1, [pc, #336]	@ (8007b84 <aiTestPerformance+0x340>)
 8007a32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a34:	4613      	mov	r3, r2
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	1a9b      	subs	r3, r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3338      	adds	r3, #56	@ 0x38
 8007a40:	6819      	ldr	r1, [r3, #0]
 8007a42:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8007a46:	4613      	mov	r3, r2
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4413      	add	r3, r2
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	440b      	add	r3, r1
 8007a50:	6919      	ldr	r1, [r3, #16]
 8007a52:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8007a56:	4613      	mov	r3, r2
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	33c0      	adds	r3, #192	@ 0xc0
 8007a60:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007a64:	4413      	add	r3, r2
 8007a66:	3b8c      	subs	r3, #140	@ 0x8c
 8007a68:	6019      	str	r1, [r3, #0]
 8007a6a:	e010      	b.n	8007a8e <aiTestPerformance+0x24a>
    else
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8007a6c:	4a4d      	ldr	r2, [pc, #308]	@ (8007ba4 <aiTestPerformance+0x360>)
 8007a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a76:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	4413      	add	r3, r2
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	33c0      	adds	r3, #192	@ 0xc0
 8007a84:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007a88:	4413      	add	r3, r2
 8007a8a:	3b8c      	subs	r3, #140	@ 0x8c
 8007a8c:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8007a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a92:	3301      	adds	r3, #1
 8007a94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007a98:	493a      	ldr	r1, [pc, #232]	@ (8007b84 <aiTestPerformance+0x340>)
 8007a9a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3334      	adds	r3, #52	@ 0x34
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	f6ff af79 	blt.w	80079a8 <aiTestPerformance+0x164>
  }

  /* Fill the output tensor descriptors */
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007abc:	e08a      	b.n	8007bd4 <aiTestPerformance+0x390>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8007abe:	4931      	ldr	r1, [pc, #196]	@ (8007b84 <aiTestPerformance+0x340>)
 8007ac0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	440b      	add	r3, r1
 8007acc:	333c      	adds	r3, #60	@ 0x3c
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	4413      	add	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	4419      	add	r1, r3
 8007ade:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	4413      	add	r3, r2
 8007ae8:	00db      	lsls	r3, r3, #3
 8007aea:	33c0      	adds	r3, #192	@ 0xc0
 8007aec:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007af0:	4413      	add	r3, r2
 8007af2:	3bb4      	subs	r3, #180	@ 0xb4
 8007af4:	461d      	mov	r5, r3
 8007af6:	460c      	mov	r4, r1
 8007af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b00:	e885 0003 	stmia.w	r5, {r0, r1}
    ai_output[i].n_batches = 1;
 8007b04:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007b08:	4613      	mov	r3, r2
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	4413      	add	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	33c0      	adds	r3, #192	@ 0xc0
 8007b12:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007b16:	4413      	add	r3, r2
 8007b18:	f1a3 02b0 	sub.w	r2, r3, #176	@ 0xb0
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	8013      	strh	r3, [r2, #0]
    if (net_exec_ctx[idx].report.outputs[i].data)
 8007b20:	4918      	ldr	r1, [pc, #96]	@ (8007b84 <aiTestPerformance+0x340>)
 8007b22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b24:	4613      	mov	r3, r2
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	1a9b      	subs	r3, r3, r2
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	440b      	add	r3, r1
 8007b2e:	333c      	adds	r3, #60	@ 0x3c
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007b36:	4613      	mov	r3, r2
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	440b      	add	r3, r1
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d030      	beq.n	8007ba8 <aiTestPerformance+0x364>
      ai_output[i].data = AI_HANDLE_PTR(net_exec_ctx[idx].report.outputs[i].data);
 8007b46:	490f      	ldr	r1, [pc, #60]	@ (8007b84 <aiTestPerformance+0x340>)
 8007b48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	333c      	adds	r3, #60	@ 0x3c
 8007b56:	6819      	ldr	r1, [r3, #0]
 8007b58:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	4413      	add	r3, r2
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	440b      	add	r3, r1
 8007b66:	6919      	ldr	r1, [r3, #16]
 8007b68:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	4413      	add	r3, r2
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	33c0      	adds	r3, #192	@ 0xc0
 8007b76:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3ba4      	subs	r3, #164	@ 0xa4
 8007b7e:	6019      	str	r1, [r3, #0]
 8007b80:	e023      	b.n	8007bca <aiTestPerformance+0x386>
 8007b82:	bf00      	nop
 8007b84:	20000738 	.word	0x20000738
 8007b88:	0800ce68 	.word	0x0800ce68
 8007b8c:	2000072c 	.word	0x2000072c
 8007b90:	2000000c 	.word	0x2000000c
 8007b94:	0800ce84 	.word	0x0800ce84
 8007b98:	20000874 	.word	0x20000874
 8007b9c:	0800cec8 	.word	0x0800cec8
 8007ba0:	0800cf0c 	.word	0x0800cf0c
 8007ba4:	20000010 	.word	0x20000010
    else
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8007ba8:	4a9c      	ldr	r2, [pc, #624]	@ (8007e1c <aiTestPerformance+0x5d8>)
 8007baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007bb2:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	33c0      	adds	r3, #192	@ 0xc0
 8007bc0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3ba4      	subs	r3, #164	@ 0xa4
 8007bc8:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8007bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007bce:	3301      	adds	r3, #1
 8007bd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007bd4:	4992      	ldr	r1, [pc, #584]	@ (8007e20 <aiTestPerformance+0x5dc>)
 8007bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007bd8:	4613      	mov	r3, r2
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	440b      	add	r3, r1
 8007be2:	3336      	adds	r3, #54	@ 0x36
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007bec:	4293      	cmp	r3, r2
 8007bee:	f6ff af66 	blt.w	8007abe <aiTestPerformance+0x27a>
  }

  if (profiling_mode) {
 8007bf2:	4b8c      	ldr	r3, [pc, #560]	@ (8007e24 <aiTestPerformance+0x5e0>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00b      	beq.n	8007c12 <aiTestPerformance+0x3ce>
    printf("Profiling mode (%d)...\r\n", profiling_factor);
 8007bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8007e28 <aiTestPerformance+0x5e4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	488a      	ldr	r0, [pc, #552]	@ (8007e2c <aiTestPerformance+0x5e8>)
 8007c02:	f004 f94d 	bl	800bea0 <iprintf>
    fflush(stdout);
 8007c06:	4b8a      	ldr	r3, [pc, #552]	@ (8007e30 <aiTestPerformance+0x5ec>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f004 f871 	bl	800bcf4 <fflush>
  }

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
  /* Enable observer */
  if (observer_mode) {
 8007c12:	4b88      	ldr	r3, [pc, #544]	@ (8007e34 <aiTestPerformance+0x5f0>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01f      	beq.n	8007c5a <aiTestPerformance+0x416>
    MON_ALLOC_RESET();
 8007c1a:	221c      	movs	r2, #28
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4886      	ldr	r0, [pc, #536]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007c20:	f004 fa8e 	bl	800c140 <memset>
 8007c24:	200a      	movs	r0, #10
 8007c26:	f003 fe8f 	bl	800b948 <malloc>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f003 fe93 	bl	800b958 <free>
    MON_ALLOC_ENABLE();
 8007c32:	4b81      	ldr	r3, [pc, #516]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f043 0201 	orr.w	r2, r3, #1
 8007c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007c3c:	601a      	str	r2, [r3, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8007c3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007c40:	4613      	mov	r3, r2
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4a75      	ldr	r2, [pc, #468]	@ (8007e20 <aiTestPerformance+0x5dc>)
 8007c4a:	4413      	add	r3, r2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fc3d 	bl	80074cc <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8007c52:	4b79      	ldr	r3, [pc, #484]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  }
#endif

  MON_ALLOC_RESET();
 8007c5a:	221c      	movs	r2, #28
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4876      	ldr	r0, [pc, #472]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007c60:	f004 fa6e 	bl	800c140 <memset>
 8007c64:	200a      	movs	r0, #10
 8007c66:	f003 fe6f 	bl	800b948 <malloc>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f003 fe73 	bl	800b958 <free>

  /* Main inference loop */
  for (iter = 0; iter < niter; iter++) {
 8007c72:	2300      	movs	r3, #0
 8007c74:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c78:	e138      	b.n	8007eec <aiTestPerformance+0x6a8>

    /* Fill input tensors with random data */
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007c80:	e08f      	b.n	8007da2 <aiTestPerformance+0x55e>
      const ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[i]);
 8007c82:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	33c0      	adds	r3, #192	@ 0xc0
 8007c90:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007c94:	4413      	add	r3, r2
 8007c96:	3b9c      	subs	r3, #156	@ 0x9c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8007c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 8007ca2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	4413      	add	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	33c0      	adds	r3, #192	@ 0xc0
 8007cb0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007cb4:	4413      	add	r3, r2
 8007cb6:	3b8c      	subs	r3, #140	@ 0x8c
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cc4:	e03a      	b.n	8007d3c <aiTestPerformance+0x4f8>
        /* uniform distribution between -1.0 and 1.0 */
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8007cc6:	f003 ff2b 	bl	800bb20 <rand>
 8007cca:	ee07 0a90 	vmov	s15, r0
 8007cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cd2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007cd6:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8007e3c <aiTestPerformance+0x5f8>
 8007cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ce6:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8007cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cee:	145b      	asrs	r3, r3, #17
 8007cf0:	f003 030f 	and.w	r3, r3, #15
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d109      	bne.n	8007d0c <aiTestPerformance+0x4c8>
          *(ai_float *)(in_data + j * 4) = v;
 8007cf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007cfc:	009a      	lsls	r2, r3, #2
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d02:	441a      	add	r2, r3
 8007d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	e012      	b.n	8007d32 <aiTestPerformance+0x4ee>
        }
        else {
          in_data[j] = (ai_i8)(v * 127);
 8007d0c:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8007d10:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8007e40 <aiTestPerformance+0x5fc>
 8007d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d18:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d20:	441a      	add	r2, r3
 8007d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d26:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
 8007d2a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	7013      	strb	r3, [r2, #0]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8007d32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d36:	3301      	adds	r3, #1
 8007d38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007d3c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007d40:	4613      	mov	r3, r2
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	4413      	add	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	33c0      	adds	r3, #192	@ 0xc0
 8007d4a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007d4e:	4413      	add	r3, r2
 8007d50:	3b94      	subs	r3, #148	@ 0x94
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	4619      	mov	r1, r3
 8007d56:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	4413      	add	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	33c0      	adds	r3, #192	@ 0xc0
 8007d64:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007d68:	4413      	add	r3, r2
 8007d6a:	3b96      	subs	r3, #150	@ 0x96
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	4619      	mov	r1, r3
 8007d74:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007d78:	4613      	mov	r3, r2
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	4413      	add	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	33c0      	adds	r3, #192	@ 0xc0
 8007d82:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007d86:	4413      	add	r3, r2
 8007d88:	3b90      	subs	r3, #144	@ 0x90
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	fb03 f201 	mul.w	r2, r3, r1
 8007d90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d396      	bcc.n	8007cc6 <aiTestPerformance+0x482>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007da2:	491f      	ldr	r1, [pc, #124]	@ (8007e20 <aiTestPerformance+0x5dc>)
 8007da4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007da6:	4613      	mov	r3, r2
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	440b      	add	r3, r1
 8007db0:	3334      	adds	r3, #52	@ 0x34
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	f6ff af61 	blt.w	8007c82 <aiTestPerformance+0x43e>
        }
      }
    }

    MON_ALLOC_ENABLE();
 8007dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f043 0201 	orr.w	r2, r3, #1
 8007dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e38 <aiTestPerformance+0x5f4>)
 8007dca:	601a      	str	r2, [r3, #0]

    // free(malloc(20));

    cyclesCounterStart();
 8007dcc:	f7ff f912 	bl	8006ff4 <cyclesCounterStart>
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 8007dd0:	4913      	ldr	r1, [pc, #76]	@ (8007e20 <aiTestPerformance+0x5dc>)
 8007dd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	440b      	add	r3, r1
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8007de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007de8:	4619      	mov	r1, r3
 8007dea:	f001 fd8f 	bl	800990c <ai_mnetwork_run>
 8007dee:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if (batch != 1) {
 8007df2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d026      	beq.n	8007e48 <aiTestPerformance+0x604>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 8007dfa:	4909      	ldr	r1, [pc, #36]	@ (8007e20 <aiTestPerformance+0x5dc>)
 8007dfc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007dfe:	4613      	mov	r3, r2
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	440b      	add	r3, r1
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 fd0d 	bl	800982a <ai_mnetwork_get_error>
 8007e10:	4603      	mov	r3, r0
 8007e12:	490c      	ldr	r1, [pc, #48]	@ (8007e44 <aiTestPerformance+0x600>)
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fbd1 	bl	80085bc <aiLogErr>
          "ai_mnetwork_run");
      break;
 8007e1a:	e06e      	b.n	8007efa <aiTestPerformance+0x6b6>
 8007e1c:	20000014 	.word	0x20000014
 8007e20:	20000738 	.word	0x20000738
 8007e24:	2000072c 	.word	0x2000072c
 8007e28:	2000000c 	.word	0x2000000c
 8007e2c:	0800cf44 	.word	0x0800cf44
 8007e30:	20000600 	.word	0x20000600
 8007e34:	20000009 	.word	0x20000009
 8007e38:	20000858 	.word	0x20000858
 8007e3c:	4f000000 	.word	0x4f000000
 8007e40:	42fe0000 	.word	0x42fe0000
 8007e44:	0800cf60 	.word	0x0800cf60
    }
    tend = cyclesCounterEnd();
 8007e48:	f7ff f8e6 	bl	8007018 <cyclesCounterEnd>
 8007e4c:	e9c7 013a 	strd	r0, r1, [r7, #232]	@ 0xe8

    MON_ALLOC_DISABLE();
 8007e50:	4b5a      	ldr	r3, [pc, #360]	@ (8007fbc <aiTestPerformance+0x778>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f023 0201 	bic.w	r2, r3, #1
 8007e58:	4b58      	ldr	r3, [pc, #352]	@ (8007fbc <aiTestPerformance+0x778>)
 8007e5a:	601a      	str	r2, [r3, #0]

    if (tend < tmin)
 8007e5c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8007e60:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007e64:	4290      	cmp	r0, r2
 8007e66:	eb71 0303 	sbcs.w	r3, r1, r3
 8007e6a:	d203      	bcs.n	8007e74 <aiTestPerformance+0x630>
      tmin = tend;
 8007e6c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8007e70:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

    if (tend > tmax)
 8007e74:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8007e78:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8007e7c:	4282      	cmp	r2, r0
 8007e7e:	418b      	sbcs	r3, r1
 8007e80:	d203      	bcs.n	8007e8a <aiTestPerformance+0x646>
      tmax = tend;
 8007e82:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8007e86:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

    tcumul += tend;
 8007e8a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8007e8e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8007e92:	1884      	adds	r4, r0, r2
 8007e94:	63bc      	str	r4, [r7, #56]	@ 0x38
 8007e96:	eb41 0303 	adc.w	r3, r1, r3
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e9c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8007ea0:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

    dwtCyclesToTime(tend, &t);
 8007ea4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8007eae:	f000 ff8a 	bl	8008dc6 <dwtCyclesToTime>

#if APP_DEBUG == 1
    printf(" #%02d %8d.%03dms (%ld cycles)\r\n", iter,
        t.ms, t.us, (long)tend);
#else
    if (!profiling_mode) {
 8007eb2:	4b43      	ldr	r3, [pc, #268]	@ (8007fc0 <aiTestPerformance+0x77c>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	f083 0301 	eor.w	r3, r3, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d010      	beq.n	8007ee2 <aiTestPerformance+0x69e>
      if (t.s > 10)
 8007ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ec4:	2b0a      	cmp	r3, #10
 8007ec6:	dd03      	ble.n	8007ed0 <aiTestPerformance+0x68c>
        niter = iter;
 8007ec8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ecc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      printf(".");
 8007ed0:	202e      	movs	r0, #46	@ 0x2e
 8007ed2:	f003 fff7 	bl	800bec4 <putchar>
      fflush(stdout);
 8007ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc4 <aiTestPerformance+0x780>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f003 ff09 	bl	800bcf4 <fflush>
  for (iter = 0; iter < niter; iter++) {
 8007ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007eec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007ef0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	f6ff aec0 	blt.w	8007c7a <aiTestPerformance+0x436>
    }
#endif
  } /* end of the main loop */

#if APP_DEBUG != 1
  printf("\r\n");
 8007efa:	4833      	ldr	r0, [pc, #204]	@ (8007fc8 <aiTestPerformance+0x784>)
 8007efc:	f004 f840 	bl	800bf80 <puts>
#endif

  MON_STACK_EVALUATE();
 8007f00:	4a32      	ldr	r2, [pc, #200]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f02:	2300      	movs	r3, #0
 8007f04:	6093      	str	r3, [r2, #8]
 8007f06:	4b31      	ldr	r3, [pc, #196]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f08:	791b      	ldrb	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d06c      	beq.n	8007fe8 <aiTestPerformance+0x7a4>
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	4b2e      	ldr	r3, [pc, #184]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	3303      	adds	r3, #3
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f36:	e012      	b.n	8007f5e <aiTestPerformance+0x71a>
 8007f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 3fde 	cmp.w	r3, #3739147998	@ 0xdededede
 8007f42:	d002      	beq.n	8007f4a <aiTestPerformance+0x706>
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 8007f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f4e:	3304      	adds	r3, #4
 8007f50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f58:	3301      	adds	r3, #1
 8007f5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f62:	2b07      	cmp	r3, #7
 8007f64:	dde8      	ble.n	8007f38 <aiTestPerformance+0x6f4>
 8007f66:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8007f6a:	f083 0301 	eor.w	r3, r3, #1
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02d      	beq.n	8007fd0 <aiTestPerformance+0x78c>
 8007f74:	4a15      	ldr	r2, [pc, #84]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f76:	2320      	movs	r3, #32
 8007f78:	6093      	str	r3, [r2, #8]
 8007f7a:	e009      	b.n	8007f90 <aiTestPerformance+0x74c>
 8007f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f80:	3304      	adds	r3, #4
 8007f82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f86:	4b11      	ldr	r3, [pc, #68]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f8e:	609a      	str	r2, [r3, #8]
 8007f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 3fde 	cmp.w	r3, #3739147998	@ 0xdededede
 8007f9a:	d105      	bne.n	8007fa8 <aiTestPerformance+0x764>
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fcc <aiTestPerformance+0x788>)
 8007f9e:	699a      	ldr	r2, [r3, #24]
 8007fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d8e9      	bhi.n	8007f7c <aiTestPerformance+0x738>
 8007fa8:	4b08      	ldr	r3, [pc, #32]	@ (8007fcc <aiTestPerformance+0x788>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	461a      	mov	r2, r3
 8007fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <aiTestPerformance+0x788>)
 8007fb8:	609a      	str	r2, [r3, #8]
 8007fba:	e015      	b.n	8007fe8 <aiTestPerformance+0x7a4>
 8007fbc:	20000858 	.word	0x20000858
 8007fc0:	2000072c 	.word	0x2000072c
 8007fc4:	20000600 	.word	0x20000600
 8007fc8:	0800cf70 	.word	0x0800cf70
 8007fcc:	20000874 	.word	0x20000874
 8007fd0:	4ac5      	ldr	r2, [pc, #788]	@ (80082e8 <aiTestPerformance+0xaa4>)
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	6093      	str	r3, [r2, #8]
 8007fd8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8007fdc:	48c3      	ldr	r0, [pc, #780]	@ (80082ec <aiTestPerformance+0xaa8>)
 8007fde:	f003 ff5f 	bl	800bea0 <iprintf>
 8007fe2:	48c3      	ldr	r0, [pc, #780]	@ (80082f0 <aiTestPerformance+0xaac>)
 8007fe4:	f003 ff5c 	bl	800bea0 <iprintf>

#if _APP_FIX_CLK_OVERFLOW == 0
  restoreInts(irqs);
#endif

  printf("\r\n");
 8007fe8:	48c2      	ldr	r0, [pc, #776]	@ (80082f4 <aiTestPerformance+0xab0>)
 8007fea:	f003 ffc9 	bl	800bf80 <puts>

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
  /* remove the user cb time */
  tmin = tmin - u_observer_ctx.u_dur_t / (uint64_t)iter;
 8007fee:	4bc2      	ldr	r3, [pc, #776]	@ (80082f8 <aiTestPerformance+0xab4>)
 8007ff0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007ff4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ff8:	17da      	asrs	r2, r3, #31
 8007ffa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ffc:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ffe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008002:	f7f8 fc0b 	bl	800081c <__aeabi_uldivmod>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4610      	mov	r0, r2
 800800c:	4619      	mov	r1, r3
 800800e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008012:	1a14      	subs	r4, r2, r0
 8008014:	633c      	str	r4, [r7, #48]	@ 0x30
 8008016:	eb63 0301 	sbc.w	r3, r3, r1
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34
 800801c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8008020:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
  tmax = tmax - u_observer_ctx.u_dur_t / (uint64_t)iter;
 8008024:	4bb4      	ldr	r3, [pc, #720]	@ (80082f8 <aiTestPerformance+0xab4>)
 8008026:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800802a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800802e:	17da      	asrs	r2, r3, #31
 8008030:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008032:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008034:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008038:	f7f8 fbf0 	bl	800081c <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8008048:	1a14      	subs	r4, r2, r0
 800804a:	62bc      	str	r4, [r7, #40]	@ 0x28
 800804c:	eb63 0301 	sbc.w	r3, r3, r1
 8008050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008052:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008056:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  tcumul -= u_observer_ctx.u_dur_t;
 800805a:	4ba7      	ldr	r3, [pc, #668]	@ (80082f8 <aiTestPerformance+0xab4>)
 800805c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008060:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008064:	1a14      	subs	r4, r2, r0
 8008066:	623c      	str	r4, [r7, #32]
 8008068:	eb63 0301 	sbc.w	r3, r3, r1
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
 800806e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008072:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
#endif

  tcumul /= (uint64_t)iter;
 8008076:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800807a:	17da      	asrs	r2, r3, #31
 800807c:	663b      	str	r3, [r7, #96]	@ 0x60
 800807e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008080:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8008084:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8008088:	f7f8 fbc8 	bl	800081c <__aeabi_uldivmod>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

  dwtCyclesToTime(tcumul, &t);
 8008094:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8008098:	461a      	mov	r2, r3
 800809a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800809e:	f000 fe92 	bl	8008dc6 <dwtCyclesToTime>

  printf("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %d MACC)\r\n",
 80080a2:	4996      	ldr	r1, [pc, #600]	@ (80082fc <aiTestPerformance+0xab8>)
 80080a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80080a6:	4613      	mov	r3, r2
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	440b      	add	r3, r1
 80080b0:	3304      	adds	r3, #4
 80080b2:	681c      	ldr	r4, [r3, #0]
      net_exec_ctx[idx].report.model_name, (int)iter,
      (int)(HAL_RCC_GetSysClockFreq() / 1000000),
 80080b4:	f7fb f9e2 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80080b8:	4602      	mov	r2, r0
 80080ba:	4b91      	ldr	r3, [pc, #580]	@ (8008300 <aiTestPerformance+0xabc>)
 80080bc:	fba3 2302 	umull	r2, r3, r3, r2
 80080c0:	0c9b      	lsrs	r3, r3, #18
  printf("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %d MACC)\r\n",
 80080c2:	461d      	mov	r5, r3
      (int)(HAL_RCC_GetHCLKFreq() / 1000000),
 80080c4:	f7fb fadc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80080c8:	4602      	mov	r2, r0
 80080ca:	4b8d      	ldr	r3, [pc, #564]	@ (8008300 <aiTestPerformance+0xabc>)
 80080cc:	fba3 2302 	umull	r2, r3, r3, r2
 80080d0:	0c9b      	lsrs	r3, r3, #18
  printf("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %d MACC)\r\n",
 80080d2:	4618      	mov	r0, r3
      (int)net_exec_ctx[idx].report.n_macc);
 80080d4:	4989      	ldr	r1, [pc, #548]	@ (80082fc <aiTestPerformance+0xab8>)
 80080d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80080d8:	4613      	mov	r3, r2
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	440b      	add	r3, r1
 80080e2:	3330      	adds	r3, #48	@ 0x30
 80080e4:	681b      	ldr	r3, [r3, #0]
  printf("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %d MACC)\r\n",
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	9000      	str	r0, [sp, #0]
 80080ea:	462b      	mov	r3, r5
 80080ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80080f0:	4621      	mov	r1, r4
 80080f2:	4884      	ldr	r0, [pc, #528]	@ (8008304 <aiTestPerformance+0xac0>)
 80080f4:	f003 fed4 	bl	800bea0 <iprintf>

  printf(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 80080f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008100:	fb03 f202 	mul.w	r2, r3, r2
 8008104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008108:	18d1      	adds	r1, r2, r3
 800810a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800810e:	461a      	mov	r2, r3
 8008110:	487d      	ldr	r0, [pc, #500]	@ (8008308 <aiTestPerformance+0xac4>)
 8008112:	f003 fec5 	bl	800bea0 <iprintf>
  printf(" CPU cycles   : %d -%d/+%d (average,-/+)\r\n",
 8008116:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
      (int)(tcumul), (int)(tcumul - tmin),
 800811a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800811e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008122:	1ad3      	subs	r3, r2, r3
  printf(" CPU cycles   : %d -%d/+%d (average,-/+)\r\n",
 8008124:	4618      	mov	r0, r3
      (int)(tmax - tcumul));
 8008126:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800812a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800812e:	1ad3      	subs	r3, r2, r3
  printf(" CPU cycles   : %d -%d/+%d (average,-/+)\r\n",
 8008130:	4602      	mov	r2, r0
 8008132:	4876      	ldr	r0, [pc, #472]	@ (800830c <aiTestPerformance+0xac8>)
 8008134:	f003 feb4 	bl	800bea0 <iprintf>
  printf(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8008138:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	1894      	adds	r4, r2, r2
 8008142:	61bc      	str	r4, [r7, #24]
 8008144:	415b      	adcs	r3, r3
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800814c:	eb12 0800 	adds.w	r8, r2, r0
 8008150:	eb43 0901 	adc.w	r9, r3, r1
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	f04f 0300 	mov.w	r3, #0
 800815c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8008160:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8008164:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8008168:	eb18 0402 	adds.w	r4, r8, r2
 800816c:	613c      	str	r4, [r7, #16]
 800816e:	eb49 0303 	adc.w	r3, r9, r3
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008178:	4623      	mov	r3, r4
 800817a:	181b      	adds	r3, r3, r0
 800817c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800817e:	462b      	mov	r3, r5
 8008180:	eb41 0303 	adc.w	r3, r1, r3
 8008184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800818a:	2200      	movs	r2, #0
 800818c:	653b      	str	r3, [r7, #80]	@ 0x50
 800818e:	657a      	str	r2, [r7, #84]	@ 0x54
 8008190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008194:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8008198:	f7f8 fb40 	bl	800081c <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4613      	mov	r3, r2
 80081a2:	2225      	movs	r2, #37	@ 0x25
 80081a4:	4619      	mov	r1, r3
 80081a6:	485a      	ldr	r0, [pc, #360]	@ (8008310 <aiTestPerformance+0xacc>)
 80081a8:	f003 fe7a 	bl	800bea0 <iprintf>
  cmacc = (uint32_t)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80081ac:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	1894      	adds	r4, r2, r2
 80081b6:	60bc      	str	r4, [r7, #8]
 80081b8:	415b      	adcs	r3, r3
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081c0:	eb12 0a00 	adds.w	sl, r2, r0
 80081c4:	eb43 0b01 	adc.w	fp, r3, r1
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80081d4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80081d8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80081dc:	eb1a 0402 	adds.w	r4, sl, r2
 80081e0:	603c      	str	r4, [r7, #0]
 80081e2:	eb4b 0303 	adc.w	r3, fp, r3
 80081e6:	607b      	str	r3, [r7, #4]
 80081e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081ec:	4623      	mov	r3, r4
 80081ee:	181b      	adds	r3, r3, r0
 80081f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081f2:	462b      	mov	r3, r5
 80081f4:	eb41 0303 	adc.w	r3, r1, r3
 80081f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081fa:	4940      	ldr	r1, [pc, #256]	@ (80082fc <aiTestPerformance+0xab8>)
 80081fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80081fe:	4613      	mov	r3, r2
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	440b      	add	r3, r1
 8008208:	3330      	adds	r3, #48	@ 0x30
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2200      	movs	r2, #0
 800820e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008210:	647a      	str	r2, [r7, #68]	@ 0x44
 8008212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008216:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800821a:	f7f8 faff 	bl	800081c <__aeabi_uldivmod>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4613      	mov	r3, r2
 8008224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  printf(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
      (int)(cmacc / 100), (int)(cmacc - ((cmacc / 100) * 100)));
 8008228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800822c:	4a39      	ldr	r2, [pc, #228]	@ (8008314 <aiTestPerformance+0xad0>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	095b      	lsrs	r3, r3, #5
  printf(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 8008234:	4618      	mov	r0, r3
      (int)(cmacc / 100), (int)(cmacc - ((cmacc / 100) * 100)));
 8008236:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800823a:	4b36      	ldr	r3, [pc, #216]	@ (8008314 <aiTestPerformance+0xad0>)
 800823c:	fba3 1302 	umull	r1, r3, r3, r2
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	2164      	movs	r1, #100	@ 0x64
 8008244:	fb01 f303 	mul.w	r3, r1, r3
 8008248:	1ad3      	subs	r3, r2, r3
  printf(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 800824a:	461a      	mov	r2, r3
 800824c:	4601      	mov	r1, r0
 800824e:	4832      	ldr	r0, [pc, #200]	@ (8008318 <aiTestPerformance+0xad4>)
 8008250:	f003 fe26 	bl	800bea0 <iprintf>

  MON_STACK_REPORT();
 8008254:	4b24      	ldr	r3, [pc, #144]	@ (80082e8 <aiTestPerformance+0xaa4>)
 8008256:	791b      	ldrb	r3, [r3, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <aiTestPerformance+0xa26>
 800825c:	4b22      	ldr	r3, [pc, #136]	@ (80082e8 <aiTestPerformance+0xaa4>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	4619      	mov	r1, r3
 8008262:	482e      	ldr	r0, [pc, #184]	@ (800831c <aiTestPerformance+0xad8>)
 8008264:	f003 fe1c 	bl	800bea0 <iprintf>
 8008268:	e002      	b.n	8008270 <aiTestPerformance+0xa2c>
 800826a:	482d      	ldr	r0, [pc, #180]	@ (8008320 <aiTestPerformance+0xadc>)
 800826c:	f003 fe88 	bl	800bf80 <puts>
  MON_ALLOC_REPORT();
 8008270:	4b2c      	ldr	r3, [pc, #176]	@ (8008324 <aiTestPerformance+0xae0>)
 8008272:	68dc      	ldr	r4, [r3, #12]
 8008274:	4b2b      	ldr	r3, [pc, #172]	@ (8008324 <aiTestPerformance+0xae0>)
 8008276:	685d      	ldr	r5, [r3, #4]
 8008278:	4b2a      	ldr	r3, [pc, #168]	@ (8008324 <aiTestPerformance+0xae0>)
 800827a:	691e      	ldr	r6, [r3, #16]
 800827c:	4b29      	ldr	r3, [pc, #164]	@ (8008324 <aiTestPerformance+0xae0>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	4a28      	ldr	r2, [pc, #160]	@ (8008324 <aiTestPerformance+0xae0>)
 8008282:	6952      	ldr	r2, [r2, #20]
 8008284:	4927      	ldr	r1, [pc, #156]	@ (8008324 <aiTestPerformance+0xae0>)
 8008286:	6989      	ldr	r1, [r1, #24]
 8008288:	4826      	ldr	r0, [pc, #152]	@ (8008324 <aiTestPerformance+0xae0>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	0840      	lsrs	r0, r0, #1
 800828e:	f000 0003 	and.w	r0, r0, #3
 8008292:	9003      	str	r0, [sp, #12]
 8008294:	9102      	str	r1, [sp, #8]
 8008296:	9201      	str	r2, [sp, #4]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	4633      	mov	r3, r6
 800829c:	462a      	mov	r2, r5
 800829e:	4621      	mov	r1, r4
 80082a0:	4821      	ldr	r0, [pc, #132]	@ (8008328 <aiTestPerformance+0xae4>)
 80082a2:	f003 fdfd 	bl	800bea0 <iprintf>

#if defined(USE_OBSERVER) && USE_OBSERVER == 1
  printf(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
			(int)net_exec_ctx[idx].report.n_nodes);
 80082a6:	4915      	ldr	r1, [pc, #84]	@ (80082fc <aiTestPerformance+0xab8>)
 80082a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80082aa:	4613      	mov	r3, r2
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	440b      	add	r3, r1
 80082b4:	3370      	adds	r3, #112	@ 0x70
 80082b6:	681b      	ldr	r3, [r3, #0]
  printf(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 80082b8:	461a      	mov	r2, r3
 80082ba:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80082be:	481b      	ldr	r0, [pc, #108]	@ (800832c <aiTestPerformance+0xae8>)
 80082c0:	f003 fdee 	bl	800bea0 <iprintf>
  aiObserverDone(&net_exec_ctx[idx]);
 80082c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80082c6:	4613      	mov	r3, r2
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	4a0b      	ldr	r2, [pc, #44]	@ (80082fc <aiTestPerformance+0xab8>)
 80082d0:	4413      	add	r3, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff f95c 	bl	8007590 <aiObserverDone>
#endif

  return 0;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80082e0:	46bd      	mov	sp, r7
 80082e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e6:	bf00      	nop
 80082e8:	20000874 	.word	0x20000874
 80082ec:	0800cf74 	.word	0x0800cf74
 80082f0:	0800cf98 	.word	0x0800cf98
 80082f4:	0800cf70 	.word	0x0800cf70
 80082f8:	20000830 	.word	0x20000830
 80082fc:	20000738 	.word	0x20000738
 8008300:	431bde83 	.word	0x431bde83
 8008304:	0800cff4 	.word	0x0800cff4
 8008308:	0800d03c 	.word	0x0800d03c
 800830c:	0800d064 	.word	0x0800d064
 8008310:	0800d090 	.word	0x0800d090
 8008314:	51eb851f 	.word	0x51eb851f
 8008318:	0800d0bc 	.word	0x0800d0bc
 800831c:	0800d0f0 	.word	0x0800d0f0
 8008320:	0800d10c 	.word	0x0800d10c
 8008324:	20000858 	.word	0x20000858
 8008328:	0800d12c 	.word	0x0800d12c
 800832c:	0800d188 	.word	0x0800d188

08008330 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
  uint8_t c = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	71fb      	strb	r3, [r7, #7]

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 800833a:	1dfb      	adds	r3, r7, #7
 800833c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fc47 	bl	8008bd4 <ioRawGetUint8>
 8008346:	4603      	mov	r3, r0
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d101      	bne.n	8008352 <aiTestConsole+0x22>
    return CONS_EVT_TIMEOUT;
 800834e:	2300      	movs	r3, #0
 8008350:	e033      	b.n	80083ba <aiTestConsole+0x8a>

  if ((c == 'q') || (c == 'Q'))
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	2b71      	cmp	r3, #113	@ 0x71
 8008356:	d002      	beq.n	800835e <aiTestConsole+0x2e>
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b51      	cmp	r3, #81	@ 0x51
 800835c:	d101      	bne.n	8008362 <aiTestConsole+0x32>
    return CONS_EVT_QUIT;
 800835e:	2301      	movs	r3, #1
 8008360:	e02b      	b.n	80083ba <aiTestConsole+0x8a>

  if ((c == 'd') || (c == 'D'))
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	2b64      	cmp	r3, #100	@ 0x64
 8008366:	d002      	beq.n	800836e <aiTestConsole+0x3e>
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b44      	cmp	r3, #68	@ 0x44
 800836c:	d101      	bne.n	8008372 <aiTestConsole+0x42>
    return CONS_EVT_HIDE;
 800836e:	2306      	movs	r3, #6
 8008370:	e023      	b.n	80083ba <aiTestConsole+0x8a>

  if ((c == 'r') || (c == 'R'))
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	2b72      	cmp	r3, #114	@ 0x72
 8008376:	d002      	beq.n	800837e <aiTestConsole+0x4e>
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b52      	cmp	r3, #82	@ 0x52
 800837c:	d101      	bne.n	8008382 <aiTestConsole+0x52>
    return CONS_EVT_RESTART;
 800837e:	2302      	movs	r3, #2
 8008380:	e01b      	b.n	80083ba <aiTestConsole+0x8a>

  if ((c == 'h') || (c == 'H') || (c == '?'))
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	2b68      	cmp	r3, #104	@ 0x68
 8008386:	d005      	beq.n	8008394 <aiTestConsole+0x64>
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b48      	cmp	r3, #72	@ 0x48
 800838c:	d002      	beq.n	8008394 <aiTestConsole+0x64>
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b3f      	cmp	r3, #63	@ 0x3f
 8008392:	d101      	bne.n	8008398 <aiTestConsole+0x68>
    return CONS_EVT_HELP;
 8008394:	2303      	movs	r3, #3
 8008396:	e010      	b.n	80083ba <aiTestConsole+0x8a>

  if ((c == 'p') || (c == 'P'))
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b70      	cmp	r3, #112	@ 0x70
 800839c:	d002      	beq.n	80083a4 <aiTestConsole+0x74>
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	2b50      	cmp	r3, #80	@ 0x50
 80083a2:	d101      	bne.n	80083a8 <aiTestConsole+0x78>
    return CONS_EVT_PAUSE;
 80083a4:	2304      	movs	r3, #4
 80083a6:	e008      	b.n	80083ba <aiTestConsole+0x8a>

  if ((c == 'x') || (c == 'X'))
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	2b78      	cmp	r3, #120	@ 0x78
 80083ac:	d002      	beq.n	80083b4 <aiTestConsole+0x84>
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	2b58      	cmp	r3, #88	@ 0x58
 80083b2:	d101      	bne.n	80083b8 <aiTestConsole+0x88>
    return CONS_EVT_PROF;
 80083b4:	2305      	movs	r3, #5
 80083b6:	e000      	b.n	80083ba <aiTestConsole+0x8a>

  return CONS_EVT_UNDEFINED;
 80083b8:	2364      	movs	r3, #100	@ 0x64
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  printf("\r\n#\r\n");
 80083c8:	480c      	ldr	r0, [pc, #48]	@ (80083fc <aiSystemPerformanceInit+0x38>)
 80083ca:	f003 fdd9 	bl	800bf80 <puts>
  printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 80083ce:	2301      	movs	r3, #1
 80083d0:	2205      	movs	r2, #5
 80083d2:	490b      	ldr	r1, [pc, #44]	@ (8008400 <aiSystemPerformanceInit+0x3c>)
 80083d4:	480b      	ldr	r0, [pc, #44]	@ (8008404 <aiSystemPerformanceInit+0x40>)
 80083d6:	f003 fd63 	bl	800bea0 <iprintf>
      _APP_VERSION_MINOR_ );
  printf("#\r\n");
 80083da:	480b      	ldr	r0, [pc, #44]	@ (8008408 <aiSystemPerformanceInit+0x44>)
 80083dc:	f003 fdd0 	bl	800bf80 <puts>

  systemSettingLog();
 80083e0:	f000 ffca 	bl	8009378 <systemSettingLog>

  cyclesCounterInit();
 80083e4:	f7fe fde8 	bl	8006fb8 <cyclesCounterInit>

  aiInit();
 80083e8:	f7fe ff4a 	bl	8007280 <aiInit>

  srand(3); /* deterministic outcome */
 80083ec:	2003      	movs	r0, #3
 80083ee:	f003 fb69 	bl	800bac4 <srand>

  dwtReset();
 80083f2:	f7fe fdc9 	bl	8006f88 <dwtReset>
  return 0;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	0800d1c4 	.word	0x0800d1c4
 8008400:	0800d1cc 	.word	0x0800d1cc
 8008404:	0800d1f0 	.word	0x0800d1f0
 8008408:	0800d200 	.word	0x0800d200

0800840c <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
  int r;
  int idx = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	603b      	str	r3, [r7, #0]

  do {
    r = aiTestPerformance(idx);
 8008416:	6838      	ldr	r0, [r7, #0]
 8008418:	f7ff fa14 	bl	8007844 <aiTestPerformance>
 800841c:	6078      	str	r0, [r7, #4]
    idx = (idx+1) % AI_MNETWORK_NUMBER;
 800841e:	2300      	movs	r3, #0
 8008420:	603b      	str	r3, [r7, #0]

    if (!r) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 8092 	bne.w	800854e <aiSystemPerformanceProcess+0x142>
      r = aiTestConsole();
 800842a:	f7ff ff81 	bl	8008330 <aiTestConsole>
 800842e:	6078      	str	r0, [r7, #4]

      if (r == CONS_EVT_UNDEFINED) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b64      	cmp	r3, #100	@ 0x64
 8008434:	d102      	bne.n	800843c <aiSystemPerformanceProcess+0x30>
        r = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	607b      	str	r3, [r7, #4]
 800843a:	e030      	b.n	800849e <aiSystemPerformanceProcess+0x92>
      } else if (r == CONS_EVT_HELP) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b03      	cmp	r3, #3
 8008440:	d12d      	bne.n	800849e <aiSystemPerformanceProcess+0x92>
        printf("\r\n");
 8008442:	4847      	ldr	r0, [pc, #284]	@ (8008560 <aiSystemPerformanceProcess+0x154>)
 8008444:	f003 fd9c 	bl	800bf80 <puts>
        printf("Possible key for the interactive console:\r\n");
 8008448:	4846      	ldr	r0, [pc, #280]	@ (8008564 <aiSystemPerformanceProcess+0x158>)
 800844a:	f003 fd99 	bl	800bf80 <puts>
        printf("  [q,Q]      quit the application\r\n");
 800844e:	4846      	ldr	r0, [pc, #280]	@ (8008568 <aiSystemPerformanceProcess+0x15c>)
 8008450:	f003 fd96 	bl	800bf80 <puts>
        printf("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8008454:	4845      	ldr	r0, [pc, #276]	@ (800856c <aiSystemPerformanceProcess+0x160>)
 8008456:	f003 fd93 	bl	800bf80 <puts>
        printf("  [p,P]      pause\r\n");
 800845a:	4845      	ldr	r0, [pc, #276]	@ (8008570 <aiSystemPerformanceProcess+0x164>)
 800845c:	f003 fd90 	bl	800bf80 <puts>
        printf("  [d,D]      hide detailed information ('r' to restore)\r\n");
 8008460:	4844      	ldr	r0, [pc, #272]	@ (8008574 <aiSystemPerformanceProcess+0x168>)
 8008462:	f003 fd8d 	bl	800bf80 <puts>
        printf("  [h,H,?]    this information\r\n");
 8008466:	4844      	ldr	r0, [pc, #272]	@ (8008578 <aiSystemPerformanceProcess+0x16c>)
 8008468:	f003 fd8a 	bl	800bf80 <puts>
        printf("   xx        continue immediately\r\n");
 800846c:	4843      	ldr	r0, [pc, #268]	@ (800857c <aiSystemPerformanceProcess+0x170>)
 800846e:	f003 fd87 	bl	800bf80 <puts>
        printf("\r\n");
 8008472:	483b      	ldr	r0, [pc, #236]	@ (8008560 <aiSystemPerformanceProcess+0x154>)
 8008474:	f003 fd84 	bl	800bf80 <puts>
        printf("Press any key to continue..\r\n");
 8008478:	4841      	ldr	r0, [pc, #260]	@ (8008580 <aiSystemPerformanceProcess+0x174>)
 800847a:	f003 fd81 	bl	800bf80 <puts>

        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 800847e:	e003      	b.n	8008488 <aiSystemPerformanceProcess+0x7c>
          HAL_Delay(1000);
 8008480:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008484:	f7f9 f8c6 	bl	8001614 <HAL_Delay>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8008488:	f7ff ff52 	bl	8008330 <aiTestConsole>
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0f5      	beq.n	8008480 <aiSystemPerformanceProcess+0x74>
        }
        if (r == CONS_EVT_UNDEFINED)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b64      	cmp	r3, #100	@ 0x64
 8008498:	d101      	bne.n	800849e <aiSystemPerformanceProcess+0x92>
          r = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
      }
      if (r == CONS_EVT_PROF) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b05      	cmp	r3, #5
 80084a2:	d109      	bne.n	80084b8 <aiSystemPerformanceProcess+0xac>
        profiling_mode = true;
 80084a4:	4b37      	ldr	r3, [pc, #220]	@ (8008584 <aiSystemPerformanceProcess+0x178>)
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 80084aa:	4b37      	ldr	r3, [pc, #220]	@ (8008588 <aiSystemPerformanceProcess+0x17c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	4a35      	ldr	r2, [pc, #212]	@ (8008588 <aiSystemPerformanceProcess+0x17c>)
 80084b2:	6013      	str	r3, [r2, #0]
        r = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	607b      	str	r3, [r7, #4]
      }

      if (r == CONS_EVT_HIDE) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b06      	cmp	r3, #6
 80084bc:	d104      	bne.n	80084c8 <aiSystemPerformanceProcess+0xbc>
        observer_mode = false;
 80084be:	4b33      	ldr	r3, [pc, #204]	@ (800858c <aiSystemPerformanceProcess+0x180>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	701a      	strb	r2, [r3, #0]
        r = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	607b      	str	r3, [r7, #4]
      }

      if (r == CONS_EVT_RESTART) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d111      	bne.n	80084f2 <aiSystemPerformanceProcess+0xe6>
        profiling_mode = false;
 80084ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008584 <aiSystemPerformanceProcess+0x178>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 80084d4:	4b2d      	ldr	r3, [pc, #180]	@ (800858c <aiSystemPerformanceProcess+0x180>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 80084da:	4b2b      	ldr	r3, [pc, #172]	@ (8008588 <aiSystemPerformanceProcess+0x17c>)
 80084dc:	2205      	movs	r2, #5
 80084de:	601a      	str	r2, [r3, #0]
        printf("\r\n");
 80084e0:	481f      	ldr	r0, [pc, #124]	@ (8008560 <aiSystemPerformanceProcess+0x154>)
 80084e2:	f003 fd4d 	bl	800bf80 <puts>
        aiDeInit();
 80084e6:	f7fe ff19 	bl	800731c <aiDeInit>
        aiSystemPerformanceInit();
 80084ea:	f7ff ff6b 	bl	80083c4 <aiSystemPerformanceInit>
        r = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
      }
      if (r == CONS_EVT_QUIT) {
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d114      	bne.n	8008522 <aiSystemPerformanceProcess+0x116>
        profiling_mode = false;
 80084f8:	4b22      	ldr	r3, [pc, #136]	@ (8008584 <aiSystemPerformanceProcess+0x178>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	701a      	strb	r2, [r3, #0]
        printf("\r\n");
 80084fe:	4818      	ldr	r0, [pc, #96]	@ (8008560 <aiSystemPerformanceProcess+0x154>)
 8008500:	f003 fd3e 	bl	800bf80 <puts>
        disableInts();
 8008504:	f7fe fdfa 	bl	80070fc <disableInts>
        aiDeInit();
 8008508:	f7fe ff08 	bl	800731c <aiDeInit>
        printf("\r\n");
 800850c:	4814      	ldr	r0, [pc, #80]	@ (8008560 <aiSystemPerformanceProcess+0x154>)
 800850e:	f003 fd37 	bl	800bf80 <puts>
        printf("Board should be reseted...\r\n");
 8008512:	481f      	ldr	r0, [pc, #124]	@ (8008590 <aiSystemPerformanceProcess+0x184>)
 8008514:	f003 fd34 	bl	800bf80 <puts>
        while (1) {
          HAL_Delay(1000);
 8008518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800851c:	f7f9 f87a 	bl	8001614 <HAL_Delay>
 8008520:	e7fa      	b.n	8008518 <aiSystemPerformanceProcess+0x10c>
        }
      }
      if (r == CONS_EVT_PAUSE) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d112      	bne.n	800854e <aiSystemPerformanceProcess+0x142>
        printf("\r\n");
 8008528:	480d      	ldr	r0, [pc, #52]	@ (8008560 <aiSystemPerformanceProcess+0x154>)
 800852a:	f003 fd29 	bl	800bf80 <puts>
        printf("Press any key to continue..\r\n");
 800852e:	4814      	ldr	r0, [pc, #80]	@ (8008580 <aiSystemPerformanceProcess+0x174>)
 8008530:	f003 fd26 	bl	800bf80 <puts>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8008534:	e003      	b.n	800853e <aiSystemPerformanceProcess+0x132>
          HAL_Delay(1000);
 8008536:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800853a:	f7f9 f86b 	bl	8001614 <HAL_Delay>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 800853e:	f7ff fef7 	bl	8008330 <aiTestConsole>
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f5      	beq.n	8008536 <aiSystemPerformanceProcess+0x12a>
        }
        r = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
      }
    }
  } while (r==0);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	f43f af60 	beq.w	8008416 <aiSystemPerformanceProcess+0xa>

  return r;
 8008556:	687b      	ldr	r3, [r7, #4]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	0800cf70 	.word	0x0800cf70
 8008564:	0800d204 	.word	0x0800d204
 8008568:	0800d230 	.word	0x0800d230
 800856c:	0800d254 	.word	0x0800d254
 8008570:	0800d284 	.word	0x0800d284
 8008574:	0800d298 	.word	0x0800d298
 8008578:	0800d2d4 	.word	0x0800d2d4
 800857c:	0800d2f4 	.word	0x0800d2f4
 8008580:	0800d318 	.word	0x0800d318
 8008584:	2000072c 	.word	0x2000072c
 8008588:	2000000c 	.word	0x2000000c
 800858c:	20000009 	.word	0x20000009
 8008590:	0800d338 	.word	0x0800d338

08008594 <aiPlatformVersion>:
#include <aiTestHelper.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af04      	add	r7, sp, #16
  printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800859a:	2300      	movs	r3, #0
 800859c:	9302      	str	r3, [sp, #8]
 800859e:	2302      	movs	r3, #2
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	2305      	movs	r3, #5
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	2201      	movs	r2, #1
 80085aa:	2101      	movs	r1, #1
 80085ac:	4802      	ldr	r0, [pc, #8]	@ (80085b8 <aiPlatformVersion+0x24>)
 80085ae:	f003 fc77 	bl	800bea0 <iprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 80085b2:	bf00      	nop
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	0800d364 	.word	0x0800d364

080085bc <aiLogErr>:
{
  return buffer->height * buffer->width * buffer->channels;
}

void aiLogErr(const ai_error err, const char *fct)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (fct)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <aiLogErr+0x24>
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80085cc:	793b      	ldrb	r3, [r7, #4]
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80085ce:	461a      	mov	r2, r3
        err.type, err.code);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	4808      	ldr	r0, [pc, #32]	@ (80085fc <aiLogErr+0x40>)
 80085da:	f003 fc61 	bl	800bea0 <iprintf>
  else
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80085de:	e008      	b.n	80085f2 <aiLogErr+0x36>
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80085e0:	793b      	ldrb	r3, [r7, #4]
 80085e2:	4619      	mov	r1, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80085ea:	461a      	mov	r2, r3
 80085ec:	4804      	ldr	r0, [pc, #16]	@ (8008600 <aiLogErr+0x44>)
 80085ee:	f003 fc57 	bl	800bea0 <iprintf>
}
 80085f2:	bf00      	nop
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	0800d398 	.word	0x0800d398
 8008600:	0800d3c8 	.word	0x0800d3c8

08008604 <aiPrintLayoutBuffer>:


void aiPrintLayoutBuffer(const char *msg, int idx,
    const ai_buffer* buffer)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08a      	sub	sp, #40	@ 0x28
 8008608:	af02      	add	r7, sp, #8
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	145b      	asrs	r3, r3, #17
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	61fb      	str	r3, [r7, #28]
  printf("%s[%d] ",msg, idx);
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	4887      	ldr	r0, [pc, #540]	@ (8008840 <aiPrintLayoutBuffer+0x23c>)
 8008622:	f003 fc3d 	bl	800bea0 <iprintf>
  if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	2b02      	cmp	r3, #2
 800862a:	f040 818a 	bne.w	8008942 <aiPrintLayoutBuffer+0x33e>
    printf(" %s%d,",
        AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    printf(" %s%d,",
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <aiPrintLayoutBuffer+0x3a>
 800863a:	4982      	ldr	r1, [pc, #520]	@ (8008844 <aiPrintLayoutBuffer+0x240>)
 800863c:	e000      	b.n	8008640 <aiPrintLayoutBuffer+0x3c>
 800863e:	4982      	ldr	r1, [pc, #520]	@ (8008848 <aiPrintLayoutBuffer+0x244>)
            (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	11db      	asrs	r3, r3, #7
    printf(" %s%d,",
 8008646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800864a:	461a      	mov	r2, r3
 800864c:	487f      	ldr	r0, [pc, #508]	@ (800884c <aiPrintLayoutBuffer+0x248>)
 800864e:	f003 fc27 	bl	800bea0 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 8155 	beq.w	8008906 <aiPrintLayoutBuffer+0x302>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 814d 	beq.w	8008906 <aiPrintLayoutBuffer+0x302>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8147 	beq.w	8008906 <aiPrintLayoutBuffer+0x302>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d058      	beq.n	8008732 <aiPrintLayoutBuffer+0x12e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d051      	beq.n	8008732 <aiPrintLayoutBuffer+0x12e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d04c      	beq.n	8008732 <aiPrintLayoutBuffer+0x12e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d045      	beq.n	800872c <aiPrintLayoutBuffer+0x128>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d03e      	beq.n	800872c <aiPrintLayoutBuffer+0x128>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d039      	beq.n	800872c <aiPrintLayoutBuffer+0x128>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <aiPrintLayoutBuffer+0xd2>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <aiPrintLayoutBuffer+0xd2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	e000      	b.n	80086d8 <aiPrintLayoutBuffer+0xd4>
 80086d6:	2300      	movs	r3, #0
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d026      	beq.n	800872c <aiPrintLayoutBuffer+0x128>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <aiPrintLayoutBuffer+0xf8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <aiPrintLayoutBuffer+0xf8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	e000      	b.n	80086fe <aiPrintLayoutBuffer+0xfa>
 80086fc:	2300      	movs	r3, #0
 80086fe:	885b      	ldrh	r3, [r3, #2]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d013      	beq.n	800872c <aiPrintLayoutBuffer+0x128>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <aiPrintLayoutBuffer+0x11e>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <aiPrintLayoutBuffer+0x11e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	e000      	b.n	8008724 <aiPrintLayoutBuffer+0x120>
 8008722:	2300      	movs	r3, #0
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	e004      	b.n	8008736 <aiPrintLayoutBuffer+0x132>
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	e001      	b.n	8008736 <aiPrintLayoutBuffer+0x132>
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 80d5 	beq.w	80088ec <aiPrintLayoutBuffer+0x2e8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80cd 	beq.w	80088ec <aiPrintLayoutBuffer+0x2e8>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 80c7 	beq.w	80088ec <aiPrintLayoutBuffer+0x2e8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d074      	beq.n	8008850 <aiPrintLayoutBuffer+0x24c>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d06d      	beq.n	8008850 <aiPrintLayoutBuffer+0x24c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d068      	beq.n	8008850 <aiPrintLayoutBuffer+0x24c>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <aiPrintLayoutBuffer+0x198>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <aiPrintLayoutBuffer+0x198>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	e000      	b.n	800879e <aiPrintLayoutBuffer+0x19a>
 800879c:	2300      	movs	r3, #0
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d053      	beq.n	8008850 <aiPrintLayoutBuffer+0x24c>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d045      	beq.n	800883c <aiPrintLayoutBuffer+0x238>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d03e      	beq.n	800883c <aiPrintLayoutBuffer+0x238>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d039      	beq.n	800883c <aiPrintLayoutBuffer+0x238>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00a      	beq.n	80087e6 <aiPrintLayoutBuffer+0x1e2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <aiPrintLayoutBuffer+0x1e2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	e000      	b.n	80087e8 <aiPrintLayoutBuffer+0x1e4>
 80087e6:	2300      	movs	r3, #0
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d026      	beq.n	800883c <aiPrintLayoutBuffer+0x238>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <aiPrintLayoutBuffer+0x208>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <aiPrintLayoutBuffer+0x208>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	e000      	b.n	800880e <aiPrintLayoutBuffer+0x20a>
 800880c:	2300      	movs	r3, #0
 800880e:	885b      	ldrh	r3, [r3, #2]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d013      	beq.n	800883c <aiPrintLayoutBuffer+0x238>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <aiPrintLayoutBuffer+0x22e>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <aiPrintLayoutBuffer+0x22e>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	e000      	b.n	8008834 <aiPrintLayoutBuffer+0x230>
 8008832:	2300      	movs	r3, #0
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	e056      	b.n	80088ea <aiPrintLayoutBuffer+0x2e6>
 800883c:	2300      	movs	r3, #0
 800883e:	e054      	b.n	80088ea <aiPrintLayoutBuffer+0x2e6>
 8008840:	0800d3f0 	.word	0x0800d3f0
 8008844:	0800d3f8 	.word	0x0800d3f8
 8008848:	0800d3fc 	.word	0x0800d3fc
 800884c:	0800d400 	.word	0x0800d400
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d046      	beq.n	80088e6 <aiPrintLayoutBuffer+0x2e2>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d03f      	beq.n	80088e6 <aiPrintLayoutBuffer+0x2e2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d03a      	beq.n	80088e6 <aiPrintLayoutBuffer+0x2e2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <aiPrintLayoutBuffer+0x28a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <aiPrintLayoutBuffer+0x28a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	e000      	b.n	8008890 <aiPrintLayoutBuffer+0x28c>
 800888e:	2300      	movs	r3, #0
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d027      	beq.n	80088e6 <aiPrintLayoutBuffer+0x2e2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <aiPrintLayoutBuffer+0x2b0>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <aiPrintLayoutBuffer+0x2b0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	e000      	b.n	80088b6 <aiPrintLayoutBuffer+0x2b2>
 80088b4:	2300      	movs	r3, #0
 80088b6:	885b      	ldrh	r3, [r3, #2]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d014      	beq.n	80088e6 <aiPrintLayoutBuffer+0x2e2>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <aiPrintLayoutBuffer+0x2d6>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <aiPrintLayoutBuffer+0x2d6>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	e000      	b.n	80088dc <aiPrintLayoutBuffer+0x2d8>
 80088da:	2300      	movs	r3, #0
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f993 3000 	ldrsb.w	r3, [r3]
 80088e4:	e001      	b.n	80088ea <aiPrintLayoutBuffer+0x2e6>
 80088e6:	2300      	movs	r3, #0
 80088e8:	e001      	b.n	80088ee <aiPrintLayoutBuffer+0x2ea>
 80088ea:	e000      	b.n	80088ee <aiPrintLayoutBuffer+0x2ea>
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
      printf(" scale=%f, zero=%d,", scale, zero_point);
 80088f0:	69b8      	ldr	r0, [r7, #24]
 80088f2:	f7f7 fe2d 	bl	8000550 <__aeabi_f2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	6979      	ldr	r1, [r7, #20]
 80088fc:	9100      	str	r1, [sp, #0]
 80088fe:	4833      	ldr	r0, [pc, #204]	@ (80089cc <aiPrintLayoutBuffer+0x3c8>)
 8008900:	f003 face 	bl	800bea0 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8008904:	e02d      	b.n	8008962 <aiPrintLayoutBuffer+0x35e>
    } else {
      printf("Q%d.%d,",
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	11db      	asrs	r3, r3, #7
 800890c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800891a:	f1a3 0140 	sub.w	r1, r3, #64	@ 0x40
              (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	15db      	asrs	r3, r3, #23
 8008924:	f003 0301 	and.w	r3, r3, #1
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8008928:	440b      	add	r3, r1
      printf("Q%d.%d,",
 800892a:	1ad1      	subs	r1, r2, r3
              AI_BUFFER_FMT_GET_FBITS(buffer->format));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      printf("Q%d.%d,",
 8008936:	3b40      	subs	r3, #64	@ 0x40
 8008938:	461a      	mov	r2, r3
 800893a:	4825      	ldr	r0, [pc, #148]	@ (80089d0 <aiPrintLayoutBuffer+0x3cc>)
 800893c:	f003 fab0 	bl	800bea0 <iprintf>
 8008940:	e00f      	b.n	8008962 <aiPrintLayoutBuffer+0x35e>
    }
  }
  else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d109      	bne.n	800895c <aiPrintLayoutBuffer+0x358>
    printf(" float%d,",
        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	11db      	asrs	r3, r3, #7
    printf(" float%d,",
 800894e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008952:	4619      	mov	r1, r3
 8008954:	481f      	ldr	r0, [pc, #124]	@ (80089d4 <aiPrintLayoutBuffer+0x3d0>)
 8008956:	f003 faa3 	bl	800bea0 <iprintf>
 800895a:	e002      	b.n	8008962 <aiPrintLayoutBuffer+0x35e>
  else
    printf("NONE");
 800895c:	481e      	ldr	r0, [pc, #120]	@ (80089d8 <aiPrintLayoutBuffer+0x3d4>)
 800895e:	f003 fa9f 	bl	800bea0 <iprintf>
  printf(" %d bytes, shape=(%d,%d,%d)",
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	891b      	ldrh	r3, [r3, #8]
 8008966:	461a      	mov	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	88db      	ldrh	r3, [r3, #6]
 800896c:	fb02 f303 	mul.w	r3, r2, r3
 8008970:	461a      	mov	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	fb02 f303 	mul.w	r3, r2, r3
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	11d2      	asrs	r2, r2, #7
 8008980:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008984:	fb02 f303 	mul.w	r3, r2, r3
 8008988:	3304      	adds	r3, #4
 800898a:	08db      	lsrs	r3, r3, #3
  printf(" %d bytes, shape=(%d,%d,%d)",
 800898c:	4619      	mov	r1, r3
      buffer->height, buffer->width, (int)buffer->channels);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	88db      	ldrh	r3, [r3, #6]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8008992:	461a      	mov	r2, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	891b      	ldrh	r3, [r3, #8]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8008998:	4618      	mov	r0, r3
      buffer->height, buffer->width, (int)buffer->channels);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
  printf(" %d bytes, shape=(%d,%d,%d)",
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	4603      	mov	r3, r0
 80089a2:	480e      	ldr	r0, [pc, #56]	@ (80089dc <aiPrintLayoutBuffer+0x3d8>)
 80089a4:	f003 fa7c 	bl	800bea0 <iprintf>
  if (buffer->data)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <aiPrintLayoutBuffer+0x3ba>
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	4619      	mov	r1, r3
 80089b6:	480a      	ldr	r0, [pc, #40]	@ (80089e0 <aiPrintLayoutBuffer+0x3dc>)
 80089b8:	f003 fa72 	bl	800bea0 <iprintf>
  else
    printf(" (USER domain)\r\n");
}
 80089bc:	e002      	b.n	80089c4 <aiPrintLayoutBuffer+0x3c0>
    printf(" (USER domain)\r\n");
 80089be:	4809      	ldr	r0, [pc, #36]	@ (80089e4 <aiPrintLayoutBuffer+0x3e0>)
 80089c0:	f003 fade 	bl	800bf80 <puts>
}
 80089c4:	bf00      	nop
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	0800d408 	.word	0x0800d408
 80089d0:	0800d41c 	.word	0x0800d41c
 80089d4:	0800d424 	.word	0x0800d424
 80089d8:	0800d430 	.word	0x0800d430
 80089dc:	0800d438 	.word	0x0800d438
 80089e0:	0800d454 	.word	0x0800d454
 80089e4:	0800d464 	.word	0x0800d464

080089e8 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  int i;
  printf("Network informations...\r\n");
 80089f0:	485c      	ldr	r0, [pc, #368]	@ (8008b64 <aiPrintNetworkInfo+0x17c>)
 80089f2:	f003 fac5 	bl	800bf80 <puts>
  printf(" model name         : %s\r\n", report->model_name);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4619      	mov	r1, r3
 80089fc:	485a      	ldr	r0, [pc, #360]	@ (8008b68 <aiPrintNetworkInfo+0x180>)
 80089fe:	f003 fa4f 	bl	800bea0 <iprintf>
  printf(" model signature    : %s\r\n", report->model_signature);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	4619      	mov	r1, r3
 8008a08:	4858      	ldr	r0, [pc, #352]	@ (8008b6c <aiPrintNetworkInfo+0x184>)
 8008a0a:	f003 fa49 	bl	800bea0 <iprintf>
  printf(" model datetime     : %s\r\n", report->model_datetime);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	4619      	mov	r1, r3
 8008a14:	4856      	ldr	r0, [pc, #344]	@ (8008b70 <aiPrintNetworkInfo+0x188>)
 8008a16:	f003 fa43 	bl	800bea0 <iprintf>
  printf(" compile datetime   : %s\r\n", report->compile_datetime);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4854      	ldr	r0, [pc, #336]	@ (8008b74 <aiPrintNetworkInfo+0x18c>)
 8008a22:	f003 fa3d 	bl	800bea0 <iprintf>
  printf(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7d1b      	ldrb	r3, [r3, #20]
  printf(" runtime version    : %d.%d.%d\r\n",
 8008a2a:	4619      	mov	r1, r3
      report->runtime_version.minor,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7d5b      	ldrb	r3, [r3, #21]
  printf(" runtime version    : %d.%d.%d\r\n",
 8008a30:	461a      	mov	r2, r3
      report->runtime_version.micro);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7d9b      	ldrb	r3, [r3, #22]
  printf(" runtime version    : %d.%d.%d\r\n",
 8008a36:	4850      	ldr	r0, [pc, #320]	@ (8008b78 <aiPrintNetworkInfo+0x190>)
 8008a38:	f003 fa32 	bl	800bea0 <iprintf>
  if (report->tool_revision[0])
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00c      	beq.n	8008a60 <aiPrintNetworkInfo+0x78>
    printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <aiPrintNetworkInfo+0x6e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	e000      	b.n	8008a58 <aiPrintNetworkInfo+0x70>
 8008a56:	4b49      	ldr	r3, [pc, #292]	@ (8008b7c <aiPrintNetworkInfo+0x194>)
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4849      	ldr	r0, [pc, #292]	@ (8008b80 <aiPrintNetworkInfo+0x198>)
 8008a5c:	f003 fa20 	bl	800bea0 <iprintf>
  printf(" tools version      : %d.%d.%d\r\n",
      report->tool_version.major,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7f1b      	ldrb	r3, [r3, #28]
  printf(" tools version      : %d.%d.%d\r\n",
 8008a64:	4619      	mov	r1, r3
      report->tool_version.minor,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	7f5b      	ldrb	r3, [r3, #29]
  printf(" tools version      : %d.%d.%d\r\n",
 8008a6a:	461a      	mov	r2, r3
      report->tool_version.micro);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7f9b      	ldrb	r3, [r3, #30]
  printf(" tools version      : %d.%d.%d\r\n",
 8008a70:	4844      	ldr	r0, [pc, #272]	@ (8008b84 <aiPrintNetworkInfo+0x19c>)
 8008a72:	f003 fa15 	bl	800bea0 <iprintf>
  printf(" complexity         : %d MACC\r\n", (int)report->n_macc);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4842      	ldr	r0, [pc, #264]	@ (8008b88 <aiPrintNetworkInfo+0x1a0>)
 8008a7e:	f003 fa0f 	bl	800bea0 <iprintf>
  printf(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a86:	4619      	mov	r1, r3
 8008a88:	4840      	ldr	r0, [pc, #256]	@ (8008b8c <aiPrintNetworkInfo+0x1a4>)
 8008a8a:	f003 fa09 	bl	800bea0 <iprintf>
  printf(" activations        : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a94:	461a      	mov	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8008a9c:	fb02 f303 	mul.w	r3, r2, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa6:	fb02 f303 	mul.w	r3, r2, r3
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8008aaa:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4837      	ldr	r0, [pc, #220]	@ (8008b90 <aiPrintNetworkInfo+0x1a8>)
 8008ab4:	f003 f9f4 	bl	800bea0 <iprintf>
  printf(" weights            : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8008ad4:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8008ada:	461a      	mov	r2, r3
 8008adc:	482d      	ldr	r0, [pc, #180]	@ (8008b94 <aiPrintNetworkInfo+0x1ac>)
 8008ade:	f003 f9df 	bl	800bea0 <iprintf>
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008ae6:	4619      	mov	r1, r3
      report->n_outputs);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8008aec:	461a      	mov	r2, r3
 8008aee:	482a      	ldr	r0, [pc, #168]	@ (8008b98 <aiPrintNetworkInfo+0x1b0>)
 8008af0:	f003 f9d6 	bl	800bea0 <iprintf>
  for (i=0; i<report->n_inputs; i++)
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e00f      	b.n	8008b1a <aiPrintNetworkInfo+0x132>
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	4613      	mov	r3, r2
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	4413      	add	r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	440b      	add	r3, r1
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	68f9      	ldr	r1, [r7, #12]
 8008b0e:	4823      	ldr	r0, [pc, #140]	@ (8008b9c <aiPrintNetworkInfo+0x1b4>)
 8008b10:	f7ff fd78 	bl	8008604 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_inputs; i++)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	dbe9      	blt.n	8008afa <aiPrintNetworkInfo+0x112>
  for (i=0; i<report->n_outputs; i++)
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	e00f      	b.n	8008b4c <aiPrintNetworkInfo+0x164>
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4613      	mov	r3, r2
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	4413      	add	r3, r2
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	440b      	add	r3, r1
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	4817      	ldr	r0, [pc, #92]	@ (8008ba0 <aiPrintNetworkInfo+0x1b8>)
 8008b42:	f7ff fd5f 	bl	8008604 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_outputs; i++)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b50:	461a      	mov	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	dbe9      	blt.n	8008b2c <aiPrintNetworkInfo+0x144>
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	0800d474 	.word	0x0800d474
 8008b68:	0800d490 	.word	0x0800d490
 8008b6c:	0800d4ac 	.word	0x0800d4ac
 8008b70:	0800d4c8 	.word	0x0800d4c8
 8008b74:	0800d4e4 	.word	0x0800d4e4
 8008b78:	0800d500 	.word	0x0800d500
 8008b7c:	0800d524 	.word	0x0800d524
 8008b80:	0800d528 	.word	0x0800d528
 8008b84:	0800d544 	.word	0x0800d544
 8008b88:	0800d568 	.word	0x0800d568
 8008b8c:	0800d588 	.word	0x0800d588
 8008b90:	0800d5a4 	.word	0x0800d5a4
 8008b94:	0800d5d0 	.word	0x0800d5d0
 8008b98:	0800d5fc 	.word	0x0800d5fc
 8008b9c:	0800d61c 	.word	0x0800d61c
 8008ba0:	0800d620 	.word	0x0800d620

08008ba4 <dwtReset>:
__STATIC_INLINE void dwtReset(void) {
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8008ba8:	4b03      	ldr	r3, [pc, #12]	@ (8008bb8 <dwtReset+0x14>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	605a      	str	r2, [r3, #4]
}
 8008bae:	bf00      	nop
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	e0001000 	.word	0xe0001000

08008bbc <dwtGetCycles>:
__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8008bc0:	4b03      	ldr	r3, [pc, #12]	@ (8008bd0 <dwtGetCycles+0x14>)
 8008bc2:	685b      	ldr	r3, [r3, #4]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	e0001000 	.word	0xe0001000

08008bd4 <ioRawGetUint8>:
extern UART_HandleTypeDef UartHandle;

static bool _ioWriteAllowed = true;

int ioRawGetUint8(uint8_t *c, uint32_t timeout)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  if (!c)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <ioRawGetUint8+0x16>
    return -1;
 8008be4:	f04f 33ff 	mov.w	r3, #4294967295
 8008be8:	e013      	b.n	8008c12 <ioRawGetUint8+0x3e>

  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1,
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2201      	movs	r2, #1
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	480a      	ldr	r0, [pc, #40]	@ (8008c1c <ioRawGetUint8+0x48>)
 8008bf2:	f7fd fc2e 	bl	8006452 <HAL_UART_Receive>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73fb      	strb	r3, [r7, #15]
      timeout);

  if (status == HAL_TIMEOUT)
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d102      	bne.n	8008c06 <ioRawGetUint8+0x32>
    return -1;
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	e005      	b.n	8008c12 <ioRawGetUint8+0x3e>

  return (status == HAL_OK ? 1 : 0);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2301      	moveq	r3, #1
 8008c0e:	2300      	movne	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000690 	.word	0x20000690

08008c20 <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da0d      	bge.n	8008c4e <_write+0x2e>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d00a      	beq.n	8008c4e <_write+0x2e>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d007      	beq.n	8008c4e <_write+0x2e>
    errno = EBADF;
 8008c3e:	f003 faef 	bl	800c220 <__errno>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2209      	movs	r2, #9
 8008c46:	601a      	str	r2, [r3, #0]
    return -1;
 8008c48:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4c:	e016      	b.n	8008c7c <_write+0x5c>
  }

  if (_ioWriteAllowed)
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <_write+0x64>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <_write+0x4c>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	4809      	ldr	r0, [pc, #36]	@ (8008c88 <_write+0x68>)
 8008c62:	f7fd fb58 	bl	8006316 <HAL_UART_Transmit>
 8008c66:	4603      	mov	r3, r0
 8008c68:	75fb      	strb	r3, [r7, #23]
 8008c6a:	e001      	b.n	8008c70 <_write+0x50>
        HAL_MAX_DELAY);
  else
    status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75fb      	strb	r3, [r7, #23]

  return (status == HAL_OK ? count : 0);
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <_write+0x5a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	e000      	b.n	8008c7c <_write+0x5c>
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20000018 	.word	0x20000018
 8008c88:	20000690 	.word	0x20000690

08008c8c <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  memset(&io_stack, 0, sizeof(struct io_stack));
 8008c98:	2220      	movs	r2, #32
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4822      	ldr	r0, [pc, #136]	@ (8008d28 <stackMonInit+0x9c>)
 8008c9e:	f003 fa4f 	bl	800c140 <memset>

  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
 8008ca2:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <stackMonInit+0x9c>)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6013      	str	r3, [r2, #0]
  io_stack.cstack = cstack;
 8008ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8008d28 <stackMonInit+0x9c>)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	6193      	str	r3, [r2, #24]

#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  io_stack.estack = (uint32_t)_estack;
 8008cae:	4a1f      	ldr	r2, [pc, #124]	@ (8008d2c <stackMonInit+0xa0>)
 8008cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d28 <stackMonInit+0x9c>)
 8008cb2:	611a      	str	r2, [r3, #16]
  io_stack.bstack = io_stack.estack - msize;
 8008cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d28 <stackMonInit+0x9c>)
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8008d28 <stackMonInit+0x9c>)
 8008cbe:	61d3      	str	r3, [r2, #28]
  io_stack.mstack_size = msize;
 8008cc0:	4a19      	ldr	r2, [pc, #100]	@ (8008d28 <stackMonInit+0x9c>)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6153      	str	r3, [r2, #20]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8008cc6:	4b18      	ldr	r3, [pc, #96]	@ (8008d28 <stackMonInit+0x9c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d006      	beq.n	8008ce0 <stackMonInit+0x54>
    printf("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8008cd2:	4817      	ldr	r0, [pc, #92]	@ (8008d30 <stackMonInit+0xa4>)
 8008cd4:	f003 f954 	bl	800bf80 <puts>
    io_stack.stack_mon = false;
 8008cd8:	4b13      	ldr	r3, [pc, #76]	@ (8008d28 <stackMonInit+0x9c>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	711a      	strb	r2, [r3, #4]
 8008cde:	e002      	b.n	8008ce6 <stackMonInit+0x5a>
  } else
    io_stack.stack_mon = true;
 8008ce0:	4b11      	ldr	r3, [pc, #68]	@ (8008d28 <stackMonInit+0x9c>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	711a      	strb	r2, [r3, #4]

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8008ce6:	4b10      	ldr	r3, [pc, #64]	@ (8008d28 <stackMonInit+0x9c>)
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <stackMonInit+0x9c>)
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8008d28 <stackMonInit+0x9c>)
 8008cf2:	60d3      	str	r3, [r2, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d28 <stackMonInit+0x9c>)
 8008cf6:	791b      	ldrb	r3, [r3, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <stackMonInit+0x94>
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <stackMonInit+0x9c>)
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	4b09      	ldr	r3, [pc, #36]	@ (8008d28 <stackMonInit+0x9c>)
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d90b      	bls.n	8008d20 <stackMonInit+0x94>
    printf("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8008d08:	4b07      	ldr	r3, [pc, #28]	@ (8008d28 <stackMonInit+0x9c>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	4619      	mov	r1, r3
        (int)io_stack.mstack_size);
 8008d0e:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <stackMonInit+0x9c>)
 8008d10:	695b      	ldr	r3, [r3, #20]
    printf("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8008d12:	461a      	mov	r2, r3
 8008d14:	4807      	ldr	r0, [pc, #28]	@ (8008d34 <stackMonInit+0xa8>)
 8008d16:	f003 f8c3 	bl	800bea0 <iprintf>
    io_stack.stack_mon = false;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	@ (8008d28 <stackMonInit+0x9c>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	711a      	strb	r2, [r3, #4]
  }
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000874 	.word	0x20000874
 8008d2c:	200c0000 	.word	0x200c0000
 8008d30:	0800d624 	.word	0x0800d624
 8008d34:	0800d664 	.word	0x0800d664

08008d38 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

__STATIC_INLINE void crcIpInit(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d78 <crcIpInit+0x40>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <crcIpInit+0x1a>
    printf("W: CRC IP clock is NOT enabled\r\n");
 8008d4c:	480b      	ldr	r0, [pc, #44]	@ (8008d7c <crcIpInit+0x44>)
 8008d4e:	f003 f917 	bl	800bf80 <puts>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8008d52:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <crcIpInit+0x40>)
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d58:	4a07      	ldr	r2, [pc, #28]	@ (8008d78 <crcIpInit+0x40>)
 8008d5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8008d62:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <crcIpInit+0x40>)
 8008d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d6c:	607b      	str	r3, [r7, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
#endif
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	46020c00 	.word	0x46020c00
 8008d7c:	0800d68c 	.word	0x0800d68c

08008d80 <dwtIpInit>:

void dwtIpInit(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008d84:	4b0a      	ldr	r3, [pc, #40]	@ (8008db0 <dwtIpInit+0x30>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	4a09      	ldr	r2, [pc, #36]	@ (8008db0 <dwtIpInit+0x30>)
 8008d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d8e:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8008d90:	4b08      	ldr	r3, [pc, #32]	@ (8008db4 <dwtIpInit+0x34>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8008d96:	4b07      	ldr	r3, [pc, #28]	@ (8008db4 <dwtIpInit+0x34>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a06      	ldr	r2, [pc, #24]	@ (8008db4 <dwtIpInit+0x34>)
 8008d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da0:	f043 0301 	orr.w	r3, r3, #1
 8008da4:	6013      	str	r3, [r2, #0]

}
 8008da6:	bf00      	nop
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	e000edf0 	.word	0xe000edf0
 8008db4:	e0001000 	.word	0xe0001000

08008db8 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
#if defined(STM32MP1)
  return HAL_RCC_GetSystemCoreClockFreq();
#elif !defined(STM32H7)
  return HAL_RCC_GetHCLKFreq();
 8008dbc:	f7fa fc60 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 8008dc0:	4603      	mov	r3, r0
#else
  return HAL_RCC_GetSysClockFreq();
#endif
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <dwtCyclesToTime>:

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8008dc6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dca:	b0ae      	sub	sp, #184	@ 0xb8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	e9c7 0124 	strd	r0, r1, [r7, #144]	@ 0x90
 8008dd2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
  if (!t)
 8008dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <dwtCyclesToTime+0x1e>
    return -1;
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295
 8008de2:	e193      	b.n	800910c <dwtCyclesToTime+0x346>
  uint32_t fcpu = systemCoreClock();
 8008de4:	f7ff ffe8 	bl	8008db8 <systemCoreClock>
 8008de8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
  uint64_t s  = clks / fcpu;
 8008dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008df0:	2200      	movs	r2, #0
 8008df2:	461c      	mov	r4, r3
 8008df4:	4615      	mov	r5, r2
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8008dfe:	f7f7 fd0d 	bl	800081c <__aeabi_uldivmod>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
  uint64_t ms = (clks * 1000) / fcpu;
 8008e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e0e:	4622      	mov	r2, r4
 8008e10:	462b      	mov	r3, r5
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f04f 0100 	mov.w	r1, #0
 8008e1a:	0159      	lsls	r1, r3, #5
 8008e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e20:	0150      	lsls	r0, r2, #5
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	ebb2 0804 	subs.w	r8, r2, r4
 8008e2a:	eb63 0905 	sbc.w	r9, r3, r5
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8008e3a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8008e3e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8008e42:	4690      	mov	r8, r2
 8008e44:	4699      	mov	r9, r3
 8008e46:	eb18 0304 	adds.w	r3, r8, r4
 8008e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e4c:	eb49 0305 	adc.w	r3, r9, r5
 8008e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008e5e:	4629      	mov	r1, r5
 8008e60:	00cb      	lsls	r3, r1, #3
 8008e62:	4621      	mov	r1, r4
 8008e64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e68:	4621      	mov	r1, r4
 8008e6a:	00ca      	lsls	r2, r1, #3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e7a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008e7e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008e82:	f7f7 fccb 	bl	800081c <__aeabi_uldivmod>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8008e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e92:	4622      	mov	r2, r4
 8008e94:	462b      	mov	r3, r5
 8008e96:	f04f 0000 	mov.w	r0, #0
 8008e9a:	f04f 0100 	mov.w	r1, #0
 8008e9e:	0159      	lsls	r1, r3, #5
 8008ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ea4:	0150      	lsls	r0, r2, #5
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	ebb2 0a04 	subs.w	sl, r2, r4
 8008eae:	eb63 0b05 	sbc.w	fp, r3, r5
 8008eb2:	f04f 0200 	mov.w	r2, #0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8008ebe:	ea43 53da 	orr.w	r3, r3, sl, lsr #23
 8008ec2:	ea4f 224a 	mov.w	r2, sl, lsl #9
 8008ec6:	4692      	mov	sl, r2
 8008ec8:	469b      	mov	fp, r3
 8008eca:	eb1a 0304 	adds.w	r3, sl, r4
 8008ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ed0:	eb4b 0305 	adc.w	r3, fp, r5
 8008ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	018b      	lsls	r3, r1, #6
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008eec:	4641      	mov	r1, r8
 8008eee:	018a      	lsls	r2, r1, #6
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	1a51      	subs	r1, r2, r1
 8008ef4:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	eb63 0301 	sbc.w	r3, r3, r1
 8008efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008efe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f02:	460b      	mov	r3, r1
 8008f04:	191b      	adds	r3, r3, r4
 8008f06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f08:	4613      	mov	r3, r2
 8008f0a:	eb45 0303 	adc.w	r3, r5, r3
 8008f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f14:	2200      	movs	r2, #0
 8008f16:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f18:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008f1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8008f22:	f7f7 fc7b 	bl	800081c <__aeabi_uldivmod>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  ms -= (s * 1000);
 8008f2e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	f04f 0000 	mov.w	r0, #0
 8008f3a:	f04f 0100 	mov.w	r1, #0
 8008f3e:	0159      	lsls	r1, r3, #5
 8008f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f44:	0150      	lsls	r0, r2, #5
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	1b11      	subs	r1, r2, r4
 8008f4c:	6439      	str	r1, [r7, #64]	@ 0x40
 8008f4e:	eb63 0305 	sbc.w	r3, r3, r5
 8008f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008f60:	4649      	mov	r1, r9
 8008f62:	008b      	lsls	r3, r1, #2
 8008f64:	4641      	mov	r1, r8
 8008f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f6a:	4641      	mov	r1, r8
 8008f6c:	008a      	lsls	r2, r1, #2
 8008f6e:	4611      	mov	r1, r2
 8008f70:	461a      	mov	r2, r3
 8008f72:	460b      	mov	r3, r1
 8008f74:	191b      	adds	r3, r3, r4
 8008f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f78:	4613      	mov	r3, r2
 8008f7a:	eb45 0303 	adc.w	r3, r5, r3
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	00cb      	lsls	r3, r1, #3
 8008f90:	4621      	mov	r1, r4
 8008f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f96:	4621      	mov	r1, r4
 8008f98:	00ca      	lsls	r2, r1, #3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8008fa2:	1a14      	subs	r4, r2, r0
 8008fa4:	633c      	str	r4, [r7, #48]	@ 0x30
 8008fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8008faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fac:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8008fb0:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  us -= (ms * 1000 + s * 1000000);
 8008fb4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	f04f 0000 	mov.w	r0, #0
 8008fc0:	f04f 0100 	mov.w	r1, #0
 8008fc4:	0159      	lsls	r1, r3, #5
 8008fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fca:	0150      	lsls	r0, r2, #5
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	1b11      	subs	r1, r2, r4
 8008fd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008fd4:	eb63 0305 	sbc.w	r3, r3, r5
 8008fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fda:	f04f 0200 	mov.w	r2, #0
 8008fde:	f04f 0300 	mov.w	r3, #0
 8008fe2:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	008b      	lsls	r3, r1, #2
 8008fea:	4641      	mov	r1, r8
 8008fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	008a      	lsls	r2, r1, #2
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	191b      	adds	r3, r3, r4
 8008ffc:	623b      	str	r3, [r7, #32]
 8008ffe:	4613      	mov	r3, r2
 8009000:	eb45 0303 	adc.w	r3, r5, r3
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009012:	4629      	mov	r1, r5
 8009014:	00cb      	lsls	r3, r1, #3
 8009016:	4621      	mov	r1, r4
 8009018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800901c:	4621      	mov	r1, r4
 800901e:	00ca      	lsls	r2, r1, #3
 8009020:	4690      	mov	r8, r2
 8009022:	4699      	mov	r9, r3
 8009024:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8009028:	4622      	mov	r2, r4
 800902a:	462b      	mov	r3, r5
 800902c:	f04f 0000 	mov.w	r0, #0
 8009030:	f04f 0100 	mov.w	r1, #0
 8009034:	0159      	lsls	r1, r3, #5
 8009036:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800903a:	0150      	lsls	r0, r2, #5
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	1b11      	subs	r1, r2, r4
 8009042:	61b9      	str	r1, [r7, #24]
 8009044:	eb63 0305 	sbc.w	r3, r3, r5
 8009048:	61fb      	str	r3, [r7, #28]
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009056:	4659      	mov	r1, fp
 8009058:	024b      	lsls	r3, r1, #9
 800905a:	4651      	mov	r1, sl
 800905c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009060:	4651      	mov	r1, sl
 8009062:	024a      	lsls	r2, r1, #9
 8009064:	4611      	mov	r1, r2
 8009066:	461a      	mov	r2, r3
 8009068:	460b      	mov	r3, r1
 800906a:	191b      	adds	r3, r3, r4
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	4613      	mov	r3, r2
 8009070:	eb45 0303 	adc.w	r3, r5, r3
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	f04f 0300 	mov.w	r3, #0
 800907e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009082:	4659      	mov	r1, fp
 8009084:	018b      	lsls	r3, r1, #6
 8009086:	4651      	mov	r1, sl
 8009088:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800908c:	4651      	mov	r1, sl
 800908e:	018a      	lsls	r2, r1, #6
 8009090:	4651      	mov	r1, sl
 8009092:	1a51      	subs	r1, r2, r1
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	4659      	mov	r1, fp
 8009098:	eb63 0301 	sbc.w	r3, r3, r1
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090a2:	460b      	mov	r3, r1
 80090a4:	191b      	adds	r3, r3, r4
 80090a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090a8:	4613      	mov	r3, r2
 80090aa:	eb45 0303 	adc.w	r3, r5, r3
 80090ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80090b4:	460b      	mov	r3, r1
 80090b6:	eb18 0303 	adds.w	r3, r8, r3
 80090ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80090bc:	4613      	mov	r3, r2
 80090be:	eb49 0303 	adc.w	r3, r9, r3
 80090c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80090c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80090c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80090cc:	4621      	mov	r1, r4
 80090ce:	1a51      	subs	r1, r2, r1
 80090d0:	6039      	str	r1, [r7, #0]
 80090d2:	4629      	mov	r1, r5
 80090d4:	eb63 0301 	sbc.w	r3, r3, r1
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80090de:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
  t->fcpu = fcpu;
 80090e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090ea:	601a      	str	r2, [r3, #0]
  t->s = s;
 80090ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090f4:	605a      	str	r2, [r3, #4]
  t->ms = ms;
 80090f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80090fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090fe:	609a      	str	r2, [r3, #8]
  t->us = us;
 8009100:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009108:	60da      	str	r2, [r3, #12]
  return 0;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	37b8      	adds	r7, #184	@ 0xb8
 8009110:	46bd      	mov	sp, r7
 8009112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009118 <devIdToStr>:
  res = ((float)clks * (float)1000.0) / fcpu;
  return res;
}

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	80fb      	strh	r3, [r7, #6]
  /* DEV_ID field from DBGMCU register */
  const char *str;
  switch (dev_id) {
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	f2a3 4315 	subw	r3, r3, #1045	@ 0x415
 8009128:	2b5d      	cmp	r3, #93	@ 0x5d
 800912a:	f200 80e9 	bhi.w	8009300 <devIdToStr+0x1e8>
 800912e:	a201      	add	r2, pc, #4	@ (adr r2, 8009134 <devIdToStr+0x1c>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	080092dd 	.word	0x080092dd
 8009138:	08009301 	.word	0x08009301
 800913c:	08009301 	.word	0x08009301
 8009140:	08009301 	.word	0x08009301
 8009144:	08009301 	.word	0x08009301
 8009148:	08009301 	.word	0x08009301
 800914c:	08009301 	.word	0x08009301
 8009150:	08009301 	.word	0x08009301
 8009154:	08009301 	.word	0x08009301
 8009158:	08009301 	.word	0x08009301
 800915c:	08009301 	.word	0x08009301
 8009160:	08009301 	.word	0x08009301
 8009164:	08009301 	.word	0x08009301
 8009168:	080092ad 	.word	0x080092ad
 800916c:	080092c5 	.word	0x080092c5
 8009170:	08009301 	.word	0x08009301
 8009174:	08009301 	.word	0x08009301
 8009178:	08009301 	.word	0x08009301
 800917c:	08009301 	.word	0x08009301
 8009180:	08009301 	.word	0x08009301
 8009184:	08009301 	.word	0x08009301
 8009188:	08009301 	.word	0x08009301
 800918c:	08009301 	.word	0x08009301
 8009190:	08009301 	.word	0x08009301
 8009194:	08009301 	.word	0x08009301
 8009198:	08009301 	.word	0x08009301
 800919c:	08009301 	.word	0x08009301
 80091a0:	08009301 	.word	0x08009301
 80091a4:	080092bf 	.word	0x080092bf
 80091a8:	08009301 	.word	0x08009301
 80091ac:	080092cb 	.word	0x080092cb
 80091b0:	08009301 	.word	0x08009301
 80091b4:	080092d1 	.word	0x080092d1
 80091b8:	08009301 	.word	0x08009301
 80091bc:	08009301 	.word	0x08009301
 80091c0:	080092b3 	.word	0x080092b3
 80091c4:	08009301 	.word	0x08009301
 80091c8:	08009301 	.word	0x08009301
 80091cc:	08009301 	.word	0x08009301
 80091d0:	08009301 	.word	0x08009301
 80091d4:	08009301 	.word	0x08009301
 80091d8:	08009301 	.word	0x08009301
 80091dc:	08009301 	.word	0x08009301
 80091e0:	08009301 	.word	0x08009301
 80091e4:	08009301 	.word	0x08009301
 80091e8:	08009301 	.word	0x08009301
 80091ec:	08009301 	.word	0x08009301
 80091f0:	08009301 	.word	0x08009301
 80091f4:	08009301 	.word	0x08009301
 80091f8:	080092b9 	.word	0x080092b9
 80091fc:	08009301 	.word	0x08009301
 8009200:	08009301 	.word	0x08009301
 8009204:	080092ef 	.word	0x080092ef
 8009208:	08009301 	.word	0x08009301
 800920c:	08009301 	.word	0x08009301
 8009210:	08009301 	.word	0x08009301
 8009214:	08009301 	.word	0x08009301
 8009218:	08009301 	.word	0x08009301
 800921c:	08009301 	.word	0x08009301
 8009220:	080092f5 	.word	0x080092f5
 8009224:	080092fb 	.word	0x080092fb
 8009228:	08009301 	.word	0x08009301
 800922c:	08009301 	.word	0x08009301
 8009230:	08009301 	.word	0x08009301
 8009234:	08009301 	.word	0x08009301
 8009238:	08009301 	.word	0x08009301
 800923c:	08009301 	.word	0x08009301
 8009240:	08009301 	.word	0x08009301
 8009244:	08009301 	.word	0x08009301
 8009248:	08009301 	.word	0x08009301
 800924c:	08009301 	.word	0x08009301
 8009250:	08009301 	.word	0x08009301
 8009254:	08009301 	.word	0x08009301
 8009258:	08009301 	.word	0x08009301
 800925c:	08009301 	.word	0x08009301
 8009260:	08009301 	.word	0x08009301
 8009264:	08009301 	.word	0x08009301
 8009268:	080092d7 	.word	0x080092d7
 800926c:	08009301 	.word	0x08009301
 8009270:	08009301 	.word	0x08009301
 8009274:	08009301 	.word	0x08009301
 8009278:	08009301 	.word	0x08009301
 800927c:	08009301 	.word	0x08009301
 8009280:	08009301 	.word	0x08009301
 8009284:	08009301 	.word	0x08009301
 8009288:	08009301 	.word	0x08009301
 800928c:	08009301 	.word	0x08009301
 8009290:	08009301 	.word	0x08009301
 8009294:	08009301 	.word	0x08009301
 8009298:	08009301 	.word	0x08009301
 800929c:	08009301 	.word	0x08009301
 80092a0:	080092e3 	.word	0x080092e3
 80092a4:	08009301 	.word	0x08009301
 80092a8:	080092e9 	.word	0x080092e9
  case 0x422: str = "STM32F303xB/C"; break;
 80092ac:	4b19      	ldr	r3, [pc, #100]	@ (8009314 <devIdToStr+0x1fc>)
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e028      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x438: str = "STM32F303x6/8"; break;
 80092b2:	4b19      	ldr	r3, [pc, #100]	@ (8009318 <devIdToStr+0x200>)
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	e025      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x446: str = "STM32F303xD/E"; break;
 80092b8:	4b18      	ldr	r3, [pc, #96]	@ (800931c <devIdToStr+0x204>)
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	e022      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x431: str = "STM32F411xC/E"; break;
 80092be:	4b18      	ldr	r3, [pc, #96]	@ (8009320 <devIdToStr+0x208>)
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	e01f      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x423: str = "STM32F401xB/C"; break;
 80092c4:	4b17      	ldr	r3, [pc, #92]	@ (8009324 <devIdToStr+0x20c>)
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e01c      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x433: str = "STM32F401xD/E"; break;
 80092ca:	4b17      	ldr	r3, [pc, #92]	@ (8009328 <devIdToStr+0x210>)
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e019      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x435: str = "STM32L43xxx"; break;
 80092d0:	4b16      	ldr	r3, [pc, #88]	@ (800932c <devIdToStr+0x214>)
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e016      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x462: str = "STM32L45xxx"; break;
 80092d6:	4b16      	ldr	r3, [pc, #88]	@ (8009330 <devIdToStr+0x218>)
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	e013      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x415: str = "STM32L4x6xx"; break;
 80092dc:	4b15      	ldr	r3, [pc, #84]	@ (8009334 <devIdToStr+0x21c>)
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e010      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x470: str = "STM32L4Rxxx"; break;
 80092e2:	4b15      	ldr	r3, [pc, #84]	@ (8009338 <devIdToStr+0x220>)
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	e00d      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x472: str = "STM32L5[5,6]2xx"; break;
 80092e8:	4b14      	ldr	r3, [pc, #80]	@ (800933c <devIdToStr+0x224>)
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	e00a      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x449: str = "STM32F74xxx"; break;
 80092ee:	4b14      	ldr	r3, [pc, #80]	@ (8009340 <devIdToStr+0x228>)
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e007      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 80092f4:	4b13      	ldr	r3, [pc, #76]	@ (8009344 <devIdToStr+0x22c>)
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	e004      	b.n	8009304 <devIdToStr+0x1ec>
  case 0x451: str = "STM32F7[6,7]xxx"; break; /* see RM0410 */
 80092fa:	4b13      	ldr	r3, [pc, #76]	@ (8009348 <devIdToStr+0x230>)
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e001      	b.n	8009304 <devIdToStr+0x1ec>
  default:    str = "UNKNOWN";
 8009300:	4b12      	ldr	r3, [pc, #72]	@ (800934c <devIdToStr+0x234>)
 8009302:	60fb      	str	r3, [r7, #12]
  }
  return str;
 8009304:	68fb      	ldr	r3, [r7, #12]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	0800d6ac 	.word	0x0800d6ac
 8009318:	0800d6bc 	.word	0x0800d6bc
 800931c:	0800d6cc 	.word	0x0800d6cc
 8009320:	0800d6dc 	.word	0x0800d6dc
 8009324:	0800d6ec 	.word	0x0800d6ec
 8009328:	0800d6fc 	.word	0x0800d6fc
 800932c:	0800d70c 	.word	0x0800d70c
 8009330:	0800d718 	.word	0x0800d718
 8009334:	0800d724 	.word	0x0800d724
 8009338:	0800d730 	.word	0x0800d730
 800933c:	0800d73c 	.word	0x0800d73c
 8009340:	0800d74c 	.word	0x0800d74c
 8009344:	0800d758 	.word	0x0800d758
 8009348:	0800d784 	.word	0x0800d784
 800934c:	0800d794 	.word	0x0800d794

08009350 <bitToStr>:

#if !defined(STM32F3) && !defined(STM32MP1)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  if (val)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <bitToStr+0x12>
    return "True";
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <bitToStr+0x20>)
 8009360:	e000      	b.n	8009364 <bitToStr+0x14>
  else
    return "False";
 8009362:	4b04      	ldr	r3, [pc, #16]	@ (8009374 <bitToStr+0x24>)
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	0800d79c 	.word	0x0800d79c
 8009374:	0800d7a4 	.word	0x0800d7a4

08009378 <systemSettingLog>:
{
  return mconf;
}

void systemSettingLog(void)
{
 8009378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800937c:	b08b      	sub	sp, #44	@ 0x2c
 800937e:	af02      	add	r7, sp, #8
  struct dwtTime t;
  uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
  uint32_t acr = FLASH->ACR ;
 8009380:	4b5d      	ldr	r3, [pc, #372]	@ (80094f8 <systemSettingLog+0x180>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	61fb      	str	r3, [r7, #28]
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  printf("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8009386:	2301      	movs	r3, #1
 8009388:	2203      	movs	r2, #3
 800938a:	210c      	movs	r1, #12
 800938c:	485b      	ldr	r0, [pc, #364]	@ (80094fc <systemSettingLog+0x184>)
 800938e:	f002 fd87 	bl	800bea0 <iprintf>
#endif


  /* Display Device configuration */

  printf("STM32 Runtime configuration...\r\n");
 8009392:	485b      	ldr	r0, [pc, #364]	@ (8009500 <systemSettingLog+0x188>)
 8009394:	f002 fdf4 	bl	800bf80 <puts>

  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
      (int)HAL_GetDEVID(),
 8009398:	f7f8 f978 	bl	800168c <HAL_GetDEVID>
 800939c:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800939e:	4698      	mov	r8, r3
      devIdToStr(HAL_GetDEVID()),
 80093a0:	f7f8 f974 	bl	800168c <HAL_GetDEVID>
 80093a4:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff feb5 	bl	8009118 <devIdToStr>
 80093ae:	4606      	mov	r6, r0
      (int)HAL_GetREVID()
 80093b0:	f7f8 f95e 	bl	8001670 <HAL_GetREVID>
 80093b4:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80093b6:	4632      	mov	r2, r6
 80093b8:	4641      	mov	r1, r8
 80093ba:	4852      	ldr	r0, [pc, #328]	@ (8009504 <systemSettingLog+0x18c>)
 80093bc:	f002 fd70 	bl	800bea0 <iprintf>
  );

  printf(" Core Arch.   : M%d - %s %s\r\n",
 80093c0:	4b51      	ldr	r3, [pc, #324]	@ (8009508 <systemSettingLog+0x190>)
 80093c2:	4a52      	ldr	r2, [pc, #328]	@ (800950c <systemSettingLog+0x194>)
 80093c4:	2121      	movs	r1, #33	@ 0x21
 80093c6:	4852      	ldr	r0, [pc, #328]	@ (8009510 <systemSettingLog+0x198>)
 80093c8:	f002 fd6a 	bl	800bea0 <iprintf>
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 80093cc:	4b51      	ldr	r3, [pc, #324]	@ (8009514 <systemSettingLog+0x19c>)
 80093ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80093d2:	601a      	str	r2, [r3, #0]
#endif

  printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 80093d4:	f7f8 f942 	bl	800165c <HAL_GetHalVersion>
 80093d8:	4603      	mov	r3, r0
 80093da:	4619      	mov	r1, r3
 80093dc:	484e      	ldr	r0, [pc, #312]	@ (8009518 <systemSettingLog+0x1a0>)
 80093de:	f002 fd5f 	bl	800bea0 <iprintf>

  val = systemCoreClock()/1000000;
 80093e2:	f7ff fce9 	bl	8008db8 <systemCoreClock>
 80093e6:	4603      	mov	r3, r0
 80093e8:	4a4c      	ldr	r2, [pc, #304]	@ (800951c <systemSettingLog+0x1a4>)
 80093ea:	fba2 2303 	umull	r2, r3, r2, r3
 80093ee:	0c9b      	lsrs	r3, r3, #18
 80093f0:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
  printf(" system clock : %u MHz\r\n", (int)val);
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	4619      	mov	r1, r3
 80093f6:	484a      	ldr	r0, [pc, #296]	@ (8009520 <systemSettingLog+0x1a8>)
 80093f8:	f002 fd52 	bl	800bea0 <iprintf>
      bitToStr(val & SCB_CCR_IC_Msk),
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
 80093fc:	4b45      	ldr	r3, [pc, #276]	@ (8009514 <systemSettingLog+0x19c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009404:	4a43      	ldr	r2, [pc, #268]	@ (8009514 <systemSettingLog+0x19c>)
 8009406:	6013      	str	r3, [r2, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	f003 020f 	and.w	r2, r3, #15
 800940e:	4b41      	ldr	r3, [pc, #260]	@ (8009514 <systemSettingLog+0x19c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4313      	orrs	r3, r2
 8009414:	4a3f      	ldr	r2, [pc, #252]	@ (8009514 <systemSettingLog+0x19c>)
 8009416:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <systemSettingLog+0xb6>
    mconf |= (1 << 8);
 8009422:	4b3c      	ldr	r3, [pc, #240]	@ (8009514 <systemSettingLog+0x19c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800942a:	4a3a      	ldr	r2, [pc, #232]	@ (8009514 <systemSettingLog+0x19c>)
 800942c:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <systemSettingLog+0xcc>
    mconf |= (1 << 9);
 8009438:	4b36      	ldr	r3, [pc, #216]	@ (8009514 <systemSettingLog+0x19c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009440:	4a34      	ldr	r2, [pc, #208]	@ (8009514 <systemSettingLog+0x19c>)
 8009442:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <systemSettingLog+0xe2>
    mconf |= (1 << 10);
 800944e:	4b31      	ldr	r3, [pc, #196]	@ (8009514 <systemSettingLog+0x19c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009456:	4a2f      	ldr	r2, [pc, #188]	@ (8009514 <systemSettingLog+0x19c>)
 8009458:	6013      	str	r3, [r2, #0]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800945a:	69fe      	ldr	r6, [r7, #28]
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	0a1b      	lsrs	r3, r3, #8
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff ff73 	bl	8009350 <bitToStr>
 800946a:	4680      	mov	r8, r0
      bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	0a5b      	lsrs	r3, r3, #9
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ff6b 	bl	8009350 <bitToStr>
 800947a:	4681      	mov	r9, r0
      bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	0a9b      	lsrs	r3, r3, #10
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff ff63 	bl	8009350 <bitToStr>
 800948a:	4602      	mov	r2, r0
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 800948c:	69fb      	ldr	r3, [r7, #28]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	9200      	str	r2, [sp, #0]
 8009496:	464b      	mov	r3, r9
 8009498:	4642      	mov	r2, r8
 800949a:	4631      	mov	r1, r6
 800949c:	4821      	ldr	r0, [pc, #132]	@ (8009524 <systemSettingLog+0x1ac>)
 800949e:	f002 fcff 	bl	800bea0 <iprintf>
  printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

  /* Init CRC and DWT */
  crcIpInit();
 80094a2:	f7ff fc49 	bl	8008d38 <crcIpInit>
  dwtIpInit();
 80094a6:	f7ff fc6b 	bl	8008d80 <dwtIpInit>

  /* Display HAL tick Calibration */
  dwtReset();
 80094aa:	f7ff fb7b 	bl	8008ba4 <dwtReset>
  HAL_Delay(100);
 80094ae:	2064      	movs	r0, #100	@ 0x64
 80094b0:	f7f8 f8b0 	bl	8001614 <HAL_Delay>
  st = dwtGetCycles();
 80094b4:	f7ff fb82 	bl	8008bbc <dwtGetCycles>
 80094b8:	6178      	str	r0, [r7, #20]
  dwtCyclesToTime(st/100, &t);
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009528 <systemSettingLog+0x1b0>)
 80094be:	fba2 2303 	umull	r2, r3, r2, r3
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	2200      	movs	r2, #0
 80094c6:	461c      	mov	r4, r3
 80094c8:	4615      	mov	r5, r2
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	461a      	mov	r2, r3
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7ff fc78 	bl	8008dc6 <dwtCyclesToTime>

  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
      t.s * 100 + t.ms, t.us);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2264      	movs	r2, #100	@ 0x64
 80094da:	fb03 f202 	mul.w	r2, r3, r2
 80094de:	68fb      	ldr	r3, [r7, #12]
  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 80094e0:	4413      	add	r3, r2
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4619      	mov	r1, r3
 80094e6:	4811      	ldr	r0, [pc, #68]	@ (800952c <systemSettingLog+0x1b4>)
 80094e8:	f002 fcda 	bl	800bea0 <iprintf>
}
 80094ec:	bf00      	nop
 80094ee:	3724      	adds	r7, #36	@ 0x24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094f6:	bf00      	nop
 80094f8:	40022000 	.word	0x40022000
 80094fc:	0800d7ac 	.word	0x0800d7ac
 8009500:	0800d7cc 	.word	0x0800d7cc
 8009504:	0800d7ec 	.word	0x0800d7ec
 8009508:	0800d820 	.word	0x0800d820
 800950c:	0800d82c 	.word	0x0800d82c
 8009510:	0800d838 	.word	0x0800d838
 8009514:	200008a0 	.word	0x200008a0
 8009518:	0800d858 	.word	0x0800d858
 800951c:	431bde83 	.word	0x431bde83
 8009520:	0800d874 	.word	0x0800d874
 8009524:	0800d890 	.word	0x0800d890
 8009528:	51eb851f 	.word	0x51eb851f
 800952c:	0800d8d4 	.word	0x0800d8d4

08009530 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 8009534:	f7f7 fc22 	bl	8000d7c <MX_USART1_UART_Init>
    aiSystemPerformanceInit();
 8009538:	f7fe ff44 	bl	80083c4 <aiSystemPerformanceInit>
    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 800953c:	bf00      	nop
 800953e:	bd80      	pop	{r7, pc}

08009540 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
    aiSystemPerformanceProcess();
 8009544:	f7fe ff62 	bl	800840c <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 8009548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800954c:	f7f8 f862 	bl	8001614 <HAL_Delay>
    /* USER CODE BEGIN 4 */
    /* USER CODE END 4 */
}
 8009550:	bf00      	nop
 8009552:	bd80      	pop	{r7, pc}

08009554 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 8009554:	b590      	push	{r4, r7, lr}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01d      	beq.n	80095a0 <ai_mnetwork_is_valid+0x4c>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4618      	mov	r0, r3
 800956a:	f7f6 fe85 	bl	8000278 <strlen>
 800956e:	4604      	mov	r4, r0
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7f6 fe81 	bl	8000278 <strlen>
 8009576:	4603      	mov	r3, r0
 8009578:	429c      	cmp	r4, r3
 800957a:	d111      	bne.n	80095a0 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681c      	ldr	r4, [r3, #0]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4618      	mov	r0, r3
 8009586:	f7f6 fe77 	bl	8000278 <strlen>
 800958a:	4603      	mov	r3, r0
 800958c:	461a      	mov	r2, r3
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4620      	mov	r0, r4
 8009592:	f002 fddd 	bl	800c150 <strncmp>
 8009596:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <ai_mnetwork_is_valid+0x4c>
        return true;
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <ai_mnetwork_is_valid+0x4e>
    return false;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd90      	pop	{r4, r7, pc}
	...

080095ac <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	e026      	b.n	8009608 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <ai_mnetwork_handle+0x2c>
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	4613      	mov	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	4a14      	ldr	r2, [pc, #80]	@ (800961c <ai_mnetwork_handle+0x70>)
 80095cc:	4413      	add	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d101      	bne.n	80095d8 <ai_mnetwork_handle+0x2c>
            return inst;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	e01b      	b.n	8009610 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d111      	bne.n	8009602 <ai_mnetwork_handle+0x56>
 80095de:	490f      	ldr	r1, [pc, #60]	@ (800961c <ai_mnetwork_handle+0x70>)
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4613      	mov	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	440b      	add	r3, r1
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d107      	bne.n	8009602 <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4613      	mov	r3, r2
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	1a9b      	subs	r3, r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4a07      	ldr	r2, [pc, #28]	@ (800961c <ai_mnetwork_handle+0x70>)
 80095fe:	4413      	add	r3, r2
 8009600:	e006      	b.n	8009610 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3301      	adds	r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	ddd5      	ble.n	80095ba <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	200008a4 	.word	0x200008a4

08009620 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	e019      	b.n	8009662 <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d013      	beq.n	800965c <ai_mnetwork_release_handle+0x3c>
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4613      	mov	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	1a9b      	subs	r3, r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	4a0d      	ldr	r2, [pc, #52]	@ (8009674 <ai_mnetwork_release_handle+0x54>)
 8009640:	4413      	add	r3, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d109      	bne.n	800965c <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 8009648:	490a      	ldr	r1, [pc, #40]	@ (8009674 <ai_mnetwork_release_handle+0x54>)
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4613      	mov	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	1a9b      	subs	r3, r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	440b      	add	r3, r1
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
            return;
 800965a:	e005      	b.n	8009668 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	dde2      	ble.n	800962e <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	200008a4 	.word	0x200008a4

08009678 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009682:	2300      	movs	r3, #0
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	e01c      	b.n	80096c2 <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4613      	mov	r3, r2
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	4413      	add	r3, r2
 8009690:	015b      	lsls	r3, r3, #5
 8009692:	4a10      	ldr	r2, [pc, #64]	@ (80096d4 <ai_mnetwork_find+0x5c>)
 8009694:	4413      	add	r3, r2
 8009696:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff ff5a 	bl	8009554 <ai_mnetwork_is_valid>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <ai_mnetwork_find+0x34>
            return entry->name;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	e00e      	b.n	80096ca <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	1e5a      	subs	r2, r3, #1
 80096b0:	603a      	str	r2, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <ai_mnetwork_find+0x44>
                return entry->name;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	e006      	b.n	80096ca <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dddf      	ble.n	8009688 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	0800daa4 	.word	0x0800daa4

080096d8 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b08a      	sub	sp, #40	@ 0x28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	627b      	str	r3, [r7, #36]	@ 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80096e8:	2000      	movs	r0, #0
 80096ea:	f7ff ff5f 	bl	80095ac <ai_mnetwork_handle>
 80096ee:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d108      	bne.n	8009708 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 80096f6:	2331      	movs	r3, #49	@ 0x31
 80096f8:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2210      	movs	r2, #16
 80096fe:	f362 231f 	bfi	r3, r2, #8, #24
 8009702:	617b      	str	r3, [r7, #20]
        return err;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	e04d      	b.n	80097a4 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009708:	2300      	movs	r3, #0
 800970a:	623b      	str	r3, [r7, #32]
 800970c:	e014      	b.n	8009738 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800970e:	6a3a      	ldr	r2, [r7, #32]
 8009710:	4613      	mov	r3, r2
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	4413      	add	r3, r2
 8009716:	015b      	lsls	r3, r3, #5
 8009718:	4a24      	ldr	r2, [pc, #144]	@ (80097ac <ai_mnetwork_create+0xd4>)
 800971a:	4413      	add	r3, r2
 800971c:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800971e:	69b9      	ldr	r1, [r7, #24]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff ff17 	bl	8009554 <ai_mnetwork_is_valid>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <ai_mnetwork_create+0x5a>
            found = entry;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8009730:	e005      	b.n	800973e <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	3301      	adds	r3, #1
 8009736:	623b      	str	r3, [r7, #32]
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	2b00      	cmp	r3, #0
 800973c:	dde7      	ble.n	800970e <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d108      	bne.n	8009756 <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 8009744:	2314      	movs	r3, #20
 8009746:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2210      	movs	r2, #16
 800974c:	f362 231f 	bfi	r3, r2, #8, #24
 8009750:	617b      	str	r3, [r7, #20]
        return err;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	e026      	b.n	80097a4 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d109      	bne.n	8009770 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009762:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009764:	4611      	mov	r1, r2
 8009766:	68b8      	ldr	r0, [r7, #8]
 8009768:	4798      	blx	r3
 800976a:	4603      	mov	r3, r0
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e006      	b.n	800977e <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	68b8      	ldr	r0, [r7, #8]
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10c      	bne.n	80097a2 <ai_mnetwork_create+0xca>
 8009788:	7d3b      	ldrb	r3, [r7, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d109      	bne.n	80097a2 <ai_mnetwork_create+0xca>
        inst->entry = found;
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009792:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	601a      	str	r2, [r3, #0]
    }

    return err;
 80097a2:	697b      	ldr	r3, [r7, #20]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3728      	adds	r7, #40	@ 0x28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	0800daa4 	.word	0x0800daa4

080097b0 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff fef7 	bl	80095ac <ai_mnetwork_handle>
 80097be:	60f8      	str	r0, [r7, #12]
    if (inn) {
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d011      	beq.n	80097ea <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	6852      	ldr	r2, [r2, #4]
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d004      	beq.n	80097ea <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7ff ff1d 	bl	8009620 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 80097ea:	687b      	ldr	r3, [r7, #4]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff fed4 	bl	80095ac <ai_mnetwork_handle>
 8009804:	60f8      	str	r0, [r7, #12]
    if (inn)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d009      	beq.n	8009820 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	6852      	ldr	r2, [r2, #4]
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	4603      	mov	r3, r0
 800981e:	e000      	b.n	8009822 <ai_mnetwork_get_info+0x2e>
    else
        return false;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 8009832:	2314      	movs	r3, #20
 8009834:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2210      	movs	r2, #16
 800983a:	f362 231f 	bfi	r3, r2, #8, #24
 800983e:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff feb3 	bl	80095ac <ai_mnetwork_handle>
 8009846:	60f8      	str	r0, [r7, #12]
    if (inn)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d008      	beq.n	8009860 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	6852      	ldr	r2, [r2, #4]
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	4603      	mov	r3, r0
 800985e:	e000      	b.n	8009862 <ai_mnetwork_get_error+0x38>
    else
        return err;
 8009860:	68bb      	ldr	r3, [r7, #8]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 800986a:	b5b0      	push	{r4, r5, r7, lr}
 800986c:	b090      	sub	sp, #64	@ 0x40
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff fe99 	bl	80095ac <ai_mnetwork_handle>
 800987a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (inn) {
 800987c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d03f      	beq.n	8009902 <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 8009882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f107 040c 	add.w	r4, r7, #12
 800988a:	1d1d      	adds	r5, r3, #4
 800988c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800988e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009894:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	8b9b      	ldrh	r3, [r3, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80098aa:	f103 0518 	add.w	r5, r3, #24
 80098ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80098ba:	e002      	b.n	80098c2 <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c0:	637b      	str	r3, [r7, #52]	@ 0x34
        if (params->params.n_batches)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	889b      	ldrh	r3, [r3, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <ai_mnetwork_init+0x76>
            par.params = params->params;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	f107 040c 	add.w	r4, r7, #12
 80098d0:	461d      	mov	r5, r3
 80098d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098da:	e884 0003 	stmia.w	r4, {r0, r1}
 80098de:	e005      	b.n	80098ec <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 80098e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e6:	4798      	blx	r3
 80098e8:	4603      	mov	r3, r0
 80098ea:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 80098ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	f107 010c 	add.w	r1, r7, #12
 80098fa:	4610      	mov	r0, r2
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	e000      	b.n	8009904 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3740      	adds	r7, #64	@ 0x40
 8009908:	46bd      	mov	sp, r7
 800990a:	bdb0      	pop	{r4, r5, r7, pc}

0800990c <ai_mnetwork_run>:
extern void MX_GPIO_Disable(void);
#define AI_MIN_LOOP 16

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  struct network_instance* inn;
  static ai_i32 Counter = 0;
  inn =  ai_mnetwork_handle((struct network_instance *)network);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7ff fe47 	bl	80095ac <ai_mnetwork_handle>
 800991e:	6178      	str	r0, [r7, #20]
  if (inn == NULL)
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <ai_mnetwork_run+0x1e>
    return 0;
 8009926:	2300      	movs	r3, #0
 8009928:	e022      	b.n	8009970 <ai_mnetwork_run+0x64>
  if (Counter < AI_MIN_LOOP)
 800992a:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <ai_mnetwork_run+0x6c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b0f      	cmp	r3, #15
 8009930:	dc0e      	bgt.n	8009950 <ai_mnetwork_run+0x44>
  {
    Counter++;
 8009932:	4b11      	ldr	r3, [pc, #68]	@ (8009978 <ai_mnetwork_run+0x6c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	4a0f      	ldr	r2, [pc, #60]	@ (8009978 <ai_mnetwork_run+0x6c>)
 800993a:	6013      	str	r3, [r2, #0]
    return inn->entry->ai_run(inn->handle, input, output);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	6850      	ldr	r0, [r2, #4]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	4798      	blx	r3
 800994c:	4603      	mov	r3, r0
 800994e:	e00f      	b.n	8009970 <ai_mnetwork_run+0x64>
  }
  else
  {
    printf("\nStarting infinite power measurement loop\n");
 8009950:	480a      	ldr	r0, [pc, #40]	@ (800997c <ai_mnetwork_run+0x70>)
 8009952:	f002 fb15 	bl	800bf80 <puts>
    MX_UARTx_DeInit();
 8009956:	f7f7 f93f 	bl	8000bd8 <MX_UARTx_DeInit>
    MX_GPIO_Disable();
 800995a:	f7f7 f8eb 	bl	8000b34 <MX_GPIO_Disable>
    while(1)
    {
      inn->entry->ai_run(inn->handle, input, output);
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	6850      	ldr	r0, [r2, #4]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	4798      	blx	r3
 800996e:	e7f6      	b.n	800995e <ai_mnetwork_run+0x52>
    }
  }
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	200008dc 	.word	0x200008dc
 800997c:	0800d908 	.word	0x0800d908

08009980 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8009980:	b5b0      	push	{r4, r5, r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff fe0d 	bl	80095ac <ai_mnetwork_handle>
 8009992:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d018      	beq.n	80099cc <ai_mnetwork_get_private_handle+0x4c>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d015      	beq.n	80099cc <ai_mnetwork_get_private_handle+0x4c>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d012      	beq.n	80099cc <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	4615      	mov	r5, r2
 80099b4:	f103 0408 	add.w	r4, r3, #8
 80099b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80099c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	e001      	b.n	80099d0 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 80099cc:	f04f 33ff 	mov.w	r3, #4294967295
 }
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bdb0      	pop	{r4, r5, r7, pc}

080099d8 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff fde1 	bl	80095ac <ai_mnetwork_handle>
 80099ea:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d011      	beq.n	8009a16 <ai_mnetwork_get_ext_data_activations+0x3e>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00e      	beq.n	8009a16 <ai_mnetwork_get_ext_data_activations+0x3e>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	601a      	str	r2, [r3, #0]
         return 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e001      	b.n	8009a1a <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295
 }
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	3303      	adds	r3, #3
 8009a34:	f023 0303 	bic.w	r3, r3, #3
 8009a38:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_3_input0_output_array.data = AI_PTR(activations + 60);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	333c      	adds	r3, #60	@ 0x3c
 8009a3e:	4a18      	ldr	r2, [pc, #96]	@ (8009aa0 <network_configure_activations+0x7c>)
 8009a40:	6093      	str	r3, [r2, #8]
    serving_default_dense_3_input0_output_array.data_start = AI_PTR(activations + 60);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	333c      	adds	r3, #60	@ 0x3c
 8009a46:	4a16      	ldr	r2, [pc, #88]	@ (8009aa0 <network_configure_activations+0x7c>)
 8009a48:	60d3      	str	r3, [r2, #12]
    dense_0_output_array.data = AI_PTR(activations + 64);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3340      	adds	r3, #64	@ 0x40
 8009a4e:	4a15      	ldr	r2, [pc, #84]	@ (8009aa4 <network_configure_activations+0x80>)
 8009a50:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 64);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3340      	adds	r3, #64	@ 0x40
 8009a56:	4a13      	ldr	r2, [pc, #76]	@ (8009aa4 <network_configure_activations+0x80>)
 8009a58:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 64);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3340      	adds	r3, #64	@ 0x40
 8009a5e:	4a12      	ldr	r2, [pc, #72]	@ (8009aa8 <network_configure_activations+0x84>)
 8009a60:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 64);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3340      	adds	r3, #64	@ 0x40
 8009a66:	4a10      	ldr	r2, [pc, #64]	@ (8009aa8 <network_configure_activations+0x84>)
 8009a68:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 8009a6a:	4a10      	ldr	r2, [pc, #64]	@ (8009aac <network_configure_activations+0x88>)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8009a70:	4a0e      	ldr	r2, [pc, #56]	@ (8009aac <network_configure_activations+0x88>)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 64);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3340      	adds	r3, #64	@ 0x40
 8009a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8009ab0 <network_configure_activations+0x8c>)
 8009a7c:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 64);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3340      	adds	r3, #64	@ 0x40
 8009a82:	4a0b      	ldr	r2, [pc, #44]	@ (8009ab0 <network_configure_activations+0x8c>)
 8009a84:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 8009a86:	4a0b      	ldr	r2, [pc, #44]	@ (8009ab4 <network_configure_activations+0x90>)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 8009a8c:	4a09      	ldr	r2, [pc, #36]	@ (8009ab4 <network_configure_activations+0x90>)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	60d3      	str	r3, [r2, #12]
    
  }
  return true;
 8009a92:	2301      	movs	r3, #1
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	200000dc 	.word	0x200000dc
 8009aa4:	200000ec 	.word	0x200000ec
 8009aa8:	200000fc 	.word	0x200000fc
 8009aac:	2000010c 	.word	0x2000010c
 8009ab0:	2000011c 	.word	0x2000011c
 8009ab4:	2000012c 	.word	0x2000012c

08009ab8 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8009b88 <network_configure_weights+0xd0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8009b88 <network_configure_weights+0xd0>)
 8009ad2:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ada:	4a2b      	ldr	r2, [pc, #172]	@ (8009b88 <network_configure_weights+0xd0>)
 8009adc:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ae4:	4a28      	ldr	r2, [pc, #160]	@ (8009b88 <network_configure_weights+0xd0>)
 8009ae6:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8009ae8:	4b28      	ldr	r3, [pc, #160]	@ (8009b8c <network_configure_weights+0xd4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009af0:	4a26      	ldr	r2, [pc, #152]	@ (8009b8c <network_configure_weights+0xd4>)
 8009af2:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009afa:	4a24      	ldr	r2, [pc, #144]	@ (8009b8c <network_configure_weights+0xd4>)
 8009afc:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009b04:	4a21      	ldr	r2, [pc, #132]	@ (8009b8c <network_configure_weights+0xd4>)
 8009b06:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b08:	4b21      	ldr	r3, [pc, #132]	@ (8009b90 <network_configure_weights+0xd8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b10:	4a1f      	ldr	r2, [pc, #124]	@ (8009b90 <network_configure_weights+0xd8>)
 8009b12:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8009b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009b90 <network_configure_weights+0xd8>)
 8009b1c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8009b24:	4a1a      	ldr	r2, [pc, #104]	@ (8009b90 <network_configure_weights+0xd8>)
 8009b26:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b28:	4b1a      	ldr	r3, [pc, #104]	@ (8009b94 <network_configure_weights+0xdc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b30:	4a18      	ldr	r2, [pc, #96]	@ (8009b94 <network_configure_weights+0xdc>)
 8009b32:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3380      	adds	r3, #128	@ 0x80
 8009b38:	4a16      	ldr	r2, [pc, #88]	@ (8009b94 <network_configure_weights+0xdc>)
 8009b3a:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3380      	adds	r3, #128	@ 0x80
 8009b40:	4a14      	ldr	r2, [pc, #80]	@ (8009b94 <network_configure_weights+0xdc>)
 8009b42:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8009b44:	4b14      	ldr	r3, [pc, #80]	@ (8009b98 <network_configure_weights+0xe0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b4c:	4a12      	ldr	r2, [pc, #72]	@ (8009b98 <network_configure_weights+0xe0>)
 8009b4e:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3340      	adds	r3, #64	@ 0x40
 8009b54:	4a10      	ldr	r2, [pc, #64]	@ (8009b98 <network_configure_weights+0xe0>)
 8009b56:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3340      	adds	r3, #64	@ 0x40
 8009b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8009b98 <network_configure_weights+0xe0>)
 8009b5e:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8009b60:	4b0e      	ldr	r3, [pc, #56]	@ (8009b9c <network_configure_weights+0xe4>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b68:	4a0c      	ldr	r2, [pc, #48]	@ (8009b9c <network_configure_weights+0xe4>)
 8009b6a:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8009b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8009b9c <network_configure_weights+0xe4>)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8009b72:	4a0a      	ldr	r2, [pc, #40]	@ (8009b9c <network_configure_weights+0xe4>)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8009b78:	2301      	movs	r3, #1
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	2000007c 	.word	0x2000007c
 8009b8c:	2000008c 	.word	0x2000008c
 8009b90:	2000009c 	.word	0x2000009c
 8009b94:	200000ac 	.word	0x200000ac
 8009b98:	200000bc 	.word	0x200000bc
 8009b9c:	200000cc 	.word	0x200000cc

08009ba0 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b0a0      	sub	sp, #128	@ 0x80
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 faa0 	bl	800a0f0 <ai_platform_context_acquire>
 8009bb0:	67f8      	str	r0, [r7, #124]	@ 0x7c

  if ( report && net_ctx )
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d04a      	beq.n	8009c4e <ai_network_get_info+0xae>
 8009bb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d047      	beq.n	8009c4e <ai_network_get_info+0xae>
  {
    ai_network_report r = {
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	2274      	movs	r2, #116	@ 0x74
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f002 faba 	bl	800c140 <memset>
 8009bcc:	4b22      	ldr	r3, [pc, #136]	@ (8009c58 <ai_network_get_info+0xb8>)
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	4b22      	ldr	r3, [pc, #136]	@ (8009c5c <ai_network_get_info+0xbc>)
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	4b22      	ldr	r3, [pc, #136]	@ (8009c60 <ai_network_get_info+0xc0>)
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	4b22      	ldr	r3, [pc, #136]	@ (8009c64 <ai_network_get_info+0xc4>)
 8009bda:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8009bdc:	f000 f9c0 	bl	8009f60 <ai_platform_runtime_get_revision>
 8009be0:	4603      	mov	r3, r0
    ai_network_report r = {
 8009be2:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 8009be4:	f000 f9e2 	bl	8009fac <ai_platform_runtime_get_version>
 8009be8:	4603      	mov	r3, r0
 8009bea:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 8009bec:	4b1e      	ldr	r3, [pc, #120]	@ (8009c68 <ai_network_get_info+0xc8>)
 8009bee:	623b      	str	r3, [r7, #32]
 8009bf0:	2305      	movs	r3, #5
 8009bf2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8009c02:	2303      	movs	r3, #3
 8009c04:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = {AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR,
                            AI_TOOLS_API_VERSION_MICRO, 0x0},

      .api_version            = ai_platform_api_get_version(),
 8009c08:	f000 fa06 	bl	800a018 <ai_platform_api_get_version>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8009c10:	f000 fa38 	bl	800a084 <ai_platform_interface_api_get_version>
 8009c14:	4603      	mov	r3, r0
 8009c16:	633b      	str	r3, [r7, #48]	@ 0x30
    ai_network_report r = {
 8009c18:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8009c1c:	637b      	str	r3, [r7, #52]	@ 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8009c1e:	f107 0308 	add.w	r3, r7, #8
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fabd 	bl	800a1a4 <ai_platform_api_get_network_report>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f083 0301 	eor.w	r3, r3, #1
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <ai_network_get_info+0x9a>
 8009c36:	2300      	movs	r3, #0
 8009c38:	e00a      	b.n	8009c50 <ai_network_get_info+0xb0>

    *report = r;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f107 0308 	add.w	r3, r7, #8
 8009c42:	2274      	movs	r2, #116	@ 0x74
 8009c44:	4619      	mov	r1, r3
 8009c46:	f002 fb18 	bl	800c27a <memcpy>
    return true;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <ai_network_get_info+0xb0>
  }

  return false;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3780      	adds	r7, #128	@ 0x80
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	0800d934 	.word	0x0800d934
 8009c5c:	0800d93c 	.word	0x0800d93c
 8009c60:	0800d960 	.word	0x0800d960
 8009c64:	0800d97c 	.word	0x0800d97c
 8009c68:	0800d994 	.word	0x0800d994

08009c6c <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa65 	bl	800a144 <ai_platform_network_get_error>
 8009c7a:	4603      	mov	r3, r0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	2303      	movs	r3, #3
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	2301      	movs	r3, #1
 8009c98:	4a04      	ldr	r2, [pc, #16]	@ (8009cac <ai_network_create+0x28>)
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fb71 	bl	800a384 <ai_platform_network_create>
 8009ca2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	2000001c 	.word	0x2000001c

08009cb0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fbbd 	bl	800a438 <ai_platform_network_destroy>
 8009cbe:	4603      	mov	r3, r0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fbdf 	bl	800a498 <ai_platform_network_init>
 8009cda:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <ai_network_init+0x1e>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e02b      	b.n	8009d3e <ai_network_init+0x76>

  ai_bool ok = true;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	4619      	mov	r1, r3
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7ff fee2 	bl	8009ab8 <network_configure_weights>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	bf14      	ite	ne
 8009d00:	2301      	movne	r3, #1
 8009d02:	2300      	moveq	r3, #0
 8009d04:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	3318      	adds	r3, #24
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff fe89 	bl	8009a24 <network_configure_activations>
 8009d12:	4603      	mov	r3, r0
 8009d14:	461a      	mov	r2, r3
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bf14      	ite	ne
 8009d1e:	2301      	movne	r3, #1
 8009d20:	2300      	moveq	r3, #0
 8009d22:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fc37 	bl	800a598 <ai_platform_network_post_init>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	7afb      	ldrb	r3, [r7, #11]
 8009d30:	4013      	ands	r3, r2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bf14      	ite	ne
 8009d36:	2301      	movne	r3, #1
 8009d38:	2300      	moveq	r3, #0
 8009d3a:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fc66 	bl	800a628 <ai_platform_network_process>
 8009d5c:	4603      	mov	r3, r0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 8009d70:	2200      	movs	r2, #0
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fc57 	bl	800a628 <ai_platform_network_process>
 8009d7a:	4603      	mov	r3, r0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
    0x27, 0x8b, 0xbc, 0x89, 0xee, 0x20, 0xbb, 0xf5, 0x96,
    0x3e, 0xbf, 0x76, 0x47, 0x02, 0xbe, 0x11, 0x97, 0xe4,
    0x3f, 0xb2, 0x28, 0x26, 0xbf, 0xf5, 0x26, 0x13, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
 8009d88:	4b02      	ldr	r3, [pc, #8]	@ (8009d94 <ai_network_data_weights_get+0x10>)

}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	0800db2c 	.word	0x0800db2c

08009d98 <_platform_observer_node_exec_cb>:
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	d052      	beq.n	8009e42 <_platform_observer_node_exec_cb+0xaa>
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	6817      	ldr	r7, [r2, #0]
 8009da0:	b085      	sub	sp, #20
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d053      	beq.n	8009e4e <_platform_observer_node_exec_cb+0xb6>
 8009da6:	8996      	ldrh	r6, [r2, #12]
 8009da8:	b356      	cbz	r6, 8009e00 <_platform_observer_node_exec_cb+0x68>
 8009daa:	89d3      	ldrh	r3, [r2, #14]
 8009dac:	f240 2c02 	movw	ip, #514	@ 0x202
 8009db0:	3b01      	subs	r3, #1
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	f240 2501 	movw	r5, #513	@ 0x201
 8009db8:	bf0f      	iteee	eq
 8009dba:	f44f 7e01 	moveq.w	lr, #516	@ 0x204
 8009dbe:	f04f 0e04 	movne.w	lr, #4
 8009dc2:	f04f 0c02 	movne.w	ip, #2
 8009dc6:	2501      	movne	r5, #1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	460b      	mov	r3, r1
 8009dcc:	bb10      	cbnz	r0, 8009e14 <_platform_observer_node_exec_cb+0x7c>
 8009dce:	6892      	ldr	r2, [r2, #8]
 8009dd0:	07d1      	lsls	r1, r2, #31
 8009dd2:	d510      	bpl.n	8009df6 <_platform_observer_node_exec_cb+0x5e>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8009dda:	881a      	ldrh	r2, [r3, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	f8ad 6000 	strh.w	r6, [sp]
 8009de2:	9002      	str	r0, [sp, #8]
 8009de4:	f8ad c004 	strh.w	ip, [sp, #4]
 8009de8:	f8ad 2002 	strh.w	r2, [sp, #2]
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	466a      	mov	r2, sp
 8009df0:	6860      	ldr	r0, [r4, #4]
 8009df2:	47b8      	blx	r7
 8009df4:	89a6      	ldrh	r6, [r4, #12]
 8009df6:	1c73      	adds	r3, r6, #1
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	b005      	add	sp, #20
 8009dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e00:	f44f 7e82 	mov.w	lr, #260	@ 0x104
 8009e04:	f44f 7c81 	mov.w	ip, #258	@ 0x102
 8009e08:	f240 1501 	movw	r5, #257	@ 0x101
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	460b      	mov	r3, r1
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d0dc      	beq.n	8009dce <_platform_observer_node_exec_cb+0x36>
 8009e14:	2801      	cmp	r0, #1
 8009e16:	d016      	beq.n	8009e46 <_platform_observer_node_exec_cb+0xae>
 8009e18:	2802      	cmp	r0, #2
 8009e1a:	d01b      	beq.n	8009e54 <_platform_observer_node_exec_cb+0xbc>
 8009e1c:	2803      	cmp	r0, #3
 8009e1e:	d1ec      	bne.n	8009dfa <_platform_observer_node_exec_cb+0x62>
 8009e20:	6893      	ldr	r3, [r2, #8]
 8009e22:	075b      	lsls	r3, r3, #29
 8009e24:	d5e7      	bpl.n	8009df6 <_platform_observer_node_exec_cb+0x5e>
 8009e26:	2200      	movs	r2, #0
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	f8ad 6000 	strh.w	r6, [sp]
 8009e2e:	8858      	ldrh	r0, [r3, #2]
 8009e30:	4671      	mov	r1, lr
 8009e32:	f8ad 0004 	strh.w	r0, [sp, #4]
 8009e36:	8818      	ldrh	r0, [r3, #0]
 8009e38:	f8ad 0002 	strh.w	r0, [sp, #2]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	9202      	str	r2, [sp, #8]
 8009e40:	e7d4      	b.n	8009dec <_platform_observer_node_exec_cb+0x54>
 8009e42:	2001      	movs	r0, #1
 8009e44:	4770      	bx	lr
 8009e46:	2000      	movs	r0, #0
 8009e48:	6121      	str	r1, [r4, #16]
 8009e4a:	8190      	strh	r0, [r2, #12]
 8009e4c:	e7d6      	b.n	8009dfc <_platform_observer_node_exec_cb+0x64>
 8009e4e:	2001      	movs	r0, #1
 8009e50:	b005      	add	sp, #20
 8009e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e54:	6892      	ldr	r2, [r2, #8]
 8009e56:	6121      	str	r1, [r4, #16]
 8009e58:	0792      	lsls	r2, r2, #30
 8009e5a:	d5ce      	bpl.n	8009dfa <_platform_observer_node_exec_cb+0x62>
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	880a      	ldrh	r2, [r1, #0]
 8009e60:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8009e64:	694b      	ldr	r3, [r1, #20]
 8009e66:	f8ad 2002 	strh.w	r2, [sp, #2]
 8009e6a:	f8ad 6000 	strh.w	r6, [sp]
 8009e6e:	4661      	mov	r1, ip
 8009e70:	6860      	ldr	r0, [r4, #4]
 8009e72:	9502      	str	r5, [sp, #8]
 8009e74:	f8ad e004 	strh.w	lr, [sp, #4]
 8009e78:	9303      	str	r3, [sp, #12]
 8009e7a:	466a      	mov	r2, sp
 8009e7c:	47b8      	blx	r7
 8009e7e:	4628      	mov	r0, r5
 8009e80:	e7bc      	b.n	8009dfc <_platform_observer_node_exec_cb+0x64>
 8009e82:	bf00      	nop

08009e84 <_ai_platform_get_io_buffers_info>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	2400      	movs	r4, #0
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	4688      	mov	r8, r1
 8009e8e:	46a3      	mov	fp, r4
 8009e90:	f04f 0a18 	mov.w	sl, #24
 8009e94:	f04f 0901 	mov.w	r9, #1
 8009e98:	b083      	sub	sp, #12
 8009e9a:	b2a0      	uxth	r0, r4
 8009e9c:	b936      	cbnz	r6, 8009eac <_ai_platform_get_io_buffers_info+0x28>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d03b      	beq.n	8009f1a <_ai_platform_get_io_buffers_info+0x96>
 8009ea2:	68b3      	ldr	r3, [r6, #8]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f8c8 3000 	str.w	r3, [r8]
 8009eaa:	e036      	b.n	8009f1a <_ai_platform_get_io_buffers_info+0x96>
 8009eac:	8833      	ldrh	r3, [r6, #0]
 8009eae:	429c      	cmp	r4, r3
 8009eb0:	d2f5      	bcs.n	8009e9e <_ai_platform_get_io_buffers_info+0x1a>
 8009eb2:	6873      	ldr	r3, [r6, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f2      	beq.n	8009e9e <_ai_platform_get_io_buffers_info+0x1a>
 8009eb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8009ebc:	2d00      	cmp	r5, #0
 8009ebe:	d0ee      	beq.n	8009e9e <_ai_platform_get_io_buffers_info+0x1a>
 8009ec0:	68b3      	ldr	r3, [r6, #8]
 8009ec2:	69aa      	ldr	r2, [r5, #24]
 8009ec4:	6859      	ldr	r1, [r3, #4]
 8009ec6:	6810      	ldr	r0, [r2, #0]
 8009ec8:	689f      	ldr	r7, [r3, #8]
 8009eca:	9101      	str	r1, [sp, #4]
 8009ecc:	f001 fcce 	bl	800b86c <ai_array_to_buffer_fmt>
 8009ed0:	fb0a f204 	mul.w	r2, sl, r4
 8009ed4:	9901      	ldr	r1, [sp, #4]
 8009ed6:	188b      	adds	r3, r1, r2
 8009ed8:	5088      	str	r0, [r1, r2]
 8009eda:	f8a3 9004 	strh.w	r9, [r3, #4]
 8009ede:	68ea      	ldr	r2, [r5, #12]
 8009ee0:	00e1      	lsls	r1, r4, #3
 8009ee2:	68d2      	ldr	r2, [r2, #12]
 8009ee4:	1878      	adds	r0, r7, r1
 8009ee6:	80da      	strh	r2, [r3, #6]
 8009ee8:	68ea      	ldr	r2, [r5, #12]
 8009eea:	6892      	ldr	r2, [r2, #8]
 8009eec:	811a      	strh	r2, [r3, #8]
 8009eee:	68ea      	ldr	r2, [r5, #12]
 8009ef0:	6852      	ldr	r2, [r2, #4]
 8009ef2:	60da      	str	r2, [r3, #12]
 8009ef4:	69aa      	ldr	r2, [r5, #24]
 8009ef6:	6892      	ldr	r2, [r2, #8]
 8009ef8:	611a      	str	r2, [r3, #16]
 8009efa:	b150      	cbz	r0, 8009f12 <_ai_platform_get_io_buffers_info+0x8e>
 8009efc:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8009f00:	682a      	ldr	r2, [r5, #0]
 8009f02:	6042      	str	r2, [r0, #4]
 8009f04:	b11a      	cbz	r2, 8009f0e <_ai_platform_get_io_buffers_info+0x8a>
 8009f06:	8852      	ldrh	r2, [r2, #2]
 8009f08:	3200      	adds	r2, #0
 8009f0a:	bf18      	it	ne
 8009f0c:	2201      	movne	r2, #1
 8009f0e:	507a      	str	r2, [r7, r1]
 8009f10:	b902      	cbnz	r2, 8009f14 <_ai_platform_get_io_buffers_info+0x90>
 8009f12:	2000      	movs	r0, #0
 8009f14:	6158      	str	r0, [r3, #20]
 8009f16:	3401      	adds	r4, #1
 8009f18:	e7bf      	b.n	8009e9a <_ai_platform_get_io_buffers_info+0x16>
 8009f1a:	b003      	add	sp, #12
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f20 <_platform_network_state_setup.isra.1>:
 8009f20:	b430      	push	{r4, r5}
 8009f22:	68dd      	ldr	r5, [r3, #12]
 8009f24:	695c      	ldr	r4, [r3, #20]
 8009f26:	68ed      	ldr	r5, [r5, #12]
 8009f28:	68e4      	ldr	r4, [r4, #12]
 8009f2a:	fb04 f405 	mul.w	r4, r4, r5
 8009f2e:	6084      	str	r4, [r0, #8]
 8009f30:	8809      	ldrh	r1, [r1, #0]
 8009f32:	fb04 f401 	mul.w	r4, r4, r1
 8009f36:	60c4      	str	r4, [r0, #12]
 8009f38:	6811      	ldr	r1, [r2, #0]
 8009f3a:	6041      	str	r1, [r0, #4]
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	4414      	add	r4, r2
 8009f40:	6004      	str	r4, [r0, #0]
 8009f42:	699a      	ldr	r2, [r3, #24]
 8009f44:	6814      	ldr	r4, [r2, #0]
 8009f46:	00a4      	lsls	r4, r4, #2
 8009f48:	d407      	bmi.n	8009f5a <_platform_network_state_setup.isra.1+0x3a>
 8009f4a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8009f4e:	1b64      	subs	r4, r4, r5
 8009f50:	4421      	add	r1, r4
 8009f52:	6091      	str	r1, [r2, #8]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	6842      	ldr	r2, [r0, #4]
 8009f58:	60da      	str	r2, [r3, #12]
 8009f5a:	bc30      	pop	{r4, r5}
 8009f5c:	4770      	bx	lr
	...

08009f60 <ai_platform_runtime_get_revision>:
 8009f60:	4a0c      	ldr	r2, [pc, #48]	@ (8009f94 <ai_platform_runtime_get_revision+0x34>)
 8009f62:	2001      	movs	r0, #1
 8009f64:	b410      	push	{r4}
 8009f66:	4614      	mov	r4, r2
 8009f68:	490b      	ldr	r1, [pc, #44]	@ (8009f98 <ai_platform_runtime_get_revision+0x38>)
 8009f6a:	680b      	ldr	r3, [r1, #0]
 8009f6c:	f023 0301 	bic.w	r3, r3, #1
 8009f70:	600b      	str	r3, [r1, #0]
 8009f72:	6010      	str	r0, [r2, #0]
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1fc      	bne.n	8009f74 <ai_platform_runtime_get_revision+0x14>
 8009f7a:	4b08      	ldr	r3, [pc, #32]	@ (8009f9c <ai_platform_runtime_get_revision+0x3c>)
 8009f7c:	4908      	ldr	r1, [pc, #32]	@ (8009fa0 <ai_platform_runtime_get_revision+0x40>)
 8009f7e:	4a09      	ldr	r2, [pc, #36]	@ (8009fa4 <ai_platform_runtime_get_revision+0x44>)
 8009f80:	6019      	str	r1, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d000      	beq.n	8009f8a <ai_platform_runtime_get_revision+0x2a>
 8009f88:	e7fe      	b.n	8009f88 <ai_platform_runtime_get_revision+0x28>
 8009f8a:	4807      	ldr	r0, [pc, #28]	@ (8009fa8 <ai_platform_runtime_get_revision+0x48>)
 8009f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	40023008 	.word	0x40023008
 8009f98:	e0002000 	.word	0xe0002000
 8009f9c:	40023000 	.word	0x40023000
 8009fa0:	f407a5c2 	.word	0xf407a5c2
 8009fa4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009fa8:	0800e080 	.word	0x0800e080

08009fac <ai_platform_runtime_get_version>:
 8009fac:	4a14      	ldr	r2, [pc, #80]	@ (800a000 <ai_platform_runtime_get_version+0x54>)
 8009fae:	2001      	movs	r0, #1
 8009fb0:	b410      	push	{r4}
 8009fb2:	4614      	mov	r4, r2
 8009fb4:	4913      	ldr	r1, [pc, #76]	@ (800a004 <ai_platform_runtime_get_version+0x58>)
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	680b      	ldr	r3, [r1, #0]
 8009fba:	f023 0301 	bic.w	r3, r3, #1
 8009fbe:	600b      	str	r3, [r1, #0]
 8009fc0:	6010      	str	r0, [r2, #0]
 8009fc2:	6820      	ldr	r0, [r4, #0]
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d1fc      	bne.n	8009fc2 <ai_platform_runtime_get_version+0x16>
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	@ (800a008 <ai_platform_runtime_get_version+0x5c>)
 8009fca:	4910      	ldr	r1, [pc, #64]	@ (800a00c <ai_platform_runtime_get_version+0x60>)
 8009fcc:	4a10      	ldr	r2, [pc, #64]	@ (800a010 <ai_platform_runtime_get_version+0x64>)
 8009fce:	6019      	str	r1, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d000      	beq.n	8009fd8 <ai_platform_runtime_get_version+0x2c>
 8009fd6:	e7fe      	b.n	8009fd6 <ai_platform_runtime_get_version+0x2a>
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	@ (800a014 <ai_platform_runtime_get_version+0x68>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	f362 0007 	bfi	r0, r2, #0, #8
 8009fe2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009fe6:	f362 200f 	bfi	r0, r2, #8, #8
 8009fea:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009fee:	f362 4017 	bfi	r0, r2, #16, #8
 8009ff2:	0e1b      	lsrs	r3, r3, #24
 8009ff4:	f363 601f 	bfi	r0, r3, #24, #8
 8009ff8:	b003      	add	sp, #12
 8009ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	40023008 	.word	0x40023008
 800a004:	e0002000 	.word	0xe0002000
 800a008:	40023000 	.word	0x40023000
 800a00c:	f407a5c2 	.word	0xf407a5c2
 800a010:	b5e8b5cd 	.word	0xb5e8b5cd
 800a014:	0800e030 	.word	0x0800e030

0800a018 <ai_platform_api_get_version>:
 800a018:	4a14      	ldr	r2, [pc, #80]	@ (800a06c <ai_platform_api_get_version+0x54>)
 800a01a:	2001      	movs	r0, #1
 800a01c:	b410      	push	{r4}
 800a01e:	4614      	mov	r4, r2
 800a020:	4913      	ldr	r1, [pc, #76]	@ (800a070 <ai_platform_api_get_version+0x58>)
 800a022:	b083      	sub	sp, #12
 800a024:	680b      	ldr	r3, [r1, #0]
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	600b      	str	r3, [r1, #0]
 800a02c:	6010      	str	r0, [r2, #0]
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	2800      	cmp	r0, #0
 800a032:	d1fc      	bne.n	800a02e <ai_platform_api_get_version+0x16>
 800a034:	4b0f      	ldr	r3, [pc, #60]	@ (800a074 <ai_platform_api_get_version+0x5c>)
 800a036:	4910      	ldr	r1, [pc, #64]	@ (800a078 <ai_platform_api_get_version+0x60>)
 800a038:	4a10      	ldr	r2, [pc, #64]	@ (800a07c <ai_platform_api_get_version+0x64>)
 800a03a:	6019      	str	r1, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4293      	cmp	r3, r2
 800a040:	d000      	beq.n	800a044 <ai_platform_api_get_version+0x2c>
 800a042:	e7fe      	b.n	800a042 <ai_platform_api_get_version+0x2a>
 800a044:	4b0e      	ldr	r3, [pc, #56]	@ (800a080 <ai_platform_api_get_version+0x68>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	f362 0007 	bfi	r0, r2, #0, #8
 800a04e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a052:	f362 200f 	bfi	r0, r2, #8, #8
 800a056:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a05a:	f362 4017 	bfi	r0, r2, #16, #8
 800a05e:	0e1b      	lsrs	r3, r3, #24
 800a060:	f363 601f 	bfi	r0, r3, #24, #8
 800a064:	b003      	add	sp, #12
 800a066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	40023008 	.word	0x40023008
 800a070:	e0002000 	.word	0xe0002000
 800a074:	40023000 	.word	0x40023000
 800a078:	f407a5c2 	.word	0xf407a5c2
 800a07c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a080:	0800e034 	.word	0x0800e034

0800a084 <ai_platform_interface_api_get_version>:
 800a084:	4a14      	ldr	r2, [pc, #80]	@ (800a0d8 <ai_platform_interface_api_get_version+0x54>)
 800a086:	2001      	movs	r0, #1
 800a088:	b410      	push	{r4}
 800a08a:	4614      	mov	r4, r2
 800a08c:	4913      	ldr	r1, [pc, #76]	@ (800a0dc <ai_platform_interface_api_get_version+0x58>)
 800a08e:	b083      	sub	sp, #12
 800a090:	680b      	ldr	r3, [r1, #0]
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	600b      	str	r3, [r1, #0]
 800a098:	6010      	str	r0, [r2, #0]
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1fc      	bne.n	800a09a <ai_platform_interface_api_get_version+0x16>
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e0 <ai_platform_interface_api_get_version+0x5c>)
 800a0a2:	4910      	ldr	r1, [pc, #64]	@ (800a0e4 <ai_platform_interface_api_get_version+0x60>)
 800a0a4:	4a10      	ldr	r2, [pc, #64]	@ (800a0e8 <ai_platform_interface_api_get_version+0x64>)
 800a0a6:	6019      	str	r1, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d000      	beq.n	800a0b0 <ai_platform_interface_api_get_version+0x2c>
 800a0ae:	e7fe      	b.n	800a0ae <ai_platform_interface_api_get_version+0x2a>
 800a0b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a0ec <ai_platform_interface_api_get_version+0x68>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	f362 0007 	bfi	r0, r2, #0, #8
 800a0ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a0be:	f362 200f 	bfi	r0, r2, #8, #8
 800a0c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a0c6:	f362 4017 	bfi	r0, r2, #16, #8
 800a0ca:	0e1b      	lsrs	r3, r3, #24
 800a0cc:	f363 601f 	bfi	r0, r3, #24, #8
 800a0d0:	b003      	add	sp, #12
 800a0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	40023008 	.word	0x40023008
 800a0dc:	e0002000 	.word	0xe0002000
 800a0e0:	40023000 	.word	0x40023000
 800a0e4:	f407a5c2 	.word	0xf407a5c2
 800a0e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800a0ec:	0800e038 	.word	0x0800e038

0800a0f0 <ai_platform_context_acquire>:
 800a0f0:	b430      	push	{r4, r5}
 800a0f2:	b120      	cbz	r0, 800a0fe <ai_platform_context_acquire+0xe>
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a12c <ai_platform_context_acquire+0x3c>)
 800a0f6:	6802      	ldr	r2, [r0, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	bf18      	it	ne
 800a0fc:	2000      	movne	r0, #0
 800a0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a130 <ai_platform_context_acquire+0x40>)
 800a100:	2401      	movs	r4, #1
 800a102:	4615      	mov	r5, r2
 800a104:	490b      	ldr	r1, [pc, #44]	@ (800a134 <ai_platform_context_acquire+0x44>)
 800a106:	680b      	ldr	r3, [r1, #0]
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	600b      	str	r3, [r1, #0]
 800a10e:	6014      	str	r4, [r2, #0]
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1fc      	bne.n	800a110 <ai_platform_context_acquire+0x20>
 800a116:	4b08      	ldr	r3, [pc, #32]	@ (800a138 <ai_platform_context_acquire+0x48>)
 800a118:	4908      	ldr	r1, [pc, #32]	@ (800a13c <ai_platform_context_acquire+0x4c>)
 800a11a:	4a09      	ldr	r2, [pc, #36]	@ (800a140 <ai_platform_context_acquire+0x50>)
 800a11c:	6019      	str	r1, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4293      	cmp	r3, r2
 800a122:	d000      	beq.n	800a126 <ai_platform_context_acquire+0x36>
 800a124:	e7fe      	b.n	800a124 <ai_platform_context_acquire+0x34>
 800a126:	bc30      	pop	{r4, r5}
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	a1c00100 	.word	0xa1c00100
 800a130:	40023008 	.word	0x40023008
 800a134:	e0002000 	.word	0xe0002000
 800a138:	40023000 	.word	0x40023000
 800a13c:	f407a5c2 	.word	0xf407a5c2
 800a140:	b5e8b5cd 	.word	0xb5e8b5cd

0800a144 <ai_platform_network_get_error>:
 800a144:	b430      	push	{r4, r5}
 800a146:	b120      	cbz	r0, 800a152 <ai_platform_network_get_error+0xe>
 800a148:	4b10      	ldr	r3, [pc, #64]	@ (800a18c <ai_platform_network_get_error+0x48>)
 800a14a:	6802      	ldr	r2, [r0, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	bf18      	it	ne
 800a150:	2000      	movne	r0, #0
 800a152:	4a0f      	ldr	r2, [pc, #60]	@ (800a190 <ai_platform_network_get_error+0x4c>)
 800a154:	2401      	movs	r4, #1
 800a156:	4615      	mov	r5, r2
 800a158:	490e      	ldr	r1, [pc, #56]	@ (800a194 <ai_platform_network_get_error+0x50>)
 800a15a:	680b      	ldr	r3, [r1, #0]
 800a15c:	f023 0301 	bic.w	r3, r3, #1
 800a160:	600b      	str	r3, [r1, #0]
 800a162:	6014      	str	r4, [r2, #0]
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1fc      	bne.n	800a164 <ai_platform_network_get_error+0x20>
 800a16a:	4b0b      	ldr	r3, [pc, #44]	@ (800a198 <ai_platform_network_get_error+0x54>)
 800a16c:	490b      	ldr	r1, [pc, #44]	@ (800a19c <ai_platform_network_get_error+0x58>)
 800a16e:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a0 <ai_platform_network_get_error+0x5c>)
 800a170:	6019      	str	r1, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4293      	cmp	r3, r2
 800a176:	d000      	beq.n	800a17a <ai_platform_network_get_error+0x36>
 800a178:	e7fe      	b.n	800a178 <ai_platform_network_get_error+0x34>
 800a17a:	b118      	cbz	r0, 800a184 <ai_platform_network_get_error+0x40>
 800a17c:	bc30      	pop	{r4, r5}
 800a17e:	3010      	adds	r0, #16
 800a180:	f000 bd94 	b.w	800acac <core_get_error>
 800a184:	f241 0010 	movw	r0, #4112	@ 0x1010
 800a188:	bc30      	pop	{r4, r5}
 800a18a:	4770      	bx	lr
 800a18c:	a1c00100 	.word	0xa1c00100
 800a190:	40023008 	.word	0x40023008
 800a194:	e0002000 	.word	0xe0002000
 800a198:	40023000 	.word	0x40023000
 800a19c:	f407a5c2 	.word	0xf407a5c2
 800a1a0:	b5e8b5cd 	.word	0xb5e8b5cd

0800a1a4 <ai_platform_api_get_network_report>:
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	460e      	mov	r6, r1
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	b120      	cbz	r0, 800a1b8 <ai_platform_api_get_network_report+0x14>
 800a1ae:	4b6e      	ldr	r3, [pc, #440]	@ (800a368 <ai_platform_api_get_network_report+0x1c4>)
 800a1b0:	6802      	ldr	r2, [r0, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	bf18      	it	ne
 800a1b6:	2400      	movne	r4, #0
 800a1b8:	4a6c      	ldr	r2, [pc, #432]	@ (800a36c <ai_platform_api_get_network_report+0x1c8>)
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	4615      	mov	r5, r2
 800a1be:	496c      	ldr	r1, [pc, #432]	@ (800a370 <ai_platform_api_get_network_report+0x1cc>)
 800a1c0:	680b      	ldr	r3, [r1, #0]
 800a1c2:	f023 0301 	bic.w	r3, r3, #1
 800a1c6:	600b      	str	r3, [r1, #0]
 800a1c8:	6010      	str	r0, [r2, #0]
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1fc      	bne.n	800a1ca <ai_platform_api_get_network_report+0x26>
 800a1d0:	4a68      	ldr	r2, [pc, #416]	@ (800a374 <ai_platform_api_get_network_report+0x1d0>)
 800a1d2:	4869      	ldr	r0, [pc, #420]	@ (800a378 <ai_platform_api_get_network_report+0x1d4>)
 800a1d4:	4969      	ldr	r1, [pc, #420]	@ (800a37c <ai_platform_api_get_network_report+0x1d8>)
 800a1d6:	6010      	str	r0, [r2, #0]
 800a1d8:	6812      	ldr	r2, [r2, #0]
 800a1da:	428a      	cmp	r2, r1
 800a1dc:	d000      	beq.n	800a1e0 <ai_platform_api_get_network_report+0x3c>
 800a1de:	e7fe      	b.n	800a1de <ai_platform_api_get_network_report+0x3a>
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	d065      	beq.n	800a2b0 <ai_platform_api_get_network_report+0x10c>
 800a1e4:	2e00      	cmp	r6, #0
 800a1e6:	d066      	beq.n	800a2b6 <ai_platform_api_get_network_report+0x112>
 800a1e8:	66f3      	str	r3, [r6, #108]	@ 0x6c
 800a1ea:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800a1ec:	2a00      	cmp	r2, #0
 800a1ee:	d059      	beq.n	800a2a4 <ai_platform_api_get_network_report+0x100>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	66f3      	str	r3, [r6, #108]	@ 0x6c
 800a1f4:	68d3      	ldr	r3, [r2, #12]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d00c      	beq.n	800a214 <ai_platform_api_get_network_report+0x70>
 800a1fa:	b15b      	cbz	r3, 800a214 <ai_platform_api_get_network_report+0x70>
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	e002      	b.n	800a206 <ai_platform_api_get_network_report+0x62>
 800a200:	460b      	mov	r3, r1
 800a202:	b129      	cbz	r1, 800a210 <ai_platform_api_get_network_report+0x6c>
 800a204:	4602      	mov	r2, r0
 800a206:	66f2      	str	r2, [r6, #108]	@ 0x6c
 800a208:	68d9      	ldr	r1, [r3, #12]
 800a20a:	1c50      	adds	r0, r2, #1
 800a20c:	4299      	cmp	r1, r3
 800a20e:	d1f7      	bne.n	800a200 <ai_platform_api_get_network_report+0x5c>
 800a210:	2a00      	cmp	r2, #0
 800a212:	d047      	beq.n	800a2a4 <ai_platform_api_get_network_report+0x100>
 800a214:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
 800a218:	b100      	cbz	r0, 800a21c <ai_platform_api_get_network_report+0x78>
 800a21a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a21c:	f106 0134 	add.w	r1, r6, #52	@ 0x34
 800a220:	f7ff fe30 	bl	8009e84 <_ai_platform_get_io_buffers_info>
 800a224:	4605      	mov	r5, r0
 800a226:	8630      	strh	r0, [r6, #48]	@ 0x30
 800a228:	2800      	cmp	r0, #0
 800a22a:	d064      	beq.n	800a2f6 <ai_platform_api_get_network_report+0x152>
 800a22c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 800a230:	f106 0138 	add.w	r1, r6, #56	@ 0x38
 800a234:	2b01      	cmp	r3, #1
 800a236:	bf8a      	itet	hi
 800a238:	6ce0      	ldrhi	r0, [r4, #76]	@ 0x4c
 800a23a:	2000      	movls	r0, #0
 800a23c:	300c      	addhi	r0, #12
 800a23e:	f7ff fe21 	bl	8009e84 <_ai_platform_get_io_buffers_info>
 800a242:	4605      	mov	r5, r0
 800a244:	8670      	strh	r0, [r6, #50]	@ 0x32
 800a246:	2800      	cmp	r0, #0
 800a248:	d04d      	beq.n	800a2e6 <ai_platform_api_get_network_report+0x142>
 800a24a:	f8df e120 	ldr.w	lr, [pc, #288]	@ 800a36c <ai_platform_api_get_network_report+0x1c8>
 800a24e:	f04f 0801 	mov.w	r8, #1
 800a252:	46f4      	mov	ip, lr
 800a254:	6863      	ldr	r3, [r4, #4]
 800a256:	f104 0730 	add.w	r7, r4, #48	@ 0x30
 800a25a:	6733      	str	r3, [r6, #112]	@ 0x70
 800a25c:	f106 053c 	add.w	r5, r6, #60	@ 0x3c
 800a260:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a264:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a268:	e885 0003 	stmia.w	r5, {r0, r1}
 800a26c:	3418      	adds	r4, #24
 800a26e:	f106 0554 	add.w	r5, r6, #84	@ 0x54
 800a272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a27a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a27e:	4a3c      	ldr	r2, [pc, #240]	@ (800a370 <ai_platform_api_get_network_report+0x1cc>)
 800a280:	6813      	ldr	r3, [r2, #0]
 800a282:	f023 0301 	bic.w	r3, r3, #1
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	f8ce 8000 	str.w	r8, [lr]
 800a28c:	f8dc 3000 	ldr.w	r3, [ip]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1fb      	bne.n	800a28c <ai_platform_api_get_network_report+0xe8>
 800a294:	4b37      	ldr	r3, [pc, #220]	@ (800a374 <ai_platform_api_get_network_report+0x1d0>)
 800a296:	4938      	ldr	r1, [pc, #224]	@ (800a378 <ai_platform_api_get_network_report+0x1d4>)
 800a298:	4a38      	ldr	r2, [pc, #224]	@ (800a37c <ai_platform_api_get_network_report+0x1d8>)
 800a29a:	6019      	str	r1, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00b      	beq.n	800a2ba <ai_platform_api_get_network_report+0x116>
 800a2a2:	e7fe      	b.n	800a2a2 <ai_platform_api_get_network_report+0xfe>
 800a2a4:	f104 0010 	add.w	r0, r4, #16
 800a2a8:	2218      	movs	r2, #24
 800a2aa:	2111      	movs	r1, #17
 800a2ac:	f000 fd04 	bl	800acb8 <core_set_error>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	e7fb      	b.n	800a2b2 <ai_platform_api_get_network_report+0x10e>
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	4b30      	ldr	r3, [pc, #192]	@ (800a380 <ai_platform_api_get_network_report+0x1dc>)
 800a2be:	4a2c      	ldr	r2, [pc, #176]	@ (800a370 <ai_platform_api_get_network_report+0x1cc>)
 800a2c0:	6133      	str	r3, [r6, #16]
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	4929      	ldr	r1, [pc, #164]	@ (800a36c <ai_platform_api_get_network_report+0x1c8>)
 800a2c6:	f023 0301 	bic.w	r3, r3, #1
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	f8cc 0000 	str.w	r0, [ip]
 800a2d0:	680b      	ldr	r3, [r1, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1fc      	bne.n	800a2d0 <ai_platform_api_get_network_report+0x12c>
 800a2d6:	4b27      	ldr	r3, [pc, #156]	@ (800a374 <ai_platform_api_get_network_report+0x1d0>)
 800a2d8:	4827      	ldr	r0, [pc, #156]	@ (800a378 <ai_platform_api_get_network_report+0x1d4>)
 800a2da:	4a28      	ldr	r2, [pc, #160]	@ (800a37c <ai_platform_api_get_network_report+0x1d8>)
 800a2dc:	6018      	str	r0, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d010      	beq.n	800a306 <ai_platform_api_get_network_report+0x162>
 800a2e4:	e7fe      	b.n	800a2e4 <ai_platform_api_get_network_report+0x140>
 800a2e6:	f104 0010 	add.w	r0, r4, #16
 800a2ea:	2218      	movs	r2, #24
 800a2ec:	2113      	movs	r1, #19
 800a2ee:	f000 fce3 	bl	800acb8 <core_set_error>
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	e7dd      	b.n	800a2b2 <ai_platform_api_get_network_report+0x10e>
 800a2f6:	f104 0010 	add.w	r0, r4, #16
 800a2fa:	2218      	movs	r2, #24
 800a2fc:	2112      	movs	r1, #18
 800a2fe:	f000 fcdb 	bl	800acb8 <core_set_error>
 800a302:	4628      	mov	r0, r5
 800a304:	e7d5      	b.n	800a2b2 <ai_platform_api_get_network_report+0x10e>
 800a306:	f240 2305 	movw	r3, #517	@ 0x205
 800a30a:	2401      	movs	r4, #1
 800a30c:	4818      	ldr	r0, [pc, #96]	@ (800a370 <ai_platform_api_get_network_report+0x1cc>)
 800a30e:	6173      	str	r3, [r6, #20]
 800a310:	6803      	ldr	r3, [r0, #0]
 800a312:	4a16      	ldr	r2, [pc, #88]	@ (800a36c <ai_platform_api_get_network_report+0x1c8>)
 800a314:	f023 0301 	bic.w	r3, r3, #1
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	600c      	str	r4, [r1, #0]
 800a31c:	6813      	ldr	r3, [r2, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1fc      	bne.n	800a31c <ai_platform_api_get_network_report+0x178>
 800a322:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <ai_platform_api_get_network_report+0x1d0>)
 800a324:	4814      	ldr	r0, [pc, #80]	@ (800a378 <ai_platform_api_get_network_report+0x1d4>)
 800a326:	4915      	ldr	r1, [pc, #84]	@ (800a37c <ai_platform_api_get_network_report+0x1d8>)
 800a328:	6018      	str	r0, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	428b      	cmp	r3, r1
 800a32e:	d000      	beq.n	800a332 <ai_platform_api_get_network_report+0x18e>
 800a330:	e7fe      	b.n	800a330 <ai_platform_api_get_network_report+0x18c>
 800a332:	f240 1301 	movw	r3, #257	@ 0x101
 800a336:	2001      	movs	r0, #1
 800a338:	490d      	ldr	r1, [pc, #52]	@ (800a370 <ai_platform_api_get_network_report+0x1cc>)
 800a33a:	6273      	str	r3, [r6, #36]	@ 0x24
 800a33c:	680b      	ldr	r3, [r1, #0]
 800a33e:	4c0b      	ldr	r4, [pc, #44]	@ (800a36c <ai_platform_api_get_network_report+0x1c8>)
 800a340:	f023 0301 	bic.w	r3, r3, #1
 800a344:	600b      	str	r3, [r1, #0]
 800a346:	6010      	str	r0, [r2, #0]
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1fc      	bne.n	800a348 <ai_platform_api_get_network_report+0x1a4>
 800a34e:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <ai_platform_api_get_network_report+0x1d0>)
 800a350:	4909      	ldr	r1, [pc, #36]	@ (800a378 <ai_platform_api_get_network_report+0x1d4>)
 800a352:	4a0a      	ldr	r2, [pc, #40]	@ (800a37c <ai_platform_api_get_network_report+0x1d8>)
 800a354:	6019      	str	r1, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4293      	cmp	r3, r2
 800a35a:	d000      	beq.n	800a35e <ai_platform_api_get_network_report+0x1ba>
 800a35c:	e7fe      	b.n	800a35c <ai_platform_api_get_network_report+0x1b8>
 800a35e:	f240 4301 	movw	r3, #1025	@ 0x401
 800a362:	2001      	movs	r0, #1
 800a364:	62b3      	str	r3, [r6, #40]	@ 0x28
 800a366:	e7a4      	b.n	800a2b2 <ai_platform_api_get_network_report+0x10e>
 800a368:	a1c00100 	.word	0xa1c00100
 800a36c:	40023008 	.word	0x40023008
 800a370:	e0002000 	.word	0xe0002000
 800a374:	40023000 	.word	0x40023000
 800a378:	f407a5c2 	.word	0xf407a5c2
 800a37c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a380:	0800e080 	.word	0x0800e080

0800a384 <ai_platform_network_create>:
 800a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	4d24      	ldr	r5, [pc, #144]	@ (800a41c <ai_platform_network_create+0x98>)
 800a38a:	2701      	movs	r7, #1
 800a38c:	46ac      	mov	ip, r5
 800a38e:	4e24      	ldr	r6, [pc, #144]	@ (800a420 <ai_platform_network_create+0x9c>)
 800a390:	b082      	sub	sp, #8
 800a392:	6831      	ldr	r1, [r6, #0]
 800a394:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800a398:	f021 0101 	bic.w	r1, r1, #1
 800a39c:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 800a3a0:	6031      	str	r1, [r6, #0]
 800a3a2:	602f      	str	r7, [r5, #0]
 800a3a4:	f8dc 5000 	ldr.w	r5, [ip]
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	d1fb      	bne.n	800a3a4 <ai_platform_network_create+0x20>
 800a3ac:	491d      	ldr	r1, [pc, #116]	@ (800a424 <ai_platform_network_create+0xa0>)
 800a3ae:	4f1e      	ldr	r7, [pc, #120]	@ (800a428 <ai_platform_network_create+0xa4>)
 800a3b0:	4e1e      	ldr	r6, [pc, #120]	@ (800a42c <ai_platform_network_create+0xa8>)
 800a3b2:	600f      	str	r7, [r1, #0]
 800a3b4:	6809      	ldr	r1, [r1, #0]
 800a3b6:	42b1      	cmp	r1, r6
 800a3b8:	d000      	beq.n	800a3bc <ai_platform_network_create+0x38>
 800a3ba:	e7fe      	b.n	800a3ba <ai_platform_network_create+0x36>
 800a3bc:	b1d0      	cbz	r0, 800a3f4 <ai_platform_network_create+0x70>
 800a3be:	461f      	mov	r7, r3
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a430 <ai_platform_network_create+0xac>)
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	f000 fc6d 	bl	800aca8 <core_init>
 800a3ce:	b1b0      	cbz	r0, 800a3fe <ai_platform_network_create+0x7a>
 800a3d0:	0223      	lsls	r3, r4, #8
 800a3d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a3d6:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800a3da:	f1b3 7f82 	cmp.w	r3, #17039360	@ 0x1040000
 800a3de:	d910      	bls.n	800a402 <ai_platform_network_create+0x7e>
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	6031      	str	r1, [r6, #0]
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	f362 0007 	bfi	r0, r2, #0, #8
 800a3ee:	f363 201f 	bfi	r0, r3, #8, #24
 800a3f2:	e001      	b.n	800a3f8 <ai_platform_network_create+0x74>
 800a3f4:	f241 0010 	movw	r0, #4112	@ 0x1010
 800a3f8:	b002      	add	sp, #8
 800a3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fe:	2230      	movs	r2, #48	@ 0x30
 800a400:	e7ef      	b.n	800a3e2 <ai_platform_network_create+0x5e>
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <ai_platform_network_create+0xb0>)
 800a404:	a802      	add	r0, sp, #8
 800a406:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a40a:	f001 f907 	bl	800b61c <ai_check_custom_types>
 800a40e:	b110      	cbz	r0, 800a416 <ai_platform_network_create+0x92>
 800a410:	462b      	mov	r3, r5
 800a412:	462a      	mov	r2, r5
 800a414:	e7e8      	b.n	800a3e8 <ai_platform_network_create+0x64>
 800a416:	2202      	movs	r2, #2
 800a418:	e7e3      	b.n	800a3e2 <ai_platform_network_create+0x5e>
 800a41a:	bf00      	nop
 800a41c:	40023008 	.word	0x40023008
 800a420:	e0002000 	.word	0xe0002000
 800a424:	40023000 	.word	0x40023000
 800a428:	f407a5c2 	.word	0xf407a5c2
 800a42c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a430:	a1c00100 	.word	0xa1c00100
 800a434:	84048403 	.word	0x84048403

0800a438 <ai_platform_network_destroy>:
 800a438:	b470      	push	{r4, r5, r6}
 800a43a:	b1f0      	cbz	r0, 800a47a <ai_platform_network_destroy+0x42>
 800a43c:	4a10      	ldr	r2, [pc, #64]	@ (800a480 <ai_platform_network_destroy+0x48>)
 800a43e:	6803      	ldr	r3, [r0, #0]
 800a440:	4293      	cmp	r3, r2
 800a442:	bf0c      	ite	eq
 800a444:	4603      	moveq	r3, r0
 800a446:	2300      	movne	r3, #0
 800a448:	490e      	ldr	r1, [pc, #56]	@ (800a484 <ai_platform_network_destroy+0x4c>)
 800a44a:	2501      	movs	r5, #1
 800a44c:	460e      	mov	r6, r1
 800a44e:	4c0e      	ldr	r4, [pc, #56]	@ (800a488 <ai_platform_network_destroy+0x50>)
 800a450:	6822      	ldr	r2, [r4, #0]
 800a452:	f022 0201 	bic.w	r2, r2, #1
 800a456:	6022      	str	r2, [r4, #0]
 800a458:	600d      	str	r5, [r1, #0]
 800a45a:	6832      	ldr	r2, [r6, #0]
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d1fc      	bne.n	800a45a <ai_platform_network_destroy+0x22>
 800a460:	4a0a      	ldr	r2, [pc, #40]	@ (800a48c <ai_platform_network_destroy+0x54>)
 800a462:	4c0b      	ldr	r4, [pc, #44]	@ (800a490 <ai_platform_network_destroy+0x58>)
 800a464:	490b      	ldr	r1, [pc, #44]	@ (800a494 <ai_platform_network_destroy+0x5c>)
 800a466:	6014      	str	r4, [r2, #0]
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	428a      	cmp	r2, r1
 800a46c:	d000      	beq.n	800a470 <ai_platform_network_destroy+0x38>
 800a46e:	e7fe      	b.n	800a46e <ai_platform_network_destroy+0x36>
 800a470:	2b00      	cmp	r3, #0
 800a472:	bf18      	it	ne
 800a474:	2000      	movne	r0, #0
 800a476:	bc70      	pop	{r4, r5, r6}
 800a478:	4770      	bx	lr
 800a47a:	4603      	mov	r3, r0
 800a47c:	e7e4      	b.n	800a448 <ai_platform_network_destroy+0x10>
 800a47e:	bf00      	nop
 800a480:	a1c00100 	.word	0xa1c00100
 800a484:	40023008 	.word	0x40023008
 800a488:	e0002000 	.word	0xe0002000
 800a48c:	40023000 	.word	0x40023000
 800a490:	f407a5c2 	.word	0xf407a5c2
 800a494:	b5e8b5cd 	.word	0xb5e8b5cd

0800a498 <ai_platform_network_init>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	460c      	mov	r4, r1
 800a49c:	4605      	mov	r5, r0
 800a49e:	b120      	cbz	r0, 800a4aa <ai_platform_network_init+0x12>
 800a4a0:	4b37      	ldr	r3, [pc, #220]	@ (800a580 <ai_platform_network_init+0xe8>)
 800a4a2:	6802      	ldr	r2, [r0, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	bf18      	it	ne
 800a4a8:	2500      	movne	r5, #0
 800a4aa:	4a36      	ldr	r2, [pc, #216]	@ (800a584 <ai_platform_network_init+0xec>)
 800a4ac:	2001      	movs	r0, #1
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	4935      	ldr	r1, [pc, #212]	@ (800a588 <ai_platform_network_init+0xf0>)
 800a4b2:	680b      	ldr	r3, [r1, #0]
 800a4b4:	f023 0301 	bic.w	r3, r3, #1
 800a4b8:	600b      	str	r3, [r1, #0]
 800a4ba:	6010      	str	r0, [r2, #0]
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1fc      	bne.n	800a4bc <ai_platform_network_init+0x24>
 800a4c2:	4b32      	ldr	r3, [pc, #200]	@ (800a58c <ai_platform_network_init+0xf4>)
 800a4c4:	4932      	ldr	r1, [pc, #200]	@ (800a590 <ai_platform_network_init+0xf8>)
 800a4c6:	4a33      	ldr	r2, [pc, #204]	@ (800a594 <ai_platform_network_init+0xfc>)
 800a4c8:	6019      	str	r1, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d000      	beq.n	800a4d2 <ai_platform_network_init+0x3a>
 800a4d0:	e7fe      	b.n	800a4d0 <ai_platform_network_init+0x38>
 800a4d2:	b34d      	cbz	r5, 800a528 <ai_platform_network_init+0x90>
 800a4d4:	b354      	cbz	r4, 800a52c <ai_platform_network_init+0x94>
 800a4d6:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800a4d8:	6926      	ldr	r6, [r4, #16]
 800a4da:	2f00      	cmp	r7, #0
 800a4dc:	d03f      	beq.n	800a55e <ai_platform_network_init+0xc6>
 800a4de:	b36e      	cbz	r6, 800a53c <ai_platform_network_init+0xa4>
 800a4e0:	4627      	mov	r7, r4
 800a4e2:	f04f 0c03 	mov.w	ip, #3
 800a4e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a4e8:	f105 0618 	add.w	r6, r5, #24
 800a4ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4ee:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a4f2:	e886 0003 	stmia.w	r6, {r0, r1}
 800a4f6:	3418      	adds	r4, #24
 800a4f8:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 800a4fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a500:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a504:	e886 0003 	stmia.w	r6, {r0, r1}
 800a508:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800a50a:	f8c5 c00c 	str.w	ip, [r5, #12]
 800a50e:	b15a      	cbz	r2, 800a528 <ai_platform_network_init+0x90>
 800a510:	68d3      	ldr	r3, [r2, #12]
 800a512:	6095      	str	r5, [r2, #8]
 800a514:	429a      	cmp	r2, r3
 800a516:	d007      	beq.n	800a528 <ai_platform_network_init+0x90>
 800a518:	b133      	cbz	r3, 800a528 <ai_platform_network_init+0x90>
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	609d      	str	r5, [r3, #8]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d002      	beq.n	800a528 <ai_platform_network_init+0x90>
 800a522:	4613      	mov	r3, r2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1f8      	bne.n	800a51a <ai_platform_network_init+0x82>
 800a528:	4628      	mov	r0, r5
 800a52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a52c:	f105 0010 	add.w	r0, r5, #16
 800a530:	2211      	movs	r2, #17
 800a532:	2110      	movs	r1, #16
 800a534:	f000 fbc0 	bl	800acb8 <core_set_error>
 800a538:	4625      	mov	r5, r4
 800a53a:	e7f5      	b.n	800a528 <ai_platform_network_init+0x90>
 800a53c:	8921      	ldrh	r1, [r4, #8]
 800a53e:	88e2      	ldrh	r2, [r4, #6]
 800a540:	68e3      	ldr	r3, [r4, #12]
 800a542:	fb02 f201 	mul.w	r2, r2, r1
 800a546:	fb03 f302 	mul.w	r3, r3, r2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c8      	beq.n	800a4e0 <ai_platform_network_init+0x48>
 800a54e:	f105 0010 	add.w	r0, r5, #16
 800a552:	2212      	movs	r2, #18
 800a554:	2110      	movs	r1, #16
 800a556:	f000 fbaf 	bl	800acb8 <core_set_error>
 800a55a:	4635      	mov	r5, r6
 800a55c:	e7e4      	b.n	800a528 <ai_platform_network_init+0x90>
 800a55e:	8c21      	ldrh	r1, [r4, #32]
 800a560:	8be2      	ldrh	r2, [r4, #30]
 800a562:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a564:	fb02 f201 	mul.w	r2, r2, r1
 800a568:	fb03 f302 	mul.w	r3, r3, r2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0b6      	beq.n	800a4de <ai_platform_network_init+0x46>
 800a570:	f105 0010 	add.w	r0, r5, #16
 800a574:	2213      	movs	r2, #19
 800a576:	2110      	movs	r1, #16
 800a578:	f000 fb9e 	bl	800acb8 <core_set_error>
 800a57c:	463d      	mov	r5, r7
 800a57e:	e7d3      	b.n	800a528 <ai_platform_network_init+0x90>
 800a580:	a1c00100 	.word	0xa1c00100
 800a584:	40023008 	.word	0x40023008
 800a588:	e0002000 	.word	0xe0002000
 800a58c:	40023000 	.word	0x40023000
 800a590:	f407a5c2 	.word	0xf407a5c2
 800a594:	b5e8b5cd 	.word	0xb5e8b5cd

0800a598 <ai_platform_network_post_init>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	b120      	cbz	r0, 800a5a8 <ai_platform_network_post_init+0x10>
 800a59e:	4b1c      	ldr	r3, [pc, #112]	@ (800a610 <ai_platform_network_post_init+0x78>)
 800a5a0:	6802      	ldr	r2, [r0, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	bf18      	it	ne
 800a5a6:	2400      	movne	r4, #0
 800a5a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a614 <ai_platform_network_post_init+0x7c>)
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	4615      	mov	r5, r2
 800a5ae:	491a      	ldr	r1, [pc, #104]	@ (800a618 <ai_platform_network_post_init+0x80>)
 800a5b0:	680b      	ldr	r3, [r1, #0]
 800a5b2:	f023 0301 	bic.w	r3, r3, #1
 800a5b6:	600b      	str	r3, [r1, #0]
 800a5b8:	6010      	str	r0, [r2, #0]
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1fc      	bne.n	800a5ba <ai_platform_network_post_init+0x22>
 800a5c0:	4b16      	ldr	r3, [pc, #88]	@ (800a61c <ai_platform_network_post_init+0x84>)
 800a5c2:	4917      	ldr	r1, [pc, #92]	@ (800a620 <ai_platform_network_post_init+0x88>)
 800a5c4:	4a17      	ldr	r2, [pc, #92]	@ (800a624 <ai_platform_network_post_init+0x8c>)
 800a5c6:	6019      	str	r1, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d000      	beq.n	800a5d0 <ai_platform_network_post_init+0x38>
 800a5ce:	e7fe      	b.n	800a5ce <ai_platform_network_post_init+0x36>
 800a5d0:	b1a4      	cbz	r4, 800a5fc <ai_platform_network_post_init+0x64>
 800a5d2:	68e3      	ldr	r3, [r4, #12]
 800a5d4:	f013 0502 	ands.w	r5, r3, #2
 800a5d8:	d012      	beq.n	800a600 <ai_platform_network_post_init+0x68>
 800a5da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5dc:	b163      	cbz	r3, 800a5f8 <ai_platform_network_post_init+0x60>
 800a5de:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 800a5e0:	b91d      	cbnz	r5, 800a5ea <ai_platform_network_post_init+0x52>
 800a5e2:	e009      	b.n	800a5f8 <ai_platform_network_post_init+0x60>
 800a5e4:	461d      	mov	r5, r3
 800a5e6:	b13b      	cbz	r3, 800a5f8 <ai_platform_network_post_init+0x60>
 800a5e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5ea:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	4798      	blx	r3
 800a5f2:	68eb      	ldr	r3, [r5, #12]
 800a5f4:	42ab      	cmp	r3, r5
 800a5f6:	d1f5      	bne.n	800a5e4 <ai_platform_network_post_init+0x4c>
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	f104 0010 	add.w	r0, r4, #16
 800a604:	2210      	movs	r2, #16
 800a606:	2111      	movs	r1, #17
 800a608:	f000 fb56 	bl	800acb8 <core_set_error>
 800a60c:	4628      	mov	r0, r5
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	a1c00100 	.word	0xa1c00100
 800a614:	40023008 	.word	0x40023008
 800a618:	e0002000 	.word	0xe0002000
 800a61c:	40023000 	.word	0x40023000
 800a620:	f407a5c2 	.word	0xf407a5c2
 800a624:	b5e8b5cd 	.word	0xb5e8b5cd

0800a628 <ai_platform_network_process>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	b083      	sub	sp, #12
 800a62e:	9201      	str	r2, [sp, #4]
 800a630:	4604      	mov	r4, r0
 800a632:	b120      	cbz	r0, 800a63e <ai_platform_network_process+0x16>
 800a634:	4ba3      	ldr	r3, [pc, #652]	@ (800a8c4 <ai_platform_network_process+0x29c>)
 800a636:	6802      	ldr	r2, [r0, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	bf18      	it	ne
 800a63c:	2400      	movne	r4, #0
 800a63e:	4aa2      	ldr	r2, [pc, #648]	@ (800a8c8 <ai_platform_network_process+0x2a0>)
 800a640:	2501      	movs	r5, #1
 800a642:	4616      	mov	r6, r2
 800a644:	48a1      	ldr	r0, [pc, #644]	@ (800a8cc <ai_platform_network_process+0x2a4>)
 800a646:	6803      	ldr	r3, [r0, #0]
 800a648:	f023 0301 	bic.w	r3, r3, #1
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	6015      	str	r5, [r2, #0]
 800a650:	6833      	ldr	r3, [r6, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1fc      	bne.n	800a650 <ai_platform_network_process+0x28>
 800a656:	4b9e      	ldr	r3, [pc, #632]	@ (800a8d0 <ai_platform_network_process+0x2a8>)
 800a658:	489e      	ldr	r0, [pc, #632]	@ (800a8d4 <ai_platform_network_process+0x2ac>)
 800a65a:	4a9f      	ldr	r2, [pc, #636]	@ (800a8d8 <ai_platform_network_process+0x2b0>)
 800a65c:	6018      	str	r0, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4293      	cmp	r3, r2
 800a662:	d000      	beq.n	800a666 <ai_platform_network_process+0x3e>
 800a664:	e7fe      	b.n	800a664 <ai_platform_network_process+0x3c>
 800a666:	2c00      	cmp	r4, #0
 800a668:	d063      	beq.n	800a732 <ai_platform_network_process+0x10a>
 800a66a:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 800a66e:	b107      	cbz	r7, 800a672 <ai_platform_network_process+0x4a>
 800a670:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800a672:	2600      	movs	r6, #0
 800a674:	68e3      	ldr	r3, [r4, #12]
 800a676:	6166      	str	r6, [r4, #20]
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	f040 80f8 	bne.w	800a872 <ai_platform_network_process+0x24a>
 800a682:	2900      	cmp	r1, #0
 800a684:	d07d      	beq.n	800a782 <ai_platform_network_process+0x15a>
 800a686:	2f00      	cmp	r7, #0
 800a688:	d07b      	beq.n	800a782 <ai_platform_network_process+0x15a>
 800a68a:	883b      	ldrh	r3, [r7, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d078      	beq.n	800a782 <ai_platform_network_process+0x15a>
 800a690:	460d      	mov	r5, r1
 800a692:	46a0      	mov	r8, r4
 800a694:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800a698:	429e      	cmp	r6, r3
 800a69a:	d27b      	bcs.n	800a794 <ai_platform_network_process+0x16c>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d078      	beq.n	800a794 <ai_platform_network_process+0x16c>
 800a6a2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a6a6:	2c00      	cmp	r4, #0
 800a6a8:	d074      	beq.n	800a794 <ai_platform_network_process+0x16c>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800a6b2:	d065      	beq.n	800a780 <ai_platform_network_process+0x158>
 800a6b4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800a6b8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800a6bc:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800a6c0:	fb0b f30e 	mul.w	r3, fp, lr
 800a6c4:	69a0      	ldr	r0, [r4, #24]
 800a6c6:	fb0c f303 	mul.w	r3, ip, r3
 800a6ca:	6841      	ldr	r1, [r0, #4]
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	d34e      	bcc.n	800a76e <ai_platform_network_process+0x146>
 800a6d0:	68e3      	ldr	r3, [r4, #12]
 800a6d2:	68da      	ldr	r2, [r3, #12]
 800a6d4:	455a      	cmp	r2, fp
 800a6d6:	d14a      	bne.n	800a76e <ai_platform_network_process+0x146>
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	4572      	cmp	r2, lr
 800a6dc:	d147      	bne.n	800a76e <ai_platform_network_process+0x146>
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	459c      	cmp	ip, r3
 800a6e2:	d144      	bne.n	800a76e <ai_platform_network_process+0x146>
 800a6e4:	6800      	ldr	r0, [r0, #0]
 800a6e6:	f001 f90d 	bl	800b904 <ai_array_get_byte_size>
 800a6ea:	68e2      	ldr	r2, [r4, #12]
 800a6ec:	6963      	ldr	r3, [r4, #20]
 800a6ee:	68d2      	ldr	r2, [r2, #12]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	fb03 f302 	mul.w	r3, r3, r2
 800a6f6:	4298      	cmp	r0, r3
 800a6f8:	d339      	bcc.n	800a76e <ai_platform_network_process+0x146>
 800a6fa:	69a3      	ldr	r3, [r4, #24]
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f001 f8b5 	bl	800b86c <ai_array_to_buffer_fmt>
 800a702:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a706:	4043      	eors	r3, r0
 800a708:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800a70c:	d126      	bne.n	800a75c <ai_platform_network_process+0x134>
 800a70e:	68eb      	ldr	r3, [r5, #12]
 800a710:	b1e3      	cbz	r3, 800a74c <ai_platform_network_process+0x124>
 800a712:	882b      	ldrh	r3, [r5, #0]
 800a714:	b193      	cbz	r3, 800a73c <ai_platform_network_process+0x114>
 800a716:	4599      	cmp	r9, r3
 800a718:	bf38      	it	cc
 800a71a:	4699      	movcc	r9, r3
 800a71c:	f105 020c 	add.w	r2, r5, #12
 800a720:	4623      	mov	r3, r4
 800a722:	4629      	mov	r1, r5
 800a724:	4650      	mov	r0, sl
 800a726:	f7ff fbfb 	bl	8009f20 <_platform_network_state_setup.isra.1>
 800a72a:	3601      	adds	r6, #1
 800a72c:	883b      	ldrh	r3, [r7, #0]
 800a72e:	3518      	adds	r5, #24
 800a730:	e7b2      	b.n	800a698 <ai_platform_network_process+0x70>
 800a732:	46a3      	mov	fp, r4
 800a734:	4658      	mov	r0, fp
 800a736:	b003      	add	sp, #12
 800a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73c:	f108 0010 	add.w	r0, r8, #16
 800a740:	2221      	movs	r2, #33	@ 0x21
 800a742:	2112      	movs	r1, #18
 800a744:	469b      	mov	fp, r3
 800a746:	f000 fab7 	bl	800acb8 <core_set_error>
 800a74a:	e7f3      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a74c:	f108 0010 	add.w	r0, r8, #16
 800a750:	2217      	movs	r2, #23
 800a752:	2112      	movs	r1, #18
 800a754:	469b      	mov	fp, r3
 800a756:	f000 faaf 	bl	800acb8 <core_set_error>
 800a75a:	e7eb      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a75c:	f108 0010 	add.w	r0, r8, #16
 800a760:	2219      	movs	r2, #25
 800a762:	2112      	movs	r1, #18
 800a764:	f000 faa8 	bl	800acb8 <core_set_error>
 800a768:	f04f 0b00 	mov.w	fp, #0
 800a76c:	e7e2      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a76e:	f108 0010 	add.w	r0, r8, #16
 800a772:	2218      	movs	r2, #24
 800a774:	2112      	movs	r1, #18
 800a776:	f000 fa9f 	bl	800acb8 <core_set_error>
 800a77a:	f04f 0b00 	mov.w	fp, #0
 800a77e:	e7d9      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a780:	4644      	mov	r4, r8
 800a782:	f104 0010 	add.w	r0, r4, #16
 800a786:	2217      	movs	r2, #23
 800a788:	2112      	movs	r1, #18
 800a78a:	f000 fa95 	bl	800acb8 <core_set_error>
 800a78e:	f04f 0b00 	mov.w	fp, #0
 800a792:	e7cf      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a794:	9a01      	ldr	r2, [sp, #4]
 800a796:	4644      	mov	r4, r8
 800a798:	f8b8 3048 	ldrh.w	r3, [r8, #72]	@ 0x48
 800a79c:	2a00      	cmp	r2, #0
 800a79e:	f000 80a1 	beq.w	800a8e4 <ai_platform_network_process+0x2bc>
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	f240 8142 	bls.w	800aa2c <ai_platform_network_process+0x404>
 800a7a8:	f8d8 804c 	ldr.w	r8, [r8, #76]	@ 0x4c
 800a7ac:	f118 0f0c 	cmn.w	r8, #12
 800a7b0:	f000 813c 	beq.w	800aa2c <ai_platform_network_process+0x404>
 800a7b4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 8137 	beq.w	800aa2c <ai_platform_network_process+0x404>
 800a7be:	3204      	adds	r2, #4
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	2700      	movs	r7, #0
 800a7c4:	429f      	cmp	r7, r3
 800a7c6:	f080 8089 	bcs.w	800a8dc <ai_platform_network_process+0x2b4>
 800a7ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 8084 	beq.w	800a8dc <ai_platform_network_process+0x2b4>
 800a7d4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800a7d8:	2e00      	cmp	r6, #0
 800a7da:	d07f      	beq.n	800a8dc <ai_platform_network_process+0x2b4>
 800a7dc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800a7e6:	d065      	beq.n	800a8b4 <ai_platform_network_process+0x28c>
 800a7e8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800a7ec:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800a7f0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800a7f4:	fb0b f30e 	mul.w	r3, fp, lr
 800a7f8:	69b0      	ldr	r0, [r6, #24]
 800a7fa:	fb0c f303 	mul.w	r3, ip, r3
 800a7fe:	6841      	ldr	r1, [r0, #4]
 800a800:	4299      	cmp	r1, r3
 800a802:	f0c0 8113 	bcc.w	800aa2c <ai_platform_network_process+0x404>
 800a806:	68f3      	ldr	r3, [r6, #12]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	455a      	cmp	r2, fp
 800a80c:	f040 810e 	bne.w	800aa2c <ai_platform_network_process+0x404>
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	4572      	cmp	r2, lr
 800a814:	f040 810a 	bne.w	800aa2c <ai_platform_network_process+0x404>
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	459c      	cmp	ip, r3
 800a81c:	f040 8106 	bne.w	800aa2c <ai_platform_network_process+0x404>
 800a820:	6800      	ldr	r0, [r0, #0]
 800a822:	f001 f86f 	bl	800b904 <ai_array_get_byte_size>
 800a826:	68f2      	ldr	r2, [r6, #12]
 800a828:	6973      	ldr	r3, [r6, #20]
 800a82a:	68d2      	ldr	r2, [r2, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	fb03 f302 	mul.w	r3, r3, r2
 800a832:	4298      	cmp	r0, r3
 800a834:	f0c0 80fa 	bcc.w	800aa2c <ai_platform_network_process+0x404>
 800a838:	69b3      	ldr	r3, [r6, #24]
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	f001 f816 	bl	800b86c <ai_array_to_buffer_fmt>
 800a840:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a844:	4043      	eors	r3, r0
 800a846:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800a84a:	d12a      	bne.n	800a8a2 <ai_platform_network_process+0x27a>
 800a84c:	68eb      	ldr	r3, [r5, #12]
 800a84e:	b303      	cbz	r3, 800a892 <ai_platform_network_process+0x26a>
 800a850:	882b      	ldrh	r3, [r5, #0]
 800a852:	b1b3      	cbz	r3, 800a882 <ai_platform_network_process+0x25a>
 800a854:	4599      	cmp	r9, r3
 800a856:	bf38      	it	cc
 800a858:	4699      	movcc	r9, r3
 800a85a:	f105 020c 	add.w	r2, r5, #12
 800a85e:	4633      	mov	r3, r6
 800a860:	4629      	mov	r1, r5
 800a862:	4650      	mov	r0, sl
 800a864:	f7ff fb5c 	bl	8009f20 <_platform_network_state_setup.isra.1>
 800a868:	3701      	adds	r7, #1
 800a86a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a86e:	3518      	adds	r5, #24
 800a870:	e7a8      	b.n	800a7c4 <ai_platform_network_process+0x19c>
 800a872:	f104 0010 	add.w	r0, r4, #16
 800a876:	2230      	movs	r2, #48	@ 0x30
 800a878:	2111      	movs	r1, #17
 800a87a:	f000 fa1d 	bl	800acb8 <core_set_error>
 800a87e:	46b3      	mov	fp, r6
 800a880:	e758      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a882:	f104 0010 	add.w	r0, r4, #16
 800a886:	2221      	movs	r2, #33	@ 0x21
 800a888:	2113      	movs	r1, #19
 800a88a:	469b      	mov	fp, r3
 800a88c:	f000 fa14 	bl	800acb8 <core_set_error>
 800a890:	e750      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a892:	f104 0010 	add.w	r0, r4, #16
 800a896:	2217      	movs	r2, #23
 800a898:	2113      	movs	r1, #19
 800a89a:	469b      	mov	fp, r3
 800a89c:	f000 fa0c 	bl	800acb8 <core_set_error>
 800a8a0:	e748      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a8a2:	f104 0010 	add.w	r0, r4, #16
 800a8a6:	2219      	movs	r2, #25
 800a8a8:	2113      	movs	r1, #19
 800a8aa:	f000 fa05 	bl	800acb8 <core_set_error>
 800a8ae:	f04f 0b00 	mov.w	fp, #0
 800a8b2:	e73f      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a8b4:	f104 0010 	add.w	r0, r4, #16
 800a8b8:	2217      	movs	r2, #23
 800a8ba:	2113      	movs	r1, #19
 800a8bc:	f000 f9fc 	bl	800acb8 <core_set_error>
 800a8c0:	46d3      	mov	fp, sl
 800a8c2:	e737      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a8c4:	a1c00100 	.word	0xa1c00100
 800a8c8:	40023008 	.word	0x40023008
 800a8cc:	e0002000 	.word	0xe0002000
 800a8d0:	40023000 	.word	0x40023000
 800a8d4:	f407a5c2 	.word	0xf407a5c2
 800a8d8:	b5e8b5cd 	.word	0xb5e8b5cd
 800a8dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 800a8e0:	f8a4 9014 	strh.w	r9, [r4, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 809e 	beq.w	800aa26 <ai_platform_network_process+0x3fe>
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800a8ee:	f240 8098 	bls.w	800aa22 <ai_platform_network_process+0x3fa>
 800a8f2:	f105 070c 	add.w	r7, r5, #12
 800a8f6:	8ae0      	ldrh	r0, [r4, #22]
 800a8f8:	8aa3      	ldrh	r3, [r4, #20]
 800a8fa:	4283      	cmp	r3, r0
 800a8fc:	d97b      	bls.n	800a9f6 <ai_platform_network_process+0x3ce>
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	d035      	beq.n	800a96e <ai_platform_network_process+0x346>
 800a902:	882b      	ldrh	r3, [r5, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d032      	beq.n	800a96e <ai_platform_network_process+0x346>
 800a908:	686b      	ldr	r3, [r5, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d02f      	beq.n	800a96e <ai_platform_network_process+0x346>
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f04f 0800 	mov.w	r8, #0
 800a914:	b35b      	cbz	r3, 800a96e <ai_platform_network_process+0x346>
 800a916:	68a9      	ldr	r1, [r5, #8]
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	f8d1 a000 	ldr.w	sl, [r1]
 800a91e:	6811      	ldr	r1, [r2, #0]
 800a920:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a924:	eb0a 0609 	add.w	r6, sl, r9
 800a928:	0089      	lsls	r1, r1, #2
 800a92a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800a92e:	6890      	ldr	r0, [r2, #8]
 800a930:	d463      	bmi.n	800a9fa <ai_platform_network_process+0x3d2>
 800a932:	68d1      	ldr	r1, [r2, #12]
 800a934:	1a40      	subs	r0, r0, r1
 800a936:	eb0c 0100 	add.w	r1, ip, r0
 800a93a:	6091      	str	r1, [r2, #8]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	6872      	ldr	r2, [r6, #4]
 800a940:	60da      	str	r2, [r3, #12]
 800a942:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a946:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a94a:	440b      	add	r3, r1
 800a94c:	4293      	cmp	r3, r2
 800a94e:	bf28      	it	cs
 800a950:	68f3      	ldrcs	r3, [r6, #12]
 800a952:	f108 0801 	add.w	r8, r8, #1
 800a956:	bf28      	it	cs
 800a958:	1ad3      	subcs	r3, r2, r3
 800a95a:	6073      	str	r3, [r6, #4]
 800a95c:	882b      	ldrh	r3, [r5, #0]
 800a95e:	4598      	cmp	r8, r3
 800a960:	d205      	bcs.n	800a96e <ai_platform_network_process+0x346>
 800a962:	686b      	ldr	r3, [r5, #4]
 800a964:	b11b      	cbz	r3, 800a96e <ai_platform_network_process+0x346>
 800a966:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1d3      	bne.n	800a916 <ai_platform_network_process+0x2ee>
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 ff42 	bl	800b7f8 <ai_layers_forward_all>
 800a974:	2f00      	cmp	r7, #0
 800a976:	d037      	beq.n	800a9e8 <ai_platform_network_process+0x3c0>
 800a978:	883b      	ldrh	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d034      	beq.n	800a9e8 <ai_platform_network_process+0x3c0>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d031      	beq.n	800a9e8 <ai_platform_network_process+0x3c0>
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	b378      	cbz	r0, 800a9e8 <ai_platform_network_process+0x3c0>
 800a988:	f04f 0800 	mov.w	r8, #0
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	6981      	ldr	r1, [r0, #24]
 800a990:	f8d3 a000 	ldr.w	sl, [r3]
 800a994:	680b      	ldr	r3, [r1, #0]
 800a996:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a99a:	eb0a 0609 	add.w	r6, sl, r9
 800a99e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800a9a2:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800a9a6:	eb0c 0e02 	add.w	lr, ip, r2
 800a9aa:	d12b      	bne.n	800aa04 <ai_platform_network_process+0x3dc>
 800a9ac:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a9b0:	4596      	cmp	lr, r2
 800a9b2:	bf24      	itt	cs
 800a9b4:	68f3      	ldrcs	r3, [r6, #12]
 800a9b6:	eba2 0e03 	subcs.w	lr, r2, r3
 800a9ba:	f8c6 e004 	str.w	lr, [r6, #4]
 800a9be:	6981      	ldr	r1, [r0, #24]
 800a9c0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800a9c4:	1ad2      	subs	r2, r2, r3
 800a9c6:	eb0e 0302 	add.w	r3, lr, r2
 800a9ca:	608b      	str	r3, [r1, #8]
 800a9cc:	6983      	ldr	r3, [r0, #24]
 800a9ce:	6872      	ldr	r2, [r6, #4]
 800a9d0:	60da      	str	r2, [r3, #12]
 800a9d2:	883b      	ldrh	r3, [r7, #0]
 800a9d4:	f108 0801 	add.w	r8, r8, #1
 800a9d8:	4598      	cmp	r8, r3
 800a9da:	d205      	bcs.n	800a9e8 <ai_platform_network_process+0x3c0>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	b11b      	cbz	r3, 800a9e8 <ai_platform_network_process+0x3c0>
 800a9e0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d1d1      	bne.n	800a98c <ai_platform_network_process+0x364>
 800a9e8:	8ae0      	ldrh	r0, [r4, #22]
 800a9ea:	8aa3      	ldrh	r3, [r4, #20]
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	b280      	uxth	r0, r0
 800a9f0:	4283      	cmp	r3, r0
 800a9f2:	82e0      	strh	r0, [r4, #22]
 800a9f4:	d883      	bhi.n	800a8fe <ai_platform_network_process+0x2d6>
 800a9f6:	4683      	mov	fp, r0
 800a9f8:	e69c      	b.n	800a734 <ai_platform_network_process+0x10c>
 800a9fa:	4661      	mov	r1, ip
 800a9fc:	68b2      	ldr	r2, [r6, #8]
 800a9fe:	f001 fc3c 	bl	800c27a <memcpy>
 800aa02:	e79e      	b.n	800a942 <ai_platform_network_process+0x31a>
 800aa04:	6889      	ldr	r1, [r1, #8]
 800aa06:	4660      	mov	r0, ip
 800aa08:	f001 fc37 	bl	800c27a <memcpy>
 800aa0c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800aa10:	f85a 2009 	ldr.w	r2, [sl, r9]
 800aa14:	440b      	add	r3, r1
 800aa16:	4293      	cmp	r3, r2
 800aa18:	bf24      	itt	cs
 800aa1a:	68f3      	ldrcs	r3, [r6, #12]
 800aa1c:	1ad3      	subcs	r3, r2, r3
 800aa1e:	6073      	str	r3, [r6, #4]
 800aa20:	e7d7      	b.n	800a9d2 <ai_platform_network_process+0x3aa>
 800aa22:	2700      	movs	r7, #0
 800aa24:	e767      	b.n	800a8f6 <ai_platform_network_process+0x2ce>
 800aa26:	461d      	mov	r5, r3
 800aa28:	461f      	mov	r7, r3
 800aa2a:	e764      	b.n	800a8f6 <ai_platform_network_process+0x2ce>
 800aa2c:	f104 0010 	add.w	r0, r4, #16
 800aa30:	2218      	movs	r2, #24
 800aa32:	2113      	movs	r1, #19
 800aa34:	f000 f940 	bl	800acb8 <core_set_error>
 800aa38:	f04f 0b00 	mov.w	fp, #0
 800aa3c:	e67a      	b.n	800a734 <ai_platform_network_process+0x10c>
 800aa3e:	bf00      	nop

0800aa40 <ai_platform_observer_node_info>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	460c      	mov	r4, r1
 800aa44:	b120      	cbz	r0, 800aa50 <ai_platform_observer_node_info+0x10>
 800aa46:	4b32      	ldr	r3, [pc, #200]	@ (800ab10 <ai_platform_observer_node_info+0xd0>)
 800aa48:	6802      	ldr	r2, [r0, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	bf18      	it	ne
 800aa4e:	2000      	movne	r0, #0
 800aa50:	4a30      	ldr	r2, [pc, #192]	@ (800ab14 <ai_platform_observer_node_info+0xd4>)
 800aa52:	2501      	movs	r5, #1
 800aa54:	4616      	mov	r6, r2
 800aa56:	4930      	ldr	r1, [pc, #192]	@ (800ab18 <ai_platform_observer_node_info+0xd8>)
 800aa58:	680b      	ldr	r3, [r1, #0]
 800aa5a:	f023 0301 	bic.w	r3, r3, #1
 800aa5e:	600b      	str	r3, [r1, #0]
 800aa60:	6015      	str	r5, [r2, #0]
 800aa62:	6832      	ldr	r2, [r6, #0]
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	d1fc      	bne.n	800aa62 <ai_platform_observer_node_info+0x22>
 800aa68:	4b2c      	ldr	r3, [pc, #176]	@ (800ab1c <ai_platform_observer_node_info+0xdc>)
 800aa6a:	4d2d      	ldr	r5, [pc, #180]	@ (800ab20 <ai_platform_observer_node_info+0xe0>)
 800aa6c:	492d      	ldr	r1, [pc, #180]	@ (800ab24 <ai_platform_observer_node_info+0xe4>)
 800aa6e:	601d      	str	r5, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	428b      	cmp	r3, r1
 800aa74:	d000      	beq.n	800aa78 <ai_platform_observer_node_info+0x38>
 800aa76:	e7fe      	b.n	800aa76 <ai_platform_observer_node_info+0x36>
 800aa78:	b330      	cbz	r0, 800aac8 <ai_platform_observer_node_info+0x88>
 800aa7a:	b334      	cbz	r4, 800aaca <ai_platform_observer_node_info+0x8a>
 800aa7c:	68c3      	ldr	r3, [r0, #12]
 800aa7e:	f013 0502 	ands.w	r5, r3, #2
 800aa82:	d029      	beq.n	800aad8 <ai_platform_observer_node_info+0x98>
 800aa84:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800aa86:	b373      	cbz	r3, 800aae6 <ai_platform_observer_node_info+0xa6>
 800aa88:	8821      	ldrh	r1, [r4, #0]
 800aa8a:	b179      	cbz	r1, 800aaac <ai_platform_observer_node_info+0x6c>
 800aa8c:	68dd      	ldr	r5, [r3, #12]
 800aa8e:	42ab      	cmp	r3, r5
 800aa90:	d029      	beq.n	800aae6 <ai_platform_observer_node_info+0xa6>
 800aa92:	b345      	cbz	r5, 800aae6 <ai_platform_observer_node_info+0xa6>
 800aa94:	3901      	subs	r1, #1
 800aa96:	b289      	uxth	r1, r1
 800aa98:	462b      	mov	r3, r5
 800aa9a:	e005      	b.n	800aaa8 <ai_platform_observer_node_info+0x68>
 800aa9c:	68dd      	ldr	r5, [r3, #12]
 800aa9e:	3201      	adds	r2, #1
 800aaa0:	429d      	cmp	r5, r3
 800aaa2:	d020      	beq.n	800aae6 <ai_platform_observer_node_info+0xa6>
 800aaa4:	b1fd      	cbz	r5, 800aae6 <ai_platform_observer_node_info+0xa6>
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	428a      	cmp	r2, r1
 800aaaa:	d1f7      	bne.n	800aa9c <ai_platform_observer_node_info+0x5c>
 800aaac:	f242 7221 	movw	r2, #10017	@ 0x2721
 800aab0:	6959      	ldr	r1, [r3, #20]
 800aab2:	60e1      	str	r1, [r4, #12]
 800aab4:	8819      	ldrh	r1, [r3, #0]
 800aab6:	4291      	cmp	r1, r2
 800aab8:	d01c      	beq.n	800aaf4 <ai_platform_observer_node_info+0xb4>
 800aaba:	2200      	movs	r2, #0
 800aabc:	2001      	movs	r0, #1
 800aabe:	8859      	ldrh	r1, [r3, #2]
 800aac0:	80a1      	strh	r1, [r4, #4]
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	60a2      	str	r2, [r4, #8]
 800aac6:	8063      	strh	r3, [r4, #2]
 800aac8:	bd70      	pop	{r4, r5, r6, pc}
 800aaca:	2210      	movs	r2, #16
 800aacc:	4410      	add	r0, r2
 800aace:	4611      	mov	r1, r2
 800aad0:	f000 f8f2 	bl	800acb8 <core_set_error>
 800aad4:	4620      	mov	r0, r4
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	2210      	movs	r2, #16
 800aada:	2111      	movs	r1, #17
 800aadc:	3010      	adds	r0, #16
 800aade:	f000 f8eb 	bl	800acb8 <core_set_error>
 800aae2:	4628      	mov	r0, r5
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	2214      	movs	r2, #20
 800aae8:	3010      	adds	r0, #16
 800aaea:	4611      	mov	r1, r2
 800aaec:	f000 f8e4 	bl	800acb8 <core_set_error>
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	8853      	ldrh	r3, [r2, #2]
 800aafa:	80a3      	strh	r3, [r4, #4]
 800aafc:	8813      	ldrh	r3, [r2, #0]
 800aafe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab06:	8063      	strh	r3, [r4, #2]
 800ab08:	6953      	ldr	r3, [r2, #20]
 800ab0a:	60a3      	str	r3, [r4, #8]
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
 800ab0e:	bf00      	nop
 800ab10:	a1c00100 	.word	0xa1c00100
 800ab14:	40023008 	.word	0x40023008
 800ab18:	e0002000 	.word	0xe0002000
 800ab1c:	40023000 	.word	0x40023000
 800ab20:	f407a5c2 	.word	0xf407a5c2
 800ab24:	b5e8b5cd 	.word	0xb5e8b5cd

0800ab28 <ai_platform_observer_register>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	4690      	mov	r8, r2
 800ab30:	461e      	mov	r6, r3
 800ab32:	4604      	mov	r4, r0
 800ab34:	b120      	cbz	r0, 800ab40 <ai_platform_observer_register+0x18>
 800ab36:	4b2c      	ldr	r3, [pc, #176]	@ (800abe8 <ai_platform_observer_register+0xc0>)
 800ab38:	6802      	ldr	r2, [r0, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	bf18      	it	ne
 800ab3e:	2400      	movne	r4, #0
 800ab40:	4a2a      	ldr	r2, [pc, #168]	@ (800abec <ai_platform_observer_register+0xc4>)
 800ab42:	2001      	movs	r0, #1
 800ab44:	4694      	mov	ip, r2
 800ab46:	492a      	ldr	r1, [pc, #168]	@ (800abf0 <ai_platform_observer_register+0xc8>)
 800ab48:	680b      	ldr	r3, [r1, #0]
 800ab4a:	f023 0301 	bic.w	r3, r3, #1
 800ab4e:	600b      	str	r3, [r1, #0]
 800ab50:	6010      	str	r0, [r2, #0]
 800ab52:	f8dc 5000 	ldr.w	r5, [ip]
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	d1fb      	bne.n	800ab52 <ai_platform_observer_register+0x2a>
 800ab5a:	4b26      	ldr	r3, [pc, #152]	@ (800abf4 <ai_platform_observer_register+0xcc>)
 800ab5c:	4926      	ldr	r1, [pc, #152]	@ (800abf8 <ai_platform_observer_register+0xd0>)
 800ab5e:	4a27      	ldr	r2, [pc, #156]	@ (800abfc <ai_platform_observer_register+0xd4>)
 800ab60:	6019      	str	r1, [r3, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d000      	beq.n	800ab6a <ai_platform_observer_register+0x42>
 800ab68:	e7fe      	b.n	800ab68 <ai_platform_observer_register+0x40>
 800ab6a:	b164      	cbz	r4, 800ab86 <ai_platform_observer_register+0x5e>
 800ab6c:	f8d4 905c 	ldr.w	r9, [r4, #92]	@ 0x5c
 800ab70:	f1b9 0f00 	cmp.w	r9, #0
 800ab74:	d00a      	beq.n	800ab8c <ai_platform_observer_register+0x64>
 800ab76:	f104 0010 	add.w	r0, r4, #16
 800ab7a:	2240      	movs	r2, #64	@ 0x40
 800ab7c:	2111      	movs	r1, #17
 800ab7e:	f000 f89b 	bl	800acb8 <core_set_error>
 800ab82:	4628      	mov	r0, r5
 800ab84:	e000      	b.n	800ab88 <ai_platform_observer_register+0x60>
 800ab86:	4620      	mov	r0, r4
 800ab88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8c:	2014      	movs	r0, #20
 800ab8e:	f000 f86d 	bl	800ac6c <core_mem_alloc>
 800ab92:	4605      	mov	r5, r0
 800ab94:	b300      	cbz	r0, 800abd8 <ai_platform_observer_register+0xb0>
 800ab96:	f8a0 900e 	strh.w	r9, [r0, #14]
 800ab9a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ab9c:	b17b      	cbz	r3, 800abbe <ai_platform_observer_register+0x96>
 800ab9e:	2201      	movs	r2, #1
 800aba0:	81c2      	strh	r2, [r0, #14]
 800aba2:	68d8      	ldr	r0, [r3, #12]
 800aba4:	4283      	cmp	r3, r0
 800aba6:	d00a      	beq.n	800abbe <ai_platform_observer_register+0x96>
 800aba8:	b148      	cbz	r0, 800abbe <ai_platform_observer_register+0x96>
 800abaa:	2302      	movs	r3, #2
 800abac:	e002      	b.n	800abb4 <ai_platform_observer_register+0x8c>
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4610      	mov	r0, r2
 800abb2:	b122      	cbz	r2, 800abbe <ai_platform_observer_register+0x96>
 800abb4:	81eb      	strh	r3, [r5, #14]
 800abb6:	68c2      	ldr	r2, [r0, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	4282      	cmp	r2, r0
 800abbc:	d1f7      	bne.n	800abae <ai_platform_observer_register+0x86>
 800abbe:	2200      	movs	r2, #0
 800abc0:	b2f3      	uxtb	r3, r6
 800abc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800abc6:	60ab      	str	r3, [r5, #8]
 800abc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac00 <ai_platform_observer_register+0xd8>)
 800abca:	e9c5 7800 	strd	r7, r8, [r5]
 800abce:	81aa      	strh	r2, [r5, #12]
 800abd0:	2001      	movs	r0, #1
 800abd2:	e9c4 3516 	strd	r3, r5, [r4, #88]	@ 0x58
 800abd6:	e7d7      	b.n	800ab88 <ai_platform_observer_register+0x60>
 800abd8:	f104 0010 	add.w	r0, r4, #16
 800abdc:	2210      	movs	r2, #16
 800abde:	2131      	movs	r1, #49	@ 0x31
 800abe0:	f000 f86a 	bl	800acb8 <core_set_error>
 800abe4:	4628      	mov	r0, r5
 800abe6:	e7cf      	b.n	800ab88 <ai_platform_observer_register+0x60>
 800abe8:	a1c00100 	.word	0xa1c00100
 800abec:	40023008 	.word	0x40023008
 800abf0:	e0002000 	.word	0xe0002000
 800abf4:	40023000 	.word	0x40023000
 800abf8:	f407a5c2 	.word	0xf407a5c2
 800abfc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ac00:	08009d99 	.word	0x08009d99

0800ac04 <ai_platform_observer_unregister>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4604      	mov	r4, r0
 800ac08:	b120      	cbz	r0, 800ac14 <ai_platform_observer_unregister+0x10>
 800ac0a:	4b12      	ldr	r3, [pc, #72]	@ (800ac54 <ai_platform_observer_unregister+0x50>)
 800ac0c:	6802      	ldr	r2, [r0, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	bf18      	it	ne
 800ac12:	2400      	movne	r4, #0
 800ac14:	4a10      	ldr	r2, [pc, #64]	@ (800ac58 <ai_platform_observer_unregister+0x54>)
 800ac16:	2001      	movs	r0, #1
 800ac18:	4615      	mov	r5, r2
 800ac1a:	4910      	ldr	r1, [pc, #64]	@ (800ac5c <ai_platform_observer_unregister+0x58>)
 800ac1c:	680b      	ldr	r3, [r1, #0]
 800ac1e:	f023 0301 	bic.w	r3, r3, #1
 800ac22:	600b      	str	r3, [r1, #0]
 800ac24:	6010      	str	r0, [r2, #0]
 800ac26:	682b      	ldr	r3, [r5, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1fc      	bne.n	800ac26 <ai_platform_observer_unregister+0x22>
 800ac2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac60 <ai_platform_observer_unregister+0x5c>)
 800ac2e:	490d      	ldr	r1, [pc, #52]	@ (800ac64 <ai_platform_observer_unregister+0x60>)
 800ac30:	4a0d      	ldr	r2, [pc, #52]	@ (800ac68 <ai_platform_observer_unregister+0x64>)
 800ac32:	6019      	str	r1, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d000      	beq.n	800ac3c <ai_platform_observer_unregister+0x38>
 800ac3a:	e7fe      	b.n	800ac3a <ai_platform_observer_unregister+0x36>
 800ac3c:	b144      	cbz	r4, 800ac50 <ai_platform_observer_unregister+0x4c>
 800ac3e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800ac40:	b108      	cbz	r0, 800ac46 <ai_platform_observer_unregister+0x42>
 800ac42:	f000 f821 	bl	800ac88 <core_mem_free>
 800ac46:	2300      	movs	r3, #0
 800ac48:	e9c4 3316 	strd	r3, r3, [r4, #88]	@ 0x58
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	4620      	mov	r0, r4
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	a1c00100 	.word	0xa1c00100
 800ac58:	40023008 	.word	0x40023008
 800ac5c:	e0002000 	.word	0xe0002000
 800ac60:	40023000 	.word	0x40023000
 800ac64:	f407a5c2 	.word	0xf407a5c2
 800ac68:	b5e8b5cd 	.word	0xb5e8b5cd

0800ac6c <core_mem_alloc>:
 800ac6c:	b148      	cbz	r0, 800ac82 <core_mem_alloc+0x16>
 800ac6e:	b508      	push	{r3, lr}
 800ac70:	3004      	adds	r0, #4
 800ac72:	f000 fe69 	bl	800b948 <malloc>
 800ac76:	b110      	cbz	r0, 800ac7e <core_mem_alloc+0x12>
 800ac78:	6000      	str	r0, [r0, #0]
 800ac7a:	3004      	adds	r0, #4
 800ac7c:	bd08      	pop	{r3, pc}
 800ac7e:	2000      	movs	r0, #0
 800ac80:	bd08      	pop	{r3, pc}
 800ac82:	2000      	movs	r0, #0
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <core_mem_free>:
 800ac88:	b168      	cbz	r0, 800aca6 <core_mem_free+0x1e>
 800ac8a:	b508      	push	{r3, lr}
 800ac8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ac90:	1f03      	subs	r3, r0, #4
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d000      	beq.n	800ac98 <core_mem_free+0x10>
 800ac96:	bd08      	pop	{r3, pc}
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d0fc      	beq.n	800ac96 <core_mem_free+0xe>
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fe5b 	bl	800b958 <free>
 800aca2:	2000      	movs	r0, #0
 800aca4:	bd08      	pop	{r3, pc}
 800aca6:	4770      	bx	lr

0800aca8 <core_init>:
 800aca8:	2001      	movs	r0, #1
 800acaa:	4770      	bx	lr

0800acac <core_get_error>:
 800acac:	4603      	mov	r3, r0
 800acae:	2200      	movs	r2, #0
 800acb0:	6800      	ldr	r0, [r0, #0]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop

0800acb8 <core_set_error>:
 800acb8:	4603      	mov	r3, r0
 800acba:	7800      	ldrb	r0, [r0, #0]
 800acbc:	b930      	cbnz	r0, 800accc <core_set_error+0x14>
 800acbe:	7019      	strb	r1, [r3, #0]
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	2001      	movs	r0, #1
 800acc4:	f362 211f 	bfi	r1, r2, #8, #24
 800acc8:	6019      	str	r1, [r3, #0]
 800acca:	4770      	bx	lr
 800accc:	2000      	movs	r0, #0
 800acce:	4770      	bx	lr

0800acd0 <ai_dict8_dot_array_f32>:
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	9f06      	ldr	r7, [sp, #24]
 800acd6:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800ae50 <ai_dict8_dot_array_f32+0x180>
 800acda:	ea5f 0ed7 	movs.w	lr, r7, lsr #3
 800acde:	d061      	beq.n	800ada4 <ai_dict8_dot_array_f32+0xd4>
 800ace0:	f101 0408 	add.w	r4, r1, #8
 800ace4:	ea4f 08ce 	mov.w	r8, lr, lsl #3
 800ace8:	eb04 0c08 	add.w	ip, r4, r8
 800acec:	f103 0520 	add.w	r5, r3, #32
 800acf0:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800acf4:	ed55 6a07 	vldr	s13, [r5, #-28]	@ 0xffffffe4
 800acf8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800acfc:	edd6 7a00 	vldr	s15, [r6]
 800ad00:	f814 6c08 	ldrb.w	r6, [r4, #-8]
 800ad04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad0c:	ed96 6a00 	vldr	s12, [r6]
 800ad10:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 800ad14:	f814 6c06 	ldrb.w	r6, [r4, #-6]
 800ad18:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad20:	ed96 6a00 	vldr	s12, [r6]
 800ad24:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800ad28:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800ad2c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad34:	ed96 6a00 	vldr	s12, [r6]
 800ad38:	ed55 6a05 	vldr	s13, [r5, #-20]	@ 0xffffffec
 800ad3c:	f814 6c04 	ldrb.w	r6, [r4, #-4]
 800ad40:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad48:	ed96 6a00 	vldr	s12, [r6]
 800ad4c:	ed55 6a04 	vldr	s13, [r5, #-16]
 800ad50:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800ad54:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad5c:	ed96 6a00 	vldr	s12, [r6]
 800ad60:	ed55 6a03 	vldr	s13, [r5, #-12]
 800ad64:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800ad68:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad70:	ed96 6a00 	vldr	s12, [r6]
 800ad74:	ed55 6a02 	vldr	s13, [r5, #-8]
 800ad78:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800ad7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad84:	ed55 6a01 	vldr	s13, [r5, #-4]
 800ad88:	ed96 6a00 	vldr	s12, [r6]
 800ad8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad90:	3408      	adds	r4, #8
 800ad92:	45a4      	cmp	ip, r4
 800ad94:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad98:	f105 0520 	add.w	r5, r5, #32
 800ad9c:	d1a8      	bne.n	800acf0 <ai_dict8_dot_array_f32+0x20>
 800ad9e:	4441      	add	r1, r8
 800ada0:	eb03 134e 	add.w	r3, r3, lr, lsl #5
 800ada4:	f017 0707 	ands.w	r7, r7, #7
 800ada8:	d04a      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800adaa:	780c      	ldrb	r4, [r1, #0]
 800adac:	edd3 6a00 	vldr	s13, [r3]
 800adb0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800adb4:	edd4 7a00 	vldr	s15, [r4]
 800adb8:	2f01      	cmp	r7, #1
 800adba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800adbe:	d03f      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800adc0:	784c      	ldrb	r4, [r1, #1]
 800adc2:	edd3 6a01 	vldr	s13, [r3, #4]
 800adc6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800adca:	edd4 7a00 	vldr	s15, [r4]
 800adce:	2f02      	cmp	r7, #2
 800add0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800add4:	d034      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800add6:	788c      	ldrb	r4, [r1, #2]
 800add8:	edd3 6a02 	vldr	s13, [r3, #8]
 800addc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ade0:	edd4 7a00 	vldr	s15, [r4]
 800ade4:	2f03      	cmp	r7, #3
 800ade6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800adea:	d029      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800adec:	78cc      	ldrb	r4, [r1, #3]
 800adee:	edd3 6a03 	vldr	s13, [r3, #12]
 800adf2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800adf6:	edd4 7a00 	vldr	s15, [r4]
 800adfa:	2f04      	cmp	r7, #4
 800adfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae00:	d01e      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800ae02:	790c      	ldrb	r4, [r1, #4]
 800ae04:	edd3 6a04 	vldr	s13, [r3, #16]
 800ae08:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ae0c:	edd4 7a00 	vldr	s15, [r4]
 800ae10:	2f05      	cmp	r7, #5
 800ae12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae16:	d013      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800ae18:	794c      	ldrb	r4, [r1, #5]
 800ae1a:	edd3 6a05 	vldr	s13, [r3, #20]
 800ae1e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ae22:	edd4 7a00 	vldr	s15, [r4]
 800ae26:	2f06      	cmp	r7, #6
 800ae28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae2c:	d008      	beq.n	800ae40 <ai_dict8_dot_array_f32+0x170>
 800ae2e:	7989      	ldrb	r1, [r1, #6]
 800ae30:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ae38:	edd2 6a00 	vldr	s13, [r2]
 800ae3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae40:	edd0 7a00 	vldr	s15, [r0]
 800ae44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae48:	ed80 7a00 	vstr	s14, [r0]
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	00000000 	.word	0x00000000

0800ae54 <ai_dict4_dot_array_f32>:
 800ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	9f08      	ldr	r7, [sp, #32]
 800ae5a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800afc4 <ai_dict4_dot_array_f32+0x170>
 800ae5e:	f027 0c01 	bic.w	ip, r7, #1
 800ae62:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800ae66:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800ae6a:	d067      	beq.n	800af3c <ai_dict4_dot_array_f32+0xe8>
 800ae6c:	1d0d      	adds	r5, r1, #4
 800ae6e:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800ae72:	eb05 0e09 	add.w	lr, r5, r9
 800ae76:	f103 0420 	add.w	r4, r3, #32
 800ae7a:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800ae7e:	ed54 6a07 	vldr	s13, [r4, #-28]	@ 0xffffffe4
 800ae82:	f006 0a0f 	and.w	sl, r6, #15
 800ae86:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800ae8a:	edda 7a00 	vldr	s15, [sl]
 800ae8e:	0936      	lsrs	r6, r6, #4
 800ae90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae94:	ed96 6a00 	vldr	s12, [r6]
 800ae98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae9c:	ed54 6a08 	vldr	s13, [r4, #-32]	@ 0xffffffe0
 800aea0:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 800aea4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800aea8:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800aeac:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800aeb0:	ed9a 6a00 	vldr	s12, [sl]
 800aeb4:	ed54 6a06 	vldr	s13, [r4, #-24]	@ 0xffffffe8
 800aeb8:	f006 060f 	and.w	r6, r6, #15
 800aebc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aec0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800aec4:	ed96 6a00 	vldr	s12, [r6]
 800aec8:	ed54 6a05 	vldr	s13, [r4, #-20]	@ 0xffffffec
 800aecc:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 800aed0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800aed4:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800aed8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800aedc:	ed9a 6a00 	vldr	s12, [sl]
 800aee0:	ed54 6a04 	vldr	s13, [r4, #-16]
 800aee4:	f006 060f 	and.w	r6, r6, #15
 800aee8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aeec:	eee6 7a26 	vfma.f32	s15, s12, s13
 800aef0:	ed96 6a00 	vldr	s12, [r6]
 800aef4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800aef8:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800aefc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800af00:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800af04:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800af08:	ed54 6a02 	vldr	s13, [r4, #-8]
 800af0c:	ed9a 6a00 	vldr	s12, [sl]
 800af10:	f006 060f 	and.w	r6, r6, #15
 800af14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af18:	eee6 7a26 	vfma.f32	s15, s12, s13
 800af1c:	ed54 6a01 	vldr	s13, [r4, #-4]
 800af20:	ed96 6a00 	vldr	s12, [r6]
 800af24:	eee6 7a26 	vfma.f32	s15, s12, s13
 800af28:	3504      	adds	r5, #4
 800af2a:	45ae      	cmp	lr, r5
 800af2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af30:	f104 0420 	add.w	r4, r4, #32
 800af34:	d1a1      	bne.n	800ae7a <ai_dict4_dot_array_f32+0x26>
 800af36:	4449      	add	r1, r9
 800af38:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800af3c:	459c      	cmp	ip, r3
 800af3e:	d92d      	bls.n	800af9c <ai_dict4_dot_array_f32+0x148>
 800af40:	f10c 0c07 	add.w	ip, ip, #7
 800af44:	f103 0508 	add.w	r5, r3, #8
 800af48:	ebac 0c05 	sub.w	ip, ip, r5
 800af4c:	f02c 0407 	bic.w	r4, ip, #7
 800af50:	f103 0810 	add.w	r8, r3, #16
 800af54:	44a0      	add	r8, r4
 800af56:	f101 3eff 	add.w	lr, r1, #4294967295
 800af5a:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800af5e:	ed55 6a01 	vldr	s13, [r5, #-4]
 800af62:	f004 060f 	and.w	r6, r4, #15
 800af66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af6a:	edd6 7a00 	vldr	s15, [r6]
 800af6e:	0924      	lsrs	r4, r4, #4
 800af70:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800af74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800af78:	ed94 6a00 	vldr	s12, [r4]
 800af7c:	ed55 6a02 	vldr	s13, [r5, #-8]
 800af80:	eee6 7a26 	vfma.f32	s15, s12, s13
 800af84:	3508      	adds	r5, #8
 800af86:	45a8      	cmp	r8, r5
 800af88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af8c:	d1e5      	bne.n	800af5a <ai_dict4_dot_array_f32+0x106>
 800af8e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800af92:	f10c 0c01 	add.w	ip, ip, #1
 800af96:	4461      	add	r1, ip
 800af98:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800af9c:	07fc      	lsls	r4, r7, #31
 800af9e:	d509      	bpl.n	800afb4 <ai_dict4_dot_array_f32+0x160>
 800afa0:	7809      	ldrb	r1, [r1, #0]
 800afa2:	edd3 7a00 	vldr	s15, [r3]
 800afa6:	090b      	lsrs	r3, r1, #4
 800afa8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800afac:	edd2 6a00 	vldr	s13, [r2]
 800afb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800afb4:	edd0 7a00 	vldr	s15, [r0]
 800afb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afbc:	ed80 7a00 	vstr	s14, [r0]
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc4:	00000000 	.word	0x00000000

0800afc8 <forward_dense>:
 800afc8:	6942      	ldr	r2, [r0, #20]
 800afca:	8813      	ldrh	r3, [r2, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 81c7 	beq.w	800b360 <forward_dense+0x398>
 800afd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd6:	6851      	ldr	r1, [r2, #4]
 800afd8:	b091      	sub	sp, #68	@ 0x44
 800afda:	684d      	ldr	r5, [r1, #4]
 800afdc:	b105      	cbz	r5, 800afe0 <forward_dense+0x18>
 800afde:	682d      	ldr	r5, [r5, #0]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	f240 81ba 	bls.w	800b35a <forward_dense+0x392>
 800afe6:	690a      	ldr	r2, [r1, #16]
 800afe8:	b102      	cbz	r2, 800afec <forward_dense+0x24>
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	2b02      	cmp	r3, #2
 800afee:	f000 81b9 	beq.w	800b364 <forward_dense+0x39c>
 800aff2:	69cb      	ldr	r3, [r1, #28]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 8208 	beq.w	800b40a <forward_dense+0x442>
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	9008      	str	r0, [sp, #32]
 800affe:	f111 0018 	adds.w	r0, r1, #24
 800b002:	f000 81dd 	beq.w	800b3c0 <forward_dense+0x3f8>
 800b006:	8b09      	ldrh	r1, [r1, #24]
 800b008:	2901      	cmp	r1, #1
 800b00a:	f240 81fb 	bls.w	800b404 <forward_dense+0x43c>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 81d8 	beq.w	800b3c4 <forward_dense+0x3fc>
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	9306      	str	r3, [sp, #24]
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	68d6      	ldr	r6, [r2, #12]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	e9d6 0402 	ldrd	r0, r4, [r6, #8]
 800b022:	681f      	ldr	r7, [r3, #0]
 800b024:	fb04 f000 	mul.w	r0, r4, r0
 800b028:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800b02c:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800b030:	fa4e f10c 	asr.w	r1, lr, ip
 800b034:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800b038:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b03a:	68e9      	ldr	r1, [r5, #12]
 800b03c:	2f04      	cmp	r7, #4
 800b03e:	9007      	str	r0, [sp, #28]
 800b040:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800b044:	6870      	ldr	r0, [r6, #4]
 800b046:	f000 81da 	beq.w	800b3fe <forward_dense+0x436>
 800b04a:	2f08      	cmp	r7, #8
 800b04c:	f000 81d7 	beq.w	800b3fe <forward_dense+0x436>
 800b050:	f04f 0a00 	mov.w	sl, #0
 800b054:	6992      	ldr	r2, [r2, #24]
 800b056:	69a9      	ldr	r1, [r5, #24]
 800b058:	6894      	ldr	r4, [r2, #8]
 800b05a:	9a08      	ldr	r2, [sp, #32]
 800b05c:	0080      	lsls	r0, r0, #2
 800b05e:	6952      	ldr	r2, [r2, #20]
 800b060:	9404      	str	r4, [sp, #16]
 800b062:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b066:	9a07      	ldr	r2, [sp, #28]
 800b068:	9009      	str	r0, [sp, #36]	@ 0x24
 800b06a:	688f      	ldr	r7, [r1, #8]
 800b06c:	1826      	adds	r6, r4, r0
 800b06e:	2a00      	cmp	r2, #0
 800b070:	f000 81c2 	beq.w	800b3f8 <forward_dense+0x430>
 800b074:	2200      	movs	r2, #0
 800b076:	9205      	str	r2, [sp, #20]
 800b078:	f1a8 0210 	sub.w	r2, r8, #16
 800b07c:	0912      	lsrs	r2, r2, #4
 800b07e:	3201      	adds	r2, #1
 800b080:	0192      	lsls	r2, r2, #6
 800b082:	920c      	str	r2, [sp, #48]	@ 0x30
 800b084:	689d      	ldr	r5, [r3, #8]
 800b086:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800b08a:	9b06      	ldr	r3, [sp, #24]
 800b08c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b08e:	f008 020f 	and.w	r2, r8, #15
 800b092:	eddf 4ad8 	vldr	s9, [pc, #864]	@ 800b3f4 <forward_dense+0x42c>
 800b096:	920d      	str	r2, [sp, #52]	@ 0x34
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d042      	beq.n	800b122 <forward_dense+0x15a>
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	689c      	ldr	r4, [r3, #8]
 800b0a0:	9b04      	ldr	r3, [sp, #16]
 800b0a2:	f1ba 0f00 	cmp.w	sl, #0
 800b0a6:	d041      	beq.n	800b12c <forward_dense+0x164>
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	d229      	bcs.n	800b100 <forward_dense+0x138>
 800b0ac:	469b      	mov	fp, r3
 800b0ae:	ab0f      	add	r3, sp, #60	@ 0x3c
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	4633      	mov	r3, r6
 800b0b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0b6:	4646      	mov	r6, r8
 800b0b8:	2a04      	cmp	r2, #4
 800b0ba:	4698      	mov	r8, r3
 800b0bc:	f000 8155 	beq.w	800b36a <forward_dense+0x3a2>
 800b0c0:	2c00      	cmp	r4, #0
 800b0c2:	f000 8181 	beq.w	800b3c8 <forward_dense+0x400>
 800b0c6:	f8d4 c000 	ldr.w	ip, [r4]
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	9600      	str	r6, [sp, #0]
 800b0d0:	4652      	mov	r2, sl
 800b0d2:	9803      	ldr	r0, [sp, #12]
 800b0d4:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 800b0d8:	f7ff fdfa 	bl	800acd0 <ai_dict8_dot_array_f32>
 800b0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0de:	3404      	adds	r4, #4
 800b0e0:	f84b 3b04 	str.w	r3, [fp], #4
 800b0e4:	45c3      	cmp	fp, r8
 800b0e6:	444d      	add	r5, r9
 800b0e8:	d3ea      	bcc.n	800b0c0 <forward_dense+0xf8>
 800b0ea:	4643      	mov	r3, r8
 800b0ec:	46b0      	mov	r8, r6
 800b0ee:	461e      	mov	r6, r3
 800b0f0:	9a04      	ldr	r2, [sp, #16]
 800b0f2:	43d3      	mvns	r3, r2
 800b0f4:	4433      	add	r3, r6
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	18d3      	adds	r3, r2, r3
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b102:	9b05      	ldr	r3, [sp, #20]
 800b104:	4417      	add	r7, r2
 800b106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b108:	3301      	adds	r3, #1
 800b10a:	4416      	add	r6, r2
 800b10c:	9a07      	ldr	r2, [sp, #28]
 800b10e:	9305      	str	r3, [sp, #20]
 800b110:	4293      	cmp	r3, r2
 800b112:	f000 8171 	beq.w	800b3f8 <forward_dense+0x430>
 800b116:	9b08      	ldr	r3, [sp, #32]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	689d      	ldr	r5, [r3, #8]
 800b11c:	9b06      	ldr	r3, [sp, #24]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1bc      	bne.n	800b09c <forward_dense+0xd4>
 800b122:	461c      	mov	r4, r3
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	f1ba 0f00 	cmp.w	sl, #0
 800b12a:	d1bd      	bne.n	800b0a8 <forward_dense+0xe0>
 800b12c:	42b3      	cmp	r3, r6
 800b12e:	d2e7      	bcs.n	800b100 <forward_dense+0x138>
 800b130:	4618      	mov	r0, r3
 800b132:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b134:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800b138:	eb07 0c03 	add.w	ip, r7, r3
 800b13c:	469e      	mov	lr, r3
 800b13e:	2c00      	cmp	r4, #0
 800b140:	f000 80ff 	beq.w	800b342 <forward_dense+0x37a>
 800b144:	f1b8 0f0f 	cmp.w	r8, #15
 800b148:	ed94 6a00 	vldr	s12, [r4]
 800b14c:	f104 0404 	add.w	r4, r4, #4
 800b150:	f240 80fd 	bls.w	800b34e <forward_dense+0x386>
 800b154:	4641      	mov	r1, r8
 800b156:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800b3f4 <forward_dense+0x42c>
 800b15a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b15e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800b162:	ed12 7a0f 	vldr	s14, [r2, #-60]	@ 0xffffffc4
 800b166:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800b16a:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 800b16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b172:	ed12 7a10 	vldr	s14, [r2, #-64]	@ 0xffffffc0
 800b176:	ed12 5a0e 	vldr	s10, [r2, #-56]	@ 0xffffffc8
 800b17a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b17e:	ed13 7a0e 	vldr	s14, [r3, #-56]	@ 0xffffffc8
 800b182:	ed52 5a0d 	vldr	s11, [r2, #-52]	@ 0xffffffcc
 800b186:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b18a:	ed13 7a0d 	vldr	s14, [r3, #-52]	@ 0xffffffcc
 800b18e:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800b192:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b196:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
 800b19a:	ed53 5a0b 	vldr	s11, [r3, #-44]	@ 0xffffffd4
 800b19e:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b1a2:	ed12 7a0b 	vldr	s14, [r2, #-44]	@ 0xffffffd4
 800b1a6:	ed12 5a0a 	vldr	s10, [r2, #-40]	@ 0xffffffd8
 800b1aa:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b1ae:	ed13 7a0a 	vldr	s14, [r3, #-40]	@ 0xffffffd8
 800b1b2:	ed52 5a09 	vldr	s11, [r2, #-36]	@ 0xffffffdc
 800b1b6:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b1ba:	ed13 7a09 	vldr	s14, [r3, #-36]	@ 0xffffffdc
 800b1be:	ed13 5a08 	vldr	s10, [r3, #-32]	@ 0xffffffe0
 800b1c2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b1c6:	ed12 7a08 	vldr	s14, [r2, #-32]	@ 0xffffffe0
 800b1ca:	ed53 5a07 	vldr	s11, [r3, #-28]	@ 0xffffffe4
 800b1ce:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b1d2:	ed12 7a07 	vldr	s14, [r2, #-28]	@ 0xffffffe4
 800b1d6:	ed13 5a06 	vldr	s10, [r3, #-24]	@ 0xffffffe8
 800b1da:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b1de:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
 800b1e2:	ed52 5a05 	vldr	s11, [r2, #-20]	@ 0xffffffec
 800b1e6:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b1ea:	ed13 7a05 	vldr	s14, [r3, #-20]	@ 0xffffffec
 800b1ee:	ed13 5a04 	vldr	s10, [r3, #-16]
 800b1f2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b1f6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b1fa:	ed52 5a03 	vldr	s11, [r2, #-12]
 800b1fe:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b202:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b206:	ed12 5a02 	vldr	s10, [r2, #-8]
 800b20a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b20e:	ed13 7a02 	vldr	s14, [r3, #-8]
 800b212:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b216:	eee5 7a07 	vfma.f32	s15, s10, s14
 800b21a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b21e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b222:	3910      	subs	r1, #16
 800b224:	290f      	cmp	r1, #15
 800b226:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b22a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b22e:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800b232:	d896      	bhi.n	800b162 <forward_dense+0x19a>
 800b234:	465b      	mov	r3, fp
 800b236:	4662      	mov	r2, ip
 800b238:	eb05 010e 	add.w	r1, r5, lr
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d075      	beq.n	800b32c <forward_dense+0x364>
 800b240:	ed91 7a00 	vldr	s14, [r1]
 800b244:	edd2 7a00 	vldr	s15, [r2]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b24e:	d06d      	beq.n	800b32c <forward_dense+0x364>
 800b250:	ed91 7a01 	vldr	s14, [r1, #4]
 800b254:	edd2 7a01 	vldr	s15, [r2, #4]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b25e:	d065      	beq.n	800b32c <forward_dense+0x364>
 800b260:	ed91 7a02 	vldr	s14, [r1, #8]
 800b264:	edd2 7a02 	vldr	s15, [r2, #8]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b26e:	d05d      	beq.n	800b32c <forward_dense+0x364>
 800b270:	ed91 7a03 	vldr	s14, [r1, #12]
 800b274:	edd2 7a03 	vldr	s15, [r2, #12]
 800b278:	2b04      	cmp	r3, #4
 800b27a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b27e:	d055      	beq.n	800b32c <forward_dense+0x364>
 800b280:	ed91 7a04 	vldr	s14, [r1, #16]
 800b284:	edd2 7a04 	vldr	s15, [r2, #16]
 800b288:	2b05      	cmp	r3, #5
 800b28a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b28e:	d04d      	beq.n	800b32c <forward_dense+0x364>
 800b290:	ed91 7a05 	vldr	s14, [r1, #20]
 800b294:	edd2 7a05 	vldr	s15, [r2, #20]
 800b298:	2b06      	cmp	r3, #6
 800b29a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b29e:	d045      	beq.n	800b32c <forward_dense+0x364>
 800b2a0:	ed91 7a06 	vldr	s14, [r1, #24]
 800b2a4:	edd2 7a06 	vldr	s15, [r2, #24]
 800b2a8:	2b07      	cmp	r3, #7
 800b2aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b2ae:	d03d      	beq.n	800b32c <forward_dense+0x364>
 800b2b0:	ed91 7a07 	vldr	s14, [r1, #28]
 800b2b4:	edd2 7a07 	vldr	s15, [r2, #28]
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b2be:	d035      	beq.n	800b32c <forward_dense+0x364>
 800b2c0:	ed91 7a08 	vldr	s14, [r1, #32]
 800b2c4:	edd2 7a08 	vldr	s15, [r2, #32]
 800b2c8:	2b09      	cmp	r3, #9
 800b2ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b2ce:	d02d      	beq.n	800b32c <forward_dense+0x364>
 800b2d0:	ed91 7a09 	vldr	s14, [r1, #36]	@ 0x24
 800b2d4:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800b2d8:	2b0a      	cmp	r3, #10
 800b2da:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b2de:	d025      	beq.n	800b32c <forward_dense+0x364>
 800b2e0:	ed91 7a0a 	vldr	s14, [r1, #40]	@ 0x28
 800b2e4:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 800b2e8:	2b0b      	cmp	r3, #11
 800b2ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b2ee:	d01d      	beq.n	800b32c <forward_dense+0x364>
 800b2f0:	ed91 7a0b 	vldr	s14, [r1, #44]	@ 0x2c
 800b2f4:	edd2 7a0b 	vldr	s15, [r2, #44]	@ 0x2c
 800b2f8:	2b0c      	cmp	r3, #12
 800b2fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b2fe:	d015      	beq.n	800b32c <forward_dense+0x364>
 800b300:	ed91 7a0c 	vldr	s14, [r1, #48]	@ 0x30
 800b304:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 800b308:	2b0d      	cmp	r3, #13
 800b30a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b30e:	d00d      	beq.n	800b32c <forward_dense+0x364>
 800b310:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800b314:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b318:	2b0e      	cmp	r3, #14
 800b31a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b31e:	d005      	beq.n	800b32c <forward_dense+0x364>
 800b320:	ed91 7a0e 	vldr	s14, [r1, #56]	@ 0x38
 800b324:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 800b328:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b32c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b330:	ece0 6a01 	vstmia	r0!, {s13}
 800b334:	42b0      	cmp	r0, r6
 800b336:	444d      	add	r5, r9
 800b338:	f4bf aeda 	bcs.w	800b0f0 <forward_dense+0x128>
 800b33c:	2c00      	cmp	r4, #0
 800b33e:	f47f af01 	bne.w	800b144 <forward_dense+0x17c>
 800b342:	f1b8 0f0f 	cmp.w	r8, #15
 800b346:	eeb0 6a64 	vmov.f32	s12, s9
 800b34a:	f63f af03 	bhi.w	800b154 <forward_dense+0x18c>
 800b34e:	4643      	mov	r3, r8
 800b350:	4629      	mov	r1, r5
 800b352:	463a      	mov	r2, r7
 800b354:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b3f4 <forward_dense+0x42c>
 800b358:	e770      	b.n	800b23c <forward_dense+0x274>
 800b35a:	2300      	movs	r3, #0
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	deff      	udf	#255	@ 0xff
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	deff      	udf	#255	@ 0xff
 800b364:	2300      	movs	r3, #0
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	deff      	udf	#255	@ 0xff
 800b36a:	b1a4      	cbz	r4, 800b396 <forward_dense+0x3ce>
 800b36c:	f8d4 c000 	ldr.w	ip, [r4]
 800b370:	463b      	mov	r3, r7
 800b372:	4629      	mov	r1, r5
 800b374:	9600      	str	r6, [sp, #0]
 800b376:	4652      	mov	r2, sl
 800b378:	9803      	ldr	r0, [sp, #12]
 800b37a:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 800b37e:	f7ff fd69 	bl	800ae54 <ai_dict4_dot_array_f32>
 800b382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b384:	3404      	adds	r4, #4
 800b386:	f84b 3b04 	str.w	r3, [fp], #4
 800b38a:	45c3      	cmp	fp, r8
 800b38c:	444d      	add	r5, r9
 800b38e:	f4bf aeac 	bcs.w	800b0ea <forward_dense+0x122>
 800b392:	2c00      	cmp	r4, #0
 800b394:	d1ea      	bne.n	800b36c <forward_dense+0x3a4>
 800b396:	4634      	mov	r4, r6
 800b398:	4646      	mov	r6, r8
 800b39a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b39e:	463b      	mov	r3, r7
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	9400      	str	r4, [sp, #0]
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	edcd 4a0f 	vstr	s9, [sp, #60]	@ 0x3c
 800b3ac:	f7ff fd52 	bl	800ae54 <ai_dict4_dot_array_f32>
 800b3b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3b2:	444d      	add	r5, r9
 800b3b4:	f84b 3b04 	str.w	r3, [fp], #4
 800b3b8:	45b3      	cmp	fp, r6
 800b3ba:	d3f0      	bcc.n	800b39e <forward_dense+0x3d6>
 800b3bc:	46a0      	mov	r8, r4
 800b3be:	e697      	b.n	800b0f0 <forward_dense+0x128>
 800b3c0:	9006      	str	r0, [sp, #24]
 800b3c2:	e629      	b.n	800b018 <forward_dense+0x50>
 800b3c4:	9306      	str	r3, [sp, #24]
 800b3c6:	e627      	b.n	800b018 <forward_dense+0x50>
 800b3c8:	4634      	mov	r4, r6
 800b3ca:	4646      	mov	r6, r8
 800b3cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b3d0:	463b      	mov	r3, r7
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	9400      	str	r4, [sp, #0]
 800b3d6:	4652      	mov	r2, sl
 800b3d8:	4640      	mov	r0, r8
 800b3da:	edcd 4a0f 	vstr	s9, [sp, #60]	@ 0x3c
 800b3de:	f7ff fc77 	bl	800acd0 <ai_dict8_dot_array_f32>
 800b3e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e4:	444d      	add	r5, r9
 800b3e6:	f84b 3b04 	str.w	r3, [fp], #4
 800b3ea:	45b3      	cmp	fp, r6
 800b3ec:	d3f0      	bcc.n	800b3d0 <forward_dense+0x408>
 800b3ee:	46a0      	mov	r8, r4
 800b3f0:	e67e      	b.n	800b0f0 <forward_dense+0x128>
 800b3f2:	bf00      	nop
 800b3f4:	00000000 	.word	0x00000000
 800b3f8:	b011      	add	sp, #68	@ 0x44
 800b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fe:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800b402:	e627      	b.n	800b054 <forward_dense+0x8c>
 800b404:	2300      	movs	r3, #0
 800b406:	9306      	str	r3, [sp, #24]
 800b408:	e606      	b.n	800b018 <forward_dense+0x50>
 800b40a:	9308      	str	r3, [sp, #32]
 800b40c:	e5f7      	b.n	800affe <forward_dense+0x36>
 800b40e:	bf00      	nop

0800b410 <nl_func_relu_generic_array_f32>:
 800b410:	b430      	push	{r4, r5}
 800b412:	ed93 7a02 	vldr	s14, [r3, #8]
 800b416:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b422:	f102 32ff 	add.w	r2, r2, #4294967295
 800b426:	6880      	ldr	r0, [r0, #8]
 800b428:	688c      	ldr	r4, [r1, #8]
 800b42a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b42e:	4410      	add	r0, r2
 800b430:	edd3 6a00 	vldr	s13, [r3]
 800b434:	4422      	add	r2, r4
 800b436:	ed93 6a01 	vldr	s12, [r3, #4]
 800b43a:	d421      	bmi.n	800b480 <nl_func_relu_generic_array_f32+0x70>
 800b43c:	42a2      	cmp	r2, r4
 800b43e:	d33d      	bcc.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b440:	1d13      	adds	r3, r2, #4
 800b442:	1d02      	adds	r2, r0, #4
 800b444:	e010      	b.n	800b468 <nl_func_relu_generic_array_f32+0x58>
 800b446:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44e:	dd03      	ble.n	800b458 <nl_func_relu_generic_array_f32+0x48>
 800b450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b454:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b458:	ed62 7a01 	vstmdb	r2!, {s15}
 800b45c:	6888      	ldr	r0, [r1, #8]
 800b45e:	f1a3 0408 	sub.w	r4, r3, #8
 800b462:	4284      	cmp	r4, r0
 800b464:	462b      	mov	r3, r5
 800b466:	d329      	bcc.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b468:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b46c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b474:	f1a3 0504 	sub.w	r5, r3, #4
 800b478:	dce5      	bgt.n	800b446 <nl_func_relu_generic_array_f32+0x36>
 800b47a:	eef0 7a47 	vmov.f32	s15, s14
 800b47e:	e7eb      	b.n	800b458 <nl_func_relu_generic_array_f32+0x48>
 800b480:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b488:	d01a      	beq.n	800b4c0 <nl_func_relu_generic_array_f32+0xb0>
 800b48a:	42a2      	cmp	r2, r4
 800b48c:	d316      	bcc.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b48e:	1d13      	adds	r3, r2, #4
 800b490:	1d02      	adds	r2, r0, #4
 800b492:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b496:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49e:	f1a3 0408 	sub.w	r4, r3, #8
 800b4a2:	f1a3 0004 	sub.w	r0, r3, #4
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	d522      	bpl.n	800b4f0 <nl_func_relu_generic_array_f32+0xe0>
 800b4aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b4ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b4b2:	ed62 7a01 	vstmdb	r2!, {s15}
 800b4b6:	688b      	ldr	r3, [r1, #8]
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	d91e      	bls.n	800b4fa <nl_func_relu_generic_array_f32+0xea>
 800b4bc:	bc30      	pop	{r4, r5}
 800b4be:	4770      	bx	lr
 800b4c0:	42a2      	cmp	r2, r4
 800b4c2:	d3fb      	bcc.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	1d13      	adds	r3, r2, #4
 800b4c8:	1d02      	adds	r2, r0, #4
 800b4ca:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b4ce:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d6:	f1a3 0408 	sub.w	r4, r3, #8
 800b4da:	f1a3 0004 	sub.w	r0, r3, #4
 800b4de:	4623      	mov	r3, r4
 800b4e0:	d80d      	bhi.n	800b4fe <nl_func_relu_generic_array_f32+0xee>
 800b4e2:	ed62 7a01 	vstmdb	r2!, {s15}
 800b4e6:	688b      	ldr	r3, [r1, #8]
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d8e7      	bhi.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	e7ec      	b.n	800b4ca <nl_func_relu_generic_array_f32+0xba>
 800b4f0:	ed62 7a01 	vstmdb	r2!, {s15}
 800b4f4:	688c      	ldr	r4, [r1, #8]
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d8e0      	bhi.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	e7c9      	b.n	800b492 <nl_func_relu_generic_array_f32+0x82>
 800b4fe:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b502:	688c      	ldr	r4, [r1, #8]
 800b504:	429c      	cmp	r4, r3
 800b506:	d8d9      	bhi.n	800b4bc <nl_func_relu_generic_array_f32+0xac>
 800b508:	4603      	mov	r3, r0
 800b50a:	e7de      	b.n	800b4ca <nl_func_relu_generic_array_f32+0xba>

0800b50c <forward_relu>:
 800b50c:	6942      	ldr	r2, [r0, #20]
 800b50e:	8813      	ldrh	r3, [r2, #0]
 800b510:	b333      	cbz	r3, 800b560 <forward_relu+0x54>
 800b512:	b470      	push	{r4, r5, r6}
 800b514:	6852      	ldr	r2, [r2, #4]
 800b516:	6856      	ldr	r6, [r2, #4]
 800b518:	b106      	cbz	r6, 800b51c <forward_relu+0x10>
 800b51a:	6836      	ldr	r6, [r6, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d91c      	bls.n	800b55a <forward_relu+0x4e>
 800b520:	6913      	ldr	r3, [r2, #16]
 800b522:	b103      	cbz	r3, 800b526 <forward_relu+0x1a>
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6982      	ldr	r2, [r0, #24]
 800b528:	68b4      	ldr	r4, [r6, #8]
 800b52a:	6998      	ldr	r0, [r3, #24]
 800b52c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800b530:	69b1      	ldr	r1, [r6, #24]
 800b532:	2a00      	cmp	r2, #0
 800b534:	d040      	beq.n	800b5b8 <forward_relu+0xac>
 800b536:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 800b53a:	2d01      	cmp	r5, #1
 800b53c:	d012      	beq.n	800b564 <forward_relu+0x58>
 800b53e:	2201      	movs	r2, #1
 800b540:	b144      	cbz	r4, 800b554 <forward_relu+0x48>
 800b542:	68f6      	ldr	r6, [r6, #12]
 800b544:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b548:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b54c:	42a6      	cmp	r6, r4
 800b54e:	fb05 f202 	mul.w	r2, r5, r2
 800b552:	d1f9      	bne.n	800b548 <forward_relu+0x3c>
 800b554:	bc70      	pop	{r4, r5, r6}
 800b556:	f7ff bf5b 	b.w	800b410 <nl_func_relu_generic_array_f32>
 800b55a:	2300      	movs	r3, #0
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	deff      	udf	#255	@ 0xff
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	deff      	udf	#255	@ 0xff
 800b564:	6880      	ldr	r0, [r0, #8]
 800b566:	688a      	ldr	r2, [r1, #8]
 800b568:	ed93 7a00 	vldr	s14, [r3]
 800b56c:	b184      	cbz	r4, 800b590 <forward_relu+0x84>
 800b56e:	462b      	mov	r3, r5
 800b570:	68f6      	ldr	r6, [r6, #12]
 800b572:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b576:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b57a:	42a6      	cmp	r6, r4
 800b57c:	fb05 f303 	mul.w	r3, r5, r3
 800b580:	d1f9      	bne.n	800b576 <forward_relu+0x6a>
 800b582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b586:	3b01      	subs	r3, #1
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	18d2      	adds	r2, r2, r3
 800b58c:	4418      	add	r0, r3
 800b58e:	d238      	bcs.n	800b602 <forward_relu+0xf6>
 800b590:	2500      	movs	r5, #0
 800b592:	1d13      	adds	r3, r2, #4
 800b594:	1d02      	adds	r2, r0, #4
 800b596:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b59a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a2:	f1a3 0004 	sub.w	r0, r3, #4
 800b5a6:	d82e      	bhi.n	800b606 <forward_relu+0xfa>
 800b5a8:	ed62 7a01 	vstmdb	r2!, {s15}
 800b5ac:	688c      	ldr	r4, [r1, #8]
 800b5ae:	3b08      	subs	r3, #8
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d826      	bhi.n	800b602 <forward_relu+0xf6>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	e7ee      	b.n	800b596 <forward_relu+0x8a>
 800b5b8:	6880      	ldr	r0, [r0, #8]
 800b5ba:	688b      	ldr	r3, [r1, #8]
 800b5bc:	b184      	cbz	r4, 800b5e0 <forward_relu+0xd4>
 800b5be:	2201      	movs	r2, #1
 800b5c0:	68f6      	ldr	r6, [r6, #12]
 800b5c2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b5c6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b5ca:	42a6      	cmp	r6, r4
 800b5cc:	fb05 f202 	mul.w	r2, r5, r2
 800b5d0:	d1f9      	bne.n	800b5c6 <forward_relu+0xba>
 800b5d2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b5d6:	3a01      	subs	r2, #1
 800b5d8:	0092      	lsls	r2, r2, #2
 800b5da:	189b      	adds	r3, r3, r2
 800b5dc:	4410      	add	r0, r2
 800b5de:	d210      	bcs.n	800b602 <forward_relu+0xf6>
 800b5e0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800b618 <forward_relu+0x10c>
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	3004      	adds	r0, #4
 800b5e8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b5ec:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b5f0:	ed60 7a01 	vstmdb	r0!, {s15}
 800b5f4:	688c      	ldr	r4, [r1, #8]
 800b5f6:	f1a3 0208 	sub.w	r2, r3, #8
 800b5fa:	4294      	cmp	r4, r2
 800b5fc:	f1a3 0304 	sub.w	r3, r3, #4
 800b600:	d9f2      	bls.n	800b5e8 <forward_relu+0xdc>
 800b602:	bc70      	pop	{r4, r5, r6}
 800b604:	4770      	bx	lr
 800b606:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b60a:	688c      	ldr	r4, [r1, #8]
 800b60c:	3b08      	subs	r3, #8
 800b60e:	429c      	cmp	r4, r3
 800b610:	d8f7      	bhi.n	800b602 <forward_relu+0xf6>
 800b612:	4603      	mov	r3, r0
 800b614:	e7bf      	b.n	800b596 <forward_relu+0x8a>
 800b616:	bf00      	nop
 800b618:	00000000 	.word	0x00000000

0800b61c <ai_check_custom_types>:
 800b61c:	4b13      	ldr	r3, [pc, #76]	@ (800b66c <ai_check_custom_types+0x50>)
 800b61e:	b082      	sub	sp, #8
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	b118      	cbz	r0, 800b62e <ai_check_custom_types+0x12>
 800b626:	7803      	ldrb	r3, [r0, #0]
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d002      	beq.n	800b632 <ai_check_custom_types+0x16>
 800b62c:	2000      	movs	r0, #0
 800b62e:	b002      	add	sp, #8
 800b630:	4770      	bx	lr
 800b632:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b636:	4293      	cmp	r3, r2
 800b638:	d004      	beq.n	800b644 <ai_check_custom_types+0x28>
 800b63a:	2001      	movs	r0, #1
 800b63c:	f080 0001 	eor.w	r0, r0, #1
 800b640:	b002      	add	sp, #8
 800b642:	4770      	bx	lr
 800b644:	7842      	ldrb	r2, [r0, #1]
 800b646:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b64a:	3001      	adds	r0, #1
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d1f4      	bne.n	800b63a <ai_check_custom_types+0x1e>
 800b650:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b654:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d1ee      	bne.n	800b63a <ai_check_custom_types+0x1e>
 800b65c:	7842      	ldrb	r2, [r0, #1]
 800b65e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b662:	429a      	cmp	r2, r3
 800b664:	d1e9      	bne.n	800b63a <ai_check_custom_types+0x1e>
 800b666:	2000      	movs	r0, #0
 800b668:	e7e8      	b.n	800b63c <ai_check_custom_types+0x20>
 800b66a:	bf00      	nop
 800b66c:	0800d9a0 	.word	0x0800d9a0

0800b670 <ai_layer_type_name>:
 800b670:	f5a0 501c 	sub.w	r0, r0, #9984	@ 0x2700
 800b674:	3811      	subs	r0, #17
 800b676:	b283      	uxth	r3, r0
 800b678:	2b1d      	cmp	r3, #29
 800b67a:	d805      	bhi.n	800b688 <ai_layer_type_name+0x18>
 800b67c:	2101      	movs	r1, #1
 800b67e:	4a40      	ldr	r2, [pc, #256]	@ (800b780 <ai_layer_type_name+0x110>)
 800b680:	fa01 f303 	lsl.w	r3, r1, r3
 800b684:	401a      	ands	r2, r3
 800b686:	b90a      	cbnz	r2, 800b68c <ai_layer_type_name+0x1c>
 800b688:	483e      	ldr	r0, [pc, #248]	@ (800b784 <ai_layer_type_name+0x114>)
 800b68a:	4770      	bx	lr
 800b68c:	281d      	cmp	r0, #29
 800b68e:	d8fb      	bhi.n	800b688 <ai_layer_type_name+0x18>
 800b690:	a301      	add	r3, pc, #4	@ (adr r3, 800b698 <ai_layer_type_name+0x28>)
 800b692:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 800b696:	bf00      	nop
 800b698:	0800b711 	.word	0x0800b711
 800b69c:	0800b715 	.word	0x0800b715
 800b6a0:	0800b689 	.word	0x0800b689
 800b6a4:	0800b719 	.word	0x0800b719
 800b6a8:	0800b71d 	.word	0x0800b71d
 800b6ac:	0800b721 	.word	0x0800b721
 800b6b0:	0800b725 	.word	0x0800b725
 800b6b4:	0800b729 	.word	0x0800b729
 800b6b8:	0800b72d 	.word	0x0800b72d
 800b6bc:	0800b731 	.word	0x0800b731
 800b6c0:	0800b735 	.word	0x0800b735
 800b6c4:	0800b739 	.word	0x0800b739
 800b6c8:	0800b73d 	.word	0x0800b73d
 800b6cc:	0800b741 	.word	0x0800b741
 800b6d0:	0800b745 	.word	0x0800b745
 800b6d4:	0800b749 	.word	0x0800b749
 800b6d8:	0800b74d 	.word	0x0800b74d
 800b6dc:	0800b689 	.word	0x0800b689
 800b6e0:	0800b751 	.word	0x0800b751
 800b6e4:	0800b755 	.word	0x0800b755
 800b6e8:	0800b759 	.word	0x0800b759
 800b6ec:	0800b75d 	.word	0x0800b75d
 800b6f0:	0800b761 	.word	0x0800b761
 800b6f4:	0800b765 	.word	0x0800b765
 800b6f8:	0800b769 	.word	0x0800b769
 800b6fc:	0800b76d 	.word	0x0800b76d
 800b700:	0800b771 	.word	0x0800b771
 800b704:	0800b775 	.word	0x0800b775
 800b708:	0800b779 	.word	0x0800b779
 800b70c:	0800b77d 	.word	0x0800b77d
 800b710:	481d      	ldr	r0, [pc, #116]	@ (800b788 <ai_layer_type_name+0x118>)
 800b712:	4770      	bx	lr
 800b714:	481d      	ldr	r0, [pc, #116]	@ (800b78c <ai_layer_type_name+0x11c>)
 800b716:	4770      	bx	lr
 800b718:	481d      	ldr	r0, [pc, #116]	@ (800b790 <ai_layer_type_name+0x120>)
 800b71a:	4770      	bx	lr
 800b71c:	481d      	ldr	r0, [pc, #116]	@ (800b794 <ai_layer_type_name+0x124>)
 800b71e:	4770      	bx	lr
 800b720:	481d      	ldr	r0, [pc, #116]	@ (800b798 <ai_layer_type_name+0x128>)
 800b722:	4770      	bx	lr
 800b724:	481d      	ldr	r0, [pc, #116]	@ (800b79c <ai_layer_type_name+0x12c>)
 800b726:	4770      	bx	lr
 800b728:	481d      	ldr	r0, [pc, #116]	@ (800b7a0 <ai_layer_type_name+0x130>)
 800b72a:	4770      	bx	lr
 800b72c:	481d      	ldr	r0, [pc, #116]	@ (800b7a4 <ai_layer_type_name+0x134>)
 800b72e:	4770      	bx	lr
 800b730:	481d      	ldr	r0, [pc, #116]	@ (800b7a8 <ai_layer_type_name+0x138>)
 800b732:	4770      	bx	lr
 800b734:	481d      	ldr	r0, [pc, #116]	@ (800b7ac <ai_layer_type_name+0x13c>)
 800b736:	4770      	bx	lr
 800b738:	481d      	ldr	r0, [pc, #116]	@ (800b7b0 <ai_layer_type_name+0x140>)
 800b73a:	4770      	bx	lr
 800b73c:	481d      	ldr	r0, [pc, #116]	@ (800b7b4 <ai_layer_type_name+0x144>)
 800b73e:	4770      	bx	lr
 800b740:	481d      	ldr	r0, [pc, #116]	@ (800b7b8 <ai_layer_type_name+0x148>)
 800b742:	4770      	bx	lr
 800b744:	481d      	ldr	r0, [pc, #116]	@ (800b7bc <ai_layer_type_name+0x14c>)
 800b746:	4770      	bx	lr
 800b748:	481d      	ldr	r0, [pc, #116]	@ (800b7c0 <ai_layer_type_name+0x150>)
 800b74a:	4770      	bx	lr
 800b74c:	481d      	ldr	r0, [pc, #116]	@ (800b7c4 <ai_layer_type_name+0x154>)
 800b74e:	4770      	bx	lr
 800b750:	481d      	ldr	r0, [pc, #116]	@ (800b7c8 <ai_layer_type_name+0x158>)
 800b752:	4770      	bx	lr
 800b754:	481d      	ldr	r0, [pc, #116]	@ (800b7cc <ai_layer_type_name+0x15c>)
 800b756:	4770      	bx	lr
 800b758:	481d      	ldr	r0, [pc, #116]	@ (800b7d0 <ai_layer_type_name+0x160>)
 800b75a:	4770      	bx	lr
 800b75c:	481d      	ldr	r0, [pc, #116]	@ (800b7d4 <ai_layer_type_name+0x164>)
 800b75e:	4770      	bx	lr
 800b760:	481d      	ldr	r0, [pc, #116]	@ (800b7d8 <ai_layer_type_name+0x168>)
 800b762:	4770      	bx	lr
 800b764:	481d      	ldr	r0, [pc, #116]	@ (800b7dc <ai_layer_type_name+0x16c>)
 800b766:	4770      	bx	lr
 800b768:	481d      	ldr	r0, [pc, #116]	@ (800b7e0 <ai_layer_type_name+0x170>)
 800b76a:	4770      	bx	lr
 800b76c:	481d      	ldr	r0, [pc, #116]	@ (800b7e4 <ai_layer_type_name+0x174>)
 800b76e:	4770      	bx	lr
 800b770:	481d      	ldr	r0, [pc, #116]	@ (800b7e8 <ai_layer_type_name+0x178>)
 800b772:	4770      	bx	lr
 800b774:	481d      	ldr	r0, [pc, #116]	@ (800b7ec <ai_layer_type_name+0x17c>)
 800b776:	4770      	bx	lr
 800b778:	481d      	ldr	r0, [pc, #116]	@ (800b7f0 <ai_layer_type_name+0x180>)
 800b77a:	4770      	bx	lr
 800b77c:	481d      	ldr	r0, [pc, #116]	@ (800b7f4 <ai_layer_type_name+0x184>)
 800b77e:	4770      	bx	lr
 800b780:	3ffdfffb 	.word	0x3ffdfffb
 800b784:	0800e080 	.word	0x0800e080
 800b788:	0800e03c 	.word	0x0800e03c
 800b78c:	0800e040 	.word	0x0800e040
 800b790:	0800e044 	.word	0x0800e044
 800b794:	0800e04c 	.word	0x0800e04c
 800b798:	0800e054 	.word	0x0800e054
 800b79c:	0800e058 	.word	0x0800e058
 800b7a0:	0800e05c 	.word	0x0800e05c
 800b7a4:	0800e064 	.word	0x0800e064
 800b7a8:	0800e068 	.word	0x0800e068
 800b7ac:	0800e070 	.word	0x0800e070
 800b7b0:	0800e084 	.word	0x0800e084
 800b7b4:	0800e090 	.word	0x0800e090
 800b7b8:	0800e098 	.word	0x0800e098
 800b7bc:	0800e09c 	.word	0x0800e09c
 800b7c0:	0800e0a4 	.word	0x0800e0a4
 800b7c4:	0800e0b0 	.word	0x0800e0b0
 800b7c8:	0800e0c4 	.word	0x0800e0c4
 800b7cc:	0800e0cc 	.word	0x0800e0cc
 800b7d0:	0800e0d4 	.word	0x0800e0d4
 800b7d4:	0800e0e0 	.word	0x0800e0e0
 800b7d8:	0800e0e8 	.word	0x0800e0e8
 800b7dc:	0800e0f0 	.word	0x0800e0f0
 800b7e0:	0800e108 	.word	0x0800e108
 800b7e4:	0800e10c 	.word	0x0800e10c
 800b7e8:	0800e114 	.word	0x0800e114
 800b7ec:	0800e11c 	.word	0x0800e11c
 800b7f0:	0800e124 	.word	0x0800e124
 800b7f4:	0800e128 	.word	0x0800e128

0800b7f8 <ai_layers_forward_all>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800b800:	b316      	cbz	r6, 800b848 <ai_layers_forward_all+0x50>
 800b802:	b1bd      	cbz	r5, 800b834 <ai_layers_forward_all+0x3c>
 800b804:	2700      	movs	r7, #0
 800b806:	6545      	str	r5, [r0, #84]	@ 0x54
 800b808:	4629      	mov	r1, r5
 800b80a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800b80c:	2001      	movs	r0, #1
 800b80e:	47b0      	blx	r6
 800b810:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b812:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800b814:	2002      	movs	r0, #2
 800b816:	47b0      	blx	r6
 800b818:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800b81a:	692b      	ldr	r3, [r5, #16]
 800b81c:	4628      	mov	r0, r5
 800b81e:	4798      	blx	r3
 800b820:	68e9      	ldr	r1, [r5, #12]
 800b822:	428d      	cmp	r5, r1
 800b824:	d007      	beq.n	800b836 <ai_layers_forward_all+0x3e>
 800b826:	6561      	str	r1, [r4, #84]	@ 0x54
 800b828:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800b82a:	2003      	movs	r0, #3
 800b82c:	47b0      	blx	r6
 800b82e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b830:	2900      	cmp	r1, #0
 800b832:	d1ee      	bne.n	800b812 <ai_layers_forward_all+0x1a>
 800b834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b836:	2100      	movs	r1, #0
 800b838:	6567      	str	r7, [r4, #84]	@ 0x54
 800b83a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800b83c:	2003      	movs	r0, #3
 800b83e:	47b0      	blx	r6
 800b840:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b842:	2900      	cmp	r1, #0
 800b844:	d1e5      	bne.n	800b812 <ai_layers_forward_all+0x1a>
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b848:	2d00      	cmp	r5, #0
 800b84a:	d0f3      	beq.n	800b834 <ai_layers_forward_all+0x3c>
 800b84c:	6545      	str	r5, [r0, #84]	@ 0x54
 800b84e:	692b      	ldr	r3, [r5, #16]
 800b850:	4628      	mov	r0, r5
 800b852:	4798      	blx	r3
 800b854:	68eb      	ldr	r3, [r5, #12]
 800b856:	42ab      	cmp	r3, r5
 800b858:	d004      	beq.n	800b864 <ai_layers_forward_all+0x6c>
 800b85a:	6563      	str	r3, [r4, #84]	@ 0x54
 800b85c:	461d      	mov	r5, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1f5      	bne.n	800b84e <ai_layers_forward_all+0x56>
 800b862:	e7e7      	b.n	800b834 <ai_layers_forward_all+0x3c>
 800b864:	2300      	movs	r3, #0
 800b866:	6563      	str	r3, [r4, #84]	@ 0x54
 800b868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b86a:	bf00      	nop

0800b86c <ai_array_to_buffer_fmt>:
 800b86c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b870:	2b02      	cmp	r3, #2
 800b872:	d01f      	beq.n	800b8b4 <ai_array_to_buffer_fmt+0x48>
 800b874:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e8 <ai_array_to_buffer_fmt+0x7c>)
 800b876:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00a      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b87e:	dc0d      	bgt.n	800b89c <ai_array_to_buffer_fmt+0x30>
 800b880:	4a1a      	ldr	r2, [pc, #104]	@ (800b8ec <ai_array_to_buffer_fmt+0x80>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d006      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b886:	dd1d      	ble.n	800b8c4 <ai_array_to_buffer_fmt+0x58>
 800b888:	4a19      	ldr	r2, [pc, #100]	@ (800b8f0 <ai_array_to_buffer_fmt+0x84>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d002      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b88e:	320f      	adds	r2, #15
 800b890:	4293      	cmp	r3, r2
 800b892:	d10d      	bne.n	800b8b0 <ai_array_to_buffer_fmt+0x44>
 800b894:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b898:	4318      	orrs	r0, r3
 800b89a:	4770      	bx	lr
 800b89c:	4a15      	ldr	r2, [pc, #84]	@ (800b8f4 <ai_array_to_buffer_fmt+0x88>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d0f8      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8a2:	dd18      	ble.n	800b8d6 <ai_array_to_buffer_fmt+0x6a>
 800b8a4:	4a14      	ldr	r2, [pc, #80]	@ (800b8f8 <ai_array_to_buffer_fmt+0x8c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d0f4      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8aa:	4a14      	ldr	r2, [pc, #80]	@ (800b8fc <ai_array_to_buffer_fmt+0x90>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d0f1      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8b0:	2340      	movs	r3, #64	@ 0x40
 800b8b2:	e7ef      	b.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8b4:	4b12      	ldr	r3, [pc, #72]	@ (800b900 <ai_array_to_buffer_fmt+0x94>)
 800b8b6:	4003      	ands	r3, r0
 800b8b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b8bc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b8c0:	4318      	orrs	r0, r3
 800b8c2:	4770      	bx	lr
 800b8c4:	f2a2 4207 	subw	r2, r2, #1031	@ 0x407
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d0e3      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d0df      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8d4:	e7ec      	b.n	800b8b0 <ai_array_to_buffer_fmt+0x44>
 800b8d6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d0da      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8de:	3207      	adds	r2, #7
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d0d7      	beq.n	800b894 <ai_array_to_buffer_fmt+0x28>
 800b8e4:	e7e4      	b.n	800b8b0 <ai_array_to_buffer_fmt+0x44>
 800b8e6:	bf00      	nop
 800b8e8:	00840040 	.word	0x00840040
 800b8ec:	00040447 	.word	0x00040447
 800b8f0:	00040840 	.word	0x00040840
 800b8f4:	00840840 	.word	0x00840840
 800b8f8:	0084084f 	.word	0x0084084f
 800b8fc:	01821040 	.word	0x01821040
 800b900:	00803fff 	.word	0x00803fff

0800b904 <ai_array_get_byte_size>:
 800b904:	b1c1      	cbz	r1, 800b938 <ai_array_get_byte_size+0x34>
 800b906:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800b90a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b90e:	4413      	add	r3, r2
 800b910:	fb01 f103 	mul.w	r1, r1, r3
 800b914:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b918:	3107      	adds	r1, #7
 800b91a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800b91e:	f021 0107 	bic.w	r1, r1, #7
 800b922:	2804      	cmp	r0, #4
 800b924:	fa21 f102 	lsr.w	r1, r1, r2
 800b928:	d008      	beq.n	800b93c <ai_array_get_byte_size+0x38>
 800b92a:	2808      	cmp	r0, #8
 800b92c:	d101      	bne.n	800b932 <ai_array_get_byte_size+0x2e>
 800b92e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b932:	3107      	adds	r1, #7
 800b934:	08c8      	lsrs	r0, r1, #3
 800b936:	4770      	bx	lr
 800b938:	4608      	mov	r0, r1
 800b93a:	4770      	bx	lr
 800b93c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b940:	3107      	adds	r1, #7
 800b942:	08c8      	lsrs	r0, r1, #3
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop

0800b948 <malloc>:
 800b948:	4b02      	ldr	r3, [pc, #8]	@ (800b954 <malloc+0xc>)
 800b94a:	4601      	mov	r1, r0
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	f000 b82d 	b.w	800b9ac <_malloc_r>
 800b952:	bf00      	nop
 800b954:	20000600 	.word	0x20000600

0800b958 <free>:
 800b958:	4b02      	ldr	r3, [pc, #8]	@ (800b964 <free+0xc>)
 800b95a:	4601      	mov	r1, r0
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	f000 bcb7 	b.w	800c2d0 <_free_r>
 800b962:	bf00      	nop
 800b964:	20000600 	.word	0x20000600

0800b968 <sbrk_aligned>:
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	4e0f      	ldr	r6, [pc, #60]	@ (800b9a8 <sbrk_aligned+0x40>)
 800b96c:	460c      	mov	r4, r1
 800b96e:	4605      	mov	r5, r0
 800b970:	6831      	ldr	r1, [r6, #0]
 800b972:	b911      	cbnz	r1, 800b97a <sbrk_aligned+0x12>
 800b974:	f000 fc32 	bl	800c1dc <_sbrk_r>
 800b978:	6030      	str	r0, [r6, #0]
 800b97a:	4621      	mov	r1, r4
 800b97c:	4628      	mov	r0, r5
 800b97e:	f000 fc2d 	bl	800c1dc <_sbrk_r>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	d103      	bne.n	800b98e <sbrk_aligned+0x26>
 800b986:	f04f 34ff 	mov.w	r4, #4294967295
 800b98a:	4620      	mov	r0, r4
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	1cc4      	adds	r4, r0, #3
 800b990:	f024 0403 	bic.w	r4, r4, #3
 800b994:	42a0      	cmp	r0, r4
 800b996:	d0f8      	beq.n	800b98a <sbrk_aligned+0x22>
 800b998:	1a21      	subs	r1, r4, r0
 800b99a:	4628      	mov	r0, r5
 800b99c:	f000 fc1e 	bl	800c1dc <_sbrk_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d1f2      	bne.n	800b98a <sbrk_aligned+0x22>
 800b9a4:	e7ef      	b.n	800b986 <sbrk_aligned+0x1e>
 800b9a6:	bf00      	nop
 800b9a8:	2000095c 	.word	0x2000095c

0800b9ac <_malloc_r>:
 800b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b0:	1ccd      	adds	r5, r1, #3
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	f025 0503 	bic.w	r5, r5, #3
 800b9b8:	3508      	adds	r5, #8
 800b9ba:	2d0c      	cmp	r5, #12
 800b9bc:	bf38      	it	cc
 800b9be:	250c      	movcc	r5, #12
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	db01      	blt.n	800b9c8 <_malloc_r+0x1c>
 800b9c4:	42a9      	cmp	r1, r5
 800b9c6:	d904      	bls.n	800b9d2 <_malloc_r+0x26>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	6033      	str	r3, [r6, #0]
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800baa8 <_malloc_r+0xfc>
 800b9d6:	f000 f869 	bl	800baac <__malloc_lock>
 800b9da:	f8d8 3000 	ldr.w	r3, [r8]
 800b9de:	461c      	mov	r4, r3
 800b9e0:	bb44      	cbnz	r4, 800ba34 <_malloc_r+0x88>
 800b9e2:	4629      	mov	r1, r5
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff ffbf 	bl	800b968 <sbrk_aligned>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	d158      	bne.n	800baa2 <_malloc_r+0xf6>
 800b9f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b9f4:	4627      	mov	r7, r4
 800b9f6:	2f00      	cmp	r7, #0
 800b9f8:	d143      	bne.n	800ba82 <_malloc_r+0xd6>
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	d04b      	beq.n	800ba96 <_malloc_r+0xea>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	4639      	mov	r1, r7
 800ba02:	4630      	mov	r0, r6
 800ba04:	eb04 0903 	add.w	r9, r4, r3
 800ba08:	f000 fbe8 	bl	800c1dc <_sbrk_r>
 800ba0c:	4581      	cmp	r9, r0
 800ba0e:	d142      	bne.n	800ba96 <_malloc_r+0xea>
 800ba10:	6821      	ldr	r1, [r4, #0]
 800ba12:	4630      	mov	r0, r6
 800ba14:	1a6d      	subs	r5, r5, r1
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7ff ffa6 	bl	800b968 <sbrk_aligned>
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d03a      	beq.n	800ba96 <_malloc_r+0xea>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	442b      	add	r3, r5
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	f8d8 3000 	ldr.w	r3, [r8]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	bb62      	cbnz	r2, 800ba88 <_malloc_r+0xdc>
 800ba2e:	f8c8 7000 	str.w	r7, [r8]
 800ba32:	e00f      	b.n	800ba54 <_malloc_r+0xa8>
 800ba34:	6822      	ldr	r2, [r4, #0]
 800ba36:	1b52      	subs	r2, r2, r5
 800ba38:	d420      	bmi.n	800ba7c <_malloc_r+0xd0>
 800ba3a:	2a0b      	cmp	r2, #11
 800ba3c:	d917      	bls.n	800ba6e <_malloc_r+0xc2>
 800ba3e:	1961      	adds	r1, r4, r5
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	6025      	str	r5, [r4, #0]
 800ba44:	bf18      	it	ne
 800ba46:	6059      	strne	r1, [r3, #4]
 800ba48:	6863      	ldr	r3, [r4, #4]
 800ba4a:	bf08      	it	eq
 800ba4c:	f8c8 1000 	streq.w	r1, [r8]
 800ba50:	5162      	str	r2, [r4, r5]
 800ba52:	604b      	str	r3, [r1, #4]
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 f82f 	bl	800bab8 <__malloc_unlock>
 800ba5a:	f104 000b 	add.w	r0, r4, #11
 800ba5e:	1d23      	adds	r3, r4, #4
 800ba60:	f020 0007 	bic.w	r0, r0, #7
 800ba64:	1ac2      	subs	r2, r0, r3
 800ba66:	bf1c      	itt	ne
 800ba68:	1a1b      	subne	r3, r3, r0
 800ba6a:	50a3      	strne	r3, [r4, r2]
 800ba6c:	e7af      	b.n	800b9ce <_malloc_r+0x22>
 800ba6e:	6862      	ldr	r2, [r4, #4]
 800ba70:	42a3      	cmp	r3, r4
 800ba72:	bf0c      	ite	eq
 800ba74:	f8c8 2000 	streq.w	r2, [r8]
 800ba78:	605a      	strne	r2, [r3, #4]
 800ba7a:	e7eb      	b.n	800ba54 <_malloc_r+0xa8>
 800ba7c:	4623      	mov	r3, r4
 800ba7e:	6864      	ldr	r4, [r4, #4]
 800ba80:	e7ae      	b.n	800b9e0 <_malloc_r+0x34>
 800ba82:	463c      	mov	r4, r7
 800ba84:	687f      	ldr	r7, [r7, #4]
 800ba86:	e7b6      	b.n	800b9f6 <_malloc_r+0x4a>
 800ba88:	461a      	mov	r2, r3
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	42a3      	cmp	r3, r4
 800ba8e:	d1fb      	bne.n	800ba88 <_malloc_r+0xdc>
 800ba90:	2300      	movs	r3, #0
 800ba92:	6053      	str	r3, [r2, #4]
 800ba94:	e7de      	b.n	800ba54 <_malloc_r+0xa8>
 800ba96:	230c      	movs	r3, #12
 800ba98:	4630      	mov	r0, r6
 800ba9a:	6033      	str	r3, [r6, #0]
 800ba9c:	f000 f80c 	bl	800bab8 <__malloc_unlock>
 800baa0:	e794      	b.n	800b9cc <_malloc_r+0x20>
 800baa2:	6005      	str	r5, [r0, #0]
 800baa4:	e7d6      	b.n	800ba54 <_malloc_r+0xa8>
 800baa6:	bf00      	nop
 800baa8:	20000960 	.word	0x20000960

0800baac <__malloc_lock>:
 800baac:	4801      	ldr	r0, [pc, #4]	@ (800bab4 <__malloc_lock+0x8>)
 800baae:	f000 bbe2 	b.w	800c276 <__retarget_lock_acquire_recursive>
 800bab2:	bf00      	nop
 800bab4:	20000aa4 	.word	0x20000aa4

0800bab8 <__malloc_unlock>:
 800bab8:	4801      	ldr	r0, [pc, #4]	@ (800bac0 <__malloc_unlock+0x8>)
 800baba:	f000 bbdd 	b.w	800c278 <__retarget_lock_release_recursive>
 800babe:	bf00      	nop
 800bac0:	20000aa4 	.word	0x20000aa4

0800bac4 <srand>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4b10      	ldr	r3, [pc, #64]	@ (800bb08 <srand+0x44>)
 800bac8:	4604      	mov	r4, r0
 800baca:	681d      	ldr	r5, [r3, #0]
 800bacc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bace:	b9b3      	cbnz	r3, 800bafe <srand+0x3a>
 800bad0:	2018      	movs	r0, #24
 800bad2:	f7ff ff39 	bl	800b948 <malloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	6328      	str	r0, [r5, #48]	@ 0x30
 800bada:	b920      	cbnz	r0, 800bae6 <srand+0x22>
 800badc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb0c <srand+0x48>)
 800bade:	2146      	movs	r1, #70	@ 0x46
 800bae0:	480b      	ldr	r0, [pc, #44]	@ (800bb10 <srand+0x4c>)
 800bae2:	f000 fbd7 	bl	800c294 <__assert_func>
 800bae6:	490b      	ldr	r1, [pc, #44]	@ (800bb14 <srand+0x50>)
 800bae8:	4b0b      	ldr	r3, [pc, #44]	@ (800bb18 <srand+0x54>)
 800baea:	e9c0 1300 	strd	r1, r3, [r0]
 800baee:	4b0b      	ldr	r3, [pc, #44]	@ (800bb1c <srand+0x58>)
 800baf0:	2100      	movs	r1, #0
 800baf2:	6083      	str	r3, [r0, #8]
 800baf4:	230b      	movs	r3, #11
 800baf6:	8183      	strh	r3, [r0, #12]
 800baf8:	2001      	movs	r0, #1
 800bafa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bafe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bb00:	2200      	movs	r2, #0
 800bb02:	611c      	str	r4, [r3, #16]
 800bb04:	615a      	str	r2, [r3, #20]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	20000600 	.word	0x20000600
 800bb0c:	0800e12f 	.word	0x0800e12f
 800bb10:	0800e146 	.word	0x0800e146
 800bb14:	abcd330e 	.word	0xabcd330e
 800bb18:	e66d1234 	.word	0xe66d1234
 800bb1c:	0005deec 	.word	0x0005deec

0800bb20 <rand>:
 800bb20:	4b16      	ldr	r3, [pc, #88]	@ (800bb7c <rand+0x5c>)
 800bb22:	b510      	push	{r4, lr}
 800bb24:	681c      	ldr	r4, [r3, #0]
 800bb26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bb28:	b9b3      	cbnz	r3, 800bb58 <rand+0x38>
 800bb2a:	2018      	movs	r0, #24
 800bb2c:	f7ff ff0c 	bl	800b948 <malloc>
 800bb30:	4602      	mov	r2, r0
 800bb32:	6320      	str	r0, [r4, #48]	@ 0x30
 800bb34:	b920      	cbnz	r0, 800bb40 <rand+0x20>
 800bb36:	4b12      	ldr	r3, [pc, #72]	@ (800bb80 <rand+0x60>)
 800bb38:	2152      	movs	r1, #82	@ 0x52
 800bb3a:	4812      	ldr	r0, [pc, #72]	@ (800bb84 <rand+0x64>)
 800bb3c:	f000 fbaa 	bl	800c294 <__assert_func>
 800bb40:	4911      	ldr	r1, [pc, #68]	@ (800bb88 <rand+0x68>)
 800bb42:	4b12      	ldr	r3, [pc, #72]	@ (800bb8c <rand+0x6c>)
 800bb44:	e9c0 1300 	strd	r1, r3, [r0]
 800bb48:	4b11      	ldr	r3, [pc, #68]	@ (800bb90 <rand+0x70>)
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	6083      	str	r3, [r0, #8]
 800bb4e:	230b      	movs	r3, #11
 800bb50:	8183      	strh	r3, [r0, #12]
 800bb52:	2001      	movs	r0, #1
 800bb54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bb58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bb5a:	480e      	ldr	r0, [pc, #56]	@ (800bb94 <rand+0x74>)
 800bb5c:	690b      	ldr	r3, [r1, #16]
 800bb5e:	694c      	ldr	r4, [r1, #20]
 800bb60:	4a0d      	ldr	r2, [pc, #52]	@ (800bb98 <rand+0x78>)
 800bb62:	4358      	muls	r0, r3
 800bb64:	fb02 0004 	mla	r0, r2, r4, r0
 800bb68:	fba3 3202 	umull	r3, r2, r3, r2
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	eb40 0002 	adc.w	r0, r0, r2
 800bb72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bb76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	20000600 	.word	0x20000600
 800bb80:	0800e12f 	.word	0x0800e12f
 800bb84:	0800e146 	.word	0x0800e146
 800bb88:	abcd330e 	.word	0xabcd330e
 800bb8c:	e66d1234 	.word	0xe66d1234
 800bb90:	0005deec 	.word	0x0005deec
 800bb94:	5851f42d 	.word	0x5851f42d
 800bb98:	4c957f2d 	.word	0x4c957f2d

0800bb9c <__sflush_r>:
 800bb9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	0716      	lsls	r6, r2, #28
 800bba6:	4605      	mov	r5, r0
 800bba8:	460c      	mov	r4, r1
 800bbaa:	d454      	bmi.n	800bc56 <__sflush_r+0xba>
 800bbac:	684b      	ldr	r3, [r1, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dc02      	bgt.n	800bbb8 <__sflush_r+0x1c>
 800bbb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dd48      	ble.n	800bc4a <__sflush_r+0xae>
 800bbb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d045      	beq.n	800bc4a <__sflush_r+0xae>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bbc4:	682f      	ldr	r7, [r5, #0]
 800bbc6:	6a21      	ldr	r1, [r4, #32]
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	d030      	beq.n	800bc2e <__sflush_r+0x92>
 800bbcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	0759      	lsls	r1, r3, #29
 800bbd2:	d505      	bpl.n	800bbe0 <__sflush_r+0x44>
 800bbd4:	6863      	ldr	r3, [r4, #4]
 800bbd6:	1ad2      	subs	r2, r2, r3
 800bbd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbda:	b10b      	cbz	r3, 800bbe0 <__sflush_r+0x44>
 800bbdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbde:	1ad2      	subs	r2, r2, r3
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbe4:	6a21      	ldr	r1, [r4, #32]
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	47b0      	blx	r6
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	d106      	bne.n	800bbfe <__sflush_r+0x62>
 800bbf0:	6829      	ldr	r1, [r5, #0]
 800bbf2:	291d      	cmp	r1, #29
 800bbf4:	d82b      	bhi.n	800bc4e <__sflush_r+0xb2>
 800bbf6:	4a2a      	ldr	r2, [pc, #168]	@ (800bca0 <__sflush_r+0x104>)
 800bbf8:	410a      	asrs	r2, r1
 800bbfa:	07d6      	lsls	r6, r2, #31
 800bbfc:	d427      	bmi.n	800bc4e <__sflush_r+0xb2>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	04d9      	lsls	r1, r3, #19
 800bc02:	6062      	str	r2, [r4, #4]
 800bc04:	6922      	ldr	r2, [r4, #16]
 800bc06:	6022      	str	r2, [r4, #0]
 800bc08:	d504      	bpl.n	800bc14 <__sflush_r+0x78>
 800bc0a:	1c42      	adds	r2, r0, #1
 800bc0c:	d101      	bne.n	800bc12 <__sflush_r+0x76>
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	b903      	cbnz	r3, 800bc14 <__sflush_r+0x78>
 800bc12:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc16:	602f      	str	r7, [r5, #0]
 800bc18:	b1b9      	cbz	r1, 800bc4a <__sflush_r+0xae>
 800bc1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc1e:	4299      	cmp	r1, r3
 800bc20:	d002      	beq.n	800bc28 <__sflush_r+0x8c>
 800bc22:	4628      	mov	r0, r5
 800bc24:	f000 fb54 	bl	800c2d0 <_free_r>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc2c:	e00d      	b.n	800bc4a <__sflush_r+0xae>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b0      	blx	r6
 800bc34:	4602      	mov	r2, r0
 800bc36:	1c50      	adds	r0, r2, #1
 800bc38:	d1c9      	bne.n	800bbce <__sflush_r+0x32>
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0c6      	beq.n	800bbce <__sflush_r+0x32>
 800bc40:	2b1d      	cmp	r3, #29
 800bc42:	d001      	beq.n	800bc48 <__sflush_r+0xac>
 800bc44:	2b16      	cmp	r3, #22
 800bc46:	d11d      	bne.n	800bc84 <__sflush_r+0xe8>
 800bc48:	602f      	str	r7, [r5, #0]
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	e021      	b.n	800bc92 <__sflush_r+0xf6>
 800bc4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc52:	b21b      	sxth	r3, r3
 800bc54:	e01a      	b.n	800bc8c <__sflush_r+0xf0>
 800bc56:	690f      	ldr	r7, [r1, #16]
 800bc58:	2f00      	cmp	r7, #0
 800bc5a:	d0f6      	beq.n	800bc4a <__sflush_r+0xae>
 800bc5c:	0793      	lsls	r3, r2, #30
 800bc5e:	680e      	ldr	r6, [r1, #0]
 800bc60:	600f      	str	r7, [r1, #0]
 800bc62:	bf0c      	ite	eq
 800bc64:	694b      	ldreq	r3, [r1, #20]
 800bc66:	2300      	movne	r3, #0
 800bc68:	eba6 0807 	sub.w	r8, r6, r7
 800bc6c:	608b      	str	r3, [r1, #8]
 800bc6e:	f1b8 0f00 	cmp.w	r8, #0
 800bc72:	ddea      	ble.n	800bc4a <__sflush_r+0xae>
 800bc74:	4643      	mov	r3, r8
 800bc76:	463a      	mov	r2, r7
 800bc78:	6a21      	ldr	r1, [r4, #32]
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc7e:	47b0      	blx	r6
 800bc80:	2800      	cmp	r0, #0
 800bc82:	dc08      	bgt.n	800bc96 <__sflush_r+0xfa>
 800bc84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc96:	4407      	add	r7, r0
 800bc98:	eba8 0800 	sub.w	r8, r8, r0
 800bc9c:	e7e7      	b.n	800bc6e <__sflush_r+0xd2>
 800bc9e:	bf00      	nop
 800bca0:	dfbffffe 	.word	0xdfbffffe

0800bca4 <_fflush_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	690b      	ldr	r3, [r1, #16]
 800bca8:	4605      	mov	r5, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	b913      	cbnz	r3, 800bcb4 <_fflush_r+0x10>
 800bcae:	2500      	movs	r5, #0
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	b118      	cbz	r0, 800bcbe <_fflush_r+0x1a>
 800bcb6:	6a03      	ldr	r3, [r0, #32]
 800bcb8:	b90b      	cbnz	r3, 800bcbe <_fflush_r+0x1a>
 800bcba:	f000 f8bb 	bl	800be34 <__sinit>
 800bcbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0f3      	beq.n	800bcae <_fflush_r+0xa>
 800bcc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bcc8:	07d0      	lsls	r0, r2, #31
 800bcca:	d404      	bmi.n	800bcd6 <_fflush_r+0x32>
 800bccc:	0599      	lsls	r1, r3, #22
 800bcce:	d402      	bmi.n	800bcd6 <_fflush_r+0x32>
 800bcd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcd2:	f000 fad0 	bl	800c276 <__retarget_lock_acquire_recursive>
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	4621      	mov	r1, r4
 800bcda:	f7ff ff5f 	bl	800bb9c <__sflush_r>
 800bcde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bce0:	4605      	mov	r5, r0
 800bce2:	07da      	lsls	r2, r3, #31
 800bce4:	d4e4      	bmi.n	800bcb0 <_fflush_r+0xc>
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	059b      	lsls	r3, r3, #22
 800bcea:	d4e1      	bmi.n	800bcb0 <_fflush_r+0xc>
 800bcec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcee:	f000 fac3 	bl	800c278 <__retarget_lock_release_recursive>
 800bcf2:	e7dd      	b.n	800bcb0 <_fflush_r+0xc>

0800bcf4 <fflush>:
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	b920      	cbnz	r0, 800bd02 <fflush+0xe>
 800bcf8:	4a04      	ldr	r2, [pc, #16]	@ (800bd0c <fflush+0x18>)
 800bcfa:	4905      	ldr	r1, [pc, #20]	@ (800bd10 <fflush+0x1c>)
 800bcfc:	4805      	ldr	r0, [pc, #20]	@ (800bd14 <fflush+0x20>)
 800bcfe:	f000 b8b1 	b.w	800be64 <_fwalk_sglue>
 800bd02:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <fflush+0x24>)
 800bd04:	6818      	ldr	r0, [r3, #0]
 800bd06:	f7ff bfcd 	b.w	800bca4 <_fflush_r>
 800bd0a:	bf00      	nop
 800bd0c:	200005f4 	.word	0x200005f4
 800bd10:	0800bca5 	.word	0x0800bca5
 800bd14:	20000604 	.word	0x20000604
 800bd18:	20000600 	.word	0x20000600

0800bd1c <std>:
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	4604      	mov	r4, r0
 800bd22:	6083      	str	r3, [r0, #8]
 800bd24:	8181      	strh	r1, [r0, #12]
 800bd26:	4619      	mov	r1, r3
 800bd28:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd2a:	81c2      	strh	r2, [r0, #14]
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	6183      	str	r3, [r0, #24]
 800bd30:	e9c0 3300 	strd	r3, r3, [r0]
 800bd34:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd38:	305c      	adds	r0, #92	@ 0x5c
 800bd3a:	f000 fa01 	bl	800c140 <memset>
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <std+0x58>)
 800bd40:	6224      	str	r4, [r4, #32]
 800bd42:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd44:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <std+0x5c>)
 800bd46:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd48:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <std+0x60>)
 800bd4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd80 <std+0x64>)
 800bd4e:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd50:	4b0c      	ldr	r3, [pc, #48]	@ (800bd84 <std+0x68>)
 800bd52:	429c      	cmp	r4, r3
 800bd54:	d006      	beq.n	800bd64 <std+0x48>
 800bd56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd5a:	4294      	cmp	r4, r2
 800bd5c:	d002      	beq.n	800bd64 <std+0x48>
 800bd5e:	33d0      	adds	r3, #208	@ 0xd0
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d105      	bne.n	800bd70 <std+0x54>
 800bd64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd6c:	f000 ba82 	b.w	800c274 <__retarget_lock_init_recursive>
 800bd70:	bd10      	pop	{r4, pc}
 800bd72:	bf00      	nop
 800bd74:	0800bf91 	.word	0x0800bf91
 800bd78:	0800bfb3 	.word	0x0800bfb3
 800bd7c:	0800bfeb 	.word	0x0800bfeb
 800bd80:	0800c00f 	.word	0x0800c00f
 800bd84:	20000964 	.word	0x20000964

0800bd88 <stdio_exit_handler>:
 800bd88:	4a02      	ldr	r2, [pc, #8]	@ (800bd94 <stdio_exit_handler+0xc>)
 800bd8a:	4903      	ldr	r1, [pc, #12]	@ (800bd98 <stdio_exit_handler+0x10>)
 800bd8c:	4803      	ldr	r0, [pc, #12]	@ (800bd9c <stdio_exit_handler+0x14>)
 800bd8e:	f000 b869 	b.w	800be64 <_fwalk_sglue>
 800bd92:	bf00      	nop
 800bd94:	200005f4 	.word	0x200005f4
 800bd98:	0800bca5 	.word	0x0800bca5
 800bd9c:	20000604 	.word	0x20000604

0800bda0 <cleanup_stdio>:
 800bda0:	6841      	ldr	r1, [r0, #4]
 800bda2:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd4 <cleanup_stdio+0x34>)
 800bda4:	4299      	cmp	r1, r3
 800bda6:	b510      	push	{r4, lr}
 800bda8:	4604      	mov	r4, r0
 800bdaa:	d001      	beq.n	800bdb0 <cleanup_stdio+0x10>
 800bdac:	f7ff ff7a 	bl	800bca4 <_fflush_r>
 800bdb0:	68a1      	ldr	r1, [r4, #8]
 800bdb2:	4b09      	ldr	r3, [pc, #36]	@ (800bdd8 <cleanup_stdio+0x38>)
 800bdb4:	4299      	cmp	r1, r3
 800bdb6:	d002      	beq.n	800bdbe <cleanup_stdio+0x1e>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff ff73 	bl	800bca4 <_fflush_r>
 800bdbe:	68e1      	ldr	r1, [r4, #12]
 800bdc0:	4b06      	ldr	r3, [pc, #24]	@ (800bddc <cleanup_stdio+0x3c>)
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	d004      	beq.n	800bdd0 <cleanup_stdio+0x30>
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdcc:	f7ff bf6a 	b.w	800bca4 <_fflush_r>
 800bdd0:	bd10      	pop	{r4, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20000964 	.word	0x20000964
 800bdd8:	200009cc 	.word	0x200009cc
 800bddc:	20000a34 	.word	0x20000a34

0800bde0 <global_stdio_init.part.0>:
 800bde0:	b510      	push	{r4, lr}
 800bde2:	4b0b      	ldr	r3, [pc, #44]	@ (800be10 <global_stdio_init.part.0+0x30>)
 800bde4:	2104      	movs	r1, #4
 800bde6:	4c0b      	ldr	r4, [pc, #44]	@ (800be14 <global_stdio_init.part.0+0x34>)
 800bde8:	4a0b      	ldr	r2, [pc, #44]	@ (800be18 <global_stdio_init.part.0+0x38>)
 800bdea:	4620      	mov	r0, r4
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f7ff ff94 	bl	800bd1c <std>
 800bdf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	2109      	movs	r1, #9
 800bdfc:	f7ff ff8e 	bl	800bd1c <std>
 800be00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be04:	2202      	movs	r2, #2
 800be06:	2112      	movs	r1, #18
 800be08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be0c:	f7ff bf86 	b.w	800bd1c <std>
 800be10:	20000a9c 	.word	0x20000a9c
 800be14:	20000964 	.word	0x20000964
 800be18:	0800bd89 	.word	0x0800bd89

0800be1c <__sfp_lock_acquire>:
 800be1c:	4801      	ldr	r0, [pc, #4]	@ (800be24 <__sfp_lock_acquire+0x8>)
 800be1e:	f000 ba2a 	b.w	800c276 <__retarget_lock_acquire_recursive>
 800be22:	bf00      	nop
 800be24:	20000aa5 	.word	0x20000aa5

0800be28 <__sfp_lock_release>:
 800be28:	4801      	ldr	r0, [pc, #4]	@ (800be30 <__sfp_lock_release+0x8>)
 800be2a:	f000 ba25 	b.w	800c278 <__retarget_lock_release_recursive>
 800be2e:	bf00      	nop
 800be30:	20000aa5 	.word	0x20000aa5

0800be34 <__sinit>:
 800be34:	b510      	push	{r4, lr}
 800be36:	4604      	mov	r4, r0
 800be38:	f7ff fff0 	bl	800be1c <__sfp_lock_acquire>
 800be3c:	6a23      	ldr	r3, [r4, #32]
 800be3e:	b11b      	cbz	r3, 800be48 <__sinit+0x14>
 800be40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be44:	f7ff bff0 	b.w	800be28 <__sfp_lock_release>
 800be48:	4b04      	ldr	r3, [pc, #16]	@ (800be5c <__sinit+0x28>)
 800be4a:	6223      	str	r3, [r4, #32]
 800be4c:	4b04      	ldr	r3, [pc, #16]	@ (800be60 <__sinit+0x2c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1f5      	bne.n	800be40 <__sinit+0xc>
 800be54:	f7ff ffc4 	bl	800bde0 <global_stdio_init.part.0>
 800be58:	e7f2      	b.n	800be40 <__sinit+0xc>
 800be5a:	bf00      	nop
 800be5c:	0800bda1 	.word	0x0800bda1
 800be60:	20000a9c 	.word	0x20000a9c

0800be64 <_fwalk_sglue>:
 800be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be68:	4607      	mov	r7, r0
 800be6a:	4688      	mov	r8, r1
 800be6c:	4614      	mov	r4, r2
 800be6e:	2600      	movs	r6, #0
 800be70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be74:	f1b9 0901 	subs.w	r9, r9, #1
 800be78:	d505      	bpl.n	800be86 <_fwalk_sglue+0x22>
 800be7a:	6824      	ldr	r4, [r4, #0]
 800be7c:	2c00      	cmp	r4, #0
 800be7e:	d1f7      	bne.n	800be70 <_fwalk_sglue+0xc>
 800be80:	4630      	mov	r0, r6
 800be82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be86:	89ab      	ldrh	r3, [r5, #12]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d907      	bls.n	800be9c <_fwalk_sglue+0x38>
 800be8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be90:	3301      	adds	r3, #1
 800be92:	d003      	beq.n	800be9c <_fwalk_sglue+0x38>
 800be94:	4629      	mov	r1, r5
 800be96:	4638      	mov	r0, r7
 800be98:	47c0      	blx	r8
 800be9a:	4306      	orrs	r6, r0
 800be9c:	3568      	adds	r5, #104	@ 0x68
 800be9e:	e7e9      	b.n	800be74 <_fwalk_sglue+0x10>

0800bea0 <iprintf>:
 800bea0:	b40f      	push	{r0, r1, r2, r3}
 800bea2:	b507      	push	{r0, r1, r2, lr}
 800bea4:	4906      	ldr	r1, [pc, #24]	@ (800bec0 <iprintf+0x20>)
 800bea6:	ab04      	add	r3, sp, #16
 800bea8:	6808      	ldr	r0, [r1, #0]
 800beaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800beae:	6881      	ldr	r1, [r0, #8]
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	f000 fa81 	bl	800c3b8 <_vfiprintf_r>
 800beb6:	b003      	add	sp, #12
 800beb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bebc:	b004      	add	sp, #16
 800bebe:	4770      	bx	lr
 800bec0:	20000600 	.word	0x20000600

0800bec4 <putchar>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	@ (800bed0 <putchar+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	6882      	ldr	r2, [r0, #8]
 800becc:	f000 bd91 	b.w	800c9f2 <_putc_r>
 800bed0:	20000600 	.word	0x20000600

0800bed4 <_puts_r>:
 800bed4:	6a03      	ldr	r3, [r0, #32]
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	4605      	mov	r5, r0
 800beda:	460e      	mov	r6, r1
 800bedc:	6884      	ldr	r4, [r0, #8]
 800bede:	b90b      	cbnz	r3, 800bee4 <_puts_r+0x10>
 800bee0:	f7ff ffa8 	bl	800be34 <__sinit>
 800bee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bee6:	07db      	lsls	r3, r3, #31
 800bee8:	d405      	bmi.n	800bef6 <_puts_r+0x22>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	0598      	lsls	r0, r3, #22
 800beee:	d402      	bmi.n	800bef6 <_puts_r+0x22>
 800bef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bef2:	f000 f9c0 	bl	800c276 <__retarget_lock_acquire_recursive>
 800bef6:	89a3      	ldrh	r3, [r4, #12]
 800bef8:	0719      	lsls	r1, r3, #28
 800befa:	d502      	bpl.n	800bf02 <_puts_r+0x2e>
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d135      	bne.n	800bf6e <_puts_r+0x9a>
 800bf02:	4621      	mov	r1, r4
 800bf04:	4628      	mov	r0, r5
 800bf06:	f000 f8c5 	bl	800c094 <__swsetup_r>
 800bf0a:	b380      	cbz	r0, 800bf6e <_puts_r+0x9a>
 800bf0c:	f04f 35ff 	mov.w	r5, #4294967295
 800bf10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf12:	07da      	lsls	r2, r3, #31
 800bf14:	d405      	bmi.n	800bf22 <_puts_r+0x4e>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	059b      	lsls	r3, r3, #22
 800bf1a:	d402      	bmi.n	800bf22 <_puts_r+0x4e>
 800bf1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf1e:	f000 f9ab 	bl	800c278 <__retarget_lock_release_recursive>
 800bf22:	4628      	mov	r0, r5
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	da04      	bge.n	800bf34 <_puts_r+0x60>
 800bf2a:	69a2      	ldr	r2, [r4, #24]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	dc17      	bgt.n	800bf60 <_puts_r+0x8c>
 800bf30:	290a      	cmp	r1, #10
 800bf32:	d015      	beq.n	800bf60 <_puts_r+0x8c>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	6022      	str	r2, [r4, #0]
 800bf3a:	7019      	strb	r1, [r3, #0]
 800bf3c:	68a3      	ldr	r3, [r4, #8]
 800bf3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf42:	3b01      	subs	r3, #1
 800bf44:	60a3      	str	r3, [r4, #8]
 800bf46:	2900      	cmp	r1, #0
 800bf48:	d1ed      	bne.n	800bf26 <_puts_r+0x52>
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da11      	bge.n	800bf72 <_puts_r+0x9e>
 800bf4e:	4622      	mov	r2, r4
 800bf50:	210a      	movs	r1, #10
 800bf52:	4628      	mov	r0, r5
 800bf54:	f000 f85f 	bl	800c016 <__swbuf_r>
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d0d7      	beq.n	800bf0c <_puts_r+0x38>
 800bf5c:	250a      	movs	r5, #10
 800bf5e:	e7d7      	b.n	800bf10 <_puts_r+0x3c>
 800bf60:	4622      	mov	r2, r4
 800bf62:	4628      	mov	r0, r5
 800bf64:	f000 f857 	bl	800c016 <__swbuf_r>
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d1e7      	bne.n	800bf3c <_puts_r+0x68>
 800bf6c:	e7ce      	b.n	800bf0c <_puts_r+0x38>
 800bf6e:	3e01      	subs	r6, #1
 800bf70:	e7e4      	b.n	800bf3c <_puts_r+0x68>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	1c5a      	adds	r2, r3, #1
 800bf76:	6022      	str	r2, [r4, #0]
 800bf78:	220a      	movs	r2, #10
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	e7ee      	b.n	800bf5c <_puts_r+0x88>
	...

0800bf80 <puts>:
 800bf80:	4b02      	ldr	r3, [pc, #8]	@ (800bf8c <puts+0xc>)
 800bf82:	4601      	mov	r1, r0
 800bf84:	6818      	ldr	r0, [r3, #0]
 800bf86:	f7ff bfa5 	b.w	800bed4 <_puts_r>
 800bf8a:	bf00      	nop
 800bf8c:	20000600 	.word	0x20000600

0800bf90 <__sread>:
 800bf90:	b510      	push	{r4, lr}
 800bf92:	460c      	mov	r4, r1
 800bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf98:	f000 f90e 	bl	800c1b8 <_read_r>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	bfab      	itete	ge
 800bfa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfa2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfa4:	181b      	addge	r3, r3, r0
 800bfa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfaa:	bfac      	ite	ge
 800bfac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfae:	81a3      	strhlt	r3, [r4, #12]
 800bfb0:	bd10      	pop	{r4, pc}

0800bfb2 <__swrite>:
 800bfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	461f      	mov	r7, r3
 800bfb8:	898b      	ldrh	r3, [r1, #12]
 800bfba:	4605      	mov	r5, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	05db      	lsls	r3, r3, #23
 800bfc0:	4616      	mov	r6, r2
 800bfc2:	d505      	bpl.n	800bfd0 <__swrite+0x1e>
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfcc:	f000 f8e2 	bl	800c194 <_lseek_r>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	463b      	mov	r3, r7
 800bfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe6:	f000 b909 	b.w	800c1fc <_write_r>

0800bfea <__sseek>:
 800bfea:	b510      	push	{r4, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff2:	f000 f8cf 	bl	800c194 <_lseek_r>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	bf15      	itete	ne
 800bffc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bffe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c006:	81a3      	strheq	r3, [r4, #12]
 800c008:	bf18      	it	ne
 800c00a:	81a3      	strhne	r3, [r4, #12]
 800c00c:	bd10      	pop	{r4, pc}

0800c00e <__sclose>:
 800c00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c012:	f000 b8af 	b.w	800c174 <_close_r>

0800c016 <__swbuf_r>:
 800c016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c018:	460e      	mov	r6, r1
 800c01a:	4614      	mov	r4, r2
 800c01c:	4605      	mov	r5, r0
 800c01e:	b118      	cbz	r0, 800c028 <__swbuf_r+0x12>
 800c020:	6a03      	ldr	r3, [r0, #32]
 800c022:	b90b      	cbnz	r3, 800c028 <__swbuf_r+0x12>
 800c024:	f7ff ff06 	bl	800be34 <__sinit>
 800c028:	69a3      	ldr	r3, [r4, #24]
 800c02a:	60a3      	str	r3, [r4, #8]
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	071a      	lsls	r2, r3, #28
 800c030:	d501      	bpl.n	800c036 <__swbuf_r+0x20>
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	b943      	cbnz	r3, 800c048 <__swbuf_r+0x32>
 800c036:	4621      	mov	r1, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 f82b 	bl	800c094 <__swsetup_r>
 800c03e:	b118      	cbz	r0, 800c048 <__swbuf_r+0x32>
 800c040:	f04f 37ff 	mov.w	r7, #4294967295
 800c044:	4638      	mov	r0, r7
 800c046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	b2f6      	uxtb	r6, r6
 800c04c:	6922      	ldr	r2, [r4, #16]
 800c04e:	4637      	mov	r7, r6
 800c050:	1a98      	subs	r0, r3, r2
 800c052:	6963      	ldr	r3, [r4, #20]
 800c054:	4283      	cmp	r3, r0
 800c056:	dc05      	bgt.n	800c064 <__swbuf_r+0x4e>
 800c058:	4621      	mov	r1, r4
 800c05a:	4628      	mov	r0, r5
 800c05c:	f7ff fe22 	bl	800bca4 <_fflush_r>
 800c060:	2800      	cmp	r0, #0
 800c062:	d1ed      	bne.n	800c040 <__swbuf_r+0x2a>
 800c064:	68a3      	ldr	r3, [r4, #8]
 800c066:	3b01      	subs	r3, #1
 800c068:	60a3      	str	r3, [r4, #8]
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	1c5a      	adds	r2, r3, #1
 800c06e:	6022      	str	r2, [r4, #0]
 800c070:	701e      	strb	r6, [r3, #0]
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	6962      	ldr	r2, [r4, #20]
 800c076:	429a      	cmp	r2, r3
 800c078:	d004      	beq.n	800c084 <__swbuf_r+0x6e>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	07db      	lsls	r3, r3, #31
 800c07e:	d5e1      	bpl.n	800c044 <__swbuf_r+0x2e>
 800c080:	2e0a      	cmp	r6, #10
 800c082:	d1df      	bne.n	800c044 <__swbuf_r+0x2e>
 800c084:	4621      	mov	r1, r4
 800c086:	4628      	mov	r0, r5
 800c088:	f7ff fe0c 	bl	800bca4 <_fflush_r>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d0d9      	beq.n	800c044 <__swbuf_r+0x2e>
 800c090:	e7d6      	b.n	800c040 <__swbuf_r+0x2a>
	...

0800c094 <__swsetup_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4b29      	ldr	r3, [pc, #164]	@ (800c13c <__swsetup_r+0xa8>)
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	b118      	cbz	r0, 800c0a8 <__swsetup_r+0x14>
 800c0a0:	6a03      	ldr	r3, [r0, #32]
 800c0a2:	b90b      	cbnz	r3, 800c0a8 <__swsetup_r+0x14>
 800c0a4:	f7ff fec6 	bl	800be34 <__sinit>
 800c0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ac:	0719      	lsls	r1, r3, #28
 800c0ae:	d422      	bmi.n	800c0f6 <__swsetup_r+0x62>
 800c0b0:	06da      	lsls	r2, r3, #27
 800c0b2:	d407      	bmi.n	800c0c4 <__swsetup_r+0x30>
 800c0b4:	2209      	movs	r2, #9
 800c0b6:	602a      	str	r2, [r5, #0]
 800c0b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	e033      	b.n	800c12c <__swsetup_r+0x98>
 800c0c4:	0758      	lsls	r0, r3, #29
 800c0c6:	d512      	bpl.n	800c0ee <__swsetup_r+0x5a>
 800c0c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0ca:	b141      	cbz	r1, 800c0de <__swsetup_r+0x4a>
 800c0cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	d002      	beq.n	800c0da <__swsetup_r+0x46>
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f000 f8fb 	bl	800c2d0 <_free_r>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6063      	str	r3, [r4, #4]
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	6023      	str	r3, [r4, #0]
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	f043 0308 	orr.w	r3, r3, #8
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	b94b      	cbnz	r3, 800c10e <__swsetup_r+0x7a>
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c104:	d003      	beq.n	800c10e <__swsetup_r+0x7a>
 800c106:	4621      	mov	r1, r4
 800c108:	4628      	mov	r0, r5
 800c10a:	f000 fc36 	bl	800c97a <__smakebuf_r>
 800c10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c112:	f013 0201 	ands.w	r2, r3, #1
 800c116:	d00a      	beq.n	800c12e <__swsetup_r+0x9a>
 800c118:	2200      	movs	r2, #0
 800c11a:	60a2      	str	r2, [r4, #8]
 800c11c:	6962      	ldr	r2, [r4, #20]
 800c11e:	4252      	negs	r2, r2
 800c120:	61a2      	str	r2, [r4, #24]
 800c122:	6922      	ldr	r2, [r4, #16]
 800c124:	b942      	cbnz	r2, 800c138 <__swsetup_r+0xa4>
 800c126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c12a:	d1c5      	bne.n	800c0b8 <__swsetup_r+0x24>
 800c12c:	bd38      	pop	{r3, r4, r5, pc}
 800c12e:	0799      	lsls	r1, r3, #30
 800c130:	bf58      	it	pl
 800c132:	6962      	ldrpl	r2, [r4, #20]
 800c134:	60a2      	str	r2, [r4, #8]
 800c136:	e7f4      	b.n	800c122 <__swsetup_r+0x8e>
 800c138:	2000      	movs	r0, #0
 800c13a:	e7f7      	b.n	800c12c <__swsetup_r+0x98>
 800c13c:	20000600 	.word	0x20000600

0800c140 <memset>:
 800c140:	4402      	add	r2, r0
 800c142:	4603      	mov	r3, r0
 800c144:	4293      	cmp	r3, r2
 800c146:	d100      	bne.n	800c14a <memset+0xa>
 800c148:	4770      	bx	lr
 800c14a:	f803 1b01 	strb.w	r1, [r3], #1
 800c14e:	e7f9      	b.n	800c144 <memset+0x4>

0800c150 <strncmp>:
 800c150:	b510      	push	{r4, lr}
 800c152:	b16a      	cbz	r2, 800c170 <strncmp+0x20>
 800c154:	3901      	subs	r1, #1
 800c156:	1884      	adds	r4, r0, r2
 800c158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c15c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c160:	429a      	cmp	r2, r3
 800c162:	d103      	bne.n	800c16c <strncmp+0x1c>
 800c164:	42a0      	cmp	r0, r4
 800c166:	d001      	beq.n	800c16c <strncmp+0x1c>
 800c168:	2a00      	cmp	r2, #0
 800c16a:	d1f5      	bne.n	800c158 <strncmp+0x8>
 800c16c:	1ad0      	subs	r0, r2, r3
 800c16e:	bd10      	pop	{r4, pc}
 800c170:	4610      	mov	r0, r2
 800c172:	e7fc      	b.n	800c16e <strncmp+0x1e>

0800c174 <_close_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	2300      	movs	r3, #0
 800c178:	4d05      	ldr	r5, [pc, #20]	@ (800c190 <_close_r+0x1c>)
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	f7f5 f8b5 	bl	80012ee <_close>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_close_r+0x1a>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_close_r+0x1a>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	20000aa0 	.word	0x20000aa0

0800c194 <_lseek_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4604      	mov	r4, r0
 800c198:	4d06      	ldr	r5, [pc, #24]	@ (800c1b4 <_lseek_r+0x20>)
 800c19a:	4608      	mov	r0, r1
 800c19c:	4611      	mov	r1, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	602a      	str	r2, [r5, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f7f5 f8ca 	bl	800133c <_lseek>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_lseek_r+0x1e>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_lseek_r+0x1e>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	20000aa0 	.word	0x20000aa0

0800c1b8 <_read_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4d06      	ldr	r5, [pc, #24]	@ (800c1d8 <_read_r+0x20>)
 800c1be:	4608      	mov	r0, r1
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	602a      	str	r2, [r5, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f7f5 f874 	bl	80012b4 <_read>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_read_r+0x1e>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_read_r+0x1e>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20000aa0 	.word	0x20000aa0

0800c1dc <_sbrk_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4d05      	ldr	r5, [pc, #20]	@ (800c1f8 <_sbrk_r+0x1c>)
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	602b      	str	r3, [r5, #0]
 800c1e8:	f7f5 f8b6 	bl	8001358 <_sbrk>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_sbrk_r+0x1a>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_sbrk_r+0x1a>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	20000aa0 	.word	0x20000aa0

0800c1fc <_write_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4604      	mov	r4, r0
 800c200:	4d06      	ldr	r5, [pc, #24]	@ (800c21c <_write_r+0x20>)
 800c202:	4608      	mov	r0, r1
 800c204:	4611      	mov	r1, r2
 800c206:	2200      	movs	r2, #0
 800c208:	602a      	str	r2, [r5, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	f7fc fd08 	bl	8008c20 <_write>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d102      	bne.n	800c21a <_write_r+0x1e>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b103      	cbz	r3, 800c21a <_write_r+0x1e>
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	20000aa0 	.word	0x20000aa0

0800c220 <__errno>:
 800c220:	4b01      	ldr	r3, [pc, #4]	@ (800c228 <__errno+0x8>)
 800c222:	6818      	ldr	r0, [r3, #0]
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	20000600 	.word	0x20000600

0800c22c <__libc_init_array>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	4d0d      	ldr	r5, [pc, #52]	@ (800c264 <__libc_init_array+0x38>)
 800c230:	2600      	movs	r6, #0
 800c232:	4c0d      	ldr	r4, [pc, #52]	@ (800c268 <__libc_init_array+0x3c>)
 800c234:	1b64      	subs	r4, r4, r5
 800c236:	10a4      	asrs	r4, r4, #2
 800c238:	42a6      	cmp	r6, r4
 800c23a:	d109      	bne.n	800c250 <__libc_init_array+0x24>
 800c23c:	4d0b      	ldr	r5, [pc, #44]	@ (800c26c <__libc_init_array+0x40>)
 800c23e:	2600      	movs	r6, #0
 800c240:	4c0b      	ldr	r4, [pc, #44]	@ (800c270 <__libc_init_array+0x44>)
 800c242:	f000 fc87 	bl	800cb54 <_init>
 800c246:	1b64      	subs	r4, r4, r5
 800c248:	10a4      	asrs	r4, r4, #2
 800c24a:	42a6      	cmp	r6, r4
 800c24c:	d105      	bne.n	800c25a <__libc_init_array+0x2e>
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	f855 3b04 	ldr.w	r3, [r5], #4
 800c254:	3601      	adds	r6, #1
 800c256:	4798      	blx	r3
 800c258:	e7ee      	b.n	800c238 <__libc_init_array+0xc>
 800c25a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c25e:	3601      	adds	r6, #1
 800c260:	4798      	blx	r3
 800c262:	e7f2      	b.n	800c24a <__libc_init_array+0x1e>
 800c264:	0800e218 	.word	0x0800e218
 800c268:	0800e218 	.word	0x0800e218
 800c26c:	0800e218 	.word	0x0800e218
 800c270:	0800e21c 	.word	0x0800e21c

0800c274 <__retarget_lock_init_recursive>:
 800c274:	4770      	bx	lr

0800c276 <__retarget_lock_acquire_recursive>:
 800c276:	4770      	bx	lr

0800c278 <__retarget_lock_release_recursive>:
 800c278:	4770      	bx	lr

0800c27a <memcpy>:
 800c27a:	440a      	add	r2, r1
 800c27c:	1e43      	subs	r3, r0, #1
 800c27e:	4291      	cmp	r1, r2
 800c280:	d100      	bne.n	800c284 <memcpy+0xa>
 800c282:	4770      	bx	lr
 800c284:	b510      	push	{r4, lr}
 800c286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c28a:	4291      	cmp	r1, r2
 800c28c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c290:	d1f9      	bne.n	800c286 <memcpy+0xc>
 800c292:	bd10      	pop	{r4, pc}

0800c294 <__assert_func>:
 800c294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c296:	4614      	mov	r4, r2
 800c298:	461a      	mov	r2, r3
 800c29a:	4b09      	ldr	r3, [pc, #36]	@ (800c2c0 <__assert_func+0x2c>)
 800c29c:	4605      	mov	r5, r0
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68d8      	ldr	r0, [r3, #12]
 800c2a2:	b954      	cbnz	r4, 800c2ba <__assert_func+0x26>
 800c2a4:	4b07      	ldr	r3, [pc, #28]	@ (800c2c4 <__assert_func+0x30>)
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	9100      	str	r1, [sp, #0]
 800c2aa:	4907      	ldr	r1, [pc, #28]	@ (800c2c8 <__assert_func+0x34>)
 800c2ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	f000 fb2b 	bl	800c90c <fiprintf>
 800c2b6:	f000 fc01 	bl	800cabc <abort>
 800c2ba:	4b04      	ldr	r3, [pc, #16]	@ (800c2cc <__assert_func+0x38>)
 800c2bc:	e7f4      	b.n	800c2a8 <__assert_func+0x14>
 800c2be:	bf00      	nop
 800c2c0:	20000600 	.word	0x20000600
 800c2c4:	0800e1d9 	.word	0x0800e1d9
 800c2c8:	0800e1ab 	.word	0x0800e1ab
 800c2cc:	0800e19e 	.word	0x0800e19e

0800c2d0 <_free_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	d041      	beq.n	800c35c <_free_r+0x8c>
 800c2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2dc:	1f0c      	subs	r4, r1, #4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bfb8      	it	lt
 800c2e2:	18e4      	addlt	r4, r4, r3
 800c2e4:	f7ff fbe2 	bl	800baac <__malloc_lock>
 800c2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c360 <_free_r+0x90>)
 800c2ea:	6813      	ldr	r3, [r2, #0]
 800c2ec:	b933      	cbnz	r3, 800c2fc <_free_r+0x2c>
 800c2ee:	6063      	str	r3, [r4, #4]
 800c2f0:	6014      	str	r4, [r2, #0]
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f8:	f7ff bbde 	b.w	800bab8 <__malloc_unlock>
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	d908      	bls.n	800c312 <_free_r+0x42>
 800c300:	6820      	ldr	r0, [r4, #0]
 800c302:	1821      	adds	r1, r4, r0
 800c304:	428b      	cmp	r3, r1
 800c306:	bf01      	itttt	eq
 800c308:	6819      	ldreq	r1, [r3, #0]
 800c30a:	685b      	ldreq	r3, [r3, #4]
 800c30c:	1809      	addeq	r1, r1, r0
 800c30e:	6021      	streq	r1, [r4, #0]
 800c310:	e7ed      	b.n	800c2ee <_free_r+0x1e>
 800c312:	461a      	mov	r2, r3
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	b10b      	cbz	r3, 800c31c <_free_r+0x4c>
 800c318:	42a3      	cmp	r3, r4
 800c31a:	d9fa      	bls.n	800c312 <_free_r+0x42>
 800c31c:	6811      	ldr	r1, [r2, #0]
 800c31e:	1850      	adds	r0, r2, r1
 800c320:	42a0      	cmp	r0, r4
 800c322:	d10b      	bne.n	800c33c <_free_r+0x6c>
 800c324:	6820      	ldr	r0, [r4, #0]
 800c326:	4401      	add	r1, r0
 800c328:	1850      	adds	r0, r2, r1
 800c32a:	6011      	str	r1, [r2, #0]
 800c32c:	4283      	cmp	r3, r0
 800c32e:	d1e0      	bne.n	800c2f2 <_free_r+0x22>
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	4408      	add	r0, r1
 800c336:	6053      	str	r3, [r2, #4]
 800c338:	6010      	str	r0, [r2, #0]
 800c33a:	e7da      	b.n	800c2f2 <_free_r+0x22>
 800c33c:	d902      	bls.n	800c344 <_free_r+0x74>
 800c33e:	230c      	movs	r3, #12
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	e7d6      	b.n	800c2f2 <_free_r+0x22>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	1821      	adds	r1, r4, r0
 800c348:	428b      	cmp	r3, r1
 800c34a:	bf02      	ittt	eq
 800c34c:	6819      	ldreq	r1, [r3, #0]
 800c34e:	685b      	ldreq	r3, [r3, #4]
 800c350:	1809      	addeq	r1, r1, r0
 800c352:	6063      	str	r3, [r4, #4]
 800c354:	bf08      	it	eq
 800c356:	6021      	streq	r1, [r4, #0]
 800c358:	6054      	str	r4, [r2, #4]
 800c35a:	e7ca      	b.n	800c2f2 <_free_r+0x22>
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
 800c35e:	bf00      	nop
 800c360:	20000960 	.word	0x20000960

0800c364 <__sfputc_r>:
 800c364:	6893      	ldr	r3, [r2, #8]
 800c366:	3b01      	subs	r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	6093      	str	r3, [r2, #8]
 800c36c:	b410      	push	{r4}
 800c36e:	da08      	bge.n	800c382 <__sfputc_r+0x1e>
 800c370:	6994      	ldr	r4, [r2, #24]
 800c372:	42a3      	cmp	r3, r4
 800c374:	db01      	blt.n	800c37a <__sfputc_r+0x16>
 800c376:	290a      	cmp	r1, #10
 800c378:	d103      	bne.n	800c382 <__sfputc_r+0x1e>
 800c37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c37e:	f7ff be4a 	b.w	800c016 <__swbuf_r>
 800c382:	6813      	ldr	r3, [r2, #0]
 800c384:	1c58      	adds	r0, r3, #1
 800c386:	6010      	str	r0, [r2, #0]
 800c388:	4608      	mov	r0, r1
 800c38a:	7019      	strb	r1, [r3, #0]
 800c38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <__sfputs_r>:
 800c392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c394:	4606      	mov	r6, r0
 800c396:	460f      	mov	r7, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	18d5      	adds	r5, r2, r3
 800c39c:	42ac      	cmp	r4, r5
 800c39e:	d101      	bne.n	800c3a4 <__sfputs_r+0x12>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e007      	b.n	800c3b4 <__sfputs_r+0x22>
 800c3a4:	463a      	mov	r2, r7
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f7ff ffda 	bl	800c364 <__sfputc_r>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d1f3      	bne.n	800c39c <__sfputs_r+0xa>
 800c3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3b8 <_vfiprintf_r>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	460d      	mov	r5, r1
 800c3be:	b09d      	sub	sp, #116	@ 0x74
 800c3c0:	4614      	mov	r4, r2
 800c3c2:	4698      	mov	r8, r3
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	b118      	cbz	r0, 800c3d0 <_vfiprintf_r+0x18>
 800c3c8:	6a03      	ldr	r3, [r0, #32]
 800c3ca:	b90b      	cbnz	r3, 800c3d0 <_vfiprintf_r+0x18>
 800c3cc:	f7ff fd32 	bl	800be34 <__sinit>
 800c3d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3d2:	07d9      	lsls	r1, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_vfiprintf_r+0x2a>
 800c3d6:	89ab      	ldrh	r3, [r5, #12]
 800c3d8:	059a      	lsls	r2, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_vfiprintf_r+0x2a>
 800c3dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3de:	f7ff ff4a 	bl	800c276 <__retarget_lock_acquire_recursive>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	071b      	lsls	r3, r3, #28
 800c3e6:	d501      	bpl.n	800c3ec <_vfiprintf_r+0x34>
 800c3e8:	692b      	ldr	r3, [r5, #16]
 800c3ea:	b99b      	cbnz	r3, 800c414 <_vfiprintf_r+0x5c>
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f7ff fe50 	bl	800c094 <__swsetup_r>
 800c3f4:	b170      	cbz	r0, 800c414 <_vfiprintf_r+0x5c>
 800c3f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3f8:	07dc      	lsls	r4, r3, #31
 800c3fa:	d504      	bpl.n	800c406 <_vfiprintf_r+0x4e>
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	b01d      	add	sp, #116	@ 0x74
 800c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c406:	89ab      	ldrh	r3, [r5, #12]
 800c408:	0598      	lsls	r0, r3, #22
 800c40a:	d4f7      	bmi.n	800c3fc <_vfiprintf_r+0x44>
 800c40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c40e:	f7ff ff33 	bl	800c278 <__retarget_lock_release_recursive>
 800c412:	e7f3      	b.n	800c3fc <_vfiprintf_r+0x44>
 800c414:	2300      	movs	r3, #0
 800c416:	f8cd 800c 	str.w	r8, [sp, #12]
 800c41a:	f04f 0901 	mov.w	r9, #1
 800c41e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c5d4 <_vfiprintf_r+0x21c>
 800c422:	9309      	str	r3, [sp, #36]	@ 0x24
 800c424:	2320      	movs	r3, #32
 800c426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c42a:	2330      	movs	r3, #48	@ 0x30
 800c42c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c430:	4623      	mov	r3, r4
 800c432:	469a      	mov	sl, r3
 800c434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c438:	b10a      	cbz	r2, 800c43e <_vfiprintf_r+0x86>
 800c43a:	2a25      	cmp	r2, #37	@ 0x25
 800c43c:	d1f9      	bne.n	800c432 <_vfiprintf_r+0x7a>
 800c43e:	ebba 0b04 	subs.w	fp, sl, r4
 800c442:	d00b      	beq.n	800c45c <_vfiprintf_r+0xa4>
 800c444:	465b      	mov	r3, fp
 800c446:	4622      	mov	r2, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7ff ffa1 	bl	800c392 <__sfputs_r>
 800c450:	3001      	adds	r0, #1
 800c452:	f000 80a7 	beq.w	800c5a4 <_vfiprintf_r+0x1ec>
 800c456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c458:	445a      	add	r2, fp
 800c45a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c45c:	f89a 3000 	ldrb.w	r3, [sl]
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 809f 	beq.w	800c5a4 <_vfiprintf_r+0x1ec>
 800c466:	2300      	movs	r3, #0
 800c468:	f04f 32ff 	mov.w	r2, #4294967295
 800c46c:	f10a 0a01 	add.w	sl, sl, #1
 800c470:	9304      	str	r3, [sp, #16]
 800c472:	9307      	str	r3, [sp, #28]
 800c474:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c478:	931a      	str	r3, [sp, #104]	@ 0x68
 800c47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c47e:	4654      	mov	r4, sl
 800c480:	2205      	movs	r2, #5
 800c482:	4854      	ldr	r0, [pc, #336]	@ (800c5d4 <_vfiprintf_r+0x21c>)
 800c484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c488:	f000 fb0a 	bl	800caa0 <memchr>
 800c48c:	9a04      	ldr	r2, [sp, #16]
 800c48e:	b9d8      	cbnz	r0, 800c4c8 <_vfiprintf_r+0x110>
 800c490:	06d1      	lsls	r1, r2, #27
 800c492:	bf44      	itt	mi
 800c494:	2320      	movmi	r3, #32
 800c496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c49a:	0713      	lsls	r3, r2, #28
 800c49c:	bf44      	itt	mi
 800c49e:	232b      	movmi	r3, #43	@ 0x2b
 800c4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4aa:	d015      	beq.n	800c4d8 <_vfiprintf_r+0x120>
 800c4ac:	9a07      	ldr	r2, [sp, #28]
 800c4ae:	4654      	mov	r4, sl
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f04f 0c0a 	mov.w	ip, #10
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4bc:	3b30      	subs	r3, #48	@ 0x30
 800c4be:	2b09      	cmp	r3, #9
 800c4c0:	d94b      	bls.n	800c55a <_vfiprintf_r+0x1a2>
 800c4c2:	b1b0      	cbz	r0, 800c4f2 <_vfiprintf_r+0x13a>
 800c4c4:	9207      	str	r2, [sp, #28]
 800c4c6:	e014      	b.n	800c4f2 <_vfiprintf_r+0x13a>
 800c4c8:	eba0 0308 	sub.w	r3, r0, r8
 800c4cc:	46a2      	mov	sl, r4
 800c4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	e7d2      	b.n	800c47e <_vfiprintf_r+0xc6>
 800c4d8:	9b03      	ldr	r3, [sp, #12]
 800c4da:	1d19      	adds	r1, r3, #4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	9103      	str	r1, [sp, #12]
 800c4e2:	bfbb      	ittet	lt
 800c4e4:	425b      	neglt	r3, r3
 800c4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ea:	9307      	strge	r3, [sp, #28]
 800c4ec:	9307      	strlt	r3, [sp, #28]
 800c4ee:	bfb8      	it	lt
 800c4f0:	9204      	strlt	r2, [sp, #16]
 800c4f2:	7823      	ldrb	r3, [r4, #0]
 800c4f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4f6:	d10a      	bne.n	800c50e <_vfiprintf_r+0x156>
 800c4f8:	7863      	ldrb	r3, [r4, #1]
 800c4fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4fc:	d132      	bne.n	800c564 <_vfiprintf_r+0x1ac>
 800c4fe:	9b03      	ldr	r3, [sp, #12]
 800c500:	3402      	adds	r4, #2
 800c502:	1d1a      	adds	r2, r3, #4
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c50a:	9203      	str	r2, [sp, #12]
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c5e4 <_vfiprintf_r+0x22c>
 800c512:	2203      	movs	r2, #3
 800c514:	7821      	ldrb	r1, [r4, #0]
 800c516:	4650      	mov	r0, sl
 800c518:	f000 fac2 	bl	800caa0 <memchr>
 800c51c:	b138      	cbz	r0, 800c52e <_vfiprintf_r+0x176>
 800c51e:	eba0 000a 	sub.w	r0, r0, sl
 800c522:	2240      	movs	r2, #64	@ 0x40
 800c524:	9b04      	ldr	r3, [sp, #16]
 800c526:	3401      	adds	r4, #1
 800c528:	4082      	lsls	r2, r0
 800c52a:	4313      	orrs	r3, r2
 800c52c:	9304      	str	r3, [sp, #16]
 800c52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c532:	2206      	movs	r2, #6
 800c534:	4828      	ldr	r0, [pc, #160]	@ (800c5d8 <_vfiprintf_r+0x220>)
 800c536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c53a:	f000 fab1 	bl	800caa0 <memchr>
 800c53e:	2800      	cmp	r0, #0
 800c540:	d03f      	beq.n	800c5c2 <_vfiprintf_r+0x20a>
 800c542:	4b26      	ldr	r3, [pc, #152]	@ (800c5dc <_vfiprintf_r+0x224>)
 800c544:	bb1b      	cbnz	r3, 800c58e <_vfiprintf_r+0x1d6>
 800c546:	9b03      	ldr	r3, [sp, #12]
 800c548:	3307      	adds	r3, #7
 800c54a:	f023 0307 	bic.w	r3, r3, #7
 800c54e:	3308      	adds	r3, #8
 800c550:	9303      	str	r3, [sp, #12]
 800c552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c554:	443b      	add	r3, r7
 800c556:	9309      	str	r3, [sp, #36]	@ 0x24
 800c558:	e76a      	b.n	800c430 <_vfiprintf_r+0x78>
 800c55a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c55e:	460c      	mov	r4, r1
 800c560:	2001      	movs	r0, #1
 800c562:	e7a8      	b.n	800c4b6 <_vfiprintf_r+0xfe>
 800c564:	2300      	movs	r3, #0
 800c566:	3401      	adds	r4, #1
 800c568:	f04f 0c0a 	mov.w	ip, #10
 800c56c:	4619      	mov	r1, r3
 800c56e:	9305      	str	r3, [sp, #20]
 800c570:	4620      	mov	r0, r4
 800c572:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c576:	3a30      	subs	r2, #48	@ 0x30
 800c578:	2a09      	cmp	r2, #9
 800c57a:	d903      	bls.n	800c584 <_vfiprintf_r+0x1cc>
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d0c6      	beq.n	800c50e <_vfiprintf_r+0x156>
 800c580:	9105      	str	r1, [sp, #20]
 800c582:	e7c4      	b.n	800c50e <_vfiprintf_r+0x156>
 800c584:	fb0c 2101 	mla	r1, ip, r1, r2
 800c588:	4604      	mov	r4, r0
 800c58a:	2301      	movs	r3, #1
 800c58c:	e7f0      	b.n	800c570 <_vfiprintf_r+0x1b8>
 800c58e:	ab03      	add	r3, sp, #12
 800c590:	462a      	mov	r2, r5
 800c592:	a904      	add	r1, sp, #16
 800c594:	4630      	mov	r0, r6
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	4b11      	ldr	r3, [pc, #68]	@ (800c5e0 <_vfiprintf_r+0x228>)
 800c59a:	f3af 8000 	nop.w
 800c59e:	4607      	mov	r7, r0
 800c5a0:	1c78      	adds	r0, r7, #1
 800c5a2:	d1d6      	bne.n	800c552 <_vfiprintf_r+0x19a>
 800c5a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5a6:	07d9      	lsls	r1, r3, #31
 800c5a8:	d405      	bmi.n	800c5b6 <_vfiprintf_r+0x1fe>
 800c5aa:	89ab      	ldrh	r3, [r5, #12]
 800c5ac:	059a      	lsls	r2, r3, #22
 800c5ae:	d402      	bmi.n	800c5b6 <_vfiprintf_r+0x1fe>
 800c5b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5b2:	f7ff fe61 	bl	800c278 <__retarget_lock_release_recursive>
 800c5b6:	89ab      	ldrh	r3, [r5, #12]
 800c5b8:	065b      	lsls	r3, r3, #25
 800c5ba:	f53f af1f 	bmi.w	800c3fc <_vfiprintf_r+0x44>
 800c5be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5c0:	e71e      	b.n	800c400 <_vfiprintf_r+0x48>
 800c5c2:	ab03      	add	r3, sp, #12
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	a904      	add	r1, sp, #16
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	4b04      	ldr	r3, [pc, #16]	@ (800c5e0 <_vfiprintf_r+0x228>)
 800c5ce:	f000 f87d 	bl	800c6cc <_printf_i>
 800c5d2:	e7e4      	b.n	800c59e <_vfiprintf_r+0x1e6>
 800c5d4:	0800e1da 	.word	0x0800e1da
 800c5d8:	0800e1e4 	.word	0x0800e1e4
 800c5dc:	00000000 	.word	0x00000000
 800c5e0:	0800c393 	.word	0x0800c393
 800c5e4:	0800e1e0 	.word	0x0800e1e0

0800c5e8 <_printf_common>:
 800c5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ec:	4616      	mov	r6, r2
 800c5ee:	4698      	mov	r8, r3
 800c5f0:	688a      	ldr	r2, [r1, #8]
 800c5f2:	4607      	mov	r7, r0
 800c5f4:	690b      	ldr	r3, [r1, #16]
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	bfb8      	it	lt
 800c600:	4613      	movlt	r3, r2
 800c602:	6033      	str	r3, [r6, #0]
 800c604:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c608:	b10a      	cbz	r2, 800c60e <_printf_common+0x26>
 800c60a:	3301      	adds	r3, #1
 800c60c:	6033      	str	r3, [r6, #0]
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	0699      	lsls	r1, r3, #26
 800c612:	bf42      	ittt	mi
 800c614:	6833      	ldrmi	r3, [r6, #0]
 800c616:	3302      	addmi	r3, #2
 800c618:	6033      	strmi	r3, [r6, #0]
 800c61a:	6825      	ldr	r5, [r4, #0]
 800c61c:	f015 0506 	ands.w	r5, r5, #6
 800c620:	d106      	bne.n	800c630 <_printf_common+0x48>
 800c622:	f104 0a19 	add.w	sl, r4, #25
 800c626:	68e3      	ldr	r3, [r4, #12]
 800c628:	6832      	ldr	r2, [r6, #0]
 800c62a:	1a9b      	subs	r3, r3, r2
 800c62c:	42ab      	cmp	r3, r5
 800c62e:	dc2b      	bgt.n	800c688 <_printf_common+0xa0>
 800c630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c634:	6822      	ldr	r2, [r4, #0]
 800c636:	3b00      	subs	r3, #0
 800c638:	bf18      	it	ne
 800c63a:	2301      	movne	r3, #1
 800c63c:	0692      	lsls	r2, r2, #26
 800c63e:	d430      	bmi.n	800c6a2 <_printf_common+0xba>
 800c640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c644:	4641      	mov	r1, r8
 800c646:	4638      	mov	r0, r7
 800c648:	47c8      	blx	r9
 800c64a:	3001      	adds	r0, #1
 800c64c:	d023      	beq.n	800c696 <_printf_common+0xae>
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	341a      	adds	r4, #26
 800c652:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c656:	f003 0306 	and.w	r3, r3, #6
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	bf0a      	itet	eq
 800c65e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c662:	2500      	movne	r5, #0
 800c664:	6833      	ldreq	r3, [r6, #0]
 800c666:	f04f 0600 	mov.w	r6, #0
 800c66a:	bf08      	it	eq
 800c66c:	1aed      	subeq	r5, r5, r3
 800c66e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c672:	bf08      	it	eq
 800c674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c678:	4293      	cmp	r3, r2
 800c67a:	bfc4      	itt	gt
 800c67c:	1a9b      	subgt	r3, r3, r2
 800c67e:	18ed      	addgt	r5, r5, r3
 800c680:	42b5      	cmp	r5, r6
 800c682:	d11a      	bne.n	800c6ba <_printf_common+0xd2>
 800c684:	2000      	movs	r0, #0
 800c686:	e008      	b.n	800c69a <_printf_common+0xb2>
 800c688:	2301      	movs	r3, #1
 800c68a:	4652      	mov	r2, sl
 800c68c:	4641      	mov	r1, r8
 800c68e:	4638      	mov	r0, r7
 800c690:	47c8      	blx	r9
 800c692:	3001      	adds	r0, #1
 800c694:	d103      	bne.n	800c69e <_printf_common+0xb6>
 800c696:	f04f 30ff 	mov.w	r0, #4294967295
 800c69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c69e:	3501      	adds	r5, #1
 800c6a0:	e7c1      	b.n	800c626 <_printf_common+0x3e>
 800c6a2:	18e1      	adds	r1, r4, r3
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	2030      	movs	r0, #48	@ 0x30
 800c6a8:	3302      	adds	r3, #2
 800c6aa:	4422      	add	r2, r4
 800c6ac:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c6b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c6b8:	e7c2      	b.n	800c640 <_printf_common+0x58>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	4622      	mov	r2, r4
 800c6be:	4641      	mov	r1, r8
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	47c8      	blx	r9
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d0e6      	beq.n	800c696 <_printf_common+0xae>
 800c6c8:	3601      	adds	r6, #1
 800c6ca:	e7d9      	b.n	800c680 <_printf_common+0x98>

0800c6cc <_printf_i>:
 800c6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	7e0f      	ldrb	r7, [r1, #24]
 800c6d2:	4691      	mov	r9, r2
 800c6d4:	4680      	mov	r8, r0
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	2f78      	cmp	r7, #120	@ 0x78
 800c6da:	469a      	mov	sl, r3
 800c6dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c6de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c6e2:	d807      	bhi.n	800c6f4 <_printf_i+0x28>
 800c6e4:	2f62      	cmp	r7, #98	@ 0x62
 800c6e6:	d80a      	bhi.n	800c6fe <_printf_i+0x32>
 800c6e8:	2f00      	cmp	r7, #0
 800c6ea:	f000 80d2 	beq.w	800c892 <_printf_i+0x1c6>
 800c6ee:	2f58      	cmp	r7, #88	@ 0x58
 800c6f0:	f000 80b9 	beq.w	800c866 <_printf_i+0x19a>
 800c6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6fc:	e03a      	b.n	800c774 <_printf_i+0xa8>
 800c6fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c702:	2b15      	cmp	r3, #21
 800c704:	d8f6      	bhi.n	800c6f4 <_printf_i+0x28>
 800c706:	a101      	add	r1, pc, #4	@ (adr r1, 800c70c <_printf_i+0x40>)
 800c708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c70c:	0800c765 	.word	0x0800c765
 800c710:	0800c779 	.word	0x0800c779
 800c714:	0800c6f5 	.word	0x0800c6f5
 800c718:	0800c6f5 	.word	0x0800c6f5
 800c71c:	0800c6f5 	.word	0x0800c6f5
 800c720:	0800c6f5 	.word	0x0800c6f5
 800c724:	0800c779 	.word	0x0800c779
 800c728:	0800c6f5 	.word	0x0800c6f5
 800c72c:	0800c6f5 	.word	0x0800c6f5
 800c730:	0800c6f5 	.word	0x0800c6f5
 800c734:	0800c6f5 	.word	0x0800c6f5
 800c738:	0800c879 	.word	0x0800c879
 800c73c:	0800c7a3 	.word	0x0800c7a3
 800c740:	0800c833 	.word	0x0800c833
 800c744:	0800c6f5 	.word	0x0800c6f5
 800c748:	0800c6f5 	.word	0x0800c6f5
 800c74c:	0800c89b 	.word	0x0800c89b
 800c750:	0800c6f5 	.word	0x0800c6f5
 800c754:	0800c7a3 	.word	0x0800c7a3
 800c758:	0800c6f5 	.word	0x0800c6f5
 800c75c:	0800c6f5 	.word	0x0800c6f5
 800c760:	0800c83b 	.word	0x0800c83b
 800c764:	6833      	ldr	r3, [r6, #0]
 800c766:	1d1a      	adds	r2, r3, #4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	6032      	str	r2, [r6, #0]
 800c76c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c774:	2301      	movs	r3, #1
 800c776:	e09d      	b.n	800c8b4 <_printf_i+0x1e8>
 800c778:	6833      	ldr	r3, [r6, #0]
 800c77a:	6820      	ldr	r0, [r4, #0]
 800c77c:	1d19      	adds	r1, r3, #4
 800c77e:	6031      	str	r1, [r6, #0]
 800c780:	0606      	lsls	r6, r0, #24
 800c782:	d501      	bpl.n	800c788 <_printf_i+0xbc>
 800c784:	681d      	ldr	r5, [r3, #0]
 800c786:	e003      	b.n	800c790 <_printf_i+0xc4>
 800c788:	0645      	lsls	r5, r0, #25
 800c78a:	d5fb      	bpl.n	800c784 <_printf_i+0xb8>
 800c78c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c790:	2d00      	cmp	r5, #0
 800c792:	da03      	bge.n	800c79c <_printf_i+0xd0>
 800c794:	232d      	movs	r3, #45	@ 0x2d
 800c796:	426d      	negs	r5, r5
 800c798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c79c:	4859      	ldr	r0, [pc, #356]	@ (800c904 <_printf_i+0x238>)
 800c79e:	230a      	movs	r3, #10
 800c7a0:	e011      	b.n	800c7c6 <_printf_i+0xfa>
 800c7a2:	6821      	ldr	r1, [r4, #0]
 800c7a4:	6833      	ldr	r3, [r6, #0]
 800c7a6:	0608      	lsls	r0, r1, #24
 800c7a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7ac:	d402      	bmi.n	800c7b4 <_printf_i+0xe8>
 800c7ae:	0649      	lsls	r1, r1, #25
 800c7b0:	bf48      	it	mi
 800c7b2:	b2ad      	uxthmi	r5, r5
 800c7b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c7b6:	6033      	str	r3, [r6, #0]
 800c7b8:	4852      	ldr	r0, [pc, #328]	@ (800c904 <_printf_i+0x238>)
 800c7ba:	bf14      	ite	ne
 800c7bc:	230a      	movne	r3, #10
 800c7be:	2308      	moveq	r3, #8
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c7c6:	6866      	ldr	r6, [r4, #4]
 800c7c8:	2e00      	cmp	r6, #0
 800c7ca:	60a6      	str	r6, [r4, #8]
 800c7cc:	bfa2      	ittt	ge
 800c7ce:	6821      	ldrge	r1, [r4, #0]
 800c7d0:	f021 0104 	bicge.w	r1, r1, #4
 800c7d4:	6021      	strge	r1, [r4, #0]
 800c7d6:	b90d      	cbnz	r5, 800c7dc <_printf_i+0x110>
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	d04b      	beq.n	800c874 <_printf_i+0x1a8>
 800c7dc:	4616      	mov	r6, r2
 800c7de:	fbb5 f1f3 	udiv	r1, r5, r3
 800c7e2:	fb03 5711 	mls	r7, r3, r1, r5
 800c7e6:	5dc7      	ldrb	r7, [r0, r7]
 800c7e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7ec:	462f      	mov	r7, r5
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	42bb      	cmp	r3, r7
 800c7f2:	d9f4      	bls.n	800c7de <_printf_i+0x112>
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d10b      	bne.n	800c810 <_printf_i+0x144>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	07df      	lsls	r7, r3, #31
 800c7fc:	d508      	bpl.n	800c810 <_printf_i+0x144>
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	6861      	ldr	r1, [r4, #4]
 800c802:	4299      	cmp	r1, r3
 800c804:	bfde      	ittt	le
 800c806:	2330      	movle	r3, #48	@ 0x30
 800c808:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c80c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c810:	1b92      	subs	r2, r2, r6
 800c812:	6122      	str	r2, [r4, #16]
 800c814:	464b      	mov	r3, r9
 800c816:	aa03      	add	r2, sp, #12
 800c818:	4621      	mov	r1, r4
 800c81a:	4640      	mov	r0, r8
 800c81c:	f8cd a000 	str.w	sl, [sp]
 800c820:	f7ff fee2 	bl	800c5e8 <_printf_common>
 800c824:	3001      	adds	r0, #1
 800c826:	d14a      	bne.n	800c8be <_printf_i+0x1f2>
 800c828:	f04f 30ff 	mov.w	r0, #4294967295
 800c82c:	b004      	add	sp, #16
 800c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	f043 0320 	orr.w	r3, r3, #32
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	2778      	movs	r7, #120	@ 0x78
 800c83c:	4832      	ldr	r0, [pc, #200]	@ (800c908 <_printf_i+0x23c>)
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c844:	061f      	lsls	r7, r3, #24
 800c846:	6831      	ldr	r1, [r6, #0]
 800c848:	f851 5b04 	ldr.w	r5, [r1], #4
 800c84c:	d402      	bmi.n	800c854 <_printf_i+0x188>
 800c84e:	065f      	lsls	r7, r3, #25
 800c850:	bf48      	it	mi
 800c852:	b2ad      	uxthmi	r5, r5
 800c854:	6031      	str	r1, [r6, #0]
 800c856:	07d9      	lsls	r1, r3, #31
 800c858:	bf44      	itt	mi
 800c85a:	f043 0320 	orrmi.w	r3, r3, #32
 800c85e:	6023      	strmi	r3, [r4, #0]
 800c860:	b11d      	cbz	r5, 800c86a <_printf_i+0x19e>
 800c862:	2310      	movs	r3, #16
 800c864:	e7ac      	b.n	800c7c0 <_printf_i+0xf4>
 800c866:	4827      	ldr	r0, [pc, #156]	@ (800c904 <_printf_i+0x238>)
 800c868:	e7e9      	b.n	800c83e <_printf_i+0x172>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	f023 0320 	bic.w	r3, r3, #32
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	e7f6      	b.n	800c862 <_printf_i+0x196>
 800c874:	4616      	mov	r6, r2
 800c876:	e7bd      	b.n	800c7f4 <_printf_i+0x128>
 800c878:	6833      	ldr	r3, [r6, #0]
 800c87a:	6825      	ldr	r5, [r4, #0]
 800c87c:	1d18      	adds	r0, r3, #4
 800c87e:	6961      	ldr	r1, [r4, #20]
 800c880:	6030      	str	r0, [r6, #0]
 800c882:	062e      	lsls	r6, r5, #24
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	d501      	bpl.n	800c88c <_printf_i+0x1c0>
 800c888:	6019      	str	r1, [r3, #0]
 800c88a:	e002      	b.n	800c892 <_printf_i+0x1c6>
 800c88c:	0668      	lsls	r0, r5, #25
 800c88e:	d5fb      	bpl.n	800c888 <_printf_i+0x1bc>
 800c890:	8019      	strh	r1, [r3, #0]
 800c892:	2300      	movs	r3, #0
 800c894:	4616      	mov	r6, r2
 800c896:	6123      	str	r3, [r4, #16]
 800c898:	e7bc      	b.n	800c814 <_printf_i+0x148>
 800c89a:	6833      	ldr	r3, [r6, #0]
 800c89c:	2100      	movs	r1, #0
 800c89e:	1d1a      	adds	r2, r3, #4
 800c8a0:	6032      	str	r2, [r6, #0]
 800c8a2:	681e      	ldr	r6, [r3, #0]
 800c8a4:	6862      	ldr	r2, [r4, #4]
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f000 f8fa 	bl	800caa0 <memchr>
 800c8ac:	b108      	cbz	r0, 800c8b2 <_printf_i+0x1e6>
 800c8ae:	1b80      	subs	r0, r0, r6
 800c8b0:	6060      	str	r0, [r4, #4]
 800c8b2:	6863      	ldr	r3, [r4, #4]
 800c8b4:	6123      	str	r3, [r4, #16]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8bc:	e7aa      	b.n	800c814 <_printf_i+0x148>
 800c8be:	6923      	ldr	r3, [r4, #16]
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	47d0      	blx	sl
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d0ad      	beq.n	800c828 <_printf_i+0x15c>
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	079b      	lsls	r3, r3, #30
 800c8d0:	d413      	bmi.n	800c8fa <_printf_i+0x22e>
 800c8d2:	68e0      	ldr	r0, [r4, #12]
 800c8d4:	9b03      	ldr	r3, [sp, #12]
 800c8d6:	4298      	cmp	r0, r3
 800c8d8:	bfb8      	it	lt
 800c8da:	4618      	movlt	r0, r3
 800c8dc:	e7a6      	b.n	800c82c <_printf_i+0x160>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4632      	mov	r2, r6
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	47d0      	blx	sl
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d09d      	beq.n	800c828 <_printf_i+0x15c>
 800c8ec:	3501      	adds	r5, #1
 800c8ee:	68e3      	ldr	r3, [r4, #12]
 800c8f0:	9903      	ldr	r1, [sp, #12]
 800c8f2:	1a5b      	subs	r3, r3, r1
 800c8f4:	42ab      	cmp	r3, r5
 800c8f6:	dcf2      	bgt.n	800c8de <_printf_i+0x212>
 800c8f8:	e7eb      	b.n	800c8d2 <_printf_i+0x206>
 800c8fa:	2500      	movs	r5, #0
 800c8fc:	f104 0619 	add.w	r6, r4, #25
 800c900:	e7f5      	b.n	800c8ee <_printf_i+0x222>
 800c902:	bf00      	nop
 800c904:	0800e1eb 	.word	0x0800e1eb
 800c908:	0800e1fc 	.word	0x0800e1fc

0800c90c <fiprintf>:
 800c90c:	b40e      	push	{r1, r2, r3}
 800c90e:	b503      	push	{r0, r1, lr}
 800c910:	ab03      	add	r3, sp, #12
 800c912:	4601      	mov	r1, r0
 800c914:	4805      	ldr	r0, [pc, #20]	@ (800c92c <fiprintf+0x20>)
 800c916:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	f7ff fd4b 	bl	800c3b8 <_vfiprintf_r>
 800c922:	b002      	add	sp, #8
 800c924:	f85d eb04 	ldr.w	lr, [sp], #4
 800c928:	b003      	add	sp, #12
 800c92a:	4770      	bx	lr
 800c92c:	20000600 	.word	0x20000600

0800c930 <__swhatbuf_r>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	b096      	sub	sp, #88	@ 0x58
 800c93a:	4615      	mov	r5, r2
 800c93c:	2900      	cmp	r1, #0
 800c93e:	461e      	mov	r6, r3
 800c940:	da0c      	bge.n	800c95c <__swhatbuf_r+0x2c>
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	2100      	movs	r1, #0
 800c946:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c94a:	bf14      	ite	ne
 800c94c:	2340      	movne	r3, #64	@ 0x40
 800c94e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c952:	2000      	movs	r0, #0
 800c954:	6031      	str	r1, [r6, #0]
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	b016      	add	sp, #88	@ 0x58
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	466a      	mov	r2, sp
 800c95e:	f000 f87d 	bl	800ca5c <_fstat_r>
 800c962:	2800      	cmp	r0, #0
 800c964:	dbed      	blt.n	800c942 <__swhatbuf_r+0x12>
 800c966:	9901      	ldr	r1, [sp, #4]
 800c968:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c96c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c970:	4259      	negs	r1, r3
 800c972:	4159      	adcs	r1, r3
 800c974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c978:	e7eb      	b.n	800c952 <__swhatbuf_r+0x22>

0800c97a <__smakebuf_r>:
 800c97a:	898b      	ldrh	r3, [r1, #12]
 800c97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c97e:	079d      	lsls	r5, r3, #30
 800c980:	4606      	mov	r6, r0
 800c982:	460c      	mov	r4, r1
 800c984:	d507      	bpl.n	800c996 <__smakebuf_r+0x1c>
 800c986:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	2301      	movs	r3, #1
 800c990:	6163      	str	r3, [r4, #20]
 800c992:	b003      	add	sp, #12
 800c994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c996:	ab01      	add	r3, sp, #4
 800c998:	466a      	mov	r2, sp
 800c99a:	f7ff ffc9 	bl	800c930 <__swhatbuf_r>
 800c99e:	9f00      	ldr	r7, [sp, #0]
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	f7ff f801 	bl	800b9ac <_malloc_r>
 800c9aa:	b948      	cbnz	r0, 800c9c0 <__smakebuf_r+0x46>
 800c9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b0:	059a      	lsls	r2, r3, #22
 800c9b2:	d4ee      	bmi.n	800c992 <__smakebuf_r+0x18>
 800c9b4:	f023 0303 	bic.w	r3, r3, #3
 800c9b8:	f043 0302 	orr.w	r3, r3, #2
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e7e2      	b.n	800c986 <__smakebuf_r+0xc>
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	6020      	str	r0, [r4, #0]
 800c9c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9c8:	81a3      	strh	r3, [r4, #12]
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c9d0:	b15b      	cbz	r3, 800c9ea <__smakebuf_r+0x70>
 800c9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	f000 f852 	bl	800ca80 <_isatty_r>
 800c9dc:	b128      	cbz	r0, 800c9ea <__smakebuf_r+0x70>
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
 800c9e4:	f043 0301 	orr.w	r3, r3, #1
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	431d      	orrs	r5, r3
 800c9ee:	81a5      	strh	r5, [r4, #12]
 800c9f0:	e7cf      	b.n	800c992 <__smakebuf_r+0x18>

0800c9f2 <_putc_r>:
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	4614      	mov	r4, r2
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	b118      	cbz	r0, 800ca04 <_putc_r+0x12>
 800c9fc:	6a03      	ldr	r3, [r0, #32]
 800c9fe:	b90b      	cbnz	r3, 800ca04 <_putc_r+0x12>
 800ca00:	f7ff fa18 	bl	800be34 <__sinit>
 800ca04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca06:	07d8      	lsls	r0, r3, #31
 800ca08:	d405      	bmi.n	800ca16 <_putc_r+0x24>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	0599      	lsls	r1, r3, #22
 800ca0e:	d402      	bmi.n	800ca16 <_putc_r+0x24>
 800ca10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca12:	f7ff fc30 	bl	800c276 <__retarget_lock_acquire_recursive>
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	60a3      	str	r3, [r4, #8]
 800ca1e:	da05      	bge.n	800ca2c <_putc_r+0x3a>
 800ca20:	69a2      	ldr	r2, [r4, #24]
 800ca22:	4293      	cmp	r3, r2
 800ca24:	db12      	blt.n	800ca4c <_putc_r+0x5a>
 800ca26:	b2eb      	uxtb	r3, r5
 800ca28:	2b0a      	cmp	r3, #10
 800ca2a:	d00f      	beq.n	800ca4c <_putc_r+0x5a>
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	6022      	str	r2, [r4, #0]
 800ca32:	701d      	strb	r5, [r3, #0]
 800ca34:	b2ed      	uxtb	r5, r5
 800ca36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca38:	07da      	lsls	r2, r3, #31
 800ca3a:	d405      	bmi.n	800ca48 <_putc_r+0x56>
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	059b      	lsls	r3, r3, #22
 800ca40:	d402      	bmi.n	800ca48 <_putc_r+0x56>
 800ca42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca44:	f7ff fc18 	bl	800c278 <__retarget_lock_release_recursive>
 800ca48:	4628      	mov	r0, r5
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4622      	mov	r2, r4
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff fae0 	bl	800c016 <__swbuf_r>
 800ca56:	4605      	mov	r5, r0
 800ca58:	e7ed      	b.n	800ca36 <_putc_r+0x44>
	...

0800ca5c <_fstat_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4d06      	ldr	r5, [pc, #24]	@ (800ca7c <_fstat_r+0x20>)
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	4611      	mov	r1, r2
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	f7f4 fc4c 	bl	8001306 <_fstat>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d102      	bne.n	800ca78 <_fstat_r+0x1c>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	b103      	cbz	r3, 800ca78 <_fstat_r+0x1c>
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000aa0 	.word	0x20000aa0

0800ca80 <_isatty_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	2300      	movs	r3, #0
 800ca84:	4d05      	ldr	r5, [pc, #20]	@ (800ca9c <_isatty_r+0x1c>)
 800ca86:	4604      	mov	r4, r0
 800ca88:	4608      	mov	r0, r1
 800ca8a:	602b      	str	r3, [r5, #0]
 800ca8c:	f7f4 fc4b 	bl	8001326 <_isatty>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	d102      	bne.n	800ca9a <_isatty_r+0x1a>
 800ca94:	682b      	ldr	r3, [r5, #0]
 800ca96:	b103      	cbz	r3, 800ca9a <_isatty_r+0x1a>
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
 800ca9c:	20000aa0 	.word	0x20000aa0

0800caa0 <memchr>:
 800caa0:	b2c9      	uxtb	r1, r1
 800caa2:	4603      	mov	r3, r0
 800caa4:	4402      	add	r2, r0
 800caa6:	b510      	push	{r4, lr}
 800caa8:	4293      	cmp	r3, r2
 800caaa:	4618      	mov	r0, r3
 800caac:	d101      	bne.n	800cab2 <memchr+0x12>
 800caae:	2000      	movs	r0, #0
 800cab0:	e003      	b.n	800caba <memchr+0x1a>
 800cab2:	7804      	ldrb	r4, [r0, #0]
 800cab4:	3301      	adds	r3, #1
 800cab6:	428c      	cmp	r4, r1
 800cab8:	d1f6      	bne.n	800caa8 <memchr+0x8>
 800caba:	bd10      	pop	{r4, pc}

0800cabc <abort>:
 800cabc:	2006      	movs	r0, #6
 800cabe:	b508      	push	{r3, lr}
 800cac0:	f000 f82c 	bl	800cb1c <raise>
 800cac4:	2001      	movs	r0, #1
 800cac6:	f7f4 fbea 	bl	800129e <_exit>

0800caca <_raise_r>:
 800caca:	291f      	cmp	r1, #31
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4605      	mov	r5, r0
 800cad0:	460c      	mov	r4, r1
 800cad2:	d904      	bls.n	800cade <_raise_r+0x14>
 800cad4:	2316      	movs	r3, #22
 800cad6:	6003      	str	r3, [r0, #0]
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cae0:	b112      	cbz	r2, 800cae8 <_raise_r+0x1e>
 800cae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae6:	b94b      	cbnz	r3, 800cafc <_raise_r+0x32>
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 f831 	bl	800cb50 <_getpid_r>
 800caee:	4622      	mov	r2, r4
 800caf0:	4601      	mov	r1, r0
 800caf2:	4628      	mov	r0, r5
 800caf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf8:	f000 b818 	b.w	800cb2c <_kill_r>
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d00a      	beq.n	800cb16 <_raise_r+0x4c>
 800cb00:	1c59      	adds	r1, r3, #1
 800cb02:	d103      	bne.n	800cb0c <_raise_r+0x42>
 800cb04:	2316      	movs	r3, #22
 800cb06:	6003      	str	r3, [r0, #0]
 800cb08:	2001      	movs	r0, #1
 800cb0a:	e7e7      	b.n	800cadc <_raise_r+0x12>
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb14:	4798      	blx	r3
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7e0      	b.n	800cadc <_raise_r+0x12>
	...

0800cb1c <raise>:
 800cb1c:	4b02      	ldr	r3, [pc, #8]	@ (800cb28 <raise+0xc>)
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7ff bfd2 	b.w	800caca <_raise_r>
 800cb26:	bf00      	nop
 800cb28:	20000600 	.word	0x20000600

0800cb2c <_kill_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	2300      	movs	r3, #0
 800cb30:	4d06      	ldr	r5, [pc, #24]	@ (800cb4c <_kill_r+0x20>)
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f7f4 fba0 	bl	800127e <_kill>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	d102      	bne.n	800cb48 <_kill_r+0x1c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	b103      	cbz	r3, 800cb48 <_kill_r+0x1c>
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000aa0 	.word	0x20000aa0

0800cb50 <_getpid_r>:
 800cb50:	f7f4 bb8d 	b.w	800126e <_getpid>

0800cb54 <_init>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr

0800cb60 <_fini>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr
