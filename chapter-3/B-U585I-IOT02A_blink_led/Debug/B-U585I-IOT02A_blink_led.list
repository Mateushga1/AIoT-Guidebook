
B-U585I-IOT02A_blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009598  08009598  0000a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080096a4  080096a4  0000a6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  080096a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000904  2000000c  080096b1  0000b00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000910  080096b1  0000b910  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f602  00000000  00000000  0000b03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ac2  00000000  00000000  0002a641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001930  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000139a  00000000  00000000  0002fa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038b01  00000000  00000000  00030dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022e56  00000000  00000000  000698d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d92c  00000000  00000000  0008c729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ea055  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c98  00000000  00000000  001ea098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001f0d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08009580 	.word	0x08009580

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08009580 	.word	0x08009580

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800059e:	4909      	ldr	r1, [pc, #36]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	46020c00 	.word	0x46020c00

080005c8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d0:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005d6:	4909      	ldr	r1, [pc, #36]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <LL_APB1_GRP2_EnableClock+0x34>)
 80005e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ec:	68fb      	ldr	r3, [r7, #12]
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	46020c00 	.word	0x46020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f001 fb54 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f82a 	bl	8000660 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800060c:	f000 f885 	bl	800071a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 fbd8 	bl	8000dc4 <MX_GPIO_Init>
  MX_ADF1_Init();
 8000614:	f000 f890 	bl	8000738 <MX_ADF1_Init>
  MX_I2C1_Init();
 8000618:	f000 f8dc 	bl	80007d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800061c:	f000 f91a 	bl	8000854 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000620:	f000 f958 	bl	80008d4 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 8000624:	f000 f96a 	bl	80008fc <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000628:	f000 f9e2 	bl	80009f0 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 800062c:	f000 fa5c 	bl	8000ae8 <MX_SPI2_Init>
  MX_UART4_Init();
 8000630:	f000 fac8 	bl	8000bc4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fb12 	bl	8000c5c <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8000638:	f000 fb5c 	bl	8000cf4 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063c:	f000 fb90 	bl	8000d60 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <main+0x5c>)
 8000644:	f001 fff2 	bl	800262c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064c:	f001 fbf6 	bl	8001e3c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	4802      	ldr	r0, [pc, #8]	@ (800065c <main+0x5c>)
 8000654:	f001 ffea 	bl	800262c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000658:	bf00      	nop
 800065a:	e7f1      	b.n	8000640 <main+0x40>
 800065c:	42021c00 	.word	0x42021c00

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09e      	sub	sp, #120	@ 0x78
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2260      	movs	r2, #96	@ 0x60
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f008 ff59 	bl	8009526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000684:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000688:	f003 fba8 	bl	8003ddc <HAL_PWREx_ControlVoltageScaling>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000692:	f000 fcf9 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000696:	2322      	movs	r3, #34	@ 0x22
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ba:	230a      	movs	r3, #10
 80006bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006ca:	230c      	movs	r3, #12
 80006cc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fc7c 	bl	8003fd4 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006e2:	f000 fcd1 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	231f      	movs	r3, #31
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fb42 	bl	8004d8c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800070e:	f000 fcbb 	bl	8001088 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3778      	adds	r7, #120	@ 0x78
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800071e:	f003 fc49 	bl	8003fb4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000722:	2002      	movs	r0, #2
 8000724:	f003 fbe6 	bl	8003ef4 <HAL_PWREx_ConfigSupply>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800072e:	f000 fcab 	bl	8001088 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_ADF1_Init+0x90>)
 800073e:	4a23      	ldr	r2, [pc, #140]	@ (80007cc <MX_ADF1_Init+0x94>)
 8000740:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <MX_ADF1_Init+0x90>)
 8000744:	2201      	movs	r2, #1
 8000746:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ADF1_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_ADF1_Init+0x90>)
 8000750:	2201      	movs	r2, #1
 8000752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_ADF1_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_ADF1_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_ADF1_Init+0x90>)
 8000764:	2204      	movs	r2, #4
 8000766:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_ADF1_Init+0x90>)
 800076a:	2201      	movs	r2, #1
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800076e:	4816      	ldr	r0, [pc, #88]	@ (80007c8 <MX_ADF1_Init+0x90>)
 8000770:	f002 f8d8 	bl	8002924 <HAL_MDF_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 fc85 	bl	8001088 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_ADF1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_ADF1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_ADF1_Init+0x98>)
 800078c:	2240      	movs	r2, #64	@ 0x40
 800078e:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_ADF1_Init+0x98>)
 8000792:	2202      	movs	r2, #2
 8000794:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_ADF1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_ADF1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_ADF1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_ADF1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_ADF1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <MX_ADF1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <MX_ADF1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000028 	.word	0x20000028
 80007cc:	46024080 	.word	0x46024080
 80007d0:	2000006c 	.word	0x2000006c

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <MX_I2C1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000850 <MX_I2C1_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000810:	f001 ff26 	bl	8002660 <HAL_I2C_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081a:	f000 fc35 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000822:	f001 ffb8 	bl	8002796 <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 fc2c 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_I2C1_Init+0x74>)
 8000834:	f001 fffa 	bl	800282c <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 fc23 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000e8 	.word	0x200000e8
 800084c:	40005400 	.word	0x40005400
 8000850:	30909dec 	.word	0x30909dec

08000854 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <MX_I2C2_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <MX_I2C2_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000890:	f001 fee6 	bl	8002660 <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 fbf5 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008a2:	f001 ff78 	bl	8002796 <HAL_I2CEx_ConfigAnalogFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 fbec 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008b4:	f001 ffba 	bl	800282c <HAL_I2CEx_ConfigDigitalFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fbe3 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000013c 	.word	0x2000013c
 80008cc:	40005800 	.word	0x40005800
 80008d0:	30909dec 	.word	0x30909dec

080008d4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fff3 	bl	80028c4 <HAL_ICACHE_ConfigAssociativityMode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80008e4:	f000 fbd0 	bl	8001088 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008e8:	f002 f80c 	bl	8002904 <HAL_ICACHE_Enable>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80008f2:	f000 fbc9 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800091c:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800091e:	4a32      	ldr	r2, [pc, #200]	@ (80009e8 <MX_OCTOSPI1_Init+0xec>)
 8000920:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000922:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000928:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 800092e:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000930:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000934:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8000936:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000938:	2217      	movs	r2, #23
 800093a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800093c:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800093e:	2201      	movs	r2, #1
 8000940:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000942:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800094e:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000956:	2202      	movs	r2, #2
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800095a:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000960:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800096a:	220a      	movs	r2, #10
 800096c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 100;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 800097c:	2264      	movs	r2, #100	@ 0x64
 800097e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000980:	4818      	ldr	r0, [pc, #96]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 8000982:	f002 f97b 	bl	8002c7c <HAL_OSPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 800098c:	f000 fb7c 	bl	8001088 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800099c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80009a0:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_OCTOSPI1_Init+0xf0>)
 80009a4:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 80009b2:	f002 faa3 	bl	8002efc <HAL_OSPIM_Config>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 80009bc:	f000 fb64 	bl	8001088 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_OCTOSPI1_Init+0xe8>)
 80009ce:	f003 f881 	bl	8003ad4 <HAL_OSPI_DLYB_SetConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 80009d8:	f000 fb56 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000190 	.word	0x20000190
 80009e8:	420d1400 	.word	0x420d1400
 80009ec:	01000001 	.word	0x01000001

080009f0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000a10:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a12:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <MX_OCTOSPI2_Init+0xec>)
 8000a14:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a28:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a2c:	221a      	movs	r2, #26
 8000a2e:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000a30:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000a48:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000a74:	4818      	ldr	r0, [pc, #96]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000a76:	f002 f901 	bl	8002c7c <HAL_OSPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000a80:	f000 fb02 	bl	8001088 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_OCTOSPI2_Init+0xf0>)
 8000a92:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_OCTOSPI2_Init+0xf4>)
 8000a96:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000aa4:	f002 fa2a 	bl	8002efc <HAL_OSPIM_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000aae:	f000 faeb 	bl	8001088 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_OCTOSPI2_Init+0xe8>)
 8000ac0:	f003 f808 	bl	8003ad4 <HAL_OSPI_DLYB_SetConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000aca:	f000 fadd 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001ec 	.word	0x200001ec
 8000adc:	420d2400 	.word	0x420d2400
 8000ae0:	00010002 	.word	0x00010002
 8000ae4:	01000002 	.word	0x01000002

08000ae8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000af8:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000afa:	4a31      	ldr	r2, [pc, #196]	@ (8000bc0 <MX_SPI2_Init+0xd8>)
 8000afc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000afe:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b0e:	2203      	movs	r2, #3
 8000b10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b18:	4b28      	ldr	r3, [pc, #160]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b26:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b32:	4b22      	ldr	r3, [pc, #136]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b38:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000b84:	f007 f9b2 	bl	8007eec <HAL_SPI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000b8e:	f000 fa7b 	bl	8001088 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b9a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_SPI2_Init+0xd4>)
 8000ba6:	f007 fad2 	bl	800814e <HAL_SPIEx_SetConfigAutonomousMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000bb0:	f000 fa6a 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000248 	.word	0x20000248
 8000bc0:	40003800 	.word	0x40003800

08000bc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	@ (8000c58 <MX_UART4_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bce:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c0c:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000c0e:	f007 fadf 	bl	80081d0 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 fa36 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000c20:	f007 ff20 	bl	8008a64 <HAL_UARTEx_SetTxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c2a:	f000 fa2d 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000c32:	f007 ff55 	bl	8008ae0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c3c:	f000 fa24 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <MX_UART4_Init+0x90>)
 8000c42:	f007 fed6 	bl	80089f2 <HAL_UARTEx_DisableFifoMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 fa1c 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200002d8 	.word	0x200002d8
 8000c58:	40004c00 	.word	0x40004c00

08000c5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c60:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c62:	4a23      	ldr	r2, [pc, #140]	@ (8000cf0 <MX_USART1_UART_Init+0x94>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca4:	4811      	ldr	r0, [pc, #68]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000ca6:	f007 fa93 	bl	80081d0 <HAL_UART_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f000 f9ea 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	480d      	ldr	r0, [pc, #52]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000cb8:	f007 fed4 	bl	8008a64 <HAL_UARTEx_SetTxFifoThreshold>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cc2:	f000 f9e1 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4808      	ldr	r0, [pc, #32]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000cca:	f007 ff09 	bl	8008ae0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd4:	f000 f9d8 	bl	8001088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <MX_USART1_UART_Init+0x90>)
 8000cda:	f007 fe8a 	bl	80089f2 <HAL_UARTEx_DisableFifoMode>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 f9d0 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000036c 	.word	0x2000036c
 8000cf0:	40013800 	.word	0x40013800

08000cf4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000d0a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000d0e:	f7ff fc5b 	bl	80005c8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fc3c 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff fc39 	bl	8000590 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <MX_UCPD1_Init+0x64>)
 8000d32:	f008 f8cb 	bl	8008ecc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_UCPD1_Init+0x68>)
 8000d4a:	f008 f8bf 	bl	8008ecc <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	42020000 	.word	0x42020000
 8000d5c:	42020400 	.word	0x42020400

08000d60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d66:	4a16      	ldr	r2, [pc, #88]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d6c:	2206      	movs	r2, #6
 8000d6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000da8:	f002 fedc 	bl	8003b64 <HAL_PCD_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000db2:	f000 f969 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000400 	.word	0x20000400
 8000dc0:	42040000 	.word	0x42040000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dda:	4ba3      	ldr	r3, [pc, #652]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de0:	4aa1      	ldr	r2, [pc, #644]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dea:	4b9f      	ldr	r3, [pc, #636]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df4:	623b      	str	r3, [r7, #32]
 8000df6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df8:	4b9b      	ldr	r3, [pc, #620]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dfe:	4a9a      	ldr	r2, [pc, #616]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e08:	4b97      	ldr	r3, [pc, #604]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b94      	ldr	r3, [pc, #592]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e1c:	4a92      	ldr	r2, [pc, #584]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e26:	4b90      	ldr	r3, [pc, #576]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e34:	4b8c      	ldr	r3, [pc, #560]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e3a:	4a8b      	ldr	r2, [pc, #556]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e44:	4b88      	ldr	r3, [pc, #544]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	4b85      	ldr	r3, [pc, #532]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e58:	4a83      	ldr	r2, [pc, #524]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e62:	4b81      	ldr	r3, [pc, #516]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b7d      	ldr	r3, [pc, #500]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e76:	4a7c      	ldr	r2, [pc, #496]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e80:	4b79      	ldr	r3, [pc, #484]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	4b76      	ldr	r3, [pc, #472]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e94:	4a74      	ldr	r2, [pc, #464]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e9e:	4b72      	ldr	r3, [pc, #456]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eac:	4b6e      	ldr	r3, [pc, #440]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb2:	4a6d      	ldr	r2, [pc, #436]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	4b67      	ldr	r3, [pc, #412]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed0:	4a65      	ldr	r2, [pc, #404]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eda:	4b63      	ldr	r3, [pc, #396]	@ (8001068 <MX_GPIO_Init+0x2a4>)
 8000edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2120      	movs	r1, #32
 8000eec:	485f      	ldr	r0, [pc, #380]	@ (800106c <MX_GPIO_Init+0x2a8>)
 8000eee:	f001 fb85 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	21c2      	movs	r1, #194	@ 0xc2
 8000ef6:	485e      	ldr	r0, [pc, #376]	@ (8001070 <MX_GPIO_Init+0x2ac>)
 8000ef8:	f001 fb80 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2140      	movs	r1, #64	@ 0x40
 8000f00:	485c      	ldr	r0, [pc, #368]	@ (8001074 <MX_GPIO_Init+0x2b0>)
 8000f02:	f001 fb7b 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8000f0c:	485a      	ldr	r0, [pc, #360]	@ (8001078 <MX_GPIO_Init+0x2b4>)
 8000f0e:	f001 fb75 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8000f12:	f248 0324 	movw	r3, #32804	@ 0x8024
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4853      	ldr	r0, [pc, #332]	@ (8001074 <MX_GPIO_Init+0x2b0>)
 8000f28:	f001 f990 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	484c      	ldr	r0, [pc, #304]	@ (8001070 <MX_GPIO_Init+0x2ac>)
 8000f40:	f001 f984 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8000f44:	2320      	movs	r3, #32
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4844      	ldr	r0, [pc, #272]	@ (800106c <MX_GPIO_Init+0x2a8>)
 8000f5c:	f001 f976 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4841      	ldr	r0, [pc, #260]	@ (800107c <MX_GPIO_Init+0x2b8>)
 8000f76:	f001 f969 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8000f7a:	23c2      	movs	r3, #194	@ 0xc2
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4837      	ldr	r0, [pc, #220]	@ (8001070 <MX_GPIO_Init+0x2ac>)
 8000f92:	f001 f95b 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8000f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4831      	ldr	r0, [pc, #196]	@ (8001078 <MX_GPIO_Init+0x2b4>)
 8000fb4:	f001 f94a 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8000fb8:	2340      	movs	r3, #64	@ 0x40
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4829      	ldr	r0, [pc, #164]	@ (8001074 <MX_GPIO_Init+0x2b0>)
 8000fd0:	f001 f93c 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8000fd4:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4825      	ldr	r0, [pc, #148]	@ (8001080 <MX_GPIO_Init+0x2bc>)
 8000fea:	f001 f92f 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8000fee:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4820      	ldr	r0, [pc, #128]	@ (8001084 <MX_GPIO_Init+0x2c0>)
 8001004:	f001 f922 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001008:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	4816      	ldr	r0, [pc, #88]	@ (8001078 <MX_GPIO_Init+0x2b4>)
 800101e:	f001 f915 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001022:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	480f      	ldr	r0, [pc, #60]	@ (8001078 <MX_GPIO_Init+0x2b4>)
 800103c:	f001 f906 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001040:	2302      	movs	r3, #2
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001050:	2306      	movs	r3, #6
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_GPIO_Init+0x2a8>)
 800105c:	f001 f8f6 	bl	800224c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001060:	bf00      	nop
 8001062:	3738      	adds	r7, #56	@ 0x38
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	46020c00 	.word	0x46020c00
 800106c:	42020400 	.word	0x42020400
 8001070:	42021c00 	.word	0x42021c00
 8001074:	42021800 	.word	0x42021800
 8001078:	42021400 	.word	0x42021400
 800107c:	42020800 	.word	0x42020800
 8001080:	42020c00 	.word	0x42020c00
 8001084:	42021000 	.word	0x42021000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_MspInit+0x30>)
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x30>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x30>)
 80010ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	46020c00 	.word	0x46020c00

080010c8 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0bc      	sub	sp, #240	@ 0xf0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	22c8      	movs	r2, #200	@ 0xc8
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f008 fa1c 	bl	8009526 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <HAL_MDF_MspInit+0xc8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d146      	bne.n	8001186 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 80010f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fa0c 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 800111a:	f7ff ffb5 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <HAL_MDF_MspInit+0xcc>)
 8001120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <HAL_MDF_MspInit+0xcc>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800112a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_MDF_MspInit+0xcc>)
 8001130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_MDF_MspInit+0xcc>)
 800113e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <HAL_MDF_MspInit+0xcc>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_MDF_MspInit+0xcc>)
 800114e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 800115a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001174:	2303      	movs	r3, #3
 8001176:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <HAL_MDF_MspInit+0xd0>)
 8001182:	f001 f863 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	37f0      	adds	r7, #240	@ 0xf0
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	46024080 	.word	0x46024080
 8001194:	46020c00 	.word	0x46020c00
 8001198:	42021000 	.word	0x42021000

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0be      	sub	sp, #248	@ 0xf8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	22c8      	movs	r2, #200	@ 0xc8
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f008 f9b2 	bl	8009526 <memset>
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a4d      	ldr	r2, [pc, #308]	@ (80012fc <HAL_I2C_MspInit+0x160>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d147      	bne.n	800125c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011cc:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 f9a2 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011ee:	f7ff ff4b 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b43      	ldr	r3, [pc, #268]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 80011f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f8:	4a41      	ldr	r2, [pc, #260]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001202:	4b3f      	ldr	r3, [pc, #252]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 8001204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001210:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001214:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001234:	4619      	mov	r1, r3
 8001236:	4833      	ldr	r0, [pc, #204]	@ (8001304 <HAL_I2C_MspInit+0x168>)
 8001238:	f001 f808 	bl	800224c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 800123e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001242:	4a2f      	ldr	r2, [pc, #188]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 8001244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001248:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800124c:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 800124e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800125a:	e04a      	b.n	80012f2 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a29      	ldr	r2, [pc, #164]	@ (8001308 <HAL_I2C_MspInit+0x16c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d145      	bne.n	80012f2 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001266:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f004 f955 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001288:	f7ff fefe 	bl	8001088 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 800128e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001292:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001298:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012aa:	2330      	movs	r3, #48	@ 0x30
 80012ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012c2:	2304      	movs	r3, #4
 80012c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012cc:	4619      	mov	r1, r3
 80012ce:	480f      	ldr	r0, [pc, #60]	@ (800130c <HAL_I2C_MspInit+0x170>)
 80012d0:	f000 ffbc 	bl	800224c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 80012d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012da:	4a09      	ldr	r2, [pc, #36]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_I2C_MspInit+0x164>)
 80012e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	bf00      	nop
 80012f4:	37f8      	adds	r7, #248	@ 0xf8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	46020c00 	.word	0x46020c00
 8001304:	42020400 	.word	0x42020400
 8001308:	40005800 	.word	0x40005800
 800130c:	42021c00 	.word	0x42021c00

08001310 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0c8      	sub	sp, #288	@ 0x120
 8001314:	af00      	add	r7, sp, #0
 8001316:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800131a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800131e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001334:	22c8      	movs	r2, #200	@ 0xc8
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f008 f8f4 	bl	8009526 <memset>
  if(hospi->Instance==OCTOSPI1)
 800133e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001342:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4aa6      	ldr	r2, [pc, #664]	@ (80015e4 <HAL_OSPI_MspInit+0x2d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f040 815d 	bne.w	800160c <HAL_OSPI_MspInit+0x2fc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001352:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001368:	4618      	mov	r0, r3
 800136a:	f004 f8df 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8001374:	f7ff fe88 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8001378:	4b9b      	ldr	r3, [pc, #620]	@ (80015e8 <HAL_OSPI_MspInit+0x2d8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a9a      	ldr	r2, [pc, #616]	@ (80015e8 <HAL_OSPI_MspInit+0x2d8>)
 8001380:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001382:	4b99      	ldr	r3, [pc, #612]	@ (80015e8 <HAL_OSPI_MspInit+0x2d8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10e      	bne.n	80013a8 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800138a:	4b98      	ldr	r3, [pc, #608]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800138c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001390:	4a96      	ldr	r2, [pc, #600]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001396:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800139a:	4b94      	ldr	r3, [pc, #592]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800139c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80013a8:	4b90      	ldr	r3, [pc, #576]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ae:	4a8f      	ldr	r2, [pc, #572]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013b8:	4b8c      	ldr	r3, [pc, #560]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013c6:	4b89      	ldr	r3, [pc, #548]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013cc:	4a87      	ldr	r2, [pc, #540]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d6:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80013e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e4:	4b81      	ldr	r3, [pc, #516]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ea:	4a80      	ldr	r2, [pc, #512]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013ec:	f043 0310 	orr.w	r3, r3, #16
 80013f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f4:	4b7d      	ldr	r3, [pc, #500]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 80013f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	4b7a      	ldr	r3, [pc, #488]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001408:	4a78      	ldr	r2, [pc, #480]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001412:	4b76      	ldr	r3, [pc, #472]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001420:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001426:	4a71      	ldr	r2, [pc, #452]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001430:	4b6e      	ldr	r3, [pc, #440]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	4b6b      	ldr	r3, [pc, #428]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001444:	4a69      	ldr	r2, [pc, #420]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800144e:	4b67      	ldr	r3, [pc, #412]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145c:	4b63      	ldr	r3, [pc, #396]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800145e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001462:	4a62      	ldr	r2, [pc, #392]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800146c:	4b5f      	ldr	r3, [pc, #380]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800146e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001472:	f003 0204 	and.w	r2, r3, #4
 8001476:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800147a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001484:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001488:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b58      	ldr	r3, [pc, #352]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800148c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001490:	4a56      	ldr	r2, [pc, #344]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800149a:	4b54      	ldr	r3, [pc, #336]	@ (80015ec <HAL_OSPI_MspInit+0x2dc>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a0:	f003 0202 	and.w	r2, r3, #2
 80014a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80014b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014b6:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80014da:	4619      	mov	r1, r3
 80014dc:	4844      	ldr	r0, [pc, #272]	@ (80015f0 <HAL_OSPI_MspInit+0x2e0>)
 80014de:	f000 feb5 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80014e2:	2308      	movs	r3, #8
 80014e4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8001500:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001504:	4619      	mov	r1, r3
 8001506:	483b      	ldr	r0, [pc, #236]	@ (80015f4 <HAL_OSPI_MspInit+0x2e4>)
 8001508:	f000 fea0 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001524:	230a      	movs	r3, #10
 8001526:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 800152a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800152e:	4619      	mov	r1, r3
 8001530:	4831      	ldr	r0, [pc, #196]	@ (80015f8 <HAL_OSPI_MspInit+0x2e8>)
 8001532:	f000 fe8b 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8001536:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800153a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001550:	230a      	movs	r3, #10
 8001552:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001556:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800155a:	4619      	mov	r1, r3
 800155c:	4827      	ldr	r0, [pc, #156]	@ (80015fc <HAL_OSPI_MspInit+0x2ec>)
 800155e:	f000 fe75 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8001562:	2304      	movs	r3, #4
 8001564:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800157a:	2303      	movs	r3, #3
 800157c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8001580:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001584:	4619      	mov	r1, r3
 8001586:	481e      	ldr	r0, [pc, #120]	@ (8001600 <HAL_OSPI_MspInit+0x2f0>)
 8001588:	f000 fe60 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800158c:	2308      	movs	r3, #8
 800158e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015a4:	230a      	movs	r3, #10
 80015a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015ae:	4619      	mov	r1, r3
 80015b0:	4814      	ldr	r0, [pc, #80]	@ (8001604 <HAL_OSPI_MspInit+0x2f4>)
 80015b2:	f000 fe4b 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80015b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015d0:	230a      	movs	r3, #10
 80015d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80015da:	4619      	mov	r1, r3
 80015dc:	480a      	ldr	r0, [pc, #40]	@ (8001608 <HAL_OSPI_MspInit+0x2f8>)
 80015de:	f000 fe35 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80015e2:	e0ed      	b.n	80017c0 <HAL_OSPI_MspInit+0x4b0>
 80015e4:	420d1400 	.word	0x420d1400
 80015e8:	200008e4 	.word	0x200008e4
 80015ec:	46020c00 	.word	0x46020c00
 80015f0:	42022000 	.word	0x42022000
 80015f4:	42021000 	.word	0x42021000
 80015f8:	42020c00 	.word	0x42020c00
 80015fc:	42021400 	.word	0x42021400
 8001600:	42021c00 	.word	0x42021c00
 8001604:	42020800 	.word	0x42020800
 8001608:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 800160c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001610:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a6c      	ldr	r2, [pc, #432]	@ (80017cc <HAL_OSPI_MspInit+0x4bc>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80d0 	bne.w	80017c0 <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001620:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001632:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001636:	4618      	mov	r0, r3
 8001638:	f003 ff78 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 8001642:	f7ff fd21 	bl	8001088 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8001646:	4b62      	ldr	r3, [pc, #392]	@ (80017d0 <HAL_OSPI_MspInit+0x4c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a60      	ldr	r2, [pc, #384]	@ (80017d0 <HAL_OSPI_MspInit+0x4c0>)
 800164e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001650:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_OSPI_MspInit+0x4c0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d116      	bne.n	8001686 <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8001658:	4b5e      	ldr	r3, [pc, #376]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165e:	4a5d      	ldr	r2, [pc, #372]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 8001660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001664:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001668:	4b5a      	ldr	r3, [pc, #360]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 800166a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800166e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001672:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001684:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001686:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168c:	4a51      	ldr	r2, [pc, #324]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001696:	4b4f      	ldr	r3, [pc, #316]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80016a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016b2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016b4:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 80016b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ba:	4a46      	ldr	r2, [pc, #280]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c4:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 80016c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ca:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80016ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016e0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 80016e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e8:	4a3a      	ldr	r2, [pc, #232]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 80016ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016f2:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 80016f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f8:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80016fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001700:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800170a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800170e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 8001712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001716:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <HAL_OSPI_MspInit+0x4c4>)
 8001722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001726:	f003 0220 	and.w	r2, r3, #32
 800172a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800172e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001738:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800173c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 800173e:	2320      	movs	r3, #32
 8001740:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001756:	2305      	movs	r3, #5
 8001758:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 800175c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001760:	4619      	mov	r1, r3
 8001762:	481d      	ldr	r0, [pc, #116]	@ (80017d8 <HAL_OSPI_MspInit+0x4c8>)
 8001764:	f000 fd72 	bl	800224c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8001768:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800176c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001782:	2305      	movs	r3, #5
 8001784:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001788:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800178c:	4619      	mov	r1, r3
 800178e:	4813      	ldr	r0, [pc, #76]	@ (80017dc <HAL_OSPI_MspInit+0x4cc>)
 8001790:	f000 fd5c 	bl	800224c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8001794:	f241 031f 	movw	r3, #4127	@ 0x101f
 8001798:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80017ae:	2305      	movs	r3, #5
 80017b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <HAL_OSPI_MspInit+0x4d0>)
 80017bc:	f000 fd46 	bl	800224c <HAL_GPIO_Init>
}
 80017c0:	bf00      	nop
 80017c2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	420d2400 	.word	0x420d2400
 80017d0:	200008e4 	.word	0x200008e4
 80017d4:	46020c00 	.word	0x46020c00
 80017d8:	42022000 	.word	0x42022000
 80017dc:	42021c00 	.word	0x42021c00
 80017e0:	42021400 	.word	0x42021400

080017e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0be      	sub	sp, #248	@ 0xf8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	22c8      	movs	r2, #200	@ 0xc8
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f007 fe8e 	bl	8009526 <memset>
  if(hspi->Instance==SPI2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a39      	ldr	r2, [pc, #228]	@ (80018f4 <HAL_SPI_MspInit+0x110>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d16b      	bne.n	80018ec <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001814:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001820:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fe7d 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001838:	f7ff fc26 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183c:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 800183e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001842:	4a2d      	ldr	r2, [pc, #180]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001848:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 800184e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 800185c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001860:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 800186c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 800187a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_SPI_MspInit+0x114>)
 800188a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8001896:	231a      	movs	r3, #26
 8001898:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ae:	2305      	movs	r3, #5
 80018b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4810      	ldr	r0, [pc, #64]	@ (80018fc <HAL_SPI_MspInit+0x118>)
 80018bc:	f000 fcc6 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018da:	2305      	movs	r3, #5
 80018dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <HAL_SPI_MspInit+0x11c>)
 80018e8:	f000 fcb0 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	37f8      	adds	r7, #248	@ 0xf8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40003800 	.word	0x40003800
 80018f8:	46020c00 	.word	0x46020c00
 80018fc:	42020c00 	.word	0x42020c00
 8001900:	42020400 	.word	0x42020400

08001904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0be      	sub	sp, #248	@ 0xf8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	22c8      	movs	r2, #200	@ 0xc8
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f007 fdfe 	bl	8009526 <memset>
  if(huart->Instance==UART4)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a4c      	ldr	r2, [pc, #304]	@ (8001a60 <HAL_UART_MspInit+0x15c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d146      	bne.n	80019c2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001934:	f04f 0208 	mov.w	r2, #8
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fdef 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001954:	f7ff fb98 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001958:	4b42      	ldr	r3, [pc, #264]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 800195a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800195e:	4a41      	ldr	r2, [pc, #260]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001960:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001964:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001968:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 800196a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800196e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800197c:	4a39      	ldr	r2, [pc, #228]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001986:	4b37      	ldr	r3, [pc, #220]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001994:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001998:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019ae:	2308      	movs	r3, #8
 80019b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019b8:	4619      	mov	r1, r3
 80019ba:	482b      	ldr	r0, [pc, #172]	@ (8001a68 <HAL_UART_MspInit+0x164>)
 80019bc:	f000 fc46 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019c0:	e04a      	b.n	8001a58 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a29      	ldr	r2, [pc, #164]	@ (8001a6c <HAL_UART_MspInit+0x168>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d145      	bne.n	8001a58 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019cc:	f04f 0201 	mov.w	r2, #1
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019d8:	2300      	movs	r3, #0
 80019da:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fda3 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80019ec:	f7ff fb4c 	bl	8001088 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 80019f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a14:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_UART_MspInit+0x160>)
 8001a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001a2c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a46:	2307      	movs	r3, #7
 8001a48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <HAL_UART_MspInit+0x16c>)
 8001a54:	f000 fbfa 	bl	800224c <HAL_GPIO_Init>
}
 8001a58:	bf00      	nop
 8001a5a:	37f8      	adds	r7, #248	@ 0xf8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40004c00 	.word	0x40004c00
 8001a64:	46020c00 	.word	0x46020c00
 8001a68:	42020800 	.word	0x42020800
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	42020000 	.word	0x42020000

08001a74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0be      	sub	sp, #248	@ 0xf8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	22c8      	movs	r2, #200	@ 0xc8
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f007 fd46 	bl	8009526 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a38      	ldr	r2, [pc, #224]	@ (8001b80 <HAL_PCD_MspInit+0x10c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d169      	bne.n	8001b78 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001aa4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fd36 	bl	800552c <HAL_RCCEx_PeriphCLKConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001ac6:	f7ff fadf 	bl	8001088 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ada:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001ae8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001aec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b02:	230a      	movs	r3, #10
 8001b04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481e      	ldr	r0, [pc, #120]	@ (8001b88 <HAL_PCD_MspInit+0x114>)
 8001b10:	f000 fb9c 	bl	800224c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d119      	bne.n	8001b74 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b46:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001b5e:	f002 fa19 	bl	8003f94 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <HAL_PCD_MspInit+0x110>)
 8001b6a:	f023 0304 	bic.w	r3, r3, #4
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b72:	e001      	b.n	8001b78 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001b74:	f002 fa0e 	bl	8003f94 <HAL_PWREx_EnableVddUSB>
}
 8001b78:	bf00      	nop
 8001b7a:	37f8      	adds	r7, #248	@ 0xf8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	42040000 	.word	0x42040000
 8001b84:	46020c00 	.word	0x46020c00
 8001b88:	42020000 	.word	0x42020000

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f000 f90b 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <SystemInit+0x68>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf6:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <SystemInit+0x68>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c00:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <SystemInit+0x6c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <SystemInit+0x6c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <SystemInit+0x6c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <SystemInit+0x6c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <SystemInit+0x6c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <SystemInit+0x6c>)
 8001c1e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001c22:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001c26:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <SystemInit+0x6c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <SystemInit+0x6c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <SystemInit+0x6c>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <SystemInit+0x6c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <SystemInit+0x68>)
 8001c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c46:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	46020c00 	.word	0x46020c00

08001c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c94 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c60:	f7ff ffc4 	bl	8001bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c66:	e003      	b.n	8001c70 <LoopCopyDataInit>

08001c68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c6e:	3104      	adds	r1, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c70:	480a      	ldr	r0, [pc, #40]	@ (8001c9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c78:	d3f6      	bcc.n	8001c68 <CopyDataInit>
	ldr	r2, =_sbss
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c7c:	e002      	b.n	8001c84 <LoopFillZerobss>

08001c7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c80:	f842 3b04 	str.w	r3, [r2], #4

08001c84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <LoopForever+0x16>)
	cmp	r2, r3
 8001c86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c88:	d3f9      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f007 fc55 	bl	8009538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8e:	f7fe fcb7 	bl	8000600 <main>

08001c92 <LoopForever>:

LoopForever:
    b LoopForever
 8001c92:	e7fe      	b.n	8001c92 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001c94:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001c98:	080096a8 	.word	0x080096a8
	ldr	r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ca0:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001ca4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ca8:	20000910 	.word	0x20000910

08001cac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC1_IRQHandler>
	...

08001cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_Init+0x50>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a11      	ldr	r2, [pc, #68]	@ (8001d00 <HAL_Init+0x50>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f96e 	bl	8001fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cc6:	f003 fa53 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_Init+0x54>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <HAL_Init+0x58>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <HAL_Init+0x5c>)
 8001cde:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ce0:	2004      	movs	r0, #4
 8001ce2:	f000 f9a5 	bl	8002030 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f000 f812 	bl	8001d10 <HAL_InitTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e002      	b.n	8001cfc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf6:	f7ff f9cd 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40022000 	.word	0x40022000
 8001d04:	46020c00 	.word	0x46020c00
 8001d08:	08009598 	.word	0x08009598
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_InitTick+0xdc>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e05c      	b.n	8001de2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <HAL_InitTick+0xe0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d10c      	bne.n	8001d4e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001d34:	4b2f      	ldr	r3, [pc, #188]	@ (8001df4 <HAL_InitTick+0xe4>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <HAL_InitTick+0xdc>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e037      	b.n	8001dbe <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d4e:	f000 f9c7 	bl	80020e0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001d52:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d023      	beq.n	8001da2 <HAL_InitTick+0x92>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d82d      	bhi.n	8001dbc <HAL_InitTick+0xac>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_InitTick+0x5e>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d00d      	beq.n	8001d88 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001d6c:	e026      	b.n	8001dbc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d6e:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <HAL_InitTick+0xe4>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_InitTick+0xdc>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	60fb      	str	r3, [r7, #12]
        break;
 8001d86:	e01a      	b.n	8001dbe <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d88:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_InitTick+0xdc>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d96:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	60fb      	str	r3, [r7, #12]
        break;
 8001da0:	e00d      	b.n	8001dbe <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0xdc>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001db0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	60fb      	str	r3, [r7, #12]
        break;
 8001dba:	e000      	b.n	8001dbe <HAL_InitTick+0xae>
        break;
 8001dbc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f914 	bl	8001fec <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e009      	b.n	8001de2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd6:	f000 f8ef 	bl	8001fb8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_InitTick+0xe8>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	e000e010 	.word	0xe000e010
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	200008e8 	.word	0x200008e8

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200008e8 	.word	0x200008e8

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff6a 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc6:	f7ff ff81 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8001fca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f7ff ffb3 	bl	8001f3c <NVIC_EncodePriority>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff82 	bl	8001ee8 <__NVIC_SetPriority>
}
 8001fe4:	bf00      	nop
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00d      	b.n	800201e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <HAL_SYSTICK_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <HAL_SYSTICK_Config+0x40>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_SYSTICK_Config+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a05      	ldr	r2, [pc, #20]	@ (800202c <HAL_SYSTICK_Config+0x40>)
 8002016:	f043 0303 	orr.w	r3, r3, #3
 800201a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d844      	bhi.n	80020c8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800203e:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002067 	.word	0x08002067
 8002048:	08002085 	.word	0x08002085
 800204c:	080020a7 	.word	0x080020a7
 8002050:	080020c9 	.word	0x080020c9
 8002054:	08002059 	.word	0x08002059
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1e      	ldr	r2, [pc, #120]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6013      	str	r3, [r2, #0]
      break;
 8002064:	e031      	b.n	80020ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002072:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002078:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800207a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800207e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002082:	e022      	b.n	80020ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002096:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800209c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020a4:	e011      	b.n	80020ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020a6:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80020c6:	e000      	b.n	80020ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80020c8:	bf00      	nop
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010
 80020dc:	46020c00 	.word	0x46020c00

080020e0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80020e6:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80020f2:	2304      	movs	r3, #4
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	e021      	b.n	800213c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fe:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002102:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800210a:	d011      	beq.n	8002130 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002112:	d810      	bhi.n	8002136 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002120:	d003      	beq.n	800212a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002122:	e008      	b.n	8002136 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
        break;
 8002128:	e008      	b.n	800213c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800212a:	2301      	movs	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
        break;
 800212e:	e005      	b.n	800213c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002130:	2302      	movs	r3, #2
 8002132:	607b      	str	r3, [r7, #4]
        break;
 8002134:	e002      	b.n	800213c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
        break;
 800213a:	bf00      	nop
    }
  }
  return systick_source;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010
 8002150:	46020c00 	.word	0x46020c00

08002154 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800215c:	f7ff fe62 	bl	8001e24 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e06b      	b.n	8002244 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d008      	beq.n	800218a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e05c      	b.n	8002244 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0204 	orr.w	r2, r2, #4
 8002198:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2205      	movs	r2, #5
 800219e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021a2:	e020      	b.n	80021e6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021a4:	f7ff fe3e 	bl	8001e24 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d919      	bls.n	80021e6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d6:	2201      	movs	r2, #1
 80021d8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e02e      	b.n	8002244 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0d7      	beq.n	80021a4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0202 	orr.w	r2, r2, #2
 8002202:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2204      	movs	r2, #4
 8002208:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002214:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222e:	2201      	movs	r2, #1
 8002230:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800225e:	e1ba      	b.n	80025d6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 81aa 	beq.w	80025d0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a55      	ldr	r2, [pc, #340]	@ (80023d4 <HAL_GPIO_Init+0x188>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d15d      	bne.n	8002340 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	4013      	ands	r3, r2
 8002298:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0201 	and.w	r2, r3, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80022b4:	4a48      	ldr	r2, [pc, #288]	@ (80023d8 <HAL_GPIO_Init+0x18c>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022bc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80022be:	4a46      	ldr	r2, [pc, #280]	@ (80023d8 <HAL_GPIO_Init+0x18c>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3208      	adds	r2, #8
 80022d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220b      	movs	r2, #11
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3208      	adds	r2, #8
 800230a:	69f9      	ldr	r1, [r7, #28]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	4013      	ands	r3, r2
 8002326:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2202      	movs	r2, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4313      	orrs	r3, r2
 8002336:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e067      	b.n	8002410 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x104>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b12      	cmp	r3, #18
 800234e:	d145      	bne.n	80023dc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	4013      	ands	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 020f 	and.w	r2, r3, #15
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	4313      	orrs	r3, r2
 800238c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69f9      	ldr	r1, [r7, #28]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e01e      	b.n	8002410 <HAL_GPIO_Init+0x1c4>
 80023d2:	bf00      	nop
 80023d4:	46020000 	.word	0x46020000
 80023d8:	080095f0 	.word	0x080095f0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	4313      	orrs	r3, r2
 8002408:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d00b      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002424:	2b11      	cmp	r3, #17
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b12      	cmp	r3, #18
 800242e:	d130      	bne.n	8002492 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	4013      	ands	r3, r2
 8002446:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	4313      	orrs	r3, r2
 8002458:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002466:	2201      	movs	r2, #1
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	4013      	ands	r3, r2
 8002474:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0201 	and.w	r2, r3, #1
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	4313      	orrs	r3, r2
 800248a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d017      	beq.n	80024ca <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d07c      	beq.n	80025d0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80024d6:	4a47      	ldr	r2, [pc, #284]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3318      	adds	r3, #24
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0a9a      	lsrs	r2, r3, #10
 80024fe:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <HAL_GPIO_Init+0x3ac>)
 8002500:	4013      	ands	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	00d2      	lsls	r2, r2, #3
 800250a:	4093      	lsls	r3, r2
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	4313      	orrs	r3, r2
 8002510:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002512:	4938      	ldr	r1, [pc, #224]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3318      	adds	r3, #24
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002520:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	4013      	ands	r3, r2
 800252e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002544:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	4013      	ands	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800256e:	4a21      	ldr	r2, [pc, #132]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800257a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	4013      	ands	r3, r2
 8002584:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800259a:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 80025a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_GPIO_Init+0x3a8>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f ae3d 	bne.w	8002260 <HAL_GPIO_Init+0x14>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	3724      	adds	r7, #36	@ 0x24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	46022000 	.word	0x46022000
 80025f8:	002f7f7f 	.word	0x002f7f7f

080025fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
 8002608:	4613      	mov	r3, r2
 800260a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002618:	e002      	b.n	8002620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43d9      	mvns	r1, r3
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	400b      	ands	r3, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08d      	b.n	800278e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fd88 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	@ 0x24
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	e006      	b.n	80026e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d108      	bne.n	8002702 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	e007      	b.n	8002712 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d138      	bne.n	800281e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e032      	b.n	8002820 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2224      	movs	r2, #36	@ 0x24
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	d139      	bne.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800284c:	2302      	movs	r3, #2
 800284e:	e033      	b.n	80028b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	@ 0x24
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800287e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e007      	b.n	80028f2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80028e2:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0204 	bic.w	r2, r3, #4
 80028ea:	4905      	ldr	r1, [pc, #20]	@ (8002900 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40030400 	.word	0x40030400

08002904 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_ICACHE_Enable+0x1c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_ICACHE_Enable+0x1c>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40030400 	.word	0x40030400

08002924 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e141      	b.n	8002bc0 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f947 	bl	8002bd4 <MDF_GetHandleNumberFromInstance>
 8002946:	4603      	mov	r3, r0
 8002948:	4a86      	ldr	r2, [pc, #536]	@ (8002b64 <HAL_MDF_Init+0x240>)
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e133      	b.n	8002bc0 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe fbb5 	bl	80010c8 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800295e:	4b82      	ldr	r3, [pc, #520]	@ (8002b68 <HAL_MDF_Init+0x244>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d11d      	bne.n	80029a2 <HAL_MDF_Init+0x7e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a80      	ldr	r2, [pc, #512]	@ (8002b6c <HAL_MDF_Init+0x248>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d023      	beq.n	80029b8 <HAL_MDF_Init+0x94>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7e      	ldr	r2, [pc, #504]	@ (8002b70 <HAL_MDF_Init+0x24c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01e      	beq.n	80029b8 <HAL_MDF_Init+0x94>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7d      	ldr	r2, [pc, #500]	@ (8002b74 <HAL_MDF_Init+0x250>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d019      	beq.n	80029b8 <HAL_MDF_Init+0x94>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7b      	ldr	r2, [pc, #492]	@ (8002b78 <HAL_MDF_Init+0x254>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d014      	beq.n	80029b8 <HAL_MDF_Init+0x94>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7a      	ldr	r2, [pc, #488]	@ (8002b7c <HAL_MDF_Init+0x258>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00f      	beq.n	80029b8 <HAL_MDF_Init+0x94>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a78      	ldr	r2, [pc, #480]	@ (8002b80 <HAL_MDF_Init+0x25c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00a      	beq.n	80029b8 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 80029a2:	4b78      	ldr	r3, [pc, #480]	@ (8002b84 <HAL_MDF_Init+0x260>)
 80029a4:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8090 	bne.w	8002acc <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a75      	ldr	r2, [pc, #468]	@ (8002b88 <HAL_MDF_Init+0x264>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	f040 808a 	bne.w	8002acc <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a72      	ldr	r2, [pc, #456]	@ (8002b88 <HAL_MDF_Init+0x264>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_MDF_Init+0xa2>
 80029c2:	4b72      	ldr	r3, [pc, #456]	@ (8002b8c <HAL_MDF_Init+0x268>)
 80029c4:	e000      	b.n	80029c8 <HAL_MDF_Init+0xa4>
 80029c6:	4b72      	ldr	r3, [pc, #456]	@ (8002b90 <HAL_MDF_Init+0x26c>)
 80029c8:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da02      	bge.n	80029d8 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e079      	b.n	8002acc <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a63      	ldr	r2, [pc, #396]	@ (8002b6c <HAL_MDF_Init+0x248>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_MDF_Init+0xf0>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a62      	ldr	r2, [pc, #392]	@ (8002b70 <HAL_MDF_Init+0x24c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_MDF_Init+0xf0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a60      	ldr	r2, [pc, #384]	@ (8002b74 <HAL_MDF_Init+0x250>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_MDF_Init+0xf0>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b78 <HAL_MDF_Init+0x254>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_MDF_Init+0xf0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	@ (8002b7c <HAL_MDF_Init+0x258>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_MDF_Init+0xf0>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b80 <HAL_MDF_Init+0x25c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d10d      	bne.n	8002a30 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7b1b      	ldrb	r3, [r3, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d137      	bne.n	8002ac0 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002a60:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002a68:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7e1b      	ldrb	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d123      	bne.n	8002ac0 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b6c <HAL_MDF_Init+0x248>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d012      	beq.n	8002aa8 <HAL_MDF_Init+0x184>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3a      	ldr	r2, [pc, #232]	@ (8002b70 <HAL_MDF_Init+0x24c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_MDF_Init+0x184>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a38      	ldr	r2, [pc, #224]	@ (8002b74 <HAL_MDF_Init+0x250>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d008      	beq.n	8002aa8 <HAL_MDF_Init+0x184>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a37      	ldr	r2, [pc, #220]	@ (8002b78 <HAL_MDF_Init+0x254>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_MDF_Init+0x184>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <HAL_MDF_Init+0x258>)
 8002aa6:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d128      	bne.n	8002b24 <HAL_MDF_Init+0x200>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d123      	bne.n	8002b24 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da02      	bge.n	8002aec <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e01b      	b.n	8002b24 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002b04:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14a      	bne.n	8002bc0 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 021f 	bic.w	r2, r2, #31
 8002b38:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0d      	ldr	r2, [pc, #52]	@ (8002b88 <HAL_MDF_Init+0x264>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11e      	bne.n	8002b94 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_MDF_Init+0x260>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_MDF_Init+0x260>)
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e01d      	b.n	8002b9e <HAL_MDF_Init+0x27a>
 8002b62:	bf00      	nop
 8002b64:	200008f4 	.word	0x200008f4
 8002b68:	200008ec 	.word	0x200008ec
 8002b6c:	40025080 	.word	0x40025080
 8002b70:	40025100 	.word	0x40025100
 8002b74:	40025180 	.word	0x40025180
 8002b78:	40025200 	.word	0x40025200
 8002b7c:	40025280 	.word	0x40025280
 8002b80:	40025300 	.word	0x40025300
 8002b84:	200008f0 	.word	0x200008f0
 8002b88:	46024080 	.word	0x46024080
 8002b8c:	46024000 	.word	0x46024000
 8002b90:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8002b94:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <HAL_MDF_Init+0x2a8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bcc <HAL_MDF_Init+0x2a8>)
 8002b9c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f816 	bl	8002bd4 <MDF_GetHandleNumberFromInstance>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4909      	ldr	r1, [pc, #36]	@ (8002bd0 <HAL_MDF_Init+0x2ac>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200008ec 	.word	0x200008ec
 8002bd0:	200008f4 	.word	0x200008f4

08002bd4 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <MDF_GetHandleNumberFromInstance+0x70>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e024      	b.n	8002c34 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a16      	ldr	r2, [pc, #88]	@ (8002c48 <MDF_GetHandleNumberFromInstance+0x74>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d102      	bne.n	8002bf8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e01d      	b.n	8002c34 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <MDF_GetHandleNumberFromInstance+0x78>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8002c00:	2302      	movs	r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e016      	b.n	8002c34 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a11      	ldr	r2, [pc, #68]	@ (8002c50 <MDF_GetHandleNumberFromInstance+0x7c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d102      	bne.n	8002c14 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e00f      	b.n	8002c34 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a0f      	ldr	r2, [pc, #60]	@ (8002c54 <MDF_GetHandleNumberFromInstance+0x80>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e008      	b.n	8002c34 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	@ (8002c58 <MDF_GetHandleNumberFromInstance+0x84>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d102      	bne.n	8002c30 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e001      	b.n	8002c34 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8002c30:	2306      	movs	r3, #6
 8002c32:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8002c34:	68fb      	ldr	r3, [r7, #12]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40025080 	.word	0x40025080
 8002c48:	40025100 	.word	0x40025100
 8002c4c:	40025180 	.word	0x40025180
 8002c50:	40025200 	.word	0x40025200
 8002c54:	40025280 	.word	0x40025280
 8002c58:	40025300 	.word	0x40025300

08002c5c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff f8cc 	bl	8001e24 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e0a5      	b.n	8002de6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 809e 	bne.w	8002de6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fb30 	bl	8001310 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002cb0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f912 	bl	8002ede <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_OSPI_Init+0x174>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68d1      	ldr	r1, [r2, #12]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6912      	ldr	r2, [r2, #16]
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0412      	lsls	r2, r2, #16
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6952      	ldr	r2, [r2, #20]
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	0212      	lsls	r2, r2, #8
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	69d2      	ldr	r2, [r2, #28]
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d20:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2120      	movs	r1, #32
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fdc9 	bl	80038e0 <OSPI_WaitFlagStateUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d146      	bne.n	8002de6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1e5a      	subs	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d8e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0202 	orr.w	r2, r2, #2
 8002dcc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dd6:	d103      	bne.n	8002de0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dde:	e002      	b.n	8002de6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	f8e0c0f4 	.word	0xf8e0c0f4

08002df4 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff f810 	bl	8001e24 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_OSPI_Abort+0x2c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d052      	beq.n	8002ec6 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d014      	beq.n	8002e58 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0204 	bic.w	r2, r2, #4
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f986 	bl	8002154 <HAL_DMA_Abort>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2204      	movs	r2, #4
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02b      	beq.n	8002ebe <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0202 	orr.w	r2, r2, #2
 8002e74:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2102      	movs	r1, #2
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fd2c 	bl	80038e0 <OSPI_WaitFlagStateUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11f      	bne.n	8002ed2 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2202      	movs	r2, #2
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fd1a 	bl	80038e0 <OSPI_WaitFlagStateUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002ebc:	e009      	b.n	8002ed2 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002ec4:	e005      	b.n	8002ed2 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ed0:	e000      	b.n	8002ed4 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002ed2:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b094      	sub	sp, #80	@ 0x50
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a9d      	ldr	r2, [pc, #628]	@ (8003190 <HAL_OSPIM_Config+0x294>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d105      	bne.n	8002f2a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002f28:	e004      	b.n	8002f34 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002f3a:	e01d      	b.n	8002f78 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002f3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f40:	3301      	adds	r3, #1
 8002f42:	b2d8      	uxtb	r0, r3
 8002f44:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002f48:	f107 0114 	add.w	r1, r7, #20
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	4619      	mov	r1, r3
 8002f58:	f000 fd02 	bl	8003960 <OSPIM_GetConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002f6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f72:	3301      	adds	r3, #1
 8002f74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002f78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d9dd      	bls.n	8002f3c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002f80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 849e 	bne.w	80038c6 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002f8a:	4b81      	ldr	r3, [pc, #516]	@ (8003190 <HAL_OSPIM_Config+0x294>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002f96:	4b7e      	ldr	r3, [pc, #504]	@ (8003190 <HAL_OSPIM_Config+0x294>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003190 <HAL_OSPIM_Config+0x294>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002fa2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002fae:	4b79      	ldr	r3, [pc, #484]	@ (8003194 <HAL_OSPIM_Config+0x298>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002fba:	4b76      	ldr	r3, [pc, #472]	@ (8003194 <HAL_OSPIM_Config+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a75      	ldr	r2, [pc, #468]	@ (8003194 <HAL_OSPIM_Config+0x298>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002fc6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002fd2:	4971      	ldr	r1, [pc, #452]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8002fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	3350      	adds	r3, #80	@ 0x50
 8002fe0:	443b      	add	r3, r7
 8002fe2:	3b34      	subs	r3, #52	@ 0x34
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	486a      	ldr	r0, [pc, #424]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8002ff0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	3350      	adds	r3, #80	@ 0x50
 8002ffc:	443b      	add	r3, r7
 8002ffe:	3b34      	subs	r3, #52	@ 0x34
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4403      	add	r3, r0
 800300c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800300e:	4b62      	ldr	r3, [pc, #392]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80c0 	beq.w	800319c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800301c:	4b5e      	ldr	r3, [pc, #376]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5d      	ldr	r2, [pc, #372]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003028:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 8162 	bne.w	80032f6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8003032:	4959      	ldr	r1, [pc, #356]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003034:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3350      	adds	r3, #80	@ 0x50
 8003042:	443b      	add	r3, r7
 8003044:	3b3c      	subs	r3, #60	@ 0x3c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	4851      	ldr	r0, [pc, #324]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003052:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	3350      	adds	r3, #80	@ 0x50
 8003060:	443b      	add	r3, r7
 8003062:	3b3c      	subs	r3, #60	@ 0x3c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3b01      	subs	r3, #1
 8003068:	f041 0202 	orr.w	r2, r1, #2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4403      	add	r3, r0
 8003070:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003072:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	3350      	adds	r3, #80	@ 0x50
 8003080:	443b      	add	r3, r7
 8003082:	3b38      	subs	r3, #56	@ 0x38
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01f      	beq.n	80030ca <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800308a:	4943      	ldr	r1, [pc, #268]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 800308c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3350      	adds	r3, #80	@ 0x50
 800309a:	443b      	add	r3, r7
 800309c:	3b38      	subs	r3, #56	@ 0x38
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	483b      	ldr	r0, [pc, #236]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 80030aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	3350      	adds	r3, #80	@ 0x50
 80030b8:	443b      	add	r3, r7
 80030ba:	3b38      	subs	r3, #56	@ 0x38
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f041 0220 	orr.w	r2, r1, #32
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4403      	add	r3, r0
 80030c8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80030ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	3350      	adds	r3, #80	@ 0x50
 80030d8:	443b      	add	r3, r7
 80030da:	3b30      	subs	r3, #48	@ 0x30
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d023      	beq.n	800312a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80030e2:	492d      	ldr	r1, [pc, #180]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 80030e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3350      	adds	r3, #80	@ 0x50
 80030f2:	443b      	add	r3, r7
 80030f4:	3b30      	subs	r3, #48	@ 0x30
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	4824      	ldr	r0, [pc, #144]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003106:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	3350      	adds	r3, #80	@ 0x50
 8003114:	443b      	add	r3, r7
 8003116:	3b30      	subs	r3, #48	@ 0x30
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3b01      	subs	r3, #1
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4403      	add	r3, r0
 8003128:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800312a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	3350      	adds	r3, #80	@ 0x50
 8003138:	443b      	add	r3, r7
 800313a:	3b2c      	subs	r3, #44	@ 0x2c
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80d9 	beq.w	80032f6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8003144:	4914      	ldr	r1, [pc, #80]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003146:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	3350      	adds	r3, #80	@ 0x50
 8003154:	443b      	add	r3, r7
 8003156:	3b2c      	subs	r3, #44	@ 0x2c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3b01      	subs	r3, #1
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	480c      	ldr	r0, [pc, #48]	@ (8003198 <HAL_OSPIM_Config+0x29c>)
 8003168:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	3350      	adds	r3, #80	@ 0x50
 8003176:	443b      	add	r3, r7
 8003178:	3b2c      	subs	r3, #44	@ 0x2c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3b01      	subs	r3, #1
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4403      	add	r3, r0
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	e0b3      	b.n	80032f6 <HAL_OSPIM_Config+0x3fa>
 800318e:	bf00      	nop
 8003190:	420d1400 	.word	0x420d1400
 8003194:	420d2400 	.word	0x420d2400
 8003198:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800319c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	3350      	adds	r3, #80	@ 0x50
 80031a8:	443b      	add	r3, r7
 80031aa:	3b3c      	subs	r3, #60	@ 0x3c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a1 	beq.w	80032f6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80031b4:	4993      	ldr	r1, [pc, #588]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 80031b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3350      	adds	r3, #80	@ 0x50
 80031c2:	443b      	add	r3, r7
 80031c4:	3b3c      	subs	r3, #60	@ 0x3c
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	488c      	ldr	r0, [pc, #560]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 80031d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	3350      	adds	r3, #80	@ 0x50
 80031de:	443b      	add	r3, r7
 80031e0:	3b3c      	subs	r3, #60	@ 0x3c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	f021 0201 	bic.w	r2, r1, #1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4403      	add	r3, r0
 80031ee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80031f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	3350      	adds	r3, #80	@ 0x50
 80031fc:	443b      	add	r3, r7
 80031fe:	3b38      	subs	r3, #56	@ 0x38
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01d      	beq.n	8003242 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003206:	497f      	ldr	r1, [pc, #508]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 8003208:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	3350      	adds	r3, #80	@ 0x50
 8003214:	443b      	add	r3, r7
 8003216:	3b38      	subs	r3, #56	@ 0x38
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	4878      	ldr	r0, [pc, #480]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 8003224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	3350      	adds	r3, #80	@ 0x50
 8003230:	443b      	add	r3, r7
 8003232:	3b38      	subs	r3, #56	@ 0x38
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3b01      	subs	r3, #1
 8003238:	f021 0210 	bic.w	r2, r1, #16
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4403      	add	r3, r0
 8003240:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3350      	adds	r3, #80	@ 0x50
 800324e:	443b      	add	r3, r7
 8003250:	3b30      	subs	r3, #48	@ 0x30
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003258:	496a      	ldr	r1, [pc, #424]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 800325a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	3350      	adds	r3, #80	@ 0x50
 8003266:	443b      	add	r3, r7
 8003268:	3b30      	subs	r3, #48	@ 0x30
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3b01      	subs	r3, #1
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	4862      	ldr	r0, [pc, #392]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 800327a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3350      	adds	r3, #80	@ 0x50
 8003286:	443b      	add	r3, r7
 8003288:	3b30      	subs	r3, #48	@ 0x30
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4403      	add	r3, r0
 800329a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800329c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	3350      	adds	r3, #80	@ 0x50
 80032a8:	443b      	add	r3, r7
 80032aa:	3b2c      	subs	r3, #44	@ 0x2c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d021      	beq.n	80032f6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80032b2:	4954      	ldr	r1, [pc, #336]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 80032b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	3350      	adds	r3, #80	@ 0x50
 80032c0:	443b      	add	r3, r7
 80032c2:	3b2c      	subs	r3, #44	@ 0x2c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	484c      	ldr	r0, [pc, #304]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 80032d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	3350      	adds	r3, #80	@ 0x50
 80032e0:	443b      	add	r3, r7
 80032e2:	3b2c      	subs	r3, #44	@ 0x2c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4403      	add	r3, r0
 80032f4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	3350      	adds	r3, #80	@ 0x50
 8003308:	443b      	add	r3, r7
 800330a:	3b3c      	subs	r3, #60	@ 0x3c
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4299      	cmp	r1, r3
 8003310:	d038      	beq.n	8003384 <HAL_OSPIM_Config+0x488>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	3350      	adds	r3, #80	@ 0x50
 8003324:	443b      	add	r3, r7
 8003326:	3b38      	subs	r3, #56	@ 0x38
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4299      	cmp	r1, r3
 800332c:	d02a      	beq.n	8003384 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6899      	ldr	r1, [r3, #8]
 8003332:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	3350      	adds	r3, #80	@ 0x50
 8003340:	443b      	add	r3, r7
 8003342:	3b34      	subs	r3, #52	@ 0x34
 8003344:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003346:	4299      	cmp	r1, r3
 8003348:	d01c      	beq.n	8003384 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	68d9      	ldr	r1, [r3, #12]
 800334e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	3350      	adds	r3, #80	@ 0x50
 800335c:	443b      	add	r3, r7
 800335e:	3b30      	subs	r3, #48	@ 0x30
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4299      	cmp	r1, r3
 8003364:	d00e      	beq.n	8003384 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	3350      	adds	r3, #80	@ 0x50
 8003378:	443b      	add	r3, r7
 800337a:	3b2c      	subs	r3, #44	@ 0x2c
 800337c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800337e:	4299      	cmp	r1, r3
 8003380:	f040 810e 	bne.w	80035a0 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3350      	adds	r3, #80	@ 0x50
 8003396:	443b      	add	r3, r7
 8003398:	3b3c      	subs	r3, #60	@ 0x3c
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4299      	cmp	r1, r3
 800339e:	d133      	bne.n	8003408 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3350      	adds	r3, #80	@ 0x50
 80033b2:	443b      	add	r3, r7
 80033b4:	3b38      	subs	r3, #56	@ 0x38
 80033b6:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80033b8:	4299      	cmp	r1, r3
 80033ba:	d125      	bne.n	8003408 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	68d9      	ldr	r1, [r3, #12]
 80033c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	3350      	adds	r3, #80	@ 0x50
 80033ce:	443b      	add	r3, r7
 80033d0:	3b30      	subs	r3, #48	@ 0x30
 80033d2:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80033d4:	4299      	cmp	r1, r3
 80033d6:	d117      	bne.n	8003408 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6919      	ldr	r1, [r3, #16]
 80033dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	3350      	adds	r3, #80	@ 0x50
 80033ea:	443b      	add	r3, r7
 80033ec:	3b2c      	subs	r3, #44	@ 0x2c
 80033ee:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80033f0:	4299      	cmp	r1, r3
 80033f2:	d109      	bne.n	8003408 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a02      	ldr	r2, [pc, #8]	@ (8003404 <HAL_OSPIM_Config+0x508>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e0ce      	b.n	80035a0 <HAL_OSPIM_Config+0x6a4>
 8003402:	bf00      	nop
 8003404:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003408:	49a4      	ldr	r1, [pc, #656]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 800340a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	3350      	adds	r3, #80	@ 0x50
 8003418:	443b      	add	r3, r7
 800341a:	3b3c      	subs	r3, #60	@ 0x3c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3b01      	subs	r3, #1
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	489d      	ldr	r0, [pc, #628]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003428:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3350      	adds	r3, #80	@ 0x50
 8003436:	443b      	add	r3, r7
 8003438:	3b3c      	subs	r3, #60	@ 0x3c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3b01      	subs	r3, #1
 800343e:	f021 0201 	bic.w	r2, r1, #1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003448:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	3350      	adds	r3, #80	@ 0x50
 8003456:	443b      	add	r3, r7
 8003458:	3b38      	subs	r3, #56	@ 0x38
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01f      	beq.n	80034a0 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003460:	498e      	ldr	r1, [pc, #568]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003462:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	3350      	adds	r3, #80	@ 0x50
 8003470:	443b      	add	r3, r7
 8003472:	3b38      	subs	r3, #56	@ 0x38
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3b01      	subs	r3, #1
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	4887      	ldr	r0, [pc, #540]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003480:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	3350      	adds	r3, #80	@ 0x50
 800348e:	443b      	add	r3, r7
 8003490:	3b38      	subs	r3, #56	@ 0x38
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3b01      	subs	r3, #1
 8003496:	f021 0210 	bic.w	r2, r1, #16
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4403      	add	r3, r0
 800349e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80034a0:	497e      	ldr	r1, [pc, #504]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80034a2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	3350      	adds	r3, #80	@ 0x50
 80034b0:	443b      	add	r3, r7
 80034b2:	3b34      	subs	r3, #52	@ 0x34
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	4877      	ldr	r0, [pc, #476]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80034c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	3350      	adds	r3, #80	@ 0x50
 80034ce:	443b      	add	r3, r7
 80034d0:	3b34      	subs	r3, #52	@ 0x34
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4403      	add	r3, r0
 80034de:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80034e0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	3350      	adds	r3, #80	@ 0x50
 80034ee:	443b      	add	r3, r7
 80034f0:	3b30      	subs	r3, #48	@ 0x30
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d023      	beq.n	8003540 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80034f8:	4968      	ldr	r1, [pc, #416]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80034fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	3350      	adds	r3, #80	@ 0x50
 8003508:	443b      	add	r3, r7
 800350a:	3b30      	subs	r3, #48	@ 0x30
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3b01      	subs	r3, #1
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	4860      	ldr	r0, [pc, #384]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 800351c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3350      	adds	r3, #80	@ 0x50
 800352a:	443b      	add	r3, r7
 800352c:	3b30      	subs	r3, #48	@ 0x30
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3b01      	subs	r3, #1
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4403      	add	r3, r0
 800353e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003540:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3350      	adds	r3, #80	@ 0x50
 800354e:	443b      	add	r3, r7
 8003550:	3b2c      	subs	r3, #44	@ 0x2c
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d023      	beq.n	80035a0 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003558:	4950      	ldr	r1, [pc, #320]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 800355a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	3350      	adds	r3, #80	@ 0x50
 8003568:	443b      	add	r3, r7
 800356a:	3b2c      	subs	r3, #44	@ 0x2c
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	4848      	ldr	r0, [pc, #288]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 800357c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	3350      	adds	r3, #80	@ 0x50
 800358a:	443b      	add	r3, r7
 800358c:	3b2c      	subs	r3, #44	@ 0x2c
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3b01      	subs	r3, #1
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4403      	add	r3, r0
 800359e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80035a0:	4a3e      	ldr	r2, [pc, #248]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b4:	025b      	lsls	r3, r3, #9
 80035b6:	431a      	orrs	r2, r3
 80035b8:	4938      	ldr	r1, [pc, #224]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	3b01      	subs	r3, #1
 80035c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d018      	beq.n	8003604 <HAL_OSPIM_Config+0x708>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035da:	d813      	bhi.n	8003604 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	4b2e      	ldr	r3, [pc, #184]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d90a      	bls.n	8003604 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	4927      	ldr	r1, [pc, #156]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 809a 	beq.w	8003746 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003612:	4a22      	ldr	r2, [pc, #136]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 0203 	bic.w	r2, r3, #3
 8003624:	491d      	ldr	r1, [pc, #116]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3b01      	subs	r3, #1
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d011      	beq.n	8003662 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	3b01      	subs	r3, #1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003650:	4912      	ldr	r1, [pc, #72]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f042 0210 	orr.w	r2, r2, #16
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d018      	beq.n	80036a0 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800366e:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	3b01      	subs	r3, #1
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003684:	4905      	ldr	r1, [pc, #20]	@ (800369c <HAL_OSPIM_Config+0x7a0>)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	3b01      	subs	r3, #1
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e01b      	b.n	80036d4 <HAL_OSPIM_Config+0x7d8>
 800369c:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d015      	beq.n	80036d4 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036a8:	4a8a      	ldr	r2, [pc, #552]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80036be:	4985      	ldr	r1, [pc, #532]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036e0:	4a7c      	ldr	r2, [pc, #496]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80036f6:	4977      	ldr	r1, [pc, #476]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e0c3      	b.n	8003896 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80bf 	beq.w	8003896 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003718:	4a6e      	ldr	r2, [pc, #440]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	3b01      	subs	r3, #1
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800372e:	4969      	ldr	r1, [pc, #420]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	3b01      	subs	r3, #1
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	e0a7      	b.n	8003896 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003746:	4a63      	ldr	r2, [pc, #396]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 0203 	bic.w	r2, r3, #3
 8003758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	431a      	orrs	r2, r3
 800375e:	495d      	ldr	r1, [pc, #372]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3b01      	subs	r3, #1
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d014      	beq.n	80037a2 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003778:	4a56      	ldr	r2, [pc, #344]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800378a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	431a      	orrs	r2, r3
 8003790:	4950      	ldr	r1, [pc, #320]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f042 0210 	orr.w	r2, r2, #16
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d019      	beq.n	80037e2 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037ae:	4a49      	ldr	r2, [pc, #292]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80037c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037c6:	049b      	lsls	r3, r3, #18
 80037c8:	431a      	orrs	r2, r3
 80037ca:	4942      	ldr	r1, [pc, #264]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	e01c      	b.n	800381c <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037ea:	4a3a      	ldr	r2, [pc, #232]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003802:	069b      	lsls	r3, r3, #26
 8003804:	431a      	orrs	r2, r3
 8003806:	4933      	ldr	r1, [pc, #204]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	3b01      	subs	r3, #1
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d019      	beq.n	800385c <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003828:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	3b01      	subs	r3, #1
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800383e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003840:	049b      	lsls	r3, r3, #18
 8003842:	431a      	orrs	r2, r3
 8003844:	4923      	ldr	r1, [pc, #140]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	3b01      	subs	r3, #1
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e01c      	b.n	8003896 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d018      	beq.n	8003896 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	3b01      	subs	r3, #1
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800387a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387c:	069b      	lsls	r3, r3, #26
 800387e:	431a      	orrs	r2, r3
 8003880:	4914      	ldr	r1, [pc, #80]	@ (80038d4 <HAL_OSPIM_Config+0x9d8>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	3b01      	subs	r3, #1
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003896:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80038a2:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <HAL_OSPIM_Config+0x9dc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a0c      	ldr	r2, [pc, #48]	@ (80038d8 <HAL_OSPIM_Config+0x9dc>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80038ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80038ba:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <HAL_OSPIM_Config+0x9e0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a07      	ldr	r2, [pc, #28]	@ (80038dc <HAL_OSPIM_Config+0x9e0>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80038c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3750      	adds	r7, #80	@ 0x50
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	420c4000 	.word	0x420c4000
 80038d8:	420d1400 	.word	0x420d1400
 80038dc:	420d2400 	.word	0x420d2400

080038e0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80038f0:	e022      	b.n	8003938 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d01e      	beq.n	8003938 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fa93 	bl	8001e24 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d113      	bne.n	8003938 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a1a      	ldr	r2, [r3, #32]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	401a      	ands	r2, r3
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	429a      	cmp	r2, r3
 800391e:	d00b      	beq.n	8003938 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003926:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e00e      	b.n	8003956 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d1ce      	bne.n	80038f2 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <OSPIM_GetConfig+0x26>
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d802      	bhi.n	8003986 <OSPIM_GetConfig+0x26>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
 800398a:	e098      	b.n	8003abe <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d10b      	bne.n	80039c8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80039b0:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <OSPIM_GetConfig+0x16c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80039bc:	4b44      	ldr	r3, [pc, #272]	@ (8003ad0 <OSPIM_GetConfig+0x170>)
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e002      	b.n	80039c8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80039c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039c6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e074      	b.n	8003ab8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80039ce:	4a3f      	ldr	r2, [pc, #252]	@ (8003acc <OSPIM_GetConfig+0x16c>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4053      	eors	r3, r2
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4053      	eors	r3, r2
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4053      	eors	r3, r2
 8003a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d018      	beq.n	8003a76 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4053      	eors	r3, r2
 8003a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d111      	bne.n	8003a76 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e005      	b.n	8003a76 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4053      	eors	r3, r2
 8003a86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d111      	bne.n	8003ab2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d106      	bne.n	8003aa6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	611a      	str	r2, [r3, #16]
 8003aa4:	e005      	b.n	8003ab2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d987      	bls.n	80039ce <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	420c4000 	.word	0x420c4000
 8003ad0:	04040222 	.word	0x04040222

08003ad4 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0202 	orr.w	r2, r2, #2
 8003af0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2208      	movs	r2, #8
 8003af6:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a15      	ldr	r2, [pc, #84]	@ (8003b54 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d109      	bne.n	8003b16 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8003b02:	4815      	ldr	r0, [pc, #84]	@ (8003b58 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003b04:	f7ff f8aa 	bl	8002c5c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003b08:	6839      	ldr	r1, [r7, #0]
 8003b0a:	4813      	ldr	r0, [pc, #76]	@ (8003b58 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003b0c:	f005 f874 	bl	8008bf8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e00d      	b.n	8003b32 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a10      	ldr	r2, [pc, #64]	@ (8003b5c <HAL_OSPI_DLYB_SetConfig+0x88>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8003b20:	480f      	ldr	r0, [pc, #60]	@ (8003b60 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003b22:	f7ff f89b 	bl	8002c5c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	480d      	ldr	r0, [pc, #52]	@ (8003b60 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003b2a:	f005 f865 	bl	8008bf8 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff f95e 	bl	8002df4 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0202 	bic.w	r2, r2, #2
 8003b46:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	420d1400 	.word	0x420d1400
 8003b58:	420cf000 	.word	0x420cf000
 8003b5c:	420d2400 	.word	0x420d2400
 8003b60:	420cf400 	.word	0x420cf400

08003b64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e108      	b.n	8003d88 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fd ff6f 	bl	8001a74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a7b      	ldr	r2, [pc, #492]	@ (8003d90 <HAL_PCD_Init+0x22c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d102      	bne.n	8003bac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f005 fa36 	bl	8009022 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7c1a      	ldrb	r2, [r3, #16]
 8003bbe:	f88d 2000 	strb.w	r2, [sp]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc6:	f005 f9ff 	bl	8008fc8 <USB_CoreInit>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0d5      	b.n	8003d88 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 fa2e 	bl	8009044 <USB_SetCurrentMode>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0c6      	b.n	8003d88 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e04a      	b.n	8003c96 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3315      	adds	r3, #21
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	3314      	adds	r3, #20
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	b298      	uxth	r0, r3
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	332e      	adds	r3, #46	@ 0x2e
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3318      	adds	r3, #24
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	331c      	adds	r3, #28
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	3320      	adds	r3, #32
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	3324      	adds	r3, #36	@ 0x24
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	3301      	adds	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	791b      	ldrb	r3, [r3, #4]
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d3af      	bcc.n	8003c00 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e044      	b.n	8003d30 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	791b      	ldrb	r3, [r3, #4]
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d3b5      	bcc.n	8003ca6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7c1a      	ldrb	r2, [r3, #16]
 8003d42:	f88d 2000 	strb.w	r2, [sp]
 8003d46:	3304      	adds	r3, #4
 8003d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4a:	f005 f9c7 	bl	80090dc <USB_DevInit>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e013      	b.n	8003d88 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	7b1b      	ldrb	r3, [r3, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f80c 	bl	8003d94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f005 fb70 	bl	8009466 <USB_DevDisconnect>

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	42040000 	.word	0x42040000

08003d94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	f043 0303 	orr.w	r3, r3, #3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003de4:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10b      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d905      	bls.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003dfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a32      	ldr	r2, [pc, #200]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e08:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e057      	b.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e14:	d90a      	bls.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003e16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	4a2a      	ldr	r2, [pc, #168]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e28:	60d3      	str	r3, [r2, #12]
 8003e2a:	e007      	b.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003e2c:	4b27      	ldr	r3, [pc, #156]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003e34:	4925      	ldr	r1, [pc, #148]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003e3c:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a24      	ldr	r2, [pc, #144]	@ (8003ed4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2232      	movs	r2, #50	@ 0x32
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ed4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003e5a:	e002      	b.n	8003e62 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f3      	bne.n	8003e5c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	2232      	movs	r2, #50	@ 0x32
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ed4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003e98:	e002      	b.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f3      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e000      	b.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	46020800 	.word	0x46020800
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	10624dd3 	.word	0x10624dd3

08003ed8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003edc:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	46020800 	.word	0x46020800

08003ef4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003efc:	4b22      	ldr	r3, [pc, #136]	@ (8003f88 <HAL_PWREx_ConfigSupply+0x94>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a22      	ldr	r2, [pc, #136]	@ (8003f8c <HAL_PWREx_ConfigSupply+0x98>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	2232      	movs	r2, #50	@ 0x32
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <HAL_PWREx_ConfigSupply+0x98>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d113      	bne.n	8003f48 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003f20:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <HAL_PWREx_ConfigSupply+0x9c>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <HAL_PWREx_ConfigSupply+0x9c>)
 8003f26:	f023 0302 	bic.w	r3, r3, #2
 8003f2a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003f2c:	e002      	b.n	8003f34 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003f34:	4b16      	ldr	r3, [pc, #88]	@ (8003f90 <HAL_PWREx_ConfigSupply+0x9c>)
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d116      	bne.n	8003f6e <HAL_PWREx_ConfigSupply+0x7a>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f3      	bne.n	8003f2e <HAL_PWREx_ConfigSupply+0x3a>
 8003f46:	e012      	b.n	8003f6e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003f48:	4b11      	ldr	r3, [pc, #68]	@ (8003f90 <HAL_PWREx_ConfigSupply+0x9c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a10      	ldr	r2, [pc, #64]	@ (8003f90 <HAL_PWREx_ConfigSupply+0x9c>)
 8003f4e:	f043 0302 	orr.w	r3, r3, #2
 8003f52:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003f54:	e002      	b.n	8003f5c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <HAL_PWREx_ConfigSupply+0x9c>)
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_PWREx_ConfigSupply+0x7a>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f3      	bne.n	8003f56 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e000      	b.n	8003f7a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	10624dd3 	.word	0x10624dd3
 8003f90:	46020800 	.word	0x46020800

08003f94 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	6113      	str	r3, [r2, #16]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	46020800 	.word	0x46020800

08003fb4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003fc2:	6113      	str	r3, [r2, #16]
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	46020800 	.word	0x46020800

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08e      	sub	sp, #56	@ 0x38
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f000 bec8 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fee:	4b99      	ldr	r3, [pc, #612]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff8:	4b96      	ldr	r3, [pc, #600]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 816c 	beq.w	80042e8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_RCC_OscConfig+0x52>
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	2b0c      	cmp	r3, #12
 800401a:	f040 80de 	bne.w	80041da <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004020:	2b01      	cmp	r3, #1
 8004022:	f040 80da 	bne.w	80041da <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f000 bea5 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004038:	4b86      	ldr	r3, [pc, #536]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_RCC_OscConfig+0x7a>
 8004044:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800404c:	e005      	b.n	800405a <HAL_RCC_OscConfig+0x86>
 800404e:	4b81      	ldr	r3, [pc, #516]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800405a:	4293      	cmp	r3, r2
 800405c:	d255      	bcs.n	800410a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f9d9 	bl	8005420 <RCC_SetFlashLatencyFromMSIRange>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f000 be82 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800407a:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4a75      	ldr	r2, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004084:	6093      	str	r3, [r2, #8]
 8004086:	4b73      	ldr	r3, [pc, #460]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	4970      	ldr	r1, [pc, #448]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040a0:	d309      	bcc.n	80040b6 <HAL_RCC_OscConfig+0xe2>
 80040a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 021f 	bic.w	r2, r3, #31
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4969      	ldr	r1, [pc, #420]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60cb      	str	r3, [r1, #12]
 80040b4:	e07e      	b.n	80041b4 <HAL_RCC_OscConfig+0x1e0>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da0a      	bge.n	80040d4 <HAL_RCC_OscConfig+0x100>
 80040be:	4b65      	ldr	r3, [pc, #404]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	015b      	lsls	r3, r3, #5
 80040cc:	4961      	ldr	r1, [pc, #388]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60cb      	str	r3, [r1, #12]
 80040d2:	e06f      	b.n	80041b4 <HAL_RCC_OscConfig+0x1e0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d30a      	bcc.n	80040f4 <HAL_RCC_OscConfig+0x120>
 80040de:	4b5d      	ldr	r3, [pc, #372]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	4959      	ldr	r1, [pc, #356]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60cb      	str	r3, [r1, #12]
 80040f2:	e05f      	b.n	80041b4 <HAL_RCC_OscConfig+0x1e0>
 80040f4:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	03db      	lsls	r3, r3, #15
 8004102:	4954      	ldr	r1, [pc, #336]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004104:	4313      	orrs	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
 8004108:	e054      	b.n	80041b4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800410a:	4b52      	ldr	r3, [pc, #328]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	4a51      	ldr	r2, [pc, #324]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004110:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004114:	6093      	str	r3, [r2, #8]
 8004116:	4b4f      	ldr	r3, [pc, #316]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	494c      	ldr	r1, [pc, #304]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004130:	d309      	bcc.n	8004146 <HAL_RCC_OscConfig+0x172>
 8004132:	4b48      	ldr	r3, [pc, #288]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f023 021f 	bic.w	r2, r3, #31
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4945      	ldr	r1, [pc, #276]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004140:	4313      	orrs	r3, r2
 8004142:	60cb      	str	r3, [r1, #12]
 8004144:	e028      	b.n	8004198 <HAL_RCC_OscConfig+0x1c4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	da0a      	bge.n	8004164 <HAL_RCC_OscConfig+0x190>
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	493d      	ldr	r1, [pc, #244]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800415e:	4313      	orrs	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
 8004162:	e019      	b.n	8004198 <HAL_RCC_OscConfig+0x1c4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416c:	d30a      	bcc.n	8004184 <HAL_RCC_OscConfig+0x1b0>
 800416e:	4b39      	ldr	r3, [pc, #228]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	4935      	ldr	r1, [pc, #212]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800417e:	4313      	orrs	r3, r2
 8004180:	60cb      	str	r3, [r1, #12]
 8004182:	e009      	b.n	8004198 <HAL_RCC_OscConfig+0x1c4>
 8004184:	4b33      	ldr	r3, [pc, #204]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	03db      	lsls	r3, r3, #15
 8004192:	4930      	ldr	r1, [pc, #192]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004194:	4313      	orrs	r3, r2
 8004196:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f93c 	bl	8005420 <RCC_SetFlashLatencyFromMSIRange>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f000 bde5 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80041b4:	f001 f8de 	bl	8005374 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041b8:	4b27      	ldr	r3, [pc, #156]	@ (8004258 <HAL_RCC_OscConfig+0x284>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fda7 	bl	8001d10 <HAL_InitTick>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80041c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 808a 	beq.w	80042e6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80041d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d6:	f000 bdd2 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d066      	beq.n	80042b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80041e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041ee:	f7fd fe19 	bl	8001e24 <HAL_GetTick>
 80041f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80041f4:	e009      	b.n	800420a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f6:	f7fd fe15 	bl	8001e24 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d902      	bls.n	800420a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	f000 bdba 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ef      	beq.n	80041f6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004216:	4b0f      	ldr	r3, [pc, #60]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800421c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004220:	6093      	str	r3, [r2, #8]
 8004222:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	4909      	ldr	r1, [pc, #36]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800423c:	d30e      	bcc.n	800425c <HAL_RCC_OscConfig+0x288>
 800423e:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f023 021f 	bic.w	r2, r3, #31
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4902      	ldr	r1, [pc, #8]	@ (8004254 <HAL_RCC_OscConfig+0x280>)
 800424c:	4313      	orrs	r3, r2
 800424e:	60cb      	str	r3, [r1, #12]
 8004250:	e04a      	b.n	80042e8 <HAL_RCC_OscConfig+0x314>
 8004252:	bf00      	nop
 8004254:	46020c00 	.word	0x46020c00
 8004258:	20000004 	.word	0x20000004
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	da0a      	bge.n	800427a <HAL_RCC_OscConfig+0x2a6>
 8004264:	4b98      	ldr	r3, [pc, #608]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	015b      	lsls	r3, r3, #5
 8004272:	4995      	ldr	r1, [pc, #596]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
 8004278:	e036      	b.n	80042e8 <HAL_RCC_OscConfig+0x314>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004282:	d30a      	bcc.n	800429a <HAL_RCC_OscConfig+0x2c6>
 8004284:	4b90      	ldr	r3, [pc, #576]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	029b      	lsls	r3, r3, #10
 8004292:	498d      	ldr	r1, [pc, #564]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
 8004298:	e026      	b.n	80042e8 <HAL_RCC_OscConfig+0x314>
 800429a:	4b8b      	ldr	r3, [pc, #556]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	03db      	lsls	r3, r3, #15
 80042a8:	4987      	ldr	r1, [pc, #540]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60cb      	str	r3, [r1, #12]
 80042ae:	e01b      	b.n	80042e8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80042b0:	4b85      	ldr	r3, [pc, #532]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a84      	ldr	r2, [pc, #528]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042bc:	f7fd fdb2 	bl	8001e24 <HAL_GetTick>
 80042c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80042c2:	e009      	b.n	80042d8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c4:	f7fd fdae 	bl	8001e24 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d902      	bls.n	80042d8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	f000 bd53 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80042d8:	4b7b      	ldr	r3, [pc, #492]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1ef      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2f0>
 80042e4:	e000      	b.n	80042e8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 808b 	beq.w	800440c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x334>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d109      	bne.n	8004316 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	2b03      	cmp	r3, #3
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d17d      	bne.n	800440c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f000 bd34 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x35a>
 8004320:	4b69      	ldr	r3, [pc, #420]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a68      	ldr	r2, [pc, #416]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e041      	b.n	80043b2 <HAL_RCC_OscConfig+0x3de>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004336:	d112      	bne.n	800435e <HAL_RCC_OscConfig+0x38a>
 8004338:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a62      	ldr	r2, [pc, #392]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800433e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b60      	ldr	r3, [pc, #384]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a5f      	ldr	r2, [pc, #380]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800434a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b5d      	ldr	r3, [pc, #372]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5c      	ldr	r2, [pc, #368]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e029      	b.n	80043b2 <HAL_RCC_OscConfig+0x3de>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004366:	d112      	bne.n	800438e <HAL_RCC_OscConfig+0x3ba>
 8004368:	4b57      	ldr	r3, [pc, #348]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a56      	ldr	r2, [pc, #344]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800436e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b54      	ldr	r3, [pc, #336]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a53      	ldr	r2, [pc, #332]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800437a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a50      	ldr	r2, [pc, #320]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e011      	b.n	80043b2 <HAL_RCC_OscConfig+0x3de>
 800438e:	4b4e      	ldr	r3, [pc, #312]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a4d      	ldr	r2, [pc, #308]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b4b      	ldr	r3, [pc, #300]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4a      	ldr	r2, [pc, #296]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b48      	ldr	r3, [pc, #288]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a47      	ldr	r2, [pc, #284]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80043ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80043ba:	f7fd fd33 	bl	8001e24 <HAL_GetTick>
 80043be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c0:	e009      	b.n	80043d6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c2:	f7fd fd2f 	bl	8001e24 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	@ 0x64
 80043ce:	d902      	bls.n	80043d6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	f000 bcd4 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	4b3c      	ldr	r3, [pc, #240]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ef      	beq.n	80043c2 <HAL_RCC_OscConfig+0x3ee>
 80043e2:	e013      	b.n	800440c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80043e4:	f7fd fd1e 	bl	8001e24 <HAL_GetTick>
 80043e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ea:	e009      	b.n	8004400 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fd fd1a 	bl	8001e24 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	@ 0x64
 80043f8:	d902      	bls.n	8004400 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	f000 bcbf 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004400:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ef      	bne.n	80043ec <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d05f      	beq.n	80044d8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	2b04      	cmp	r3, #4
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x456>
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d114      	bne.n	800444e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004426:	2b02      	cmp	r3, #2
 8004428:	d111      	bne.n	800444e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f000 bca3 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004438:	4b23      	ldr	r3, [pc, #140]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	4920      	ldr	r1, [pc, #128]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004448:	4313      	orrs	r3, r2
 800444a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800444c:	e044      	b.n	80044d8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d024      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004456:	4b1c      	ldr	r3, [pc, #112]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004460:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004462:	f7fd fcdf 	bl	8001e24 <HAL_GetTick>
 8004466:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004468:	e009      	b.n	800447e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800446a:	f7fd fcdb 	bl	8001e24 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d902      	bls.n	800447e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	f000 bc80 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ef      	beq.n	800446a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b0f      	ldr	r3, [pc, #60]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	490b      	ldr	r1, [pc, #44]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	610b      	str	r3, [r1, #16]
 800449e:	e01b      	b.n	80044d8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80044a0:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <HAL_RCC_OscConfig+0x4f4>)
 80044a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044ac:	f7fd fcba 	bl	8001e24 <HAL_GetTick>
 80044b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fd fcb6 	bl	8001e24 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d904      	bls.n	80044cc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	f000 bc5b 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
 80044c8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044cc:	4baf      	ldr	r3, [pc, #700]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ed      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80c8 	beq.w	8004676 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ec:	4ba7      	ldr	r3, [pc, #668]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d111      	bne.n	800451e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	4ba4      	ldr	r3, [pc, #656]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004500:	4aa2      	ldr	r2, [pc, #648]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800450a:	4ba0      	ldr	r3, [pc, #640]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800450c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800451e:	4b9c      	ldr	r3, [pc, #624]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d119      	bne.n	800455e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800452a:	4b99      	ldr	r3, [pc, #612]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	4a98      	ldr	r2, [pc, #608]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004536:	f7fd fc75 	bl	8001e24 <HAL_GetTick>
 800453a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800453c:	e009      	b.n	8004552 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fd fc71 	bl	8001e24 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d902      	bls.n	8004552 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	f000 bc16 	b.w	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004552:	4b8f      	ldr	r3, [pc, #572]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ef      	beq.n	800453e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d05f      	beq.n	8004626 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004566:	4b89      	ldr	r3, [pc, #548]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800456c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004578:	429a      	cmp	r2, r3
 800457a:	d037      	beq.n	80045ec <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e3f4      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d01b      	beq.n	80045d6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800459e:	4b7b      	ldr	r3, [pc, #492]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a4:	4a79      	ldr	r2, [pc, #484]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045a6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80045aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80045ae:	f7fd fc39 	bl	8001e24 <HAL_GetTick>
 80045b2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fd fc35 	bl	8001e24 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e3da      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80045c8:	4b70      	ldr	r3, [pc, #448]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ef      	bne.n	80045b6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80045d6:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	4969      	ldr	r1, [pc, #420]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80045ec:	4b67      	ldr	r3, [pc, #412]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f2:	4a66      	ldr	r2, [pc, #408]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80045f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80045fc:	f7fd fc12 	bl	8001e24 <HAL_GetTick>
 8004600:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004604:	f7fd fc0e 	bl	8001e24 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b05      	cmp	r3, #5
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e3b3      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004616:	4b5d      	ldr	r3, [pc, #372]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800461c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ef      	beq.n	8004604 <HAL_RCC_OscConfig+0x630>
 8004624:	e01b      	b.n	800465e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004626:	4b59      	ldr	r3, [pc, #356]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800462c:	4a57      	ldr	r2, [pc, #348]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800462e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004636:	f7fd fbf5 	bl	8001e24 <HAL_GetTick>
 800463a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7fd fbf1 	bl	8001e24 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b05      	cmp	r3, #5
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e396      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004650:	4b4e      	ldr	r3, [pc, #312]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ef      	bne.n	800463e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800465e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004662:	2b01      	cmp	r3, #1
 8004664:	d107      	bne.n	8004676 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b49      	ldr	r3, [pc, #292]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	4a47      	ldr	r2, [pc, #284]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800466e:	f023 0304 	bic.w	r3, r3, #4
 8004672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8111 	beq.w	80048a6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800468c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d111      	bne.n	80046bc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b3c      	ldr	r3, [pc, #240]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469e:	4a3b      	ldr	r2, [pc, #236]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046a8:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 80046aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046bc:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d118      	bne.n	80046fa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80046c8:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	4a30      	ldr	r2, [pc, #192]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d4:	f7fd fba6 	bl	8001e24 <HAL_GetTick>
 80046d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046dc:	f7fd fba2 	bl	8001e24 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e347      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80046ee:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RCC_OscConfig+0x7bc>)
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01f      	beq.n	8004746 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004712:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004718:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004722:	4b1a      	ldr	r3, [pc, #104]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004728:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004732:	e018      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004734:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800473a:	4a14      	ldr	r2, [pc, #80]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004744:	e00f      	b.n	8004766 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004746:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474c:	4a0f      	ldr	r2, [pc, #60]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 8004758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800475c:	4a0b      	ldr	r2, [pc, #44]	@ (800478c <HAL_RCC_OscConfig+0x7b8>)
 800475e:	f023 0304 	bic.w	r3, r3, #4
 8004762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d057      	beq.n	800481e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800476e:	f7fd fb59 	bl	8001e24 <HAL_GetTick>
 8004772:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004774:	e00e      	b.n	8004794 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f7fd fb55 	bl	8001e24 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004784:	4293      	cmp	r3, r2
 8004786:	d905      	bls.n	8004794 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e2f8      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
 800478c:	46020c00 	.word	0x46020c00
 8004790:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004794:	4b9c      	ldr	r3, [pc, #624]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0e9      	beq.n	8004776 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01b      	beq.n	80047e6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047ae:	4b96      	ldr	r3, [pc, #600]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80047b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047b4:	4a94      	ldr	r2, [pc, #592]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80047b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fd fb30 	bl	8001e24 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e2d3      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80047d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80047d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ed      	beq.n	80047c0 <HAL_RCC_OscConfig+0x7ec>
 80047e4:	e053      	b.n	800488e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047e6:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80047e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ec:	4a86      	ldr	r2, [pc, #536]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80047ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7fd fb14 	bl	8001e24 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e2b7      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800480e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1ed      	bne.n	80047f8 <HAL_RCC_OscConfig+0x824>
 800481c:	e037      	b.n	800488e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800481e:	f7fd fb01 	bl	8001e24 <HAL_GetTick>
 8004822:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fd fafd 	bl	8001e24 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e2a0      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800483c:	4b72      	ldr	r3, [pc, #456]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800483e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ed      	bne.n	8004826 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800484a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800484c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01a      	beq.n	800488e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004858:	4b6b      	ldr	r3, [pc, #428]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800485a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800485e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004864:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd fadb 	bl	8001e24 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e27e      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004880:	4b61      	ldr	r3, [pc, #388]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ed      	bne.n	800486a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800488e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004896:	4b5c      	ldr	r3, [pc, #368]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004898:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800489c:	4a5a      	ldr	r2, [pc, #360]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800489e:	f023 0304 	bic.w	r3, r3, #4
 80048a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d036      	beq.n	8004920 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d019      	beq.n	80048ee <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80048ba:	4b53      	ldr	r3, [pc, #332]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a52      	ldr	r2, [pc, #328]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80048c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80048c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048c6:	f7fd faad 	bl	8001e24 <HAL_GetTick>
 80048ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ce:	f7fd faa9 	bl	8001e24 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e24e      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048e0:	4b49      	ldr	r3, [pc, #292]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x8fa>
 80048ec:	e018      	b.n	8004920 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80048ee:	4b46      	ldr	r3, [pc, #280]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a45      	ldr	r2, [pc, #276]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80048f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048fa:	f7fd fa93 	bl	8001e24 <HAL_GetTick>
 80048fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004902:	f7fd fa8f 	bl	8001e24 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e234      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004914:	4b3c      	ldr	r3, [pc, #240]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d036      	beq.n	800499a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	2b00      	cmp	r3, #0
 8004932:	d019      	beq.n	8004968 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004934:	4b34      	ldr	r3, [pc, #208]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a33      	ldr	r2, [pc, #204]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800493a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800493e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004940:	f7fd fa70 	bl	8001e24 <HAL_GetTick>
 8004944:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004948:	f7fd fa6c 	bl	8001e24 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e211      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800495a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x974>
 8004966:	e018      	b.n	800499a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004968:	4b27      	ldr	r3, [pc, #156]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a26      	ldr	r2, [pc, #152]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 800496e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004972:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004974:	f7fd fa56 	bl	8001e24 <HAL_GetTick>
 8004978:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800497c:	f7fd fa52 	bl	8001e24 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e1f7      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800498e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d07f      	beq.n	8004aa6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d062      	beq.n	8004a74 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80049ae:	4b16      	ldr	r3, [pc, #88]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049b8:	6093      	str	r3, [r2, #8]
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c6:	4910      	ldr	r1, [pc, #64]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049d4:	d309      	bcc.n	80049ea <HAL_RCC_OscConfig+0xa16>
 80049d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 021f 	bic.w	r2, r3, #31
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4909      	ldr	r1, [pc, #36]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60cb      	str	r3, [r1, #12]
 80049e8:	e02a      	b.n	8004a40 <HAL_RCC_OscConfig+0xa6c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da0c      	bge.n	8004a0c <HAL_RCC_OscConfig+0xa38>
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	015b      	lsls	r3, r3, #5
 8004a00:	4901      	ldr	r1, [pc, #4]	@ (8004a08 <HAL_RCC_OscConfig+0xa34>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]
 8004a06:	e01b      	b.n	8004a40 <HAL_RCC_OscConfig+0xa6c>
 8004a08:	46020c00 	.word	0x46020c00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a14:	d30a      	bcc.n	8004a2c <HAL_RCC_OscConfig+0xa58>
 8004a16:	4ba1      	ldr	r3, [pc, #644]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	029b      	lsls	r3, r3, #10
 8004a24:	499d      	ldr	r1, [pc, #628]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
 8004a2a:	e009      	b.n	8004a40 <HAL_RCC_OscConfig+0xa6c>
 8004a2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	03db      	lsls	r3, r3, #15
 8004a3a:	4998      	ldr	r1, [pc, #608]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004a40:	4b96      	ldr	r3, [pc, #600]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a95      	ldr	r2, [pc, #596]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a46:	f043 0310 	orr.w	r3, r3, #16
 8004a4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a4c:	f7fd f9ea 	bl	8001e24 <HAL_GetTick>
 8004a50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004a54:	f7fd f9e6 	bl	8001e24 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e18b      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004a66:	4b8d      	ldr	r3, [pc, #564]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0xa80>
 8004a72:	e018      	b.n	8004aa6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004a74:	4b89      	ldr	r3, [pc, #548]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a88      	ldr	r2, [pc, #544]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a80:	f7fd f9d0 	bl	8001e24 <HAL_GetTick>
 8004a84:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004a88:	f7fd f9cc 	bl	8001e24 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e171      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004a9a:	4b80      	ldr	r3, [pc, #512]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8166 	beq.w	8004d7c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab6:	4b79      	ldr	r3, [pc, #484]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	f000 80f2 	beq.w	8004ca8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f040 80c5 	bne.w	8004c58 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b73      	ldr	r3, [pc, #460]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a72      	ldr	r2, [pc, #456]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ada:	f7fd f9a3 	bl	8001e24 <HAL_GetTick>
 8004ade:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fd f99f 	bl	8001e24 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e144      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004af4:	4b69      	ldr	r3, [pc, #420]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b00:	4b66      	ldr	r3, [pc, #408]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d111      	bne.n	8004b32 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	4b63      	ldr	r3, [pc, #396]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b14:	4a61      	ldr	r2, [pc, #388]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004b32:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca0 <HAL_RCC_OscConfig+0xccc>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004b46:	4b56      	ldr	r3, [pc, #344]	@ (8004ca0 <HAL_RCC_OscConfig+0xccc>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a55      	ldr	r2, [pc, #340]	@ (8004ca0 <HAL_RCC_OscConfig+0xccc>)
 8004b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b50:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004b52:	4b52      	ldr	r3, [pc, #328]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0212      	lsls	r2, r2, #8
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b70:	430a      	orrs	r2, r1
 8004b72:	494a      	ldr	r1, [pc, #296]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b78:	4b48      	ldr	r3, [pc, #288]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7c:	4b49      	ldr	r3, [pc, #292]	@ (8004ca4 <HAL_RCC_OscConfig+0xcd0>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b84:	3a01      	subs	r2, #1
 8004b86:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b8e:	3a01      	subs	r2, #1
 8004b90:	0252      	lsls	r2, r2, #9
 8004b92:	b292      	uxth	r2, r2
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	0412      	lsls	r2, r2, #16
 8004b9e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004ba2:	4311      	orrs	r1, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	0612      	lsls	r2, r2, #24
 8004bac:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	493a      	ldr	r1, [pc, #232]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004bb8:	4b38      	ldr	r3, [pc, #224]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	4a37      	ldr	r2, [pc, #220]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc8:	4a34      	ldr	r2, [pc, #208]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004bce:	4b33      	ldr	r3, [pc, #204]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	4a32      	ldr	r2, [pc, #200]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bd4:	f043 0310 	orr.w	r3, r3, #16
 8004bd8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004bda:	4b30      	ldr	r3, [pc, #192]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	f023 020c 	bic.w	r2, r3, #12
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be6:	492d      	ldr	r1, [pc, #180]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004bec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <HAL_RCC_OscConfig+0xccc>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a29      	ldr	r2, [pc, #164]	@ (8004ca0 <HAL_RCC_OscConfig+0xccc>)
 8004bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bfe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004c00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0e:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004c18:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c24:	f7fd f8fe 	bl	8001e24 <HAL_GetTick>
 8004c28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fd f8fa 	bl	8001e24 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e09f      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c3e:	4b17      	ldr	r3, [pc, #92]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c4a:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	4a13      	ldr	r2, [pc, #76]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c54:	6293      	str	r3, [r2, #40]	@ 0x28
 8004c56:	e091      	b.n	8004d7c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c64:	f7fd f8de 	bl	8001e24 <HAL_GetTick>
 8004c68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fd f8da 	bl	8001e24 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e07f      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c7e:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004c8a:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	4a03      	ldr	r2, [pc, #12]	@ (8004c9c <HAL_RCC_OscConfig+0xcc8>)
 8004c90:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	6293      	str	r3, [r2, #40]	@ 0x28
 8004c9a:	e06f      	b.n	8004d7c <HAL_RCC_OscConfig+0xda8>
 8004c9c:	46020c00 	.word	0x46020c00
 8004ca0:	46020800 	.word	0x46020800
 8004ca4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004ca8:	4b37      	ldr	r3, [pc, #220]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cae:	4b36      	ldr	r3, [pc, #216]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d039      	beq.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0203 	and.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d132      	bne.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d129      	bne.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d122      	bne.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d11a      	bne.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	0a5b      	lsrs	r3, r3, #9
 8004cfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d111      	bne.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d18:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d108      	bne.n	8004d30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	0e1b      	lsrs	r3, r3, #24
 8004d22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e024      	b.n	8004d7e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d34:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	08db      	lsrs	r3, r3, #3
 8004d3a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d01a      	beq.n	8004d7c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004d46:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fd f867 	bl	8001e24 <HAL_GetTick>
 8004d56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004d58:	bf00      	nop
 8004d5a:	f7fd f863 	bl	8001e24 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d0f9      	beq.n	8004d5a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6a:	4a07      	ldr	r2, [pc, #28]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	4a04      	ldr	r2, [pc, #16]	@ (8004d88 <HAL_RCC_OscConfig+0xdb4>)
 8004d76:	f043 0310 	orr.w	r3, r3, #16
 8004d7a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3738      	adds	r7, #56	@ 0x38
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	46020c00 	.word	0x46020c00

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e1d9      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b9b      	ldr	r3, [pc, #620]	@ (8005010 <HAL_RCC_ClockConfig+0x284>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d910      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b98      	ldr	r3, [pc, #608]	@ (8005010 <HAL_RCC_ClockConfig+0x284>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	4996      	ldr	r1, [pc, #600]	@ (8005010 <HAL_RCC_ClockConfig+0x284>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b94      	ldr	r3, [pc, #592]	@ (8005010 <HAL_RCC_ClockConfig+0x284>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e1c1      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	4b8c      	ldr	r3, [pc, #560]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d908      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004dec:	4b89      	ldr	r3, [pc, #548]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	4986      	ldr	r1, [pc, #536]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d012      	beq.n	8004e30 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	4b81      	ldr	r3, [pc, #516]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d909      	bls.n	8004e30 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004e1c:	4b7d      	ldr	r3, [pc, #500]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	497a      	ldr	r1, [pc, #488]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d908      	bls.n	8004e5e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b71      	ldr	r3, [pc, #452]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	496e      	ldr	r1, [pc, #440]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d010      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	4b69      	ldr	r3, [pc, #420]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d908      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004e7a:	4b66      	ldr	r3, [pc, #408]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f023 020f 	bic.w	r2, r3, #15
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4963      	ldr	r1, [pc, #396]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80d2 	beq.w	800503e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d143      	bne.n	8004f2e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d110      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b57      	ldr	r3, [pc, #348]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eba:	4a56      	ldr	r2, [pc, #344]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ec4:	4b53      	ldr	r3, [pc, #332]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004ed6:	f7fc ffa5 	bl	8001e24 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004edc:	4b4e      	ldr	r3, [pc, #312]	@ (8005018 <HAL_RCC_ClockConfig+0x28c>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00f      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004eea:	f7fc ff9b 	bl	8001e24 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e12b      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004efc:	4b46      	ldr	r3, [pc, #280]	@ (8005018 <HAL_RCC_ClockConfig+0x28c>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f0e:	4b41      	ldr	r3, [pc, #260]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f14:	4a3f      	ldr	r2, [pc, #252]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f16:	f023 0304 	bic.w	r3, r3, #4
 8004f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d121      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e112      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f36:	4b37      	ldr	r3, [pc, #220]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d115      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e106      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f4e:	4b31      	ldr	r3, [pc, #196]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0fa      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e0f2      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004f6e:	4b29      	ldr	r3, [pc, #164]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f023 0203 	bic.w	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4926      	ldr	r1, [pc, #152]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004f80:	f7fc ff50 	bl	8001e24 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d112      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fc ff48 	bl	8001e24 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0d6      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d1ee      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x204>
 8004fb2:	e044      	b.n	800503e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d112      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbe:	f7fc ff31 	bl	8001e24 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e0bf      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d1ee      	bne.n	8004fbe <HAL_RCC_ClockConfig+0x232>
 8004fe0:	e02d      	b.n	800503e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d123      	bne.n	8005032 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fc ff1a 	bl	8001e24 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0a8      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005002:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <HAL_RCC_ClockConfig+0x288>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_ClockConfig+0x260>
 800500e:	e016      	b.n	800503e <HAL_RCC_ClockConfig+0x2b2>
 8005010:	40022000 	.word	0x40022000
 8005014:	46020c00 	.word	0x46020c00
 8005018:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501c:	f7fc ff02 	bl	8001e24 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e090      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005032:	4b4a      	ldr	r3, [pc, #296]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b04      	cmp	r3, #4
 800503c:	d1ee      	bne.n	800501c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	4b43      	ldr	r3, [pc, #268]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	429a      	cmp	r2, r3
 8005058:	d208      	bcs.n	800506c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800505a:	4b40      	ldr	r3, [pc, #256]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 020f 	bic.w	r2, r3, #15
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	493d      	ldr	r1, [pc, #244]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800506c:	4b3c      	ldr	r3, [pc, #240]	@ (8005160 <HAL_RCC_ClockConfig+0x3d4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d210      	bcs.n	800509c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <HAL_RCC_ClockConfig+0x3d4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 020f 	bic.w	r2, r3, #15
 8005082:	4937      	ldr	r1, [pc, #220]	@ (8005160 <HAL_RCC_ClockConfig+0x3d4>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <HAL_RCC_ClockConfig+0x3d4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e05b      	b.n	8005154 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	4b2b      	ldr	r3, [pc, #172]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d208      	bcs.n	80050ca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b28      	ldr	r3, [pc, #160]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4925      	ldr	r1, [pc, #148]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	4b20      	ldr	r3, [pc, #128]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d209      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80050e8:	4b1c      	ldr	r3, [pc, #112]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	4919      	ldr	r1, [pc, #100]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d010      	beq.n	800512a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005114:	429a      	cmp	r2, r3
 8005116:	d208      	bcs.n	800512a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005118:	4b10      	ldr	r3, [pc, #64]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	490d      	ldr	r1, [pc, #52]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_RCC_ClockConfig+0x3d0>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	490a      	ldr	r1, [pc, #40]	@ (8005164 <HAL_RCC_ClockConfig+0x3d8>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	4a09      	ldr	r2, [pc, #36]	@ (8005168 <HAL_RCC_ClockConfig+0x3dc>)
 8005142:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005144:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_ClockConfig+0x3e0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fc fde1 	bl	8001d10 <HAL_InitTick>
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]

  return status;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	46020c00 	.word	0x46020c00
 8005160:	40022000 	.word	0x40022000
 8005164:	08009598 	.word	0x08009598
 8005168:	20000000 	.word	0x20000000
 800516c:	20000004 	.word	0x20000004

08005170 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b08b      	sub	sp, #44	@ 0x2c
 8005174:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517e:	4b78      	ldr	r3, [pc, #480]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005188:	4b75      	ldr	r3, [pc, #468]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d121      	bne.n	80051e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d11e      	bne.n	80051e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80051a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80051b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051b6:	0b1b      	lsrs	r3, r3, #12
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051be:	e005      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80051c0:	4b67      	ldr	r3, [pc, #412]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	0f1b      	lsrs	r3, r3, #28
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051cc:	4a65      	ldr	r2, [pc, #404]	@ (8005364 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d110      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051e0:	e00d      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d102      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	e004      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80051fc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b0c      	cmp	r3, #12
 8005202:	f040 80a5 	bne.w	8005350 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005206:	4b56      	ldr	r3, [pc, #344]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005210:	4b53      	ldr	r3, [pc, #332]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800521e:	4b50      	ldr	r3, [pc, #320]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800522a:	4b4d      	ldr	r3, [pc, #308]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	08db      	lsrs	r3, r3, #3
 8005230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d003      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0xe4>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d022      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x128>
 8005252:	e043      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800536c <HAL_RCC_GetSysClockFreq+0x1fc>
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b3e      	ldr	r3, [pc, #248]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005276:	ed97 6a01 	vldr	s12, [r7, #4]
 800527a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005370 <HAL_RCC_GetSysClockFreq+0x200>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005296:	e046      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800536c <HAL_RCC_GetSysClockFreq+0x1fc>
 80052a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80052be:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005370 <HAL_RCC_GetSysClockFreq+0x200>
 80052c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80052ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052da:	e024      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005304:	ed97 6a01 	vldr	s12, [r7, #4]
 8005308:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005370 <HAL_RCC_GetSysClockFreq+0x200>
 800530c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005310:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005314:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005318:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800531c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005324:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005326:	4b0e      	ldr	r3, [pc, #56]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532a:	0e1b      	lsrs	r3, r3, #24
 800532c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005330:	3301      	adds	r3, #1
 8005332:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800533e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534a:	ee17 3a90 	vmov	r3, s15
 800534e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005350:	6a3b      	ldr	r3, [r7, #32]
}
 8005352:	4618      	mov	r0, r3
 8005354:	372c      	adds	r7, #44	@ 0x2c
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	46020c00 	.word	0x46020c00
 8005364:	080095b0 	.word	0x080095b0
 8005368:	00f42400 	.word	0x00f42400
 800536c:	4b742400 	.word	0x4b742400
 8005370:	46000000 	.word	0x46000000

08005374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005378:	f7ff fefa 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_RCC_GetHCLKFreq+0x28>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	4906      	ldr	r1, [pc, #24]	@ (80053a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005388:	5ccb      	ldrb	r3, [r1, r3]
 800538a:	fa22 f303 	lsr.w	r3, r2, r3
 800538e:	4a05      	ldr	r2, [pc, #20]	@ (80053a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005390:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005392:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005394:	681b      	ldr	r3, [r3, #0]
}
 8005396:	4618      	mov	r0, r3
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	46020c00 	.word	0x46020c00
 80053a0:	08009598 	.word	0x08009598
 80053a4:	20000000 	.word	0x20000000

080053a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80053ac:	f7ff ffe2 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	4903      	ldr	r1, [pc, #12]	@ (80053cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053be:	5ccb      	ldrb	r3, [r1, r3]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	46020c00 	.word	0x46020c00
 80053cc:	080095a8 	.word	0x080095a8

080053d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80053d4:	f7ff ffce 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053d8:	4602      	mov	r2, r0
 80053da:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	4903      	ldr	r1, [pc, #12]	@ (80053f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e6:	5ccb      	ldrb	r3, [r1, r3]
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	46020c00 	.word	0x46020c00
 80053f4:	080095a8 	.word	0x080095a8

080053f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80053fc:	f7ff ffba 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	091b      	lsrs	r3, r3, #4
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4903      	ldr	r1, [pc, #12]	@ (800541c <HAL_RCC_GetPCLK3Freq+0x24>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	46020c00 	.word	0x46020c00
 800541c:	080095a8 	.word	0x080095a8

08005420 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005428:	4b3e      	ldr	r3, [pc, #248]	@ (8005524 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005436:	f7fe fd4f 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 800543a:	6178      	str	r0, [r7, #20]
 800543c:	e019      	b.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b39      	ldr	r3, [pc, #228]	@ (8005524 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005444:	4a37      	ldr	r2, [pc, #220]	@ (8005524 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800544e:	4b35      	ldr	r3, [pc, #212]	@ (8005524 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800545c:	f7fe fd3c 	bl	8003ed8 <HAL_PWREx_GetVoltageRange>
 8005460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005462:	4b30      	ldr	r3, [pc, #192]	@ (8005524 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005468:	4a2e      	ldr	r2, [pc, #184]	@ (8005524 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800546a:	f023 0304 	bic.w	r3, r3, #4
 800546e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005478:	d003      	beq.n	8005482 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005480:	d109      	bne.n	8005496 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005488:	d202      	bcs.n	8005490 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800548a:	2301      	movs	r3, #1
 800548c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800548e:	e033      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005490:	2300      	movs	r3, #0
 8005492:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005494:	e030      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800549c:	d208      	bcs.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a4:	d102      	bne.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80054a6:	2303      	movs	r3, #3
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e025      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e035      	b.n	800551c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b6:	d90f      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80054c4:	d902      	bls.n	80054cc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e015      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80054cc:	2301      	movs	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e012      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e00f      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054de:	d109      	bne.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e6:	d102      	bne.n	80054ee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80054e8:	2301      	movs	r3, #1
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e004      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80054ee:	2302      	movs	r3, #2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e001      	b.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80054f4:	2301      	movs	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 020f 	bic.w	r2, r3, #15
 8005500:	4909      	ldr	r1, [pc, #36]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005508:	4b07      	ldr	r3, [pc, #28]	@ (8005528 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	429a      	cmp	r2, r3
 8005514:	d001      	beq.n	800551a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	46020c00 	.word	0x46020c00
 8005528:	40022000 	.word	0x40022000

0800552c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b0ba      	sub	sp, #232	@ 0xe8
 8005532:	af00      	add	r7, sp, #0
 8005534:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005538:	2300      	movs	r3, #0
 800553a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800553e:	2300      	movs	r3, #0
 8005540:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f002 0401 	and.w	r4, r2, #1
 8005550:	2500      	movs	r5, #0
 8005552:	ea54 0305 	orrs.w	r3, r4, r5
 8005556:	d00b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005558:	4bcb      	ldr	r3, [pc, #812]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800555a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800555e:	f023 0103 	bic.w	r1, r3, #3
 8005562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005568:	4ac7      	ldr	r2, [pc, #796]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800556a:	430b      	orrs	r3, r1
 800556c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f002 0802 	and.w	r8, r2, #2
 800557c:	f04f 0900 	mov.w	r9, #0
 8005580:	ea58 0309 	orrs.w	r3, r8, r9
 8005584:	d00b      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005586:	4bc0      	ldr	r3, [pc, #768]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800558c:	f023 010c 	bic.w	r1, r3, #12
 8005590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	4abc      	ldr	r2, [pc, #752]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005598:	430b      	orrs	r3, r1
 800559a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f002 0a04 	and.w	sl, r2, #4
 80055aa:	f04f 0b00 	mov.w	fp, #0
 80055ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80055b2:	d00b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80055b4:	4bb4      	ldr	r3, [pc, #720]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ba:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80055be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	4ab0      	ldr	r2, [pc, #704]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f002 0308 	and.w	r3, r2, #8
 80055d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80055e6:	460b      	mov	r3, r1
 80055e8:	4313      	orrs	r3, r2
 80055ea:	d00b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80055ec:	4ba6      	ldr	r3, [pc, #664]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fc:	4aa2      	ldr	r2, [pc, #648]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f002 0310 	and.w	r3, r2, #16
 8005610:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800561a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800561e:	460b      	mov	r3, r1
 8005620:	4313      	orrs	r3, r2
 8005622:	d00b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005624:	4b98      	ldr	r3, [pc, #608]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800562a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800562e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005634:	4a94      	ldr	r2, [pc, #592]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005636:	430b      	orrs	r3, r1
 8005638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800563c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f002 0320 	and.w	r3, r2, #32
 8005648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800564c:	2300      	movs	r3, #0
 800564e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005652:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005656:	460b      	mov	r3, r1
 8005658:	4313      	orrs	r3, r2
 800565a:	d00b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800565c:	4b8a      	ldr	r3, [pc, #552]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005662:	f023 0107 	bic.w	r1, r3, #7
 8005666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800566a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800566c:	4a86      	ldr	r2, [pc, #536]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566e:	430b      	orrs	r3, r1
 8005670:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800568a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	d00b      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005694:	4b7c      	ldr	r3, [pc, #496]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800569a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800569e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a4:	4a78      	ldr	r2, [pc, #480]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a6:	430b      	orrs	r3, r1
 80056a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d00b      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80056cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80056f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056fa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d00b      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005704:	4b60      	ldr	r3, [pc, #384]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800570a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800570e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005714:	4a5c      	ldr	r2, [pc, #368]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005716:	430b      	orrs	r3, r1
 8005718:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800571c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005732:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005736:	460b      	mov	r3, r1
 8005738:	4313      	orrs	r3, r2
 800573a:	d00b      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800573c:	4b52      	ldr	r3, [pc, #328]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800573e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005742:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800574c:	4a4e      	ldr	r2, [pc, #312]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800574e:	430b      	orrs	r3, r1
 8005750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005760:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005764:	2300      	movs	r3, #0
 8005766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800576a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800576e:	460b      	mov	r3, r1
 8005770:	4313      	orrs	r3, r2
 8005772:	d00b      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005774:	4b44      	ldr	r3, [pc, #272]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800577a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800577e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005784:	4a40      	ldr	r2, [pc, #256]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005786:	430b      	orrs	r3, r1
 8005788:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800578c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057b2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80057b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057bc:	4a32      	ldr	r2, [pc, #200]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057be:	430b      	orrs	r3, r1
 80057c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80057c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80057de:	460b      	mov	r3, r1
 80057e0:	4313      	orrs	r3, r2
 80057e2:	d00c      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80057e4:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f6:	4a24      	ldr	r2, [pc, #144]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800580a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800580c:	2300      	movs	r3, #0
 800580e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005810:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005814:	460b      	mov	r3, r1
 8005816:	4313      	orrs	r3, r2
 8005818:	d04f      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800581a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005822:	2b80      	cmp	r3, #128	@ 0x80
 8005824:	d02d      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d827      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800582a:	2b60      	cmp	r3, #96	@ 0x60
 800582c:	d02e      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800582e:	2b60      	cmp	r3, #96	@ 0x60
 8005830:	d823      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005832:	2b40      	cmp	r3, #64	@ 0x40
 8005834:	d006      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d81f      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800583e:	2b20      	cmp	r3, #32
 8005840:	d011      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005842:	e01a      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005844:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800584e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005850:	e01d      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005856:	3308      	adds	r3, #8
 8005858:	4618      	mov	r0, r3
 800585a:	f002 fa17 	bl	8007c8c <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005864:	e013      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586a:	332c      	adds	r3, #44	@ 0x2c
 800586c:	4618      	mov	r0, r3
 800586e:	f002 faa5 	bl	8007dbc <RCCEx_PLL3_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005878:	e009      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005880:	e005      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005882:	bf00      	nop
 8005884:	e003      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005886:	bf00      	nop
 8005888:	46020c00 	.word	0x46020c00
        break;
 800588c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10d      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005896:	4bb6      	ldr	r3, [pc, #728]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005898:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800589c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80058a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a8:	4ab1      	ldr	r2, [pc, #708]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80058c8:	2300      	movs	r3, #0
 80058ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80058cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d053      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80058d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e2:	d033      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e8:	d82c      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ee:	d02f      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80058f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f4:	d826      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80058f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058fa:	d008      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005900:	d820      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590a:	d011      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800590c:	e01a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800590e:	4b98      	ldr	r3, [pc, #608]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	4a97      	ldr	r2, [pc, #604]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005918:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800591a:	e01a      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800591c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005920:	3308      	adds	r3, #8
 8005922:	4618      	mov	r0, r3
 8005924:	f002 f9b2 	bl	8007c8c <RCCEx_PLL2_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800592e:	e010      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005934:	332c      	adds	r3, #44	@ 0x2c
 8005936:	4618      	mov	r0, r3
 8005938:	f002 fa40 	bl	8007dbc <RCCEx_PLL3_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005942:	e006      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800594a:	e002      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005952:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800595a:	4b85      	ldr	r3, [pc, #532]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800595c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005960:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800596c:	4a80      	ldr	r2, [pc, #512]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800596e:	430b      	orrs	r3, r1
 8005970:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005974:	e003      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800597a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800597e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800598a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800598c:	2300      	movs	r3, #0
 800598e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005990:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d046      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059a6:	d028      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80059a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059ac:	d821      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80059ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059b2:	d022      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80059b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059b8:	d81b      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80059ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059be:	d01c      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80059c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059c4:	d815      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80059c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ca:	d008      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059d0:	d80f      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d011      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059da:	d00e      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80059dc:	e009      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059e2:	3308      	adds	r3, #8
 80059e4:	4618      	mov	r0, r3
 80059e6:	f002 f951 	bl	8007c8c <RCCEx_PLL2_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059f0:	e004      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80059fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10d      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005a04:	4b5a      	ldr	r3, [pc, #360]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a0a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a16:	4a56      	ldr	r2, [pc, #344]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a1e:	e003      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a34:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a36:	2300      	movs	r3, #0
 8005a38:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a3a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d03f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d81e      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a97 	.word	0x08005a97
 8005a5c:	08005a6d 	.word	0x08005a6d
 8005a60:	08005a7b 	.word	0x08005a7b
 8005a64:	08005a97 	.word	0x08005a97
 8005a68:	08005a97 	.word	0x08005a97
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a6c:	4b40      	ldr	r3, [pc, #256]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	4a3f      	ldr	r2, [pc, #252]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a76:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005a78:	e00e      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a7e:	332c      	adds	r3, #44	@ 0x2c
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 f99b 	bl	8007dbc <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a8c:	e004      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005a96:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005aa0:	4b33      	ldr	r3, [pc, #204]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005aa6:	f023 0107 	bic.w	r1, r3, #7
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ac0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ad6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	d04d      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005aec:	d028      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005af2:	d821      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005af4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005af8:	d024      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005afa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005afe:	d81b      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b04:	d00e      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b0a:	d815      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b14:	d110      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b16:	4b16      	ldr	r3, [pc, #88]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b20:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b22:	e012      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b28:	332c      	adds	r3, #44	@ 0x2c
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 f946 	bl	8007dbc <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b36:	e008      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b3e:	e004      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005b40:	bf00      	nop
 8005b42:	e002      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005b48:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d110      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005b52:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b64:	4a02      	ldr	r2, [pc, #8]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b66:	430b      	orrs	r3, r1
 8005b68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b6c:	e006      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005b6e:	bf00      	nop
 8005b70:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f000 80b5 	beq.w	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ba0:	4b9d      	ldr	r3, [pc, #628]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d113      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bae:	4b9a      	ldr	r3, [pc, #616]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bb4:	4a98      	ldr	r2, [pc, #608]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bb6:	f043 0304 	orr.w	r3, r3, #4
 8005bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005bbe:	4b96      	ldr	r3, [pc, #600]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005bd6:	4b91      	ldr	r3, [pc, #580]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bda:	4a90      	ldr	r2, [pc, #576]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be2:	f7fc f91f 	bl	8001e24 <HAL_GetTick>
 8005be6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005bea:	e00b      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bec:	f7fc f91a 	bl	8001e24 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d903      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c02:	e005      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005c04:	4b85      	ldr	r3, [pc, #532]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ed      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005c10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d165      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c18:	4b7f      	ldr	r3, [pc, #508]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d023      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c3e:	4b76      	ldr	r3, [pc, #472]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c4c:	4b72      	ldr	r3, [pc, #456]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c52:	4a71      	ldr	r2, [pc, #452]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c62:	4a6d      	ldr	r2, [pc, #436]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d019      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fc f8cf 	bl	8001e24 <HAL_GetTick>
 8005c86:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8a:	e00d      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8c:	f7fc f8ca 	bl	8001e24 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c96:	1ad2      	subs	r2, r2, r3
 8005c98:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d903      	bls.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005ca6:	e006      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0ea      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005cb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005cbe:	4b56      	ldr	r3, [pc, #344]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cc4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ccc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cd0:	4a51      	ldr	r2, [pc, #324]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cde:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ce8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cec:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf4:	4b48      	ldr	r3, [pc, #288]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfa:	4a47      	ldr	r2, [pc, #284]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cfc:	f023 0304 	bic.w	r3, r3, #4
 8005d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d12:	2300      	movs	r3, #0
 8005d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d042      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005d2c:	d022      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005d2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005d32:	d81b      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d38:	d011      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d3e:	d815      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d019      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d48:	d110      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d4e:	3308      	adds	r3, #8
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 ff9b 	bl	8007c8c <RCCEx_PLL2_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d5c:	e00d      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	4a2d      	ldr	r2, [pc, #180]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d68:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005d6a:	e006      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d72:	e002      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005d74:	bf00      	nop
 8005d76:	e000      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005d78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005d82:	4b25      	ldr	r3, [pc, #148]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d88:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d94:	4a20      	ldr	r2, [pc, #128]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d96:	430b      	orrs	r3, r1
 8005d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005da2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005db2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db4:	2300      	movs	r3, #0
 8005db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005db8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	d032      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dce:	d00b      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd4:	d804      	bhi.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dde:	d007      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005de6:	e004      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005de8:	bf00      	nop
 8005dea:	e002      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005dec:	bf00      	nop
 8005dee:	e000      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005df0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005df2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005dfa:	4b07      	ldr	r3, [pc, #28]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e0c:	4a02      	ldr	r2, [pc, #8]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e0e:	430b      	orrs	r3, r1
 8005e10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005e16:	bf00      	nop
 8005e18:	46020c00 	.word	0x46020c00
 8005e1c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005e28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d00c      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005e44:	4b98      	ldr	r3, [pc, #608]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e4a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e56:	4a94      	ldr	r2, [pc, #592]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e74:	460b      	mov	r3, r1
 8005e76:	4313      	orrs	r3, r2
 8005e78:	d019      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e86:	d105      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e88:	4b87      	ldr	r3, [pc, #540]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8c:	4a86      	ldr	r2, [pc, #536]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e92:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005e94:	4b84      	ldr	r3, [pc, #528]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e9a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ea6:	4a80      	ldr	r2, [pc, #512]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ec0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005eca:	4b77      	ldr	r3, [pc, #476]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ed0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005edc:	4972      	ldr	r1, [pc, #456]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005efa:	460b      	mov	r3, r1
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d00c      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005f00:	4b69      	ldr	r3, [pc, #420]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005f12:	4965      	ldr	r1, [pc, #404]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f30:	460b      	mov	r3, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	d00c      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005f36:	4b5c      	ldr	r3, [pc, #368]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f3c:	f023 0218 	bic.w	r2, r3, #24
 8005f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f48:	4957      	ldr	r1, [pc, #348]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d032      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f78:	d105      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f84:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f92:	d108      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f98:	3308      	adds	r3, #8
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fe76 	bl	8007c8c <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8005fa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10d      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005fae:	4b3e      	ldr	r3, [pc, #248]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fb4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fc0:	4939      	ldr	r1, [pc, #228]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005fc8:	e003      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fce:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d03a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ffa:	d00e      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006000:	d815      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d017      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006006:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600a:	d110      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600c:	4b26      	ldr	r3, [pc, #152]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	4a25      	ldr	r2, [pc, #148]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006016:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006018:	e00e      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800601a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800601e:	3308      	adds	r3, #8
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fe33 	bl	8007c8c <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800602c:	e004      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006034:	e000      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006036:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006038:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10d      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006040:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006052:	4915      	ldr	r1, [pc, #84]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006060:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	2300      	movs	r3, #0
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	e9d7 1200 	ldrd	r1, r2, [r7]
 800607a:	460b      	mov	r3, r1
 800607c:	4313      	orrs	r3, r2
 800607e:	d00c      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006080:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006086:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800608a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800608e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006092:	4905      	ldr	r1, [pc, #20]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800609a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800609e:	4618      	mov	r0, r3
 80060a0:	37e8      	adds	r7, #232	@ 0xe8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a8:	46020c00 	.word	0x46020c00

080060ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80060b4:	4ba6      	ldr	r3, [pc, #664]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060bc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80060be:	4ba4      	ldr	r3, [pc, #656]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80060c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80060d6:	4b9e      	ldr	r3, [pc, #632]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80060e2:	4b9b      	ldr	r3, [pc, #620]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	08db      	lsrs	r3, r3, #3
 80060e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d062      	beq.n	80061ca <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b03      	cmp	r3, #3
 8006108:	f200 8081 	bhi.w	800620e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d024      	beq.n	800615c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d17a      	bne.n	800620e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b89      	ldr	r3, [pc, #548]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800612c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800613a:	ed97 6a02 	vldr	s12, [r7, #8]
 800613e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800614a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615a:	e08f      	b.n	800627c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800615c:	4b7c      	ldr	r3, [pc, #496]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006168:	4b79      	ldr	r3, [pc, #484]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0f1b      	lsrs	r3, r3, #28
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	e006      	b.n	8006182 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006174:	4b76      	ldr	r3, [pc, #472]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	0f1b      	lsrs	r3, r3, #28
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	4a76      	ldr	r2, [pc, #472]	@ (800635c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061c8:	e058      	b.n	800627c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006354 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80061d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80061ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80061fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006200:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800620c:	e036      	b.n	800627c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800620e:	4b50      	ldr	r3, [pc, #320]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800621a:	4b4d      	ldr	r3, [pc, #308]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0f1b      	lsrs	r3, r3, #28
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006226:	4b4a      	ldr	r3, [pc, #296]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	0f1b      	lsrs	r3, r3, #28
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	4a49      	ldr	r2, [pc, #292]	@ (800635c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a02 	vldr	s12, [r7, #8]
 800625e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006358 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800627a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800627c:	4b34      	ldr	r3, [pc, #208]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d017      	beq.n	80062b8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006288:	4b31      	ldr	r3, [pc, #196]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800628a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628c:	0a5b      	lsrs	r3, r3, #9
 800628e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800629a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800629e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80062a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ae:	ee17 2a90 	vmov	r2, s15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e002      	b.n	80062be <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80062be:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d017      	beq.n	80062fa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80062ca:	4b21      	ldr	r3, [pc, #132]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80062cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ce:	0c1b      	lsrs	r3, r3, #16
 80062d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80062dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80062e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f0:	ee17 2a90 	vmov	r2, s15
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	e002      	b.n	8006300 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006300:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800630c:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800630e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006310:	0e1b      	lsrs	r3, r3, #24
 8006312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800631e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006322:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006326:	edd7 6a07 	vldr	s13, [r7, #28]
 800632a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800632e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006332:	ee17 2a90 	vmov	r2, s15
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
}
 8006342:	bf00      	nop
 8006344:	3724      	adds	r7, #36	@ 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	46020c00 	.word	0x46020c00
 8006354:	4b742400 	.word	0x4b742400
 8006358:	46000000 	.word	0x46000000
 800635c:	080095b0 	.word	0x080095b0

08006360 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	@ 0x24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006368:	4ba6      	ldr	r3, [pc, #664]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800636a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006370:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006372:	4ba4      	ldr	r3, [pc, #656]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800637c:	4ba1      	ldr	r3, [pc, #644]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	3301      	adds	r3, #1
 8006388:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800638a:	4b9e      	ldr	r3, [pc, #632]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006396:	4b9b      	ldr	r3, [pc, #620]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d062      	beq.n	800647e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	f200 8081 	bhi.w	80064c2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d024      	beq.n	8006410 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d17a      	bne.n	80064c2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80063da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063de:	4b89      	ldr	r3, [pc, #548]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80063ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80063f2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800660c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80063f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80063fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006402:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800640e:	e08f      	b.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006410:	4b7c      	ldr	r3, [pc, #496]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800641c:	4b79      	ldr	r3, [pc, #484]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	0f1b      	lsrs	r3, r3, #28
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	e006      	b.n	8006436 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006428:	4b76      	ldr	r3, [pc, #472]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800642a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	0f1b      	lsrs	r3, r3, #28
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	4a76      	ldr	r2, [pc, #472]	@ (8006610 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006460:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800660c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006470:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006478:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800647c:	e058      	b.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800648c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006490:	4b5c      	ldr	r3, [pc, #368]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800660c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80064a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80064b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064c0:	e036      	b.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80064c2:	4b50      	ldr	r3, [pc, #320]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80064ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0f1b      	lsrs	r3, r3, #28
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80064da:	4b4a      	ldr	r3, [pc, #296]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	0f1b      	lsrs	r3, r3, #28
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	4a49      	ldr	r2, [pc, #292]	@ (8006610 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006512:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800660c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006530:	4b34      	ldr	r3, [pc, #208]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800653c:	4b31      	ldr	r3, [pc, #196]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006540:	0a5b      	lsrs	r3, r3, #9
 8006542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800654e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006552:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006556:	edd7 6a07 	vldr	s13, [r7, #28]
 800655a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006562:	ee17 2a90 	vmov	r2, s15
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e002      	b.n	8006572 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006572:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800657e:	4b21      	ldr	r3, [pc, #132]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006594:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006598:	edd7 6a07 	vldr	s13, [r7, #28]
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a4:	ee17 2a90 	vmov	r2, s15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	e002      	b.n	80065b4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80065b4:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d017      	beq.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80065c0:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80065c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80065d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80065da:	edd7 6a07 	vldr	s13, [r7, #28]
 80065de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065e6:	ee17 2a90 	vmov	r2, s15
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80065ee:	e002      	b.n	80065f6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	609a      	str	r2, [r3, #8]
}
 80065f6:	bf00      	nop
 80065f8:	3724      	adds	r7, #36	@ 0x24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	46020c00 	.word	0x46020c00
 8006608:	4b742400 	.word	0x4b742400
 800660c:	46000000 	.word	0x46000000
 8006610:	080095b0 	.word	0x080095b0

08006614 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006614:	b480      	push	{r7}
 8006616:	b089      	sub	sp, #36	@ 0x24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800661c:	4ba6      	ldr	r3, [pc, #664]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800661e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006626:	4ba4      	ldr	r3, [pc, #656]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006630:	4ba1      	ldr	r3, [pc, #644]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006634:	0a1b      	lsrs	r3, r3, #8
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	3301      	adds	r3, #1
 800663c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800663e:	4b9e      	ldr	r3, [pc, #632]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800664a:	4b9b      	ldr	r3, [pc, #620]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800664c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664e:	08db      	lsrs	r3, r3, #3
 8006650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d062      	beq.n	8006732 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b03      	cmp	r3, #3
 8006670:	f200 8081 	bhi.w	8006776 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d024      	beq.n	80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d17a      	bne.n	8006776 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b89      	ldr	r3, [pc, #548]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066a6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80066c2:	e08f      	b.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066c4:	4b7c      	ldr	r3, [pc, #496]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80066d0:	4b79      	ldr	r3, [pc, #484]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	0f1b      	lsrs	r3, r3, #28
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	e006      	b.n	80066ea <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80066dc:	4b76      	ldr	r3, [pc, #472]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	0f1b      	lsrs	r3, r3, #28
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	4a76      	ldr	r2, [pc, #472]	@ (80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80066ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006710:	ed97 6a02 	vldr	s12, [r7, #8]
 8006714:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006724:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006730:	e058      	b.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006744:	4b5c      	ldr	r3, [pc, #368]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006754:	ed97 6a02 	vldr	s12, [r7, #8]
 8006758:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006760:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006768:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006774:	e036      	b.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006776:	4b50      	ldr	r3, [pc, #320]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006782:	4b4d      	ldr	r3, [pc, #308]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	0f1b      	lsrs	r3, r3, #28
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	e006      	b.n	800679c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800678e:	4b4a      	ldr	r3, [pc, #296]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006794:	041b      	lsls	r3, r3, #16
 8006796:	0f1b      	lsrs	r3, r3, #28
 8006798:	f003 030f 	and.w	r3, r3, #15
 800679c:	4a49      	ldr	r2, [pc, #292]	@ (80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800679e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067e2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80067e4:	4b34      	ldr	r3, [pc, #208]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d017      	beq.n	8006820 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067f0:	4b31      	ldr	r3, [pc, #196]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f4:	0a5b      	lsrs	r3, r3, #9
 80067f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006802:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006806:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800680a:	edd7 6a07 	vldr	s13, [r7, #28]
 800680e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006816:	ee17 2a90 	vmov	r2, s15
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e002      	b.n	8006826 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006826:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d017      	beq.n	8006862 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006832:	4b21      	ldr	r3, [pc, #132]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006844:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006848:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800684c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006858:	ee17 2a90 	vmov	r2, s15
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	e002      	b.n	8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006868:	4b13      	ldr	r3, [pc, #76]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006874:	4b10      	ldr	r3, [pc, #64]	@ (80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006878:	0e1b      	lsrs	r3, r3, #24
 800687a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800688a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800688e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689a:	ee17 2a90 	vmov	r2, s15
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068a2:	e002      	b.n	80068aa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	609a      	str	r2, [r3, #8]
}
 80068aa:	bf00      	nop
 80068ac:	3724      	adds	r7, #36	@ 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	46020c00 	.word	0x46020c00
 80068bc:	4b742400 	.word	0x4b742400
 80068c0:	46000000 	.word	0x46000000
 80068c4:	080095b0 	.word	0x080095b0

080068c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08e      	sub	sp, #56	@ 0x38
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80068d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80068da:	430b      	orrs	r3, r1
 80068dc:	d145      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80068de:	4ba7      	ldr	r3, [pc, #668]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80068ea:	4ba4      	ldr	r3, [pc, #656]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d108      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068fe:	d104      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
 8006906:	f001 b9b3 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800690a:	4b9c      	ldr	r3, [pc, #624]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800690c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006918:	d114      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006920:	d110      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006922:	4b96      	ldr	r3, [pc, #600]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006930:	d103      	bne.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006932:	23fa      	movs	r3, #250	@ 0xfa
 8006934:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006936:	f001 b99b 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800693a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800693e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006940:	f001 b996 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006944:	4b8d      	ldr	r3, [pc, #564]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800694c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006950:	d107      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006958:	d103      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800695a:	4b89      	ldr	r3, [pc, #548]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
 800695e:	f001 b987 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
 8006966:	f001 b983 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800696a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800696e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006972:	430b      	orrs	r3, r1
 8006974:	d151      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006976:	4b81      	ldr	r3, [pc, #516]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800697c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b80      	cmp	r3, #128	@ 0x80
 8006986:	d035      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	2b80      	cmp	r3, #128	@ 0x80
 800698c:	d841      	bhi.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	2b60      	cmp	r3, #96	@ 0x60
 8006992:	d02a      	beq.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	2b60      	cmp	r3, #96	@ 0x60
 8006998:	d83b      	bhi.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2b40      	cmp	r3, #64	@ 0x40
 800699e:	d009      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	2b40      	cmp	r3, #64	@ 0x40
 80069a4:	d835      	bhi.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00c      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d012      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80069b2:	e02e      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fb77 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c2:	f001 b955 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c6:	f107 0318 	add.w	r3, r7, #24
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fcc8 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069d4:	f001 b94c 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d8:	f107 030c 	add.w	r3, r7, #12
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fe19 	bl	8006614 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069e6:	f001 b943 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069f0:	f001 b93e 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069f4:	4b61      	ldr	r3, [pc, #388]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a00:	d103      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006a02:	4b60      	ldr	r3, [pc, #384]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a06:	f001 b933 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0e:	f001 b92f 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a16:	f001 b92b 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006a22:	430b      	orrs	r3, r1
 8006a24:	d158      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006a26:	4b55      	ldr	r3, [pc, #340]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a38:	d03b      	beq.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a40:	d846      	bhi.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a48:	d02e      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a50:	d83e      	bhi.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a58:	d00b      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a60:	d836      	bhi.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00d      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a6e:	d012      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006a70:	e02e      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fb18 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a80:	f001 b8f6 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a84:	f107 0318 	add.w	r3, r7, #24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fc69 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a92:	f001 b8ed 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fdba 	bl	8006614 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aa4:	f001 b8e4 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006aa8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aae:	f001 b8df 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ab2:	4b32      	ldr	r3, [pc, #200]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abe:	d103      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006ac0:	4b30      	ldr	r3, [pc, #192]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ac4:	f001 b8d4 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006acc:	f001 b8d0 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ad4:	f001 b8cc 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006adc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	d126      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006ae4:	4b25      	ldr	r3, [pc, #148]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006af0:	4b22      	ldr	r3, [pc, #136]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afc:	d106      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d103      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006b04:	4b1f      	ldr	r3, [pc, #124]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b08:	f001 b8b2 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b18:	d107      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b20:	d103      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006b22:	4b19      	ldr	r3, [pc, #100]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b26:	f001 b8a3 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	f001 b89f 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b36:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	d16e      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b44:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006b48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b50:	d03d      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b58:	d85c      	bhi.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b60:	d014      	beq.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b68:	d854      	bhi.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01f      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b76:	d012      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006b78:	e04c      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b7a:	bf00      	nop
 8006b7c:	46020c00 	.word	0x46020c00
 8006b80:	0007a120 	.word	0x0007a120
 8006b84:	00f42400 	.word	0x00f42400
 8006b88:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fa8b 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b9a:	f001 b869 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9e:	f107 0318 	add.w	r3, r7, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fbdc 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bac:	f001 b860 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006bb0:	4ba7      	ldr	r3, [pc, #668]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bbc:	d103      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006bbe:	4ba5      	ldr	r3, [pc, #660]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bc2:	f001 b855 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bca:	f001 b851 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bce:	4ba0      	ldr	r3, [pc, #640]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d118      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bda:	4b9d      	ldr	r3, [pc, #628]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006be6:	4b9a      	ldr	r3, [pc, #616]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	0e1b      	lsrs	r3, r3, #24
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	e006      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006bf2:	4b97      	ldr	r3, [pc, #604]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	0e1b      	lsrs	r3, r3, #24
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	4a95      	ldr	r2, [pc, #596]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c08:	f001 b832 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c10:	f001 b82e 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c18:	f001 b82a 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c20:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006c24:	430b      	orrs	r3, r1
 8006c26:	d17f      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006c28:	4b89      	ldr	r3, [pc, #548]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c32:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d165      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c3a:	4b85      	ldr	r3, [pc, #532]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006c44:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c4c:	d034      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006c54:	d853      	bhi.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c5c:	d00b      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c64:	d84b      	bhi.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d016      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c72:	d009      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006c74:	e043      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fa16 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c84:	f000 bff4 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c88:	f107 0318 	add.w	r3, r7, #24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fb67 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c96:	f000 bfeb 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ca6:	d103      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006cac:	f000 bfe0 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006cb4:	f000 bfdc 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cb8:	4b65      	ldr	r3, [pc, #404]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d118      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cc4:	4b62      	ldr	r3, [pc, #392]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	0e1b      	lsrs	r3, r3, #24
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	e006      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	0e1b      	lsrs	r3, r3, #24
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	4a5b      	ldr	r2, [pc, #364]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006cf2:	f000 bfbd 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006cfa:	f000 bfb9 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006d02:	f000 bfb5 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d0c:	d108      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff f9ca 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1c:	f000 bfa8 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d24:	f000 bfa4 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2c:	1e51      	subs	r1, r2, #1
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	d136      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006d32:	4b47      	ldr	r3, [pc, #284]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006d44:	f7fe fb44 	bl	80053d0 <HAL_RCC_GetPCLK2Freq>
 8006d48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d4a:	f000 bf91 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d104      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d54:	f7fe fa0c 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006d58:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d5a:	f000 bf89 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6a:	d106      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d103      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006d72:	4b3a      	ldr	r3, [pc, #232]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d76:	f000 bf7b 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006d7a:	4b35      	ldr	r3, [pc, #212]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d107      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d104      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d94:	f000 bf6c 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9c:	f000 bf68 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da4:	1e91      	subs	r1, r2, #2
 8006da6:	430b      	orrs	r3, r1
 8006da8:	d136      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006daa:	4b29      	ldr	r3, [pc, #164]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fe faf4 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006dc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dc2:	f000 bf55 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d104      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dcc:	f7fe f9d0 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006dd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dd2:	f000 bf4d 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de2:	d106      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d103      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006dea:	4b1c      	ldr	r3, [pc, #112]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dee:	f000 bf3f 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006df2:	4b17      	ldr	r3, [pc, #92]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	2b0c      	cmp	r3, #12
 8006e04:	d104      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0c:	f000 bf30 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	f000 bf2c 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1c:	1f11      	subs	r1, r2, #4
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	d13f      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006e22:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fe fab8 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006e38:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e3a:	f000 bf19 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d10d      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e44:	f7fe f994 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e4a:	f000 bf11 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006e4e:	bf00      	nop
 8006e50:	46020c00 	.word	0x46020c00
 8006e54:	02dc6c00 	.word	0x02dc6c00
 8006e58:	080095b0 	.word	0x080095b0
 8006e5c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006e60:	4ba6      	ldr	r3, [pc, #664]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6c:	d106      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d103      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006e74:	4ba2      	ldr	r3, [pc, #648]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e78:	f000 befa 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006e7c:	4b9f      	ldr	r3, [pc, #636]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d107      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	2b30      	cmp	r3, #48	@ 0x30
 8006e8e:	d104      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006e90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e96:	f000 beeb 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9e:	f000 bee7 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea6:	f1a2 0108 	sub.w	r1, r2, #8
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	d136      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006eae:	4b93      	ldr	r3, [pc, #588]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006eb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ec0:	f7fe fa72 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006ec4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ec6:	f000 bed3 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	2b40      	cmp	r3, #64	@ 0x40
 8006ece:	d104      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ed0:	f7fe f94e 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006ed4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ed6:	f000 becb 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006eda:	4b88      	ldr	r3, [pc, #544]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee6:	d106      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	2b80      	cmp	r3, #128	@ 0x80
 8006eec:	d103      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006eee:	4b84      	ldr	r3, [pc, #528]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef2:	f000 bebd 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006ef6:	4b81      	ldr	r3, [pc, #516]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d107      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f08:	d104      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f10:	f000 beae 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f18:	f000 beaa 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f20:	f1a2 0110 	sub.w	r1, r2, #16
 8006f24:	430b      	orrs	r3, r1
 8006f26:	d139      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006f28:	4b74      	ldr	r3, [pc, #464]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f3a:	f7fe fa35 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8006f3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f40:	f000 be96 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4a:	d104      	bne.n	8006f56 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f4c:	f7fe f910 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006f50:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f52:	f000 be8d 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006f56:	4b69      	ldr	r3, [pc, #420]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f62:	d107      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f6a:	d103      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006f6c:	4b64      	ldr	r3, [pc, #400]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	f000 be7e 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006f74:	4b61      	ldr	r3, [pc, #388]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d108      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f88:	d104      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f90:	f000 be6e 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f98:	f000 be6a 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa0:	f1a2 0120 	sub.w	r1, r2, #32
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	d158      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006fa8:	4b54      	ldr	r3, [pc, #336]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d104      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006fba:	f7fe fa1d 	bl	80053f8 <HAL_RCC_GetPCLK3Freq>
 8006fbe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fc0:	f000 be56 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d104      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fca:	f7fe f8d1 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006fce:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fd0:	f000 be4e 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006fd4:	4b49      	ldr	r3, [pc, #292]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d103      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006fe8:	4b45      	ldr	r3, [pc, #276]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fec:	f000 be40 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006ff0:	4b42      	ldr	r3, [pc, #264]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d107      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	2b03      	cmp	r3, #3
 8007002:	d104      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8007004:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
 800700a:	f000 be31 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800700e:	4b3b      	ldr	r3, [pc, #236]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b20      	cmp	r3, #32
 8007018:	d11b      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	2b04      	cmp	r3, #4
 800701e:	d118      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007020:	4b36      	ldr	r3, [pc, #216]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800702c:	4b33      	ldr	r3, [pc, #204]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	0e1b      	lsrs	r3, r3, #24
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	e006      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007038:	4b30      	ldr	r3, [pc, #192]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800703a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	0e1b      	lsrs	r3, r3, #24
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	4a2f      	ldr	r2, [pc, #188]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	f000 be0f 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
 8007056:	f000 be0b 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800705a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800705e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007062:	430b      	orrs	r3, r1
 8007064:	d172      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007066:	4b25      	ldr	r3, [pc, #148]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800706c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007070:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007078:	d104      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800707a:	f7fe f879 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800707e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007080:	f000 bdf6 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708a:	d108      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff f965 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
 800709a:	f000 bde9 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80070a4:	f7fe f966 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80070a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80070aa:	f000 bde1 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80070b4:	d128      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070b6:	4b11      	ldr	r3, [pc, #68]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d118      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070c2:	4b0e      	ldr	r3, [pc, #56]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	e006      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80070da:	4b08      	ldr	r3, [pc, #32]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80070dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	4a06      	ldr	r2, [pc, #24]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f0:	f000 bdbe 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f8:	f000 bdba 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80070fc:	46020c00 	.word	0x46020c00
 8007100:	00f42400 	.word	0x00f42400
 8007104:	080095b0 	.word	0x080095b0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007108:	4baf      	ldr	r3, [pc, #700]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007114:	d107      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800711c:	d103      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800711e:	4bab      	ldr	r3, [pc, #684]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
 8007122:	f000 bda5 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007126:	4ba8      	ldr	r3, [pc, #672]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007132:	d107      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800713a:	d103      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800713c:	4ba3      	ldr	r3, [pc, #652]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007140:	f000 bd96 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	f000 bd92 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800714c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007150:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007154:	430b      	orrs	r3, r1
 8007156:	d158      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007158:	4b9b      	ldr	r3, [pc, #620]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800715a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	2b04      	cmp	r3, #4
 8007168:	d84b      	bhi.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800716a:	a201      	add	r2, pc, #4	@ (adr r2, 8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	080071a9 	.word	0x080071a9
 8007174:	08007185 	.word	0x08007185
 8007178:	08007197 	.word	0x08007197
 800717c:	080071b3 	.word	0x080071b3
 8007180:	080071bd 	.word	0x080071bd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe ff8f 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007192:	f000 bd6d 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007196:	f107 030c 	add.w	r3, r7, #12
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fa3a 	bl	8006614 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071a4:	f000 bd64 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80071a8:	f7fe f8e4 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80071ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80071ae:	f000 bd5f 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80071b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071b8:	f000 bd5a 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071bc:	4b82      	ldr	r3, [pc, #520]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d118      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071c8:	4b7f      	ldr	r3, [pc, #508]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80071d4:	4b7c      	ldr	r3, [pc, #496]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	0e1b      	lsrs	r3, r3, #24
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	e006      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80071e0:	4b79      	ldr	r3, [pc, #484]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	0e1b      	lsrs	r3, r3, #24
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	4a78      	ldr	r2, [pc, #480]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071f6:	f000 bd3b 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071fe:	f000 bd37 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007206:	f000 bd33 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800720a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800720e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007212:	430b      	orrs	r3, r1
 8007214:	d167      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007216:	4b6c      	ldr	r3, [pc, #432]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800721c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007220:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007228:	d036      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007230:	d855      	bhi.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007238:	d029      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007240:	d84d      	bhi.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007248:	d013      	beq.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007250:	d845      	bhi.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	2b00      	cmp	r3, #0
 8007256:	d015      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800725e:	d13e      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe ff21 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800726e:	f000 bcff 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff f9cc 	bl	8006614 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007280:	f000 bcf6 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007284:	f7fe f876 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8007288:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800728a:	f000 bcf1 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800728e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007294:	f000 bcec 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007298:	4b4b      	ldr	r3, [pc, #300]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d118      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072a4:	4b48      	ldr	r3, [pc, #288]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80072b0:	4b45      	ldr	r3, [pc, #276]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	e006      	b.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80072bc:	4b42      	ldr	r3, [pc, #264]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	0e1b      	lsrs	r3, r3, #24
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	4a41      	ldr	r2, [pc, #260]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80072cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072d2:	f000 bccd 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072da:	f000 bcc9 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e2:	f000 bcc5 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80072e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ea:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80072ee:	430b      	orrs	r3, r1
 80072f0:	d14c      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80072f2:	4b35      	ldr	r3, [pc, #212]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007304:	f7fe f850 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8007308:	6378      	str	r0, [r7, #52]	@ 0x34
 800730a:	f000 bcb1 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007314:	d104      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007316:	f7fd ff2b 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800731a:	6378      	str	r0, [r7, #52]	@ 0x34
 800731c:	f000 bca8 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007320:	4b29      	ldr	r3, [pc, #164]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800732c:	d107      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007334:	d103      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8007336:	4b25      	ldr	r3, [pc, #148]	@ (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
 800733a:	f000 bc99 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800733e:	4b22      	ldr	r3, [pc, #136]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b20      	cmp	r3, #32
 8007348:	d11c      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007350:	d118      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007352:	4b1d      	ldr	r3, [pc, #116]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800735e:	4b1a      	ldr	r3, [pc, #104]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	0e1b      	lsrs	r3, r3, #24
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	e006      	b.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800736a:	4b17      	ldr	r3, [pc, #92]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800736c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	0e1b      	lsrs	r3, r3, #24
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	4a15      	ldr	r2, [pc, #84]	@ (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	f000 bc76 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
 8007388:	f000 bc72 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007394:	430b      	orrs	r3, r1
 8007396:	d153      	bne.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007398:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800739a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800739e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80073a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d104      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073aa:	f7fd fffd 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 80073ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80073b0:	f000 bc5e 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ba:	d10b      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073bc:	f7fd fed8 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 80073c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80073c2:	f000 bc55 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80073c6:	bf00      	nop
 80073c8:	46020c00 	.word	0x46020c00
 80073cc:	00f42400 	.word	0x00f42400
 80073d0:	080095b0 	.word	0x080095b0
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80073d4:	4ba1      	ldr	r3, [pc, #644]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e0:	d107      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e8:	d103      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80073ea:	4b9d      	ldr	r3, [pc, #628]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ee:	f000 bc3f 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80073f2:	4b9a      	ldr	r3, [pc, #616]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d11c      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007404:	d118      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007406:	4b95      	ldr	r3, [pc, #596]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8007412:	4b92      	ldr	r3, [pc, #584]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	0e1b      	lsrs	r3, r3, #24
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	e006      	b.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800741e:	4b8f      	ldr	r3, [pc, #572]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	0e1b      	lsrs	r3, r3, #24
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	4a8d      	ldr	r2, [pc, #564]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800742e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
 8007434:	f000 bc1c 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	f000 bc18 	b.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007444:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007448:	430b      	orrs	r3, r1
 800744a:	d151      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800744c:	4b83      	ldr	r3, [pc, #524]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800744e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007452:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007456:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	2bc0      	cmp	r3, #192	@ 0xc0
 800745c:	d024      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	2bc0      	cmp	r3, #192	@ 0xc0
 8007462:	d842      	bhi.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	2b80      	cmp	r3, #128	@ 0x80
 8007468:	d00d      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d83c      	bhi.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	d011      	beq.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800747c:	e035      	b.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800747e:	f7fd ffbb 	bl	80053f8 <HAL_RCC_GetPCLK3Freq>
 8007482:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007484:	e3f4      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007486:	4b75      	ldr	r3, [pc, #468]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800748e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007492:	d102      	bne.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8007494:	4b72      	ldr	r3, [pc, #456]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007498:	e3ea      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800749e:	e3e7      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80074a0:	f7fd fe66 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 80074a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074a6:	e3e3      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074a8:	4b6c      	ldr	r3, [pc, #432]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d117      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074b4:	4b69      	ldr	r3, [pc, #420]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80074c0:	4b66      	ldr	r3, [pc, #408]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	0e1b      	lsrs	r3, r3, #24
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	e006      	b.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80074cc:	4b63      	ldr	r3, [pc, #396]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	0e1b      	lsrs	r3, r3, #24
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	4a62      	ldr	r2, [pc, #392]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80074dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074e2:	e3c5      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074e8:	e3c2      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074ee:	e3bf      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80074f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80074f8:	430b      	orrs	r3, r1
 80074fa:	d147      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80074fc:	4b57      	ldr	r3, [pc, #348]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007502:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007506:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800750e:	f7fd ff4b 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8007512:	6378      	str	r0, [r7, #52]	@ 0x34
 8007514:	e3ac      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800751c:	d103      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800751e:	f7fd fe27 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8007522:	6378      	str	r0, [r7, #52]	@ 0x34
 8007524:	e3a4      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007526:	4b4d      	ldr	r3, [pc, #308]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800752e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007532:	d106      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753a:	d102      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800753c:	4b48      	ldr	r3, [pc, #288]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007540:	e396      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007542:	4b46      	ldr	r3, [pc, #280]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b20      	cmp	r3, #32
 800754c:	d11b      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007554:	d117      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007556:	4b41      	ldr	r3, [pc, #260]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007562:	4b3e      	ldr	r3, [pc, #248]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	0e1b      	lsrs	r3, r3, #24
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	e006      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800756e:	4b3b      	ldr	r3, [pc, #236]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007574:	041b      	lsls	r3, r3, #16
 8007576:	0e1b      	lsrs	r3, r3, #24
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	4a39      	ldr	r2, [pc, #228]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800757e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
 8007584:	e374      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
 800758a:	e371      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800758c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007590:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007594:	430b      	orrs	r3, r1
 8007596:	d16a      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007598:	4b30      	ldr	r3, [pc, #192]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800759a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800759e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d120      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075aa:	4b2c      	ldr	r3, [pc, #176]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d117      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075b6:	4b29      	ldr	r3, [pc, #164]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80075c2:	4b26      	ldr	r3, [pc, #152]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	0e1b      	lsrs	r3, r3, #24
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80075ce:	4b23      	ldr	r3, [pc, #140]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	0e1b      	lsrs	r3, r3, #24
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	4a21      	ldr	r2, [pc, #132]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80075de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e4:	e344      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ea:	e341      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80075ec:	4b1b      	ldr	r3, [pc, #108]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075fa:	d112      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007602:	d10e      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007604:	4b15      	ldr	r3, [pc, #84]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800760a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007612:	d102      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8007614:	23fa      	movs	r3, #250	@ 0xfa
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007618:	e32a      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800761a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800761e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007620:	e326      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007622:	4b0e      	ldr	r3, [pc, #56]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800762e:	d106      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007636:	d102      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
 800763c:	e318      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800763e:	4b07      	ldr	r3, [pc, #28]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b02      	cmp	r3, #2
 800764a:	d10d      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007652:	d109      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8007654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007658:	637b      	str	r3, [r7, #52]	@ 0x34
 800765a:	e309      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800765c:	46020c00 	.word	0x46020c00
 8007660:	00f42400 	.word	0x00f42400
 8007664:	080095b0 	.word	0x080095b0
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
 800766c:	e300      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800766e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007672:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007676:	430b      	orrs	r3, r1
 8007678:	d164      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800767a:	4ba2      	ldr	r3, [pc, #648]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800767c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	2b00      	cmp	r3, #0
 800768a:	d120      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800768c:	4b9d      	ldr	r3, [pc, #628]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0320 	and.w	r3, r3, #32
 8007694:	2b20      	cmp	r3, #32
 8007696:	d117      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007698:	4b9a      	ldr	r3, [pc, #616]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80076a4:	4b97      	ldr	r3, [pc, #604]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	0e1b      	lsrs	r3, r3, #24
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	e006      	b.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80076b0:	4b94      	ldr	r3, [pc, #592]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	0e1b      	lsrs	r3, r3, #24
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	4a92      	ldr	r2, [pc, #584]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80076c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c6:	e2d3      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80076cc:	e2d0      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80076ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076dc:	d112      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e4:	d10e      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076e6:	4b87      	ldr	r3, [pc, #540]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f4:	d102      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80076f6:	23fa      	movs	r3, #250	@ 0xfa
 80076f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076fa:	e2b9      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80076fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007702:	e2b5      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007704:	4b7f      	ldr	r3, [pc, #508]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800770c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007710:	d106      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007718:	d102      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800771a:	4b7c      	ldr	r3, [pc, #496]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
 800771e:	e2a7      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007720:	4b78      	ldr	r3, [pc, #480]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d107      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007734:	d103      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8007736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800773a:	637b      	str	r3, [r7, #52]	@ 0x34
 800773c:	e298      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
 8007742:	e295      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007748:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800774c:	430b      	orrs	r3, r1
 800774e:	d147      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007750:	4b6c      	ldr	r3, [pc, #432]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007756:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800775a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007762:	f7fd fe21 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 8007766:	6378      	str	r0, [r7, #52]	@ 0x34
 8007768:	e282      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800776a:	4b66      	ldr	r3, [pc, #408]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800776c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007778:	d112      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007780:	d10e      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007782:	4b60      	ldr	r3, [pc, #384]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007790:	d102      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8007792:	23fa      	movs	r3, #250	@ 0xfa
 8007794:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007796:	e26b      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007798:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800779e:	e267      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80077a0:	4b58      	ldr	r3, [pc, #352]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ac:	d106      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80077b4:	d102      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80077b6:	4b55      	ldr	r3, [pc, #340]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80077b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ba:	e259      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80077bc:	4b51      	ldr	r3, [pc, #324]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d107      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80077d0:	d103      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80077d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d8:	e24a      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077de:	e247      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80077e8:	430b      	orrs	r3, r1
 80077ea:	d12d      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80077ec:	4b45      	ldr	r3, [pc, #276]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077f2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80077f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80077f8:	4b42      	ldr	r3, [pc, #264]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007804:	d105      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800780c:	4b3f      	ldr	r3, [pc, #252]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007810:	e22e      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007818:	d107      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800781a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fc44 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	637b      	str	r3, [r7, #52]	@ 0x34
 8007828:	e222      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007830:	d107      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007832:	f107 0318 	add.w	r3, r7, #24
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fd92 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007840:	e216      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
 8007846:	e213      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007850:	430b      	orrs	r3, r1
 8007852:	d15d      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007854:	4b2b      	ldr	r3, [pc, #172]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800785a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800785e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007866:	d028      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800786e:	d845      	bhi.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007876:	d013      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800787e:	d83d      	bhi.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800788c:	d004      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800788e:	e035      	b.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007890:	f7fd fd9e 	bl	80053d0 <HAL_RCC_GetPCLK2Freq>
 8007894:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007896:	e1eb      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007898:	f7fd fc6a 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800789c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800789e:	e1e7      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078a0:	4b18      	ldr	r3, [pc, #96]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ac:	d102      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80078ae:	4b17      	ldr	r3, [pc, #92]	@ (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80078b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078b2:	e1dd      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078b8:	e1da      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80078ba:	4b12      	ldr	r3, [pc, #72]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d117      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80078d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	0e1b      	lsrs	r3, r3, #24
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	e006      	b.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80078de:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80078e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	0e1b      	lsrs	r3, r3, #24
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	4a06      	ldr	r2, [pc, #24]	@ (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80078ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078f4:	e1bc      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078fa:	e1b9      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007900:	e1b6      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007902:	bf00      	nop
 8007904:	46020c00 	.word	0x46020c00
 8007908:	080095b0 	.word	0x080095b0
 800790c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007914:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007918:	430b      	orrs	r3, r1
 800791a:	d156      	bne.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800791c:	4ba5      	ldr	r3, [pc, #660]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800791e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007922:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007926:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800792e:	d028      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007936:	d845      	bhi.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800793e:	d013      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007946:	d83d      	bhi.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007954:	d004      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007956:	e035      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fd fd26 	bl	80053a8 <HAL_RCC_GetPCLK1Freq>
 800795c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800795e:	e187      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007960:	f7fd fc06 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8007964:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007966:	e183      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007968:	4b92      	ldr	r3, [pc, #584]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007974:	d102      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007976:	4b90      	ldr	r3, [pc, #576]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800797a:	e179      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007980:	e176      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007982:	4b8c      	ldr	r3, [pc, #560]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b20      	cmp	r3, #32
 800798c:	d117      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800798e:	4b89      	ldr	r3, [pc, #548]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800799a:	4b86      	ldr	r3, [pc, #536]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0e1b      	lsrs	r3, r3, #24
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	e006      	b.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80079a6:	4b83      	ldr	r3, [pc, #524]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80079a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	0e1b      	lsrs	r3, r3, #24
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	4a81      	ldr	r2, [pc, #516]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80079b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079bc:	e158      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c2:	e155      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c8:	e152      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80079ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ce:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80079d2:	430b      	orrs	r3, r1
 80079d4:	d177      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80079d6:	4b77      	ldr	r3, [pc, #476]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80079d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079dc:	f003 0318 	and.w	r3, r3, #24
 80079e0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2b18      	cmp	r3, #24
 80079e6:	d86b      	bhi.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80079e8:	a201      	add	r2, pc, #4	@ (adr r2, 80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	08007a55 	.word	0x08007a55
 80079f4:	08007ac1 	.word	0x08007ac1
 80079f8:	08007ac1 	.word	0x08007ac1
 80079fc:	08007ac1 	.word	0x08007ac1
 8007a00:	08007ac1 	.word	0x08007ac1
 8007a04:	08007ac1 	.word	0x08007ac1
 8007a08:	08007ac1 	.word	0x08007ac1
 8007a0c:	08007ac1 	.word	0x08007ac1
 8007a10:	08007a5d 	.word	0x08007a5d
 8007a14:	08007ac1 	.word	0x08007ac1
 8007a18:	08007ac1 	.word	0x08007ac1
 8007a1c:	08007ac1 	.word	0x08007ac1
 8007a20:	08007ac1 	.word	0x08007ac1
 8007a24:	08007ac1 	.word	0x08007ac1
 8007a28:	08007ac1 	.word	0x08007ac1
 8007a2c:	08007ac1 	.word	0x08007ac1
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007ac1 	.word	0x08007ac1
 8007a38:	08007ac1 	.word	0x08007ac1
 8007a3c:	08007ac1 	.word	0x08007ac1
 8007a40:	08007ac1 	.word	0x08007ac1
 8007a44:	08007ac1 	.word	0x08007ac1
 8007a48:	08007ac1 	.word	0x08007ac1
 8007a4c:	08007ac1 	.word	0x08007ac1
 8007a50:	08007a7f 	.word	0x08007a7f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007a54:	f7fd fcd0 	bl	80053f8 <HAL_RCC_GetPCLK3Freq>
 8007a58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a5a:	e109      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a5c:	f7fd fb88 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8007a60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a62:	e105      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a64:	4b53      	ldr	r3, [pc, #332]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a70:	d102      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007a72:	4b51      	ldr	r3, [pc, #324]	@ (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a76:	e0fb      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a7c:	e0f8      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d117      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007a96:	4b47      	ldr	r3, [pc, #284]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0e1b      	lsrs	r3, r3, #24
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	e006      	b.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007aa2:	4b44      	ldr	r3, [pc, #272]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aa8:	041b      	lsls	r3, r3, #16
 8007aaa:	0e1b      	lsrs	r3, r3, #24
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	4a42      	ldr	r2, [pc, #264]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ab8:	e0da      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007abe:	e0d7      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ac4:	e0d4      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aca:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	d155      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007ad2:	4b38      	ldr	r3, [pc, #224]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ad4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ad8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007adc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ae4:	d013      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007aec:	d844      	bhi.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007af4:	d013      	beq.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007afc:	d83c      	bhi.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d014      	beq.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b0a:	d014      	beq.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007b0c:	e034      	b.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0e:	f107 0318 	add.w	r3, r7, #24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fc24 	bl	8006360 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b1c:	e0a8      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fac2 	bl	80060ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b2c:	e0a0      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b2e:	f7fd fb1f 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8007b32:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b34:	e09c      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b36:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d117      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b42:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007b4e:	4b19      	ldr	r3, [pc, #100]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	e006      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007b5a:	4b16      	ldr	r3, [pc, #88]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	4a14      	ldr	r2, [pc, #80]	@ (8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b70:	e07e      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b76:	e07b      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b7c:	e078      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b82:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007b86:	430b      	orrs	r3, r1
 8007b88:	d138      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b94:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007b96:	4b07      	ldr	r3, [pc, #28]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d10d      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	e05e      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007bb2:	bf00      	nop
 8007bb4:	46020c00 	.word	0x46020c00
 8007bb8:	00f42400 	.word	0x00f42400
 8007bbc:	080095b0 	.word	0x080095b0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bce:	d112      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd6:	d10e      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bd8:	4b28      	ldr	r3, [pc, #160]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007be6:	d102      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007be8:	23fa      	movs	r3, #250	@ 0xfa
 8007bea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bec:	e040      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007bee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bf4:	e03c      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfa:	e039      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c00:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c04:	430b      	orrs	r3, r1
 8007c06:	d131      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007c08:	4b1c      	ldr	r3, [pc, #112]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007c12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007c14:	4b19      	ldr	r3, [pc, #100]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c20:	d105      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007c28:	4b15      	ldr	r3, [pc, #84]	@ (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2c:	e020      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007c2e:	4b13      	ldr	r3, [pc, #76]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c3a:	d106      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c42:	d102      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007c44:	4b0f      	ldr	r3, [pc, #60]	@ (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c48:	e012      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c56:	d106      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c5e:	d102      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007c60:	4b09      	ldr	r3, [pc, #36]	@ (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c64:	e004      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6a:	e001      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3738      	adds	r7, #56	@ 0x38
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	46020c00 	.word	0x46020c00
 8007c80:	02dc6c00 	.word	0x02dc6c00
 8007c84:	016e3600 	.word	0x016e3600
 8007c88:	00f42400 	.word	0x00f42400

08007c8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007c94:	4b47      	ldr	r3, [pc, #284]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a46      	ldr	r2, [pc, #280]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007c9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ca0:	f7fa f8c0 	bl	8001e24 <HAL_GetTick>
 8007ca4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ca6:	e008      	b.n	8007cba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ca8:	f7fa f8bc 	bl	8001e24 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e077      	b.n	8007daa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cba:	4b3e      	ldr	r3, [pc, #248]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007cce:	f023 0303 	bic.w	r3, r3, #3
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6811      	ldr	r1, [r2, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6852      	ldr	r2, [r2, #4]
 8007cda:	3a01      	subs	r2, #1
 8007cdc:	0212      	lsls	r2, r2, #8
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	4934      	ldr	r1, [pc, #208]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007ce6:	4b33      	ldr	r3, [pc, #204]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007ce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cea:	4b33      	ldr	r3, [pc, #204]	@ (8007db8 <RCCEx_PLL2_Config+0x12c>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	6892      	ldr	r2, [r2, #8]
 8007cf2:	3a01      	subs	r2, #1
 8007cf4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	68d2      	ldr	r2, [r2, #12]
 8007cfc:	3a01      	subs	r2, #1
 8007cfe:	0252      	lsls	r2, r2, #9
 8007d00:	b292      	uxth	r2, r2
 8007d02:	4311      	orrs	r1, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6912      	ldr	r2, [r2, #16]
 8007d08:	3a01      	subs	r2, #1
 8007d0a:	0412      	lsls	r2, r2, #16
 8007d0c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007d10:	4311      	orrs	r1, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6952      	ldr	r2, [r2, #20]
 8007d16:	3a01      	subs	r2, #1
 8007d18:	0612      	lsls	r2, r2, #24
 8007d1a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	4924      	ldr	r1, [pc, #144]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007d26:	4b23      	ldr	r3, [pc, #140]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2a:	f023 020c 	bic.w	r2, r3, #12
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	4920      	ldr	r1, [pc, #128]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007d38:	4b1e      	ldr	r3, [pc, #120]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	491c      	ldr	r1, [pc, #112]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007d46:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d52:	4b18      	ldr	r3, [pc, #96]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d5a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	69d2      	ldr	r2, [r2, #28]
 8007d62:	00d2      	lsls	r2, r2, #3
 8007d64:	4913      	ldr	r1, [pc, #76]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007d6a:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6e:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d70:	f043 0310 	orr.w	r3, r3, #16
 8007d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007d76:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d82:	f7fa f84f 	bl	8001e24 <HAL_GetTick>
 8007d86:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d88:	e008      	b.n	8007d9c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d8a:	f7fa f84b 	bl	8001e24 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d901      	bls.n	8007d9c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e006      	b.n	8007daa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <RCCEx_PLL2_Config+0x128>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0f0      	beq.n	8007d8a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0

}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	46020c00 	.word	0x46020c00
 8007db8:	80800000 	.word	0x80800000

08007dbc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007dc4:	4b47      	ldr	r3, [pc, #284]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a46      	ldr	r2, [pc, #280]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dd0:	f7fa f828 	bl	8001e24 <HAL_GetTick>
 8007dd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dd6:	e008      	b.n	8007dea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dd8:	f7fa f824 	bl	8001e24 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e077      	b.n	8007eda <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007df6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6852      	ldr	r2, [r2, #4]
 8007e0a:	3a01      	subs	r2, #1
 8007e0c:	0212      	lsls	r2, r2, #8
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	4934      	ldr	r1, [pc, #208]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	630b      	str	r3, [r1, #48]	@ 0x30
 8007e16:	4b33      	ldr	r3, [pc, #204]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e1a:	4b33      	ldr	r3, [pc, #204]	@ (8007ee8 <RCCEx_PLL3_Config+0x12c>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	6892      	ldr	r2, [r2, #8]
 8007e22:	3a01      	subs	r2, #1
 8007e24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	68d2      	ldr	r2, [r2, #12]
 8007e2c:	3a01      	subs	r2, #1
 8007e2e:	0252      	lsls	r2, r2, #9
 8007e30:	b292      	uxth	r2, r2
 8007e32:	4311      	orrs	r1, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6912      	ldr	r2, [r2, #16]
 8007e38:	3a01      	subs	r2, #1
 8007e3a:	0412      	lsls	r2, r2, #16
 8007e3c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007e40:	4311      	orrs	r1, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6952      	ldr	r2, [r2, #20]
 8007e46:	3a01      	subs	r2, #1
 8007e48:	0612      	lsls	r2, r2, #24
 8007e4a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	4924      	ldr	r1, [pc, #144]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007e56:	4b23      	ldr	r3, [pc, #140]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5a:	f023 020c 	bic.w	r2, r3, #12
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	4920      	ldr	r1, [pc, #128]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007e68:	4b1e      	ldr	r3, [pc, #120]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	491c      	ldr	r1, [pc, #112]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007e76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e7c:	f023 0310 	bic.w	r3, r3, #16
 8007e80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e82:	4b18      	ldr	r3, [pc, #96]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	69d2      	ldr	r2, [r2, #28]
 8007e92:	00d2      	lsls	r2, r2, #3
 8007e94:	4913      	ldr	r1, [pc, #76]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007e9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9e:	4a11      	ldr	r2, [pc, #68]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007ea0:	f043 0310 	orr.w	r3, r3, #16
 8007ea4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007eb2:	f7f9 ffb7 	bl	8001e24 <HAL_GetTick>
 8007eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb8:	e008      	b.n	8007ecc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007eba:	f7f9 ffb3 	bl	8001e24 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e006      	b.n	8007eda <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ecc:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <RCCEx_PLL3_Config+0x128>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0f0      	beq.n	8007eba <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	46020c00 	.word	0x46020c00
 8007ee8:	80800000 	.word	0x80800000

08007eec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e0fb      	b.n	80080f6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a7f      	ldr	r2, [pc, #508]	@ (8008100 <HAL_SPI_Init+0x214>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d004      	beq.n	8007f12 <HAL_SPI_Init+0x26>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a7d      	ldr	r2, [pc, #500]	@ (8008104 <HAL_SPI_Init+0x218>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	e000      	b.n	8007f14 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007f12:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a78      	ldr	r2, [pc, #480]	@ (8008100 <HAL_SPI_Init+0x214>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <HAL_SPI_Init+0x42>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a76      	ldr	r2, [pc, #472]	@ (8008104 <HAL_SPI_Init+0x218>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d105      	bne.n	8007f3a <HAL_SPI_Init+0x4e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b0f      	cmp	r3, #15
 8007f34:	d901      	bls.n	8007f3a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e0dd      	b.n	80080f6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f8ec 	bl	8008118 <SPI_GetPacketSize>
 8007f40:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a6e      	ldr	r2, [pc, #440]	@ (8008100 <HAL_SPI_Init+0x214>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_SPI_Init+0x6a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a6c      	ldr	r2, [pc, #432]	@ (8008104 <HAL_SPI_Init+0x218>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d102      	bne.n	8007f5c <HAL_SPI_Init+0x70>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d816      	bhi.n	8007f8a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f60:	4a69      	ldr	r2, [pc, #420]	@ (8008108 <HAL_SPI_Init+0x21c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00e      	beq.n	8007f84 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a68      	ldr	r2, [pc, #416]	@ (800810c <HAL_SPI_Init+0x220>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d009      	beq.n	8007f84 <HAL_SPI_Init+0x98>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a66      	ldr	r2, [pc, #408]	@ (8008110 <HAL_SPI_Init+0x224>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d004      	beq.n	8007f84 <HAL_SPI_Init+0x98>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a65      	ldr	r2, [pc, #404]	@ (8008114 <HAL_SPI_Init+0x228>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d104      	bne.n	8007f8e <HAL_SPI_Init+0xa2>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d901      	bls.n	8007f8e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e0b3      	b.n	80080f6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7f9 fc1e 	bl	80017e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007fca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fd4:	d119      	bne.n	800800a <HAL_SPI_Init+0x11e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fde:	d103      	bne.n	8007fe8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ff8:	d107      	bne.n	800800a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008008:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00f      	beq.n	8008036 <HAL_SPI_Init+0x14a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b06      	cmp	r3, #6
 800801c:	d90b      	bls.n	8008036 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e007      	b.n	8008046 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008044:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69da      	ldr	r2, [r3, #28]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	431a      	orrs	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008058:	ea42 0103 	orr.w	r1, r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68da      	ldr	r2, [r3, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	431a      	orrs	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b2:	ea42 0103 	orr.w	r1, r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	46002000 	.word	0x46002000
 8008104:	56002000 	.word	0x56002000
 8008108:	40013000 	.word	0x40013000
 800810c:	50013000 	.word	0x50013000
 8008110:	40003800 	.word	0x40003800
 8008114:	50003800 	.word	0x50003800

08008118 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	095b      	lsrs	r3, r3, #5
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	3307      	adds	r3, #7
 8008136:	08db      	lsrs	r3, r3, #3
 8008138:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d12e      	bne.n	80081c2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800816e:	2302      	movs	r3, #2
 8008170:	e028      	b.n	80081c4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2202      	movs	r2, #2
 800817e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0201 	bic.w	r2, r2, #1
 8008190:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800819e:	ea42 0103 	orr.w	r1, r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	e000      	b.n	80081c4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
  }
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e042      	b.n	8008268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d106      	bne.n	80081fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7f9 fb85 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2224      	movs	r2, #36	@ 0x24
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f9ca 	bl	80085b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f825 	bl	8008270 <UART_SetConfig>
 8008226:	4603      	mov	r3, r0
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e01b      	b.n	8008268 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800823e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800824e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fa49 	bl	80086f8 <UART_CheckIdleState>
 8008266:	4603      	mov	r3, r0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008274:	b094      	sub	sp, #80	@ 0x50
 8008276:	af00      	add	r7, sp, #0
 8008278:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	4b7e      	ldr	r3, [pc, #504]	@ (8008480 <UART_SetConfig+0x210>)
 8008286:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	431a      	orrs	r2, r3
 8008292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	431a      	orrs	r2, r3
 8008298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	4313      	orrs	r3, r2
 800829e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4977      	ldr	r1, [pc, #476]	@ (8008484 <UART_SetConfig+0x214>)
 80082a8:	4019      	ands	r1, r3
 80082aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c0:	68d9      	ldr	r1, [r3, #12]
 80082c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	ea40 0301 	orr.w	r3, r0, r1
 80082ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	4b6a      	ldr	r3, [pc, #424]	@ (8008480 <UART_SetConfig+0x210>)
 80082d8:	429a      	cmp	r2, r3
 80082da:	d009      	beq.n	80082f0 <UART_SetConfig+0x80>
 80082dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b69      	ldr	r3, [pc, #420]	@ (8008488 <UART_SetConfig+0x218>)
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d004      	beq.n	80082f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e8:	6a1a      	ldr	r2, [r3, #32]
 80082ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ec:	4313      	orrs	r3, r2
 80082ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80082fa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008304:	430b      	orrs	r3, r1
 8008306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	f023 000f 	bic.w	r0, r3, #15
 8008312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008314:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	ea40 0301 	orr.w	r3, r0, r1
 800831e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b59      	ldr	r3, [pc, #356]	@ (800848c <UART_SetConfig+0x21c>)
 8008326:	429a      	cmp	r2, r3
 8008328:	d102      	bne.n	8008330 <UART_SetConfig+0xc0>
 800832a:	2301      	movs	r3, #1
 800832c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800832e:	e029      	b.n	8008384 <UART_SetConfig+0x114>
 8008330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b56      	ldr	r3, [pc, #344]	@ (8008490 <UART_SetConfig+0x220>)
 8008336:	429a      	cmp	r2, r3
 8008338:	d102      	bne.n	8008340 <UART_SetConfig+0xd0>
 800833a:	2302      	movs	r3, #2
 800833c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800833e:	e021      	b.n	8008384 <UART_SetConfig+0x114>
 8008340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b53      	ldr	r3, [pc, #332]	@ (8008494 <UART_SetConfig+0x224>)
 8008346:	429a      	cmp	r2, r3
 8008348:	d102      	bne.n	8008350 <UART_SetConfig+0xe0>
 800834a:	2304      	movs	r3, #4
 800834c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800834e:	e019      	b.n	8008384 <UART_SetConfig+0x114>
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	4b50      	ldr	r3, [pc, #320]	@ (8008498 <UART_SetConfig+0x228>)
 8008356:	429a      	cmp	r2, r3
 8008358:	d102      	bne.n	8008360 <UART_SetConfig+0xf0>
 800835a:	2308      	movs	r3, #8
 800835c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800835e:	e011      	b.n	8008384 <UART_SetConfig+0x114>
 8008360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	4b4d      	ldr	r3, [pc, #308]	@ (800849c <UART_SetConfig+0x22c>)
 8008366:	429a      	cmp	r2, r3
 8008368:	d102      	bne.n	8008370 <UART_SetConfig+0x100>
 800836a:	2310      	movs	r3, #16
 800836c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800836e:	e009      	b.n	8008384 <UART_SetConfig+0x114>
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	4b42      	ldr	r3, [pc, #264]	@ (8008480 <UART_SetConfig+0x210>)
 8008376:	429a      	cmp	r2, r3
 8008378:	d102      	bne.n	8008380 <UART_SetConfig+0x110>
 800837a:	2320      	movs	r3, #32
 800837c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800837e:	e001      	b.n	8008384 <UART_SetConfig+0x114>
 8008380:	2300      	movs	r3, #0
 8008382:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	4b3d      	ldr	r3, [pc, #244]	@ (8008480 <UART_SetConfig+0x210>)
 800838a:	429a      	cmp	r2, r3
 800838c:	d005      	beq.n	800839a <UART_SetConfig+0x12a>
 800838e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4b3d      	ldr	r3, [pc, #244]	@ (8008488 <UART_SetConfig+0x218>)
 8008394:	429a      	cmp	r2, r3
 8008396:	f040 8085 	bne.w	80084a4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800839a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800839c:	2200      	movs	r2, #0
 800839e:	623b      	str	r3, [r7, #32]
 80083a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80083a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80083a6:	f7fe fa8f 	bl	80068c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80083aa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80083ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80e8 	beq.w	8008584 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	4a39      	ldr	r2, [pc, #228]	@ (80084a0 <UART_SetConfig+0x230>)
 80083ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083be:	461a      	mov	r2, r3
 80083c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d305      	bcc.n	80083e4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d903      	bls.n	80083ec <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80083ea:	e048      	b.n	800847e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ee:	2200      	movs	r2, #0
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	61fa      	str	r2, [r7, #28]
 80083f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	4a29      	ldr	r2, [pc, #164]	@ (80084a0 <UART_SetConfig+0x230>)
 80083fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2200      	movs	r2, #0
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	617a      	str	r2, [r7, #20]
 8008406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800840a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800840e:	f7f7 ff33 	bl	8000278 <__aeabi_uldivmod>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f04f 0200 	mov.w	r2, #0
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	020b      	lsls	r3, r1, #8
 8008424:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008428:	0202      	lsls	r2, r0, #8
 800842a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800842c:	6849      	ldr	r1, [r1, #4]
 800842e:	0849      	lsrs	r1, r1, #1
 8008430:	2000      	movs	r0, #0
 8008432:	460c      	mov	r4, r1
 8008434:	4605      	mov	r5, r0
 8008436:	eb12 0804 	adds.w	r8, r2, r4
 800843a:	eb43 0905 	adc.w	r9, r3, r5
 800843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	60fa      	str	r2, [r7, #12]
 8008448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800844c:	4640      	mov	r0, r8
 800844e:	4649      	mov	r1, r9
 8008450:	f7f7 ff12 	bl	8000278 <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4613      	mov	r3, r2
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800845c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008462:	d308      	bcc.n	8008476 <UART_SetConfig+0x206>
 8008464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800846a:	d204      	bcs.n	8008476 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008472:	60da      	str	r2, [r3, #12]
 8008474:	e003      	b.n	800847e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800847c:	e082      	b.n	8008584 <UART_SetConfig+0x314>
 800847e:	e081      	b.n	8008584 <UART_SetConfig+0x314>
 8008480:	46002400 	.word	0x46002400
 8008484:	cfff69f3 	.word	0xcfff69f3
 8008488:	56002400 	.word	0x56002400
 800848c:	40013800 	.word	0x40013800
 8008490:	40004400 	.word	0x40004400
 8008494:	40004800 	.word	0x40004800
 8008498:	40004c00 	.word	0x40004c00
 800849c:	40005000 	.word	0x40005000
 80084a0:	08009670 	.word	0x08009670
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ac:	d13c      	bne.n	8008528 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b0:	2200      	movs	r2, #0
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ba:	f7fe fa05 	bl	80068c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80084be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d05e      	beq.n	8008584 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ca:	4a39      	ldr	r2, [pc, #228]	@ (80085b0 <UART_SetConfig+0x340>)
 80084cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d8:	005a      	lsls	r2, r3, #1
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	441a      	add	r2, r3
 80084e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ee:	2b0f      	cmp	r3, #15
 80084f0:	d916      	bls.n	8008520 <UART_SetConfig+0x2b0>
 80084f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084f8:	d212      	bcs.n	8008520 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f023 030f 	bic.w	r3, r3, #15
 8008502:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008506:	085b      	lsrs	r3, r3, #1
 8008508:	b29b      	uxth	r3, r3
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	b29a      	uxth	r2, r3
 8008510:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008512:	4313      	orrs	r3, r2
 8008514:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800851c:	60da      	str	r2, [r3, #12]
 800851e:	e031      	b.n	8008584 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008526:	e02d      	b.n	8008584 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800852a:	2200      	movs	r2, #0
 800852c:	469a      	mov	sl, r3
 800852e:	4693      	mov	fp, r2
 8008530:	4650      	mov	r0, sl
 8008532:	4659      	mov	r1, fp
 8008534:	f7fe f9c8 	bl	80068c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008538:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800853a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	d021      	beq.n	8008584 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008544:	4a1a      	ldr	r2, [pc, #104]	@ (80085b0 <UART_SetConfig+0x340>)
 8008546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800854a:	461a      	mov	r2, r3
 800854c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800854e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	441a      	add	r2, r3
 800855a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008566:	2b0f      	cmp	r3, #15
 8008568:	d909      	bls.n	800857e <UART_SetConfig+0x30e>
 800856a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008570:	d205      	bcs.n	800857e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008574:	b29a      	uxth	r2, r3
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60da      	str	r2, [r3, #12]
 800857c:	e002      	b.n	8008584 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800858c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858e:	2201      	movs	r2, #1
 8008590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	2200      	movs	r2, #0
 8008598:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800859a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859c:	2200      	movs	r2, #0
 800859e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3750      	adds	r7, #80	@ 0x50
 80085a8:	46bd      	mov	sp, r7
 80085aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ae:	bf00      	nop
 80085b0:	08009670 	.word	0x08009670

080085b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01a      	beq.n	80086ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b2:	d10a      	bne.n	80086ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b098      	sub	sp, #96	@ 0x60
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008708:	f7f9 fb8c 	bl	8001e24 <HAL_GetTick>
 800870c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b08      	cmp	r3, #8
 800871a:	d12f      	bne.n	800877c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008724:	2200      	movs	r2, #0
 8008726:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f88e 	bl	800884c <UART_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d022      	beq.n	800877c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874a:	653b      	str	r3, [r7, #80]	@ 0x50
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008754:	647b      	str	r3, [r7, #68]	@ 0x44
 8008756:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800875a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e6      	bne.n	8008736 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e063      	b.n	8008844 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b04      	cmp	r3, #4
 8008788:	d149      	bne.n	800881e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008792:	2200      	movs	r2, #0
 8008794:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f857 	bl	800884c <UART_WaitOnFlagUntilTimeout>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d03c      	beq.n	800881e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	623b      	str	r3, [r7, #32]
   return(result);
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80087c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e6      	bne.n	80087a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f023 0301 	bic.w	r3, r3, #1
 80087ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3308      	adds	r3, #8
 80087f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087f6:	61fa      	str	r2, [r7, #28]
 80087f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	69b9      	ldr	r1, [r7, #24]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	617b      	str	r3, [r7, #20]
   return(result);
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e5      	bne.n	80087d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e012      	b.n	8008844 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3758      	adds	r7, #88	@ 0x58
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	4613      	mov	r3, r2
 800885a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885c:	e04f      	b.n	80088fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008864:	d04b      	beq.n	80088fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008866:	f7f9 fadd 	bl	8001e24 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	429a      	cmp	r2, r3
 8008874:	d302      	bcc.n	800887c <UART_WaitOnFlagUntilTimeout+0x30>
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e04e      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0304 	and.w	r3, r3, #4
 800888a:	2b00      	cmp	r3, #0
 800888c:	d037      	beq.n	80088fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b80      	cmp	r3, #128	@ 0x80
 8008892:	d034      	beq.n	80088fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b40      	cmp	r3, #64	@ 0x40
 8008898:	d031      	beq.n	80088fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f003 0308 	and.w	r3, r3, #8
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d110      	bne.n	80088ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2208      	movs	r2, #8
 80088ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f838 	bl	8008926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2208      	movs	r2, #8
 80088ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e029      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088d8:	d111      	bne.n	80088fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f81e 	bl	8008926 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e00f      	b.n	800891e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4013      	ands	r3, r2
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	429a      	cmp	r2, r3
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d0a0      	beq.n	800885e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008926:	b480      	push	{r7}
 8008928:	b095      	sub	sp, #84	@ 0x54
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800894c:	643b      	str	r3, [r7, #64]	@ 0x40
 800894e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800895a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008976:	f023 0301 	bic.w	r3, r3, #1
 800897a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008984:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008986:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800898a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e3      	bne.n	8008960 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d118      	bne.n	80089d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f023 0310 	bic.w	r3, r3, #16
 80089b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	6979      	ldr	r1, [r7, #20]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	613b      	str	r3, [r7, #16]
   return(result);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e6      	bne.n	80089a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2220      	movs	r2, #32
 80089d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089e6:	bf00      	nop
 80089e8:	3754      	adds	r7, #84	@ 0x54
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e027      	b.n	8008a58 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2224      	movs	r2, #36	@ 0x24
 8008a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e02d      	b.n	8008ad8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	@ 0x24
 8008a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f84f 	bl	8008b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e02d      	b.n	8008b54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2224      	movs	r2, #36	@ 0x24
 8008b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0201 	bic.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f811 	bl	8008b5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d108      	bne.n	8008b7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b7c:	e031      	b.n	8008be2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b7e:	2308      	movs	r3, #8
 8008b80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b82:	2308      	movs	r3, #8
 8008b84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	0e5b      	lsrs	r3, r3, #25
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	0f5b      	lsrs	r3, r3, #29
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	7b3a      	ldrb	r2, [r7, #12]
 8008baa:	4911      	ldr	r1, [pc, #68]	@ (8008bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8008bac:	5c8a      	ldrb	r2, [r1, r2]
 8008bae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bb2:	7b3a      	ldrb	r2, [r7, #12]
 8008bb4:	490f      	ldr	r1, [pc, #60]	@ (8008bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	7b7a      	ldrb	r2, [r7, #13]
 8008bc8:	4909      	ldr	r1, [pc, #36]	@ (8008bf0 <UARTEx_SetNbDataToProcess+0x94>)
 8008bca:	5c8a      	ldrb	r2, [r1, r2]
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bd0:	7b7a      	ldrb	r2, [r7, #13]
 8008bd2:	4908      	ldr	r1, [pc, #32]	@ (8008bf4 <UARTEx_SetNbDataToProcess+0x98>)
 8008bd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	08009688 	.word	0x08009688
 8008bf4:	08009690 	.word	0x08009690

08008bf8 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f043 0202 	orr.w	r2, r3, #2
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f023 0202 	bic.w	r2, r3, #2
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	601a      	str	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b08b      	sub	sp, #44	@ 0x2c
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	fa93 f3a3 	rbit	r3, r3
 8008c50:	613b      	str	r3, [r7, #16]
  return result;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	e003      	b.n	8008c68 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	fab3 f383 	clz	r3, r3
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	2103      	movs	r1, #3
 8008c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c70:	43db      	mvns	r3, r3
 8008c72:	401a      	ands	r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	fa93 f3a3 	rbit	r3, r3
 8008c7e:	61fb      	str	r3, [r7, #28]
  return result;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008c8a:	2320      	movs	r3, #32
 8008c8c:	e003      	b.n	8008c96 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	fab3 f383 	clz	r3, r3
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8008ca4:	bf00      	nop
 8008ca6:	372c      	adds	r7, #44	@ 0x2c
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	401a      	ands	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	605a      	str	r2, [r3, #4]
}
 8008cd4:	bf00      	nop
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b08b      	sub	sp, #44	@ 0x2c
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	fa93 f3a3 	rbit	r3, r3
 8008cfa:	613b      	str	r3, [r7, #16]
  return result;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008d06:	2320      	movs	r3, #32
 8008d08:	e003      	b.n	8008d12 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	fab3 f383 	clz	r3, r3
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	2103      	movs	r1, #3
 8008d16:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	401a      	ands	r2, r3
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	fa93 f3a3 	rbit	r3, r3
 8008d28:	61fb      	str	r3, [r7, #28]
  return result;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008d34:	2320      	movs	r3, #32
 8008d36:	e003      	b.n	8008d40 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	fab3 f383 	clz	r3, r3
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	6879      	ldr	r1, [r7, #4]
 8008d44:	fa01 f303 	lsl.w	r3, r1, r3
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8008d4e:	bf00      	nop
 8008d50:	372c      	adds	r7, #44	@ 0x2c
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b08b      	sub	sp, #44	@ 0x2c
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	fa93 f3a3 	rbit	r3, r3
 8008d74:	613b      	str	r3, [r7, #16]
  return result;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008d80:	2320      	movs	r3, #32
 8008d82:	e003      	b.n	8008d8c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	fab3 f383 	clz	r3, r3
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	2103      	movs	r1, #3
 8008d90:	fa01 f303 	lsl.w	r3, r1, r3
 8008d94:	43db      	mvns	r3, r3
 8008d96:	401a      	ands	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	fa93 f3a3 	rbit	r3, r3
 8008da2:	61fb      	str	r3, [r7, #28]
  return result;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008dae:	2320      	movs	r3, #32
 8008db0:	e003      	b.n	8008dba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	fab3 f383 	clz	r3, r3
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8008dc8:	bf00      	nop
 8008dca:	372c      	adds	r7, #44	@ 0x2c
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b08b      	sub	sp, #44	@ 0x2c
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1a      	ldr	r2, [r3, #32]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	fa93 f3a3 	rbit	r3, r3
 8008dee:	613b      	str	r3, [r7, #16]
  return result;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008dfa:	2320      	movs	r3, #32
 8008dfc:	e003      	b.n	8008e06 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	fab3 f383 	clz	r3, r3
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	210f      	movs	r1, #15
 8008e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	401a      	ands	r2, r3
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	fa93 f3a3 	rbit	r3, r3
 8008e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008e28:	2320      	movs	r3, #32
 8008e2a:	e003      	b.n	8008e34 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	fab3 f383 	clz	r3, r3
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8008e42:	bf00      	nop
 8008e44:	372c      	adds	r7, #44	@ 0x2c
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b08b      	sub	sp, #44	@ 0x2c
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	0a1b      	lsrs	r3, r3, #8
 8008e62:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	fa93 f3a3 	rbit	r3, r3
 8008e6a:	613b      	str	r3, [r7, #16]
  return result;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008e76:	2320      	movs	r3, #32
 8008e78:	e003      	b.n	8008e82 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	fab3 f383 	clz	r3, r3
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	210f      	movs	r1, #15
 8008e86:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	401a      	ands	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	fa93 f3a3 	rbit	r3, r3
 8008e9a:	61fb      	str	r3, [r7, #28]
  return result;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	e003      	b.n	8008eb2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	fab3 f383 	clz	r3, r3
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8008ec0:	bf00      	nop
 8008ec2:	372c      	adds	r7, #44	@ 0x2c
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	@ 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	fa93 f3a3 	rbit	r3, r3
 8008ee2:	617b      	str	r3, [r7, #20]
  return result;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <LL_GPIO_Init+0x26>
    return 32U;
 8008eee:	2320      	movs	r3, #32
 8008ef0:	e003      	b.n	8008efa <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	fab3 f383 	clz	r3, r3
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008efc:	e058      	b.n	8008fb0 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	2101      	movs	r1, #1
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d04a      	beq.n	8008faa <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d003      	beq.n	8008f24 <LL_GPIO_Init+0x58>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d10e      	bne.n	8008f42 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6a39      	ldr	r1, [r7, #32]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff fed7 	bl	8008ce0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	6819      	ldr	r1, [r3, #0]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff feb7 	bl	8008cb0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	461a      	mov	r2, r3
 8008f48:	6a39      	ldr	r1, [r7, #32]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ff05 	bl	8008d5a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d121      	bne.n	8008f9c <LL_GPIO_Init+0xd0>
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	fa93 f3a3 	rbit	r3, r3
 8008f62:	60bb      	str	r3, [r7, #8]
  return result;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <LL_GPIO_Init+0xa6>
    return 32U;
 8008f6e:	2320      	movs	r3, #32
 8008f70:	e003      	b.n	8008f7a <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	fab3 f383 	clz	r3, r3
 8008f78:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008f7a:	2b07      	cmp	r3, #7
 8008f7c:	d807      	bhi.n	8008f8e <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6a39      	ldr	r1, [r7, #32]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff ff24 	bl	8008dd4 <LL_GPIO_SetAFPin_0_7>
 8008f8c:	e006      	b.n	8008f9c <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6a39      	ldr	r1, [r7, #32]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ff59 	bl	8008e4e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6a39      	ldr	r1, [r7, #32]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fe46 	bl	8008c36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	3301      	adds	r3, #1
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d19f      	bne.n	8008efe <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3728      	adds	r7, #40	@ 0x28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fc8:	b084      	sub	sp, #16
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	f107 001c 	add.w	r0, r7, #28
 8008fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa6c 	bl	80094c4 <USB_CoreReset>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ff0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d106      	bne.n	8009006 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	639a      	str	r2, [r3, #56]	@ 0x38
 8009004:	e005      	b.n	8009012 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800901e:	b004      	add	sp, #16
 8009020:	4770      	bx	lr

08009022 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f023 0201 	bic.w	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d115      	bne.n	8009092 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009072:	200a      	movs	r0, #10
 8009074:	f7f8 fee2 	bl	8001e3c <HAL_Delay>
      ms += 10U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	330a      	adds	r3, #10
 800907c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa12 	bl	80094a8 <USB_GetMode>
 8009084:	4603      	mov	r3, r0
 8009086:	2b01      	cmp	r3, #1
 8009088:	d01e      	beq.n	80090c8 <USB_SetCurrentMode+0x84>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2bc7      	cmp	r3, #199	@ 0xc7
 800908e:	d9f0      	bls.n	8009072 <USB_SetCurrentMode+0x2e>
 8009090:	e01a      	b.n	80090c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d115      	bne.n	80090c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090a4:	200a      	movs	r0, #10
 80090a6:	f7f8 fec9 	bl	8001e3c <HAL_Delay>
      ms += 10U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	330a      	adds	r3, #10
 80090ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f9f9 	bl	80094a8 <USB_GetMode>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <USB_SetCurrentMode+0x84>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2bc7      	cmp	r3, #199	@ 0xc7
 80090c0:	d9f0      	bls.n	80090a4 <USB_SetCurrentMode+0x60>
 80090c2:	e001      	b.n	80090c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e005      	b.n	80090d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80090cc:	d101      	bne.n	80090d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e000      	b.n	80090d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090dc:	b084      	sub	sp, #16
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80090ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090f6:	2300      	movs	r3, #0
 80090f8:	613b      	str	r3, [r7, #16]
 80090fa:	e009      	b.n	8009110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3340      	adds	r3, #64	@ 0x40
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	2200      	movs	r2, #0
 8009108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3301      	adds	r3, #1
 800910e:	613b      	str	r3, [r7, #16]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b0e      	cmp	r3, #14
 8009114:	d9f2      	bls.n	80090fc <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009116:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800911a:	2b00      	cmp	r3, #0
 800911c:	d11c      	bne.n	8009158 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800912c:	f043 0302 	orr.w	r3, r3, #2
 8009130:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009136:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	e005      	b.n	8009164 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800916a:	461a      	mov	r2, r3
 800916c:	2300      	movs	r3, #0
 800916e:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009170:	2103      	movs	r1, #3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f95e 	bl	8009434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009178:	2110      	movs	r1, #16
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f8fa 	bl	8009374 <USB_FlushTxFifo>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d001      	beq.n	800918a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f924 	bl	80093d8 <USB_FlushRxFifo>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a0:	461a      	mov	r2, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ac:	461a      	mov	r2, r3
 80091ae:	2300      	movs	r3, #0
 80091b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b8:	461a      	mov	r2, r3
 80091ba:	2300      	movs	r3, #0
 80091bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	e043      	b.n	800924c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091da:	d118      	bne.n	800920e <USB_DevInit+0x132>
    {
      if (i == 0U)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ee:	461a      	mov	r2, r3
 80091f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	e013      	b.n	8009220 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009204:	461a      	mov	r2, r3
 8009206:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	e008      	b.n	8009220 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921a:	461a      	mov	r2, r3
 800921c:	2300      	movs	r3, #0
 800921e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922c:	461a      	mov	r2, r3
 800922e:	2300      	movs	r3, #0
 8009230:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800923e:	461a      	mov	r2, r3
 8009240:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3301      	adds	r3, #1
 800924a:	613b      	str	r3, [r7, #16]
 800924c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009250:	461a      	mov	r2, r3
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4293      	cmp	r3, r2
 8009256:	d3b5      	bcc.n	80091c4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
 800925c:	e043      	b.n	80092e6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009274:	d118      	bne.n	80092a8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009288:	461a      	mov	r2, r3
 800928a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	e013      	b.n	80092ba <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800929e:	461a      	mov	r2, r3
 80092a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	e008      	b.n	80092ba <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b4:	461a      	mov	r2, r3
 80092b6:	2300      	movs	r3, #0
 80092b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c6:	461a      	mov	r2, r3
 80092c8:	2300      	movs	r3, #0
 80092ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d8:	461a      	mov	r2, r3
 80092da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	3301      	adds	r3, #1
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092ea:	461a      	mov	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d3b5      	bcc.n	800925e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009304:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009312:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009314:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009318:	2b00      	cmp	r3, #0
 800931a:	d105      	bne.n	8009328 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	f043 0210 	orr.w	r2, r3, #16
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699a      	ldr	r2, [r3, #24]
 800932c:	4b10      	ldr	r3, [pc, #64]	@ (8009370 <USB_DevInit+0x294>)
 800932e:	4313      	orrs	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009334:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009338:	2b00      	cmp	r3, #0
 800933a:	d005      	beq.n	8009348 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	f043 0208 	orr.w	r2, r3, #8
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009348:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800934c:	2b01      	cmp	r3, #1
 800934e:	d107      	bne.n	8009360 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009358:	f043 0304 	orr.w	r3, r3, #4
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800936c:	b004      	add	sp, #16
 800936e:	4770      	bx	lr
 8009370:	803c3800 	.word	0x803c3800

08009374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3301      	adds	r3, #1
 8009386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800938e:	d901      	bls.n	8009394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e01b      	b.n	80093cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	daf2      	bge.n	8009382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	019b      	lsls	r3, r3, #6
 80093a4:	f043 0220 	orr.w	r2, r3, #32
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093b8:	d901      	bls.n	80093be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e006      	b.n	80093cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d0f0      	beq.n	80093ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3301      	adds	r3, #1
 80093e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093f0:	d901      	bls.n	80093f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e018      	b.n	8009428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	daf2      	bge.n	80093e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2210      	movs	r2, #16
 8009406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009414:	d901      	bls.n	800941a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e006      	b.n	8009428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	2b10      	cmp	r3, #16
 8009424:	d0f0      	beq.n	8009408 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009454:	4313      	orrs	r3, r2
 8009456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009480:	f023 0303 	bic.w	r3, r3, #3
 8009484:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009494:	f043 0302 	orr.w	r3, r3, #2
 8009498:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	f003 0301 	and.w	r3, r3, #1
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094dc:	d901      	bls.n	80094e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e01b      	b.n	800951a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	daf2      	bge.n	80094d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	f043 0201 	orr.w	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009506:	d901      	bls.n	800950c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e006      	b.n	800951a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b01      	cmp	r3, #1
 8009516:	d0f0      	beq.n	80094fa <USB_CoreReset+0x36>

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <memset>:
 8009526:	4402      	add	r2, r0
 8009528:	4603      	mov	r3, r0
 800952a:	4293      	cmp	r3, r2
 800952c:	d100      	bne.n	8009530 <memset+0xa>
 800952e:	4770      	bx	lr
 8009530:	f803 1b01 	strb.w	r1, [r3], #1
 8009534:	e7f9      	b.n	800952a <memset+0x4>
	...

08009538 <__libc_init_array>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4d0d      	ldr	r5, [pc, #52]	@ (8009570 <__libc_init_array+0x38>)
 800953c:	2600      	movs	r6, #0
 800953e:	4c0d      	ldr	r4, [pc, #52]	@ (8009574 <__libc_init_array+0x3c>)
 8009540:	1b64      	subs	r4, r4, r5
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	42a6      	cmp	r6, r4
 8009546:	d109      	bne.n	800955c <__libc_init_array+0x24>
 8009548:	4d0b      	ldr	r5, [pc, #44]	@ (8009578 <__libc_init_array+0x40>)
 800954a:	2600      	movs	r6, #0
 800954c:	4c0b      	ldr	r4, [pc, #44]	@ (800957c <__libc_init_array+0x44>)
 800954e:	f000 f817 	bl	8009580 <_init>
 8009552:	1b64      	subs	r4, r4, r5
 8009554:	10a4      	asrs	r4, r4, #2
 8009556:	42a6      	cmp	r6, r4
 8009558:	d105      	bne.n	8009566 <__libc_init_array+0x2e>
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009560:	3601      	adds	r6, #1
 8009562:	4798      	blx	r3
 8009564:	e7ee      	b.n	8009544 <__libc_init_array+0xc>
 8009566:	f855 3b04 	ldr.w	r3, [r5], #4
 800956a:	3601      	adds	r6, #1
 800956c:	4798      	blx	r3
 800956e:	e7f2      	b.n	8009556 <__libc_init_array+0x1e>
 8009570:	080096a0 	.word	0x080096a0
 8009574:	080096a0 	.word	0x080096a0
 8009578:	080096a0 	.word	0x080096a0
 800957c:	080096a4 	.word	0x080096a4

08009580 <_init>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr

0800958c <_fini>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr
